// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_usermessages.proto

#ifndef PROTOBUF_dota_5fusermessages_2eproto__INCLUDED
#define PROTOBUF_dota_5fusermessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "google/protobuf/descriptor.pb.h"
#include "networkbasetypes.pb.h"
#include "ai_activity.pb.h"
#include "dota_commonmessages.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_dota_5fusermessages_2eproto();
void protobuf_AssignDesc_dota_5fusermessages_2eproto();
void protobuf_ShutdownFile_dota_5fusermessages_2eproto();

class CDOTAUserMsg_AIDebugLine;
class CDOTAUserMsg_Ping;
class CDOTAUserMsg_SwapVerify;
class CDOTAUserMsg_ChatEvent;
class CDOTAUserMsg_CombatLogData;
class CDOTAUserMsg_CombatLogShowDeath;
class CDOTAUserMsg_BotChat;
class CDOTAUserMsg_CombatHeroPositions;
class CDOTAUserMsg_MiniKillCamInfo;
class CDOTAUserMsg_MiniKillCamInfo_Attacker;
class CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability;
class CDOTAUserMsg_GlobalLightColor;
class CDOTAUserMsg_GlobalLightDirection;
class CDOTAUserMsg_LocationPing;
class CDOTAUserMsg_ItemAlert;
class CDOTAUserMsg_WillPurchaseAlert;
class CDOTAUserMsg_MinimapEvent;
class CDOTAUserMsg_MapLine;
class CDOTAUserMsg_MinimapDebugPoint;
class CDOTAUserMsg_CreateLinearProjectile;
class CDOTAUserMsg_DestroyLinearProjectile;
class CDOTAUserMsg_DodgeTrackingProjectiles;
class CDOTAUserMsg_SpectatorPlayerClick;
class CDOTAUserMsg_NevermoreRequiem;
class CDOTAUserMsg_InvalidCommand;
class CDOTAUserMsg_HudError;
class CDOTAUserMsg_SharedCooldown;
class CDOTAUserMsg_SetNextAutobuyItem;
class CDOTAUserMsg_HalloweenDrops;
class CDOTAResponseQuerySerialized;
class CDOTAResponseQuerySerialized_Fact;
class CDOTASpeechMatchOnClient;
class CDOTAUserMsg_UnitEvent;
class CDOTAUserMsg_UnitEvent_Speech;
class CDOTAUserMsg_UnitEvent_SpeechMute;
class CDOTAUserMsg_UnitEvent_AddGesture;
class CDOTAUserMsg_UnitEvent_RemoveGesture;
class CDOTAUserMsg_UnitEvent_BloodImpact;
class CDOTAUserMsg_UnitEvent_FadeGesture;
class CDOTAUserMsg_ItemPurchased;
class CDOTAUserMsg_ItemFound;
class CDOTAUserMsg_ParticleManager;
class CDOTAUserMsg_ParticleManager_ReleaseParticleIndex;
class CDOTAUserMsg_ParticleManager_CreateParticle;
class CDOTAUserMsg_ParticleManager_DestroyParticle;
class CDOTAUserMsg_ParticleManager_DestroyParticleInvolving;
class CDOTAUserMsg_ParticleManager_UpdateParticle;
class CDOTAUserMsg_ParticleManager_UpdateParticleFwd;
class CDOTAUserMsg_ParticleManager_UpdateParticleOrient;
class CDOTAUserMsg_ParticleManager_UpdateParticleFallback;
class CDOTAUserMsg_ParticleManager_UpdateParticleOffset;
class CDOTAUserMsg_ParticleManager_UpdateParticleEnt;
class CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen;
class CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw;
class CDOTAUserMsg_OverheadEvent;
class CDOTAUserMsg_TutorialTipInfo;
class CDOTAUserMsg_TutorialFinish;
class CDOTAUserMsg_TutorialMinimapPosition;
class CDOTAUserMsg_SendGenericToolTip;
class CDOTAUserMsg_WorldLine;
class CDOTAUserMsg_TournamentDrop;
class CDOTAUserMsg_ChatWheel;
class CDOTAUserMsg_ReceivedXmasGift;
class CDOTAUserMsg_ShowSurvey;
class CDOTAUserMsg_UpdateSharedContent;
class CDOTAUserMsg_TutorialRequestExp;
class CDOTAUserMsg_TutorialFade;
class CDOTAUserMsg_TutorialPingMinimap;
class CDOTA_UM_GamerulesStateChanged;
class CDOTAUserMsg_AddQuestLogEntry;
class CDOTAUserMsg_SendStatPopup;
class CDOTAUserMsg_SendRoshanPopup;
class CDOTAUserMsg_SendFinalGold;
class CDOTAUserMsg_CustomMsg;
class CDOTAUserMsg_CoachHUDPing;
class CDOTAUserMsg_ClientLoadGridNav;
class CDOTAUserMsg_AbilityPing;
class CDOTAUserMsg_ShowGenericPopup;
class CDOTAUserMsg_VoteStart;
class CDOTAUserMsg_VoteUpdate;
class CDOTAUserMsg_VoteEnd;
class CDOTAUserMsg_BoosterStatePlayer;
class CDOTAUserMsg_BoosterState;
class CDOTAUserMsg_PlayerMMR;

enum CDOTAResponseQuerySerialized_Fact_ValueType {
  CDOTAResponseQuerySerialized_Fact_ValueType_NUMERIC = 1,
  CDOTAResponseQuerySerialized_Fact_ValueType_STRING = 2
};
bool CDOTAResponseQuerySerialized_Fact_ValueType_IsValid(int value);
const CDOTAResponseQuerySerialized_Fact_ValueType CDOTAResponseQuerySerialized_Fact_ValueType_ValueType_MIN = CDOTAResponseQuerySerialized_Fact_ValueType_NUMERIC;
const CDOTAResponseQuerySerialized_Fact_ValueType CDOTAResponseQuerySerialized_Fact_ValueType_ValueType_MAX = CDOTAResponseQuerySerialized_Fact_ValueType_STRING;
const int CDOTAResponseQuerySerialized_Fact_ValueType_ValueType_ARRAYSIZE = CDOTAResponseQuerySerialized_Fact_ValueType_ValueType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CDOTAResponseQuerySerialized_Fact_ValueType_descriptor();
inline const ::std::string& CDOTAResponseQuerySerialized_Fact_ValueType_Name(CDOTAResponseQuerySerialized_Fact_ValueType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CDOTAResponseQuerySerialized_Fact_ValueType_descriptor(), value);
}
inline bool CDOTAResponseQuerySerialized_Fact_ValueType_Parse(
    const ::std::string& name, CDOTAResponseQuerySerialized_Fact_ValueType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CDOTAResponseQuerySerialized_Fact_ValueType>(
    CDOTAResponseQuerySerialized_Fact_ValueType_descriptor(), name, value);
}
enum EDotaUserMessages {
  DOTA_UM_AddUnitToSelection = 64,
  DOTA_UM_AIDebugLine = 65,
  DOTA_UM_ChatEvent = 66,
  DOTA_UM_CombatHeroPositions = 67,
  DOTA_UM_CombatLogData = 68,
  DOTA_UM_CombatLogShowDeath = 70,
  DOTA_UM_CreateLinearProjectile = 71,
  DOTA_UM_DestroyLinearProjectile = 72,
  DOTA_UM_DodgeTrackingProjectiles = 73,
  DOTA_UM_GlobalLightColor = 74,
  DOTA_UM_GlobalLightDirection = 75,
  DOTA_UM_InvalidCommand = 76,
  DOTA_UM_LocationPing = 77,
  DOTA_UM_MapLine = 78,
  DOTA_UM_MiniKillCamInfo = 79,
  DOTA_UM_MinimapDebugPoint = 80,
  DOTA_UM_MinimapEvent = 81,
  DOTA_UM_NevermoreRequiem = 82,
  DOTA_UM_OverheadEvent = 83,
  DOTA_UM_SetNextAutobuyItem = 84,
  DOTA_UM_SharedCooldown = 85,
  DOTA_UM_SpectatorPlayerClick = 86,
  DOTA_UM_TutorialTipInfo = 87,
  DOTA_UM_UnitEvent = 88,
  DOTA_UM_ParticleManager = 89,
  DOTA_UM_BotChat = 90,
  DOTA_UM_HudError = 91,
  DOTA_UM_ItemPurchased = 92,
  DOTA_UM_Ping = 93,
  DOTA_UM_ItemFound = 94,
  DOTA_UM_CharacterSpeakConcept = 95,
  DOTA_UM_SwapVerify = 96,
  DOTA_UM_WorldLine = 97,
  DOTA_UM_TournamentDrop = 98,
  DOTA_UM_ItemAlert = 99,
  DOTA_UM_HalloweenDrops = 100,
  DOTA_UM_ChatWheel = 101,
  DOTA_UM_ReceivedXmasGift = 102,
  DOTA_UM_UpdateSharedContent = 103,
  DOTA_UM_TutorialRequestExp = 104,
  DOTA_UM_TutorialPingMinimap = 105,
  DOTA_UM_GamerulesStateChanged = 106,
  DOTA_UM_ShowSurvey = 107,
  DOTA_UM_TutorialFade = 108,
  DOTA_UM_AddQuestLogEntry = 109,
  DOTA_UM_SendStatPopup = 110,
  DOTA_UM_TutorialFinish = 111,
  DOTA_UM_SendRoshanPopup = 112,
  DOTA_UM_SendGenericToolTip = 113,
  DOTA_UM_SendFinalGold = 114,
  DOTA_UM_CustomMsg = 115,
  DOTA_UM_CoachHUDPing = 116,
  DOTA_UM_ClientLoadGridNav = 117,
  DOTA_UM_AbilityPing = 118,
  DOTA_UM_ShowGenericPopup = 119,
  DOTA_UM_VoteStart = 120,
  DOTA_UM_VoteUpdate = 121,
  DOTA_UM_VoteEnd = 122,
  DOTA_UM_BoosterState = 123,
  DOTA_UM_WillPurchaseAlert = 124,
  DOTA_UM_TutorialMinimapPosition = 125,
  DOTA_UM_PlayerMMR = 126
};
bool EDotaUserMessages_IsValid(int value);
const EDotaUserMessages EDotaUserMessages_MIN = DOTA_UM_AddUnitToSelection;
const EDotaUserMessages EDotaUserMessages_MAX = DOTA_UM_PlayerMMR;
const int EDotaUserMessages_ARRAYSIZE = EDotaUserMessages_MAX + 1;

const ::google::protobuf::EnumDescriptor* EDotaUserMessages_descriptor();
inline const ::std::string& EDotaUserMessages_Name(EDotaUserMessages value) {
  return ::google::protobuf::internal::NameOfEnum(
    EDotaUserMessages_descriptor(), value);
}
inline bool EDotaUserMessages_Parse(
    const ::std::string& name, EDotaUserMessages* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EDotaUserMessages>(
    EDotaUserMessages_descriptor(), name, value);
}
enum DOTA_CHAT_MESSAGE {
  CHAT_MESSAGE_INVALID = -1,
  CHAT_MESSAGE_HERO_KILL = 0,
  CHAT_MESSAGE_HERO_DENY = 1,
  CHAT_MESSAGE_BARRACKS_KILL = 2,
  CHAT_MESSAGE_TOWER_KILL = 3,
  CHAT_MESSAGE_TOWER_DENY = 4,
  CHAT_MESSAGE_FIRSTBLOOD = 5,
  CHAT_MESSAGE_STREAK_KILL = 6,
  CHAT_MESSAGE_BUYBACK = 7,
  CHAT_MESSAGE_AEGIS = 8,
  CHAT_MESSAGE_ROSHAN_KILL = 9,
  CHAT_MESSAGE_COURIER_LOST = 10,
  CHAT_MESSAGE_COURIER_RESPAWNED = 11,
  CHAT_MESSAGE_GLYPH_USED = 12,
  CHAT_MESSAGE_ITEM_PURCHASE = 13,
  CHAT_MESSAGE_CONNECT = 14,
  CHAT_MESSAGE_DISCONNECT = 15,
  CHAT_MESSAGE_DISCONNECT_WAIT_FOR_RECONNECT = 16,
  CHAT_MESSAGE_DISCONNECT_TIME_REMAINING = 17,
  CHAT_MESSAGE_DISCONNECT_TIME_REMAINING_PLURAL = 18,
  CHAT_MESSAGE_RECONNECT = 19,
  CHAT_MESSAGE_PLAYER_LEFT = 20,
  CHAT_MESSAGE_SAFE_TO_LEAVE = 21,
  CHAT_MESSAGE_RUNE_PICKUP = 22,
  CHAT_MESSAGE_RUNE_BOTTLE = 23,
  CHAT_MESSAGE_INTHEBAG = 24,
  CHAT_MESSAGE_SECRETSHOP = 25,
  CHAT_MESSAGE_ITEM_AUTOPURCHASED = 26,
  CHAT_MESSAGE_ITEMS_COMBINED = 27,
  CHAT_MESSAGE_SUPER_CREEPS = 28,
  CHAT_MESSAGE_CANT_USE_ACTION_ITEM = 29,
  CHAT_MESSAGE_CHARGES_EXHAUSTED = 30,
  CHAT_MESSAGE_CANTPAUSE = 31,
  CHAT_MESSAGE_NOPAUSESLEFT = 32,
  CHAT_MESSAGE_CANTPAUSEYET = 33,
  CHAT_MESSAGE_PAUSED = 34,
  CHAT_MESSAGE_UNPAUSE_COUNTDOWN = 35,
  CHAT_MESSAGE_UNPAUSED = 36,
  CHAT_MESSAGE_AUTO_UNPAUSED = 37,
  CHAT_MESSAGE_YOUPAUSED = 38,
  CHAT_MESSAGE_CANTUNPAUSETEAM = 39,
  CHAT_MESSAGE_VOICE_TEXT_BANNED = 41,
  CHAT_MESSAGE_SPECTATORS_WATCHING_THIS_GAME = 42,
  CHAT_MESSAGE_REPORT_REMINDER = 43,
  CHAT_MESSAGE_ECON_ITEM = 44,
  CHAT_MESSAGE_TAUNT = 45,
  CHAT_MESSAGE_RANDOM = 46,
  CHAT_MESSAGE_RD_TURN = 47,
  CHAT_MESSAGE_DROP_RATE_BONUS = 49,
  CHAT_MESSAGE_NO_BATTLE_POINTS = 50,
  CHAT_MESSAGE_DENIED_AEGIS = 51,
  CHAT_MESSAGE_INFORMATIONAL = 52,
  CHAT_MESSAGE_AEGIS_STOLEN = 53,
  CHAT_MESSAGE_ROSHAN_CANDY = 54,
  CHAT_MESSAGE_ITEM_GIFTED = 55,
  CHAT_MESSAGE_HERO_KILL_WITH_GREEVIL = 56,
  CHAT_MESSAGE_HOLDOUT_TOWER_DESTROYED = 57,
  CHAT_MESSAGE_HOLDOUT_WALL_DESTROYED = 58,
  CHAT_MESSAGE_HOLDOUT_WALL_FINISHED = 59,
  CHAT_MESSAGE_PLAYER_LEFT_LIMITED_HERO = 62,
  CHAT_MESSAGE_ABANDON_LIMITED_HERO_EXPLANATION = 63,
  CHAT_MESSAGE_DISCONNECT_LIMITED_HERO = 64,
  CHAT_MESSAGE_LOW_PRIORITY_COMPLETED_EXPLANATION = 65,
  CHAT_MESSAGE_RECRUITMENT_DROP_RATE_BONUS = 66,
  CHAT_MESSAGE_FROSTIVUS_SHINING_BOOSTER_ACTIVE = 67,
  CHAT_MESSAGE_PLAYER_LEFT_AFK = 73,
  CHAT_MESSAGE_PLAYER_LEFT_DISCONNECTED_TOO_LONG = 74,
  CHAT_MESSAGE_PLAYER_ABANDONED = 75,
  CHAT_MESSAGE_PLAYER_ABANDONED_AFK = 76,
  CHAT_MESSAGE_PLAYER_ABANDONED_DISCONNECTED_TOO_LONG = 77,
  CHAT_MESSAGE_WILL_NOT_BE_SCORED = 78,
  CHAT_MESSAGE_WILL_NOT_BE_SCORED_RANKED = 79,
  CHAT_MESSAGE_WILL_NOT_BE_SCORED_NETWORK = 80,
  CHAT_MESSAGE_WILL_NOT_BE_SCORED_NETWORK_RANKED = 81,
  CHAT_MESSAGE_CAN_QUIT_WITHOUT_ABANDON = 82,
  CHAT_MESSAGE_RANKED_GAME_STILL_SCORED_LEAVERS_GET_LOSS = 83,
  CHAT_MESSAGE_ABANDON_RANKED_BEFORE_FIRST_BLOOD_PARTY = 84
};
bool DOTA_CHAT_MESSAGE_IsValid(int value);
const DOTA_CHAT_MESSAGE DOTA_CHAT_MESSAGE_MIN = CHAT_MESSAGE_INVALID;
const DOTA_CHAT_MESSAGE DOTA_CHAT_MESSAGE_MAX = CHAT_MESSAGE_ABANDON_RANKED_BEFORE_FIRST_BLOOD_PARTY;
const int DOTA_CHAT_MESSAGE_ARRAYSIZE = DOTA_CHAT_MESSAGE_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTA_CHAT_MESSAGE_descriptor();
inline const ::std::string& DOTA_CHAT_MESSAGE_Name(DOTA_CHAT_MESSAGE value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTA_CHAT_MESSAGE_descriptor(), value);
}
inline bool DOTA_CHAT_MESSAGE_Parse(
    const ::std::string& name, DOTA_CHAT_MESSAGE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTA_CHAT_MESSAGE>(
    DOTA_CHAT_MESSAGE_descriptor(), name, value);
}
enum DOTA_NO_BATTLE_POINTS_REASONS {
  NO_BATTLE_POINTS_WRONG_LOBBY_TYPE = 1,
  NO_BATTLE_POINTS_PRACTICE_BOTS = 2,
  NO_BATTLE_POINTS_CHEATS_ENABLED = 3,
  NO_BATTLE_POINTS_LOW_PRIORITY = 4
};
bool DOTA_NO_BATTLE_POINTS_REASONS_IsValid(int value);
const DOTA_NO_BATTLE_POINTS_REASONS DOTA_NO_BATTLE_POINTS_REASONS_MIN = NO_BATTLE_POINTS_WRONG_LOBBY_TYPE;
const DOTA_NO_BATTLE_POINTS_REASONS DOTA_NO_BATTLE_POINTS_REASONS_MAX = NO_BATTLE_POINTS_LOW_PRIORITY;
const int DOTA_NO_BATTLE_POINTS_REASONS_ARRAYSIZE = DOTA_NO_BATTLE_POINTS_REASONS_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTA_NO_BATTLE_POINTS_REASONS_descriptor();
inline const ::std::string& DOTA_NO_BATTLE_POINTS_REASONS_Name(DOTA_NO_BATTLE_POINTS_REASONS value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTA_NO_BATTLE_POINTS_REASONS_descriptor(), value);
}
inline bool DOTA_NO_BATTLE_POINTS_REASONS_Parse(
    const ::std::string& name, DOTA_NO_BATTLE_POINTS_REASONS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTA_NO_BATTLE_POINTS_REASONS>(
    DOTA_NO_BATTLE_POINTS_REASONS_descriptor(), name, value);
}
enum DOTA_CHAT_INFORMATIONAL {
  INFO_COOP_BATTLE_POINTS_RULES = 1,
  INFO_FROSTIVUS_ABANDON_REMINDER = 2,
  INFO_RANKED_REMINDER = 3,
  INFO_COOP_LOW_PRIORITY_PASSIVE_REMINDER = 4
};
bool DOTA_CHAT_INFORMATIONAL_IsValid(int value);
const DOTA_CHAT_INFORMATIONAL DOTA_CHAT_INFORMATIONAL_MIN = INFO_COOP_BATTLE_POINTS_RULES;
const DOTA_CHAT_INFORMATIONAL DOTA_CHAT_INFORMATIONAL_MAX = INFO_COOP_LOW_PRIORITY_PASSIVE_REMINDER;
const int DOTA_CHAT_INFORMATIONAL_ARRAYSIZE = DOTA_CHAT_INFORMATIONAL_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTA_CHAT_INFORMATIONAL_descriptor();
inline const ::std::string& DOTA_CHAT_INFORMATIONAL_Name(DOTA_CHAT_INFORMATIONAL value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTA_CHAT_INFORMATIONAL_descriptor(), value);
}
inline bool DOTA_CHAT_INFORMATIONAL_Parse(
    const ::std::string& name, DOTA_CHAT_INFORMATIONAL* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTA_CHAT_INFORMATIONAL>(
    DOTA_CHAT_INFORMATIONAL_descriptor(), name, value);
}
enum DOTA_ABILITY_PING_TYPE {
  ABILITY_PING_READY = 1,
  ABILITY_PING_MANA = 2,
  ABILITY_PING_COOLDOWN = 3
};
bool DOTA_ABILITY_PING_TYPE_IsValid(int value);
const DOTA_ABILITY_PING_TYPE DOTA_ABILITY_PING_TYPE_MIN = ABILITY_PING_READY;
const DOTA_ABILITY_PING_TYPE DOTA_ABILITY_PING_TYPE_MAX = ABILITY_PING_COOLDOWN;
const int DOTA_ABILITY_PING_TYPE_ARRAYSIZE = DOTA_ABILITY_PING_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTA_ABILITY_PING_TYPE_descriptor();
inline const ::std::string& DOTA_ABILITY_PING_TYPE_Name(DOTA_ABILITY_PING_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTA_ABILITY_PING_TYPE_descriptor(), value);
}
inline bool DOTA_ABILITY_PING_TYPE_Parse(
    const ::std::string& name, DOTA_ABILITY_PING_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTA_ABILITY_PING_TYPE>(
    DOTA_ABILITY_PING_TYPE_descriptor(), name, value);
}
enum DOTA_COMBATLOG_TYPES {
  DOTA_COMBATLOG_DAMAGE = 0,
  DOTA_COMBATLOG_HEAL = 1,
  DOTA_COMBATLOG_MODIFIER_ADD = 2,
  DOTA_COMBATLOG_MODIFIER_REMOVE = 3,
  DOTA_COMBATLOG_DEATH = 4
};
bool DOTA_COMBATLOG_TYPES_IsValid(int value);
const DOTA_COMBATLOG_TYPES DOTA_COMBATLOG_TYPES_MIN = DOTA_COMBATLOG_DAMAGE;
const DOTA_COMBATLOG_TYPES DOTA_COMBATLOG_TYPES_MAX = DOTA_COMBATLOG_DEATH;
const int DOTA_COMBATLOG_TYPES_ARRAYSIZE = DOTA_COMBATLOG_TYPES_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTA_COMBATLOG_TYPES_descriptor();
inline const ::std::string& DOTA_COMBATLOG_TYPES_Name(DOTA_COMBATLOG_TYPES value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTA_COMBATLOG_TYPES_descriptor(), value);
}
inline bool DOTA_COMBATLOG_TYPES_Parse(
    const ::std::string& name, DOTA_COMBATLOG_TYPES* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTA_COMBATLOG_TYPES>(
    DOTA_COMBATLOG_TYPES_descriptor(), name, value);
}
enum EDotaEntityMessages {
  DOTA_UNIT_SPEECH = 0,
  DOTA_UNIT_SPEECH_MUTE = 1,
  DOTA_UNIT_ADD_GESTURE = 2,
  DOTA_UNIT_REMOVE_GESTURE = 3,
  DOTA_UNIT_REMOVE_ALL_GESTURES = 4,
  DOTA_UNIT_FADE_GESTURE = 6,
  DOTA_UNIT_SPEECH_CLIENTSIDE_RULES = 7
};
bool EDotaEntityMessages_IsValid(int value);
const EDotaEntityMessages EDotaEntityMessages_MIN = DOTA_UNIT_SPEECH;
const EDotaEntityMessages EDotaEntityMessages_MAX = DOTA_UNIT_SPEECH_CLIENTSIDE_RULES;
const int EDotaEntityMessages_ARRAYSIZE = EDotaEntityMessages_MAX + 1;

const ::google::protobuf::EnumDescriptor* EDotaEntityMessages_descriptor();
inline const ::std::string& EDotaEntityMessages_Name(EDotaEntityMessages value) {
  return ::google::protobuf::internal::NameOfEnum(
    EDotaEntityMessages_descriptor(), value);
}
inline bool EDotaEntityMessages_Parse(
    const ::std::string& name, EDotaEntityMessages* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EDotaEntityMessages>(
    EDotaEntityMessages_descriptor(), name, value);
}
enum DOTA_PARTICLE_MESSAGE {
  DOTA_PARTICLE_MANAGER_EVENT_CREATE = 0,
  DOTA_PARTICLE_MANAGER_EVENT_UPDATE = 1,
  DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FORWARD = 2,
  DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ORIENTATION = 3,
  DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FALLBACK = 4,
  DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ENT = 5,
  DOTA_PARTICLE_MANAGER_EVENT_UPDATE_OFFSET = 6,
  DOTA_PARTICLE_MANAGER_EVENT_DESTROY = 7,
  DOTA_PARTICLE_MANAGER_EVENT_DESTROY_INVOLVING = 8,
  DOTA_PARTICLE_MANAGER_EVENT_RELEASE = 9,
  DOTA_PARTICLE_MANAGER_EVENT_LATENCY = 10,
  DOTA_PARTICLE_MANAGER_EVENT_SHOULD_DRAW = 11,
  DOTA_PARTICLE_MANAGER_EVENT_FROZEN = 12
};
bool DOTA_PARTICLE_MESSAGE_IsValid(int value);
const DOTA_PARTICLE_MESSAGE DOTA_PARTICLE_MESSAGE_MIN = DOTA_PARTICLE_MANAGER_EVENT_CREATE;
const DOTA_PARTICLE_MESSAGE DOTA_PARTICLE_MESSAGE_MAX = DOTA_PARTICLE_MANAGER_EVENT_FROZEN;
const int DOTA_PARTICLE_MESSAGE_ARRAYSIZE = DOTA_PARTICLE_MESSAGE_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTA_PARTICLE_MESSAGE_descriptor();
inline const ::std::string& DOTA_PARTICLE_MESSAGE_Name(DOTA_PARTICLE_MESSAGE value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTA_PARTICLE_MESSAGE_descriptor(), value);
}
inline bool DOTA_PARTICLE_MESSAGE_Parse(
    const ::std::string& name, DOTA_PARTICLE_MESSAGE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTA_PARTICLE_MESSAGE>(
    DOTA_PARTICLE_MESSAGE_descriptor(), name, value);
}
enum DOTA_OVERHEAD_ALERT {
  OVERHEAD_ALERT_GOLD = 0,
  OVERHEAD_ALERT_DENY = 1,
  OVERHEAD_ALERT_CRITICAL = 2,
  OVERHEAD_ALERT_XP = 3,
  OVERHEAD_ALERT_BONUS_SPELL_DAMAGE = 4,
  OVERHEAD_ALERT_MISS = 5,
  OVERHEAD_ALERT_DAMAGE = 6,
  OVERHEAD_ALERT_EVADE = 7,
  OVERHEAD_ALERT_BLOCK = 8,
  OVERHEAD_ALERT_BONUS_POISON_DAMAGE = 9,
  OVERHEAD_ALERT_HEAL = 10,
  OVERHEAD_ALERT_MANA_ADD = 11,
  OVERHEAD_ALERT_MANA_LOSS = 12,
  OVERHEAD_ALERT_LAST_HIT_EARLY = 13,
  OVERHEAD_ALERT_LAST_HIT_CLOSE = 14,
  OVERHEAD_ALERT_LAST_HIT_MISS = 15
};
bool DOTA_OVERHEAD_ALERT_IsValid(int value);
const DOTA_OVERHEAD_ALERT DOTA_OVERHEAD_ALERT_MIN = OVERHEAD_ALERT_GOLD;
const DOTA_OVERHEAD_ALERT DOTA_OVERHEAD_ALERT_MAX = OVERHEAD_ALERT_LAST_HIT_MISS;
const int DOTA_OVERHEAD_ALERT_ARRAYSIZE = DOTA_OVERHEAD_ALERT_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTA_OVERHEAD_ALERT_descriptor();
inline const ::std::string& DOTA_OVERHEAD_ALERT_Name(DOTA_OVERHEAD_ALERT value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTA_OVERHEAD_ALERT_descriptor(), value);
}
inline bool DOTA_OVERHEAD_ALERT_Parse(
    const ::std::string& name, DOTA_OVERHEAD_ALERT* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTA_OVERHEAD_ALERT>(
    DOTA_OVERHEAD_ALERT_descriptor(), name, value);
}
// ===================================================================

class CDOTAUserMsg_AIDebugLine : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_AIDebugLine();
  virtual ~CDOTAUserMsg_AIDebugLine();
  
  CDOTAUserMsg_AIDebugLine(const CDOTAUserMsg_AIDebugLine& from);
  
  inline CDOTAUserMsg_AIDebugLine& operator=(const CDOTAUserMsg_AIDebugLine& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_AIDebugLine& default_instance();
  
  void Swap(CDOTAUserMsg_AIDebugLine* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_AIDebugLine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_AIDebugLine& from);
  void MergeFrom(const CDOTAUserMsg_AIDebugLine& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string message = 1;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 1;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_AIDebugLine)
 private:
  inline void set_has_message();
  inline void clear_has_message();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* message_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_AIDebugLine* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_Ping : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_Ping();
  virtual ~CDOTAUserMsg_Ping();
  
  CDOTAUserMsg_Ping(const CDOTAUserMsg_Ping& from);
  
  inline CDOTAUserMsg_Ping& operator=(const CDOTAUserMsg_Ping& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_Ping& default_instance();
  
  void Swap(CDOTAUserMsg_Ping* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_Ping* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_Ping& from);
  void MergeFrom(const CDOTAUserMsg_Ping& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string message = 1;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 1;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_Ping)
 private:
  inline void set_has_message();
  inline void clear_has_message();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* message_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_Ping* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_SwapVerify : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_SwapVerify();
  virtual ~CDOTAUserMsg_SwapVerify();
  
  CDOTAUserMsg_SwapVerify(const CDOTAUserMsg_SwapVerify& from);
  
  inline CDOTAUserMsg_SwapVerify& operator=(const CDOTAUserMsg_SwapVerify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_SwapVerify& default_instance();
  
  void Swap(CDOTAUserMsg_SwapVerify* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_SwapVerify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_SwapVerify& from);
  void MergeFrom(const CDOTAUserMsg_SwapVerify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 player_id() const;
  inline void set_player_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_SwapVerify)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 player_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_SwapVerify* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_ChatEvent : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_ChatEvent();
  virtual ~CDOTAUserMsg_ChatEvent();
  
  CDOTAUserMsg_ChatEvent(const CDOTAUserMsg_ChatEvent& from);
  
  inline CDOTAUserMsg_ChatEvent& operator=(const CDOTAUserMsg_ChatEvent& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_ChatEvent& default_instance();
  
  void Swap(CDOTAUserMsg_ChatEvent* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_ChatEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_ChatEvent& from);
  void MergeFrom(const CDOTAUserMsg_ChatEvent& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .DOTA_CHAT_MESSAGE type = 1 [default = CHAT_MESSAGE_INVALID];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline DOTA_CHAT_MESSAGE type() const;
  inline void set_type(DOTA_CHAT_MESSAGE value);
  
  // optional uint32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);
  
  // optional sint32 playerid_1 = 3 [default = -1];
  inline bool has_playerid_1() const;
  inline void clear_playerid_1();
  static const int kPlayerid1FieldNumber = 3;
  inline ::google::protobuf::int32 playerid_1() const;
  inline void set_playerid_1(::google::protobuf::int32 value);
  
  // optional sint32 playerid_2 = 4 [default = -1];
  inline bool has_playerid_2() const;
  inline void clear_playerid_2();
  static const int kPlayerid2FieldNumber = 4;
  inline ::google::protobuf::int32 playerid_2() const;
  inline void set_playerid_2(::google::protobuf::int32 value);
  
  // optional sint32 playerid_3 = 5 [default = -1];
  inline bool has_playerid_3() const;
  inline void clear_playerid_3();
  static const int kPlayerid3FieldNumber = 5;
  inline ::google::protobuf::int32 playerid_3() const;
  inline void set_playerid_3(::google::protobuf::int32 value);
  
  // optional sint32 playerid_4 = 6 [default = -1];
  inline bool has_playerid_4() const;
  inline void clear_playerid_4();
  static const int kPlayerid4FieldNumber = 6;
  inline ::google::protobuf::int32 playerid_4() const;
  inline void set_playerid_4(::google::protobuf::int32 value);
  
  // optional sint32 playerid_5 = 7 [default = -1];
  inline bool has_playerid_5() const;
  inline void clear_playerid_5();
  static const int kPlayerid5FieldNumber = 7;
  inline ::google::protobuf::int32 playerid_5() const;
  inline void set_playerid_5(::google::protobuf::int32 value);
  
  // optional sint32 playerid_6 = 8 [default = -1];
  inline bool has_playerid_6() const;
  inline void clear_playerid_6();
  static const int kPlayerid6FieldNumber = 8;
  inline ::google::protobuf::int32 playerid_6() const;
  inline void set_playerid_6(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_ChatEvent)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_playerid_1();
  inline void clear_has_playerid_1();
  inline void set_has_playerid_2();
  inline void clear_has_playerid_2();
  inline void set_has_playerid_3();
  inline void clear_has_playerid_3();
  inline void set_has_playerid_4();
  inline void clear_has_playerid_4();
  inline void set_has_playerid_5();
  inline void clear_has_playerid_5();
  inline void set_has_playerid_6();
  inline void clear_has_playerid_6();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int type_;
  ::google::protobuf::uint32 value_;
  ::google::protobuf::int32 playerid_1_;
  ::google::protobuf::int32 playerid_2_;
  ::google::protobuf::int32 playerid_3_;
  ::google::protobuf::int32 playerid_4_;
  ::google::protobuf::int32 playerid_5_;
  ::google::protobuf::int32 playerid_6_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_ChatEvent* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_CombatLogData : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_CombatLogData();
  virtual ~CDOTAUserMsg_CombatLogData();
  
  CDOTAUserMsg_CombatLogData(const CDOTAUserMsg_CombatLogData& from);
  
  inline CDOTAUserMsg_CombatLogData& operator=(const CDOTAUserMsg_CombatLogData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_CombatLogData& default_instance();
  
  void Swap(CDOTAUserMsg_CombatLogData* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_CombatLogData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_CombatLogData& from);
  void MergeFrom(const CDOTAUserMsg_CombatLogData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .DOTA_COMBATLOG_TYPES type = 1 [default = DOTA_COMBATLOG_DAMAGE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline DOTA_COMBATLOG_TYPES type() const;
  inline void set_type(DOTA_COMBATLOG_TYPES value);
  
  // optional uint32 target_name = 2;
  inline bool has_target_name() const;
  inline void clear_target_name();
  static const int kTargetNameFieldNumber = 2;
  inline ::google::protobuf::uint32 target_name() const;
  inline void set_target_name(::google::protobuf::uint32 value);
  
  // optional uint32 attacker_name = 3;
  inline bool has_attacker_name() const;
  inline void clear_attacker_name();
  static const int kAttackerNameFieldNumber = 3;
  inline ::google::protobuf::uint32 attacker_name() const;
  inline void set_attacker_name(::google::protobuf::uint32 value);
  
  // optional bool attacker_illusion = 4;
  inline bool has_attacker_illusion() const;
  inline void clear_attacker_illusion();
  static const int kAttackerIllusionFieldNumber = 4;
  inline bool attacker_illusion() const;
  inline void set_attacker_illusion(bool value);
  
  // optional bool target_illusion = 5;
  inline bool has_target_illusion() const;
  inline void clear_target_illusion();
  static const int kTargetIllusionFieldNumber = 5;
  inline bool target_illusion() const;
  inline void set_target_illusion(bool value);
  
  // optional uint32 inflictor_name = 6;
  inline bool has_inflictor_name() const;
  inline void clear_inflictor_name();
  static const int kInflictorNameFieldNumber = 6;
  inline ::google::protobuf::uint32 inflictor_name() const;
  inline void set_inflictor_name(::google::protobuf::uint32 value);
  
  // optional int32 value = 7;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 7;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);
  
  // optional int32 health = 8;
  inline bool has_health() const;
  inline void clear_health();
  static const int kHealthFieldNumber = 8;
  inline ::google::protobuf::int32 health() const;
  inline void set_health(::google::protobuf::int32 value);
  
  // optional float time = 9;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 9;
  inline float time() const;
  inline void set_time(float value);
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_CombatLogData)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_target_name();
  inline void clear_has_target_name();
  inline void set_has_attacker_name();
  inline void clear_has_attacker_name();
  inline void set_has_attacker_illusion();
  inline void clear_has_attacker_illusion();
  inline void set_has_target_illusion();
  inline void clear_has_target_illusion();
  inline void set_has_inflictor_name();
  inline void clear_has_inflictor_name();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_health();
  inline void clear_has_health();
  inline void set_has_time();
  inline void clear_has_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int type_;
  ::google::protobuf::uint32 target_name_;
  ::google::protobuf::uint32 attacker_name_;
  bool attacker_illusion_;
  bool target_illusion_;
  ::google::protobuf::uint32 inflictor_name_;
  ::google::protobuf::int32 value_;
  ::google::protobuf::int32 health_;
  float time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_CombatLogData* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_CombatLogShowDeath : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_CombatLogShowDeath();
  virtual ~CDOTAUserMsg_CombatLogShowDeath();
  
  CDOTAUserMsg_CombatLogShowDeath(const CDOTAUserMsg_CombatLogShowDeath& from);
  
  inline CDOTAUserMsg_CombatLogShowDeath& operator=(const CDOTAUserMsg_CombatLogShowDeath& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_CombatLogShowDeath& default_instance();
  
  void Swap(CDOTAUserMsg_CombatLogShowDeath* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_CombatLogShowDeath* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_CombatLogShowDeath& from);
  void MergeFrom(const CDOTAUserMsg_CombatLogShowDeath& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_CombatLogShowDeath)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_CombatLogShowDeath* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_BotChat : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_BotChat();
  virtual ~CDOTAUserMsg_BotChat();
  
  CDOTAUserMsg_BotChat(const CDOTAUserMsg_BotChat& from);
  
  inline CDOTAUserMsg_BotChat& operator=(const CDOTAUserMsg_BotChat& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_BotChat& default_instance();
  
  void Swap(CDOTAUserMsg_BotChat* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_BotChat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_BotChat& from);
  void MergeFrom(const CDOTAUserMsg_BotChat& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 player_id() const;
  inline void set_player_id(::google::protobuf::uint32 value);
  
  // optional string format = 2;
  inline bool has_format() const;
  inline void clear_format();
  static const int kFormatFieldNumber = 2;
  inline const ::std::string& format() const;
  inline void set_format(const ::std::string& value);
  inline void set_format(const char* value);
  inline void set_format(const char* value, size_t size);
  inline ::std::string* mutable_format();
  inline ::std::string* release_format();
  
  // optional string message = 3;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 3;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  
  // optional string target = 4;
  inline bool has_target() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 4;
  inline const ::std::string& target() const;
  inline void set_target(const ::std::string& value);
  inline void set_target(const char* value);
  inline void set_target(const char* value, size_t size);
  inline ::std::string* mutable_target();
  inline ::std::string* release_target();
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_BotChat)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_format();
  inline void clear_has_format();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_target();
  inline void clear_has_target();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* format_;
  ::std::string* message_;
  ::std::string* target_;
  ::google::protobuf::uint32 player_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_BotChat* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_CombatHeroPositions : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_CombatHeroPositions();
  virtual ~CDOTAUserMsg_CombatHeroPositions();
  
  CDOTAUserMsg_CombatHeroPositions(const CDOTAUserMsg_CombatHeroPositions& from);
  
  inline CDOTAUserMsg_CombatHeroPositions& operator=(const CDOTAUserMsg_CombatHeroPositions& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_CombatHeroPositions& default_instance();
  
  void Swap(CDOTAUserMsg_CombatHeroPositions* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_CombatHeroPositions* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_CombatHeroPositions& from);
  void MergeFrom(const CDOTAUserMsg_CombatHeroPositions& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);
  
  // optional int32 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);
  
  // optional .CMsgVector2D world_pos = 3;
  inline bool has_world_pos() const;
  inline void clear_world_pos();
  static const int kWorldPosFieldNumber = 3;
  inline const ::CMsgVector2D& world_pos() const;
  inline ::CMsgVector2D* mutable_world_pos();
  inline ::CMsgVector2D* release_world_pos();
  
  // optional int32 health = 4;
  inline bool has_health() const;
  inline void clear_health();
  static const int kHealthFieldNumber = 4;
  inline ::google::protobuf::int32 health() const;
  inline void set_health(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_CombatHeroPositions)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_world_pos();
  inline void clear_has_world_pos();
  inline void set_has_health();
  inline void clear_has_health();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 index_;
  ::google::protobuf::int32 time_;
  ::CMsgVector2D* world_pos_;
  ::google::protobuf::int32 health_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_CombatHeroPositions* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability();
  virtual ~CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability();
  
  CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability(const CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability& from);
  
  inline CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability& operator=(const CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability& default_instance();
  
  void Swap(CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability& from);
  void MergeFrom(const CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 ability = 1;
  inline bool has_ability() const;
  inline void clear_ability();
  static const int kAbilityFieldNumber = 1;
  inline ::google::protobuf::uint32 ability() const;
  inline void set_ability(::google::protobuf::uint32 value);
  
  // optional int32 damage = 2;
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 2;
  inline ::google::protobuf::int32 damage() const;
  inline void set_damage(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
 private:
  inline void set_has_ability();
  inline void clear_has_ability();
  inline void set_has_damage();
  inline void clear_has_damage();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 ability_;
  ::google::protobuf::int32 damage_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_MiniKillCamInfo_Attacker : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_MiniKillCamInfo_Attacker();
  virtual ~CDOTAUserMsg_MiniKillCamInfo_Attacker();
  
  CDOTAUserMsg_MiniKillCamInfo_Attacker(const CDOTAUserMsg_MiniKillCamInfo_Attacker& from);
  
  inline CDOTAUserMsg_MiniKillCamInfo_Attacker& operator=(const CDOTAUserMsg_MiniKillCamInfo_Attacker& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_MiniKillCamInfo_Attacker& default_instance();
  
  void Swap(CDOTAUserMsg_MiniKillCamInfo_Attacker* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_MiniKillCamInfo_Attacker* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_MiniKillCamInfo_Attacker& from);
  void MergeFrom(const CDOTAUserMsg_MiniKillCamInfo_Attacker& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability Ability;
  
  // accessors -------------------------------------------------------
  
  // optional uint32 attacker = 1;
  inline bool has_attacker() const;
  inline void clear_attacker();
  static const int kAttackerFieldNumber = 1;
  inline ::google::protobuf::uint32 attacker() const;
  inline void set_attacker(::google::protobuf::uint32 value);
  
  // optional int32 total_damage = 2;
  inline bool has_total_damage() const;
  inline void clear_total_damage();
  static const int kTotalDamageFieldNumber = 2;
  inline ::google::protobuf::int32 total_damage() const;
  inline void set_total_damage(::google::protobuf::int32 value);
  
  // repeated .CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;
  inline int abilities_size() const;
  inline void clear_abilities();
  static const int kAbilitiesFieldNumber = 3;
  inline const ::CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability& abilities(int index) const;
  inline ::CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability* mutable_abilities(int index);
  inline ::CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability* add_abilities();
  inline const ::google::protobuf::RepeatedPtrField< ::CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability >&
      abilities() const;
  inline ::google::protobuf::RepeatedPtrField< ::CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability >*
      mutable_abilities();
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_MiniKillCamInfo.Attacker)
 private:
  inline void set_has_attacker();
  inline void clear_has_attacker();
  inline void set_has_total_damage();
  inline void clear_has_total_damage();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 attacker_;
  ::google::protobuf::int32 total_damage_;
  ::google::protobuf::RepeatedPtrField< ::CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability > abilities_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_MiniKillCamInfo_Attacker* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_MiniKillCamInfo : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_MiniKillCamInfo();
  virtual ~CDOTAUserMsg_MiniKillCamInfo();
  
  CDOTAUserMsg_MiniKillCamInfo(const CDOTAUserMsg_MiniKillCamInfo& from);
  
  inline CDOTAUserMsg_MiniKillCamInfo& operator=(const CDOTAUserMsg_MiniKillCamInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_MiniKillCamInfo& default_instance();
  
  void Swap(CDOTAUserMsg_MiniKillCamInfo* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_MiniKillCamInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_MiniKillCamInfo& from);
  void MergeFrom(const CDOTAUserMsg_MiniKillCamInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CDOTAUserMsg_MiniKillCamInfo_Attacker Attacker;
  
  // accessors -------------------------------------------------------
  
  // repeated .CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;
  inline int attackers_size() const;
  inline void clear_attackers();
  static const int kAttackersFieldNumber = 1;
  inline const ::CDOTAUserMsg_MiniKillCamInfo_Attacker& attackers(int index) const;
  inline ::CDOTAUserMsg_MiniKillCamInfo_Attacker* mutable_attackers(int index);
  inline ::CDOTAUserMsg_MiniKillCamInfo_Attacker* add_attackers();
  inline const ::google::protobuf::RepeatedPtrField< ::CDOTAUserMsg_MiniKillCamInfo_Attacker >&
      attackers() const;
  inline ::google::protobuf::RepeatedPtrField< ::CDOTAUserMsg_MiniKillCamInfo_Attacker >*
      mutable_attackers();
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_MiniKillCamInfo)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::CDOTAUserMsg_MiniKillCamInfo_Attacker > attackers_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_MiniKillCamInfo* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_GlobalLightColor : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_GlobalLightColor();
  virtual ~CDOTAUserMsg_GlobalLightColor();
  
  CDOTAUserMsg_GlobalLightColor(const CDOTAUserMsg_GlobalLightColor& from);
  
  inline CDOTAUserMsg_GlobalLightColor& operator=(const CDOTAUserMsg_GlobalLightColor& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_GlobalLightColor& default_instance();
  
  void Swap(CDOTAUserMsg_GlobalLightColor* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_GlobalLightColor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_GlobalLightColor& from);
  void MergeFrom(const CDOTAUserMsg_GlobalLightColor& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 color = 1;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 1;
  inline ::google::protobuf::uint32 color() const;
  inline void set_color(::google::protobuf::uint32 value);
  
  // optional float duration = 2;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 2;
  inline float duration() const;
  inline void set_duration(float value);
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_GlobalLightColor)
 private:
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_duration();
  inline void clear_has_duration();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 color_;
  float duration_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_GlobalLightColor* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_GlobalLightDirection : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_GlobalLightDirection();
  virtual ~CDOTAUserMsg_GlobalLightDirection();
  
  CDOTAUserMsg_GlobalLightDirection(const CDOTAUserMsg_GlobalLightDirection& from);
  
  inline CDOTAUserMsg_GlobalLightDirection& operator=(const CDOTAUserMsg_GlobalLightDirection& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_GlobalLightDirection& default_instance();
  
  void Swap(CDOTAUserMsg_GlobalLightDirection* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_GlobalLightDirection* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_GlobalLightDirection& from);
  void MergeFrom(const CDOTAUserMsg_GlobalLightDirection& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .CMsgVector direction = 1;
  inline bool has_direction() const;
  inline void clear_direction();
  static const int kDirectionFieldNumber = 1;
  inline const ::CMsgVector& direction() const;
  inline ::CMsgVector* mutable_direction();
  inline ::CMsgVector* release_direction();
  
  // optional float duration = 2;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 2;
  inline float duration() const;
  inline void set_duration(float value);
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_GlobalLightDirection)
 private:
  inline void set_has_direction();
  inline void clear_has_direction();
  inline void set_has_duration();
  inline void clear_has_duration();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::CMsgVector* direction_;
  float duration_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_GlobalLightDirection* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_LocationPing : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_LocationPing();
  virtual ~CDOTAUserMsg_LocationPing();
  
  CDOTAUserMsg_LocationPing(const CDOTAUserMsg_LocationPing& from);
  
  inline CDOTAUserMsg_LocationPing& operator=(const CDOTAUserMsg_LocationPing& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_LocationPing& default_instance();
  
  void Swap(CDOTAUserMsg_LocationPing* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_LocationPing* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_LocationPing& from);
  void MergeFrom(const CDOTAUserMsg_LocationPing& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 player_id() const;
  inline void set_player_id(::google::protobuf::uint32 value);
  
  // optional .CDOTAMsg_LocationPing location_ping = 2;
  inline bool has_location_ping() const;
  inline void clear_location_ping();
  static const int kLocationPingFieldNumber = 2;
  inline const ::CDOTAMsg_LocationPing& location_ping() const;
  inline ::CDOTAMsg_LocationPing* mutable_location_ping();
  inline ::CDOTAMsg_LocationPing* release_location_ping();
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_LocationPing)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_location_ping();
  inline void clear_has_location_ping();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::CDOTAMsg_LocationPing* location_ping_;
  ::google::protobuf::uint32 player_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_LocationPing* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_ItemAlert : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_ItemAlert();
  virtual ~CDOTAUserMsg_ItemAlert();
  
  CDOTAUserMsg_ItemAlert(const CDOTAUserMsg_ItemAlert& from);
  
  inline CDOTAUserMsg_ItemAlert& operator=(const CDOTAUserMsg_ItemAlert& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_ItemAlert& default_instance();
  
  void Swap(CDOTAUserMsg_ItemAlert* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_ItemAlert* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_ItemAlert& from);
  void MergeFrom(const CDOTAUserMsg_ItemAlert& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 player_id() const;
  inline void set_player_id(::google::protobuf::uint32 value);
  
  // optional .CDOTAMsg_ItemAlert item_alert = 2;
  inline bool has_item_alert() const;
  inline void clear_item_alert();
  static const int kItemAlertFieldNumber = 2;
  inline const ::CDOTAMsg_ItemAlert& item_alert() const;
  inline ::CDOTAMsg_ItemAlert* mutable_item_alert();
  inline ::CDOTAMsg_ItemAlert* release_item_alert();
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_ItemAlert)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_item_alert();
  inline void clear_has_item_alert();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::CDOTAMsg_ItemAlert* item_alert_;
  ::google::protobuf::uint32 player_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_ItemAlert* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_WillPurchaseAlert : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_WillPurchaseAlert();
  virtual ~CDOTAUserMsg_WillPurchaseAlert();
  
  CDOTAUserMsg_WillPurchaseAlert(const CDOTAUserMsg_WillPurchaseAlert& from);
  
  inline CDOTAUserMsg_WillPurchaseAlert& operator=(const CDOTAUserMsg_WillPurchaseAlert& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_WillPurchaseAlert& default_instance();
  
  void Swap(CDOTAUserMsg_WillPurchaseAlert* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_WillPurchaseAlert* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_WillPurchaseAlert& from);
  void MergeFrom(const CDOTAUserMsg_WillPurchaseAlert& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 itemid = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 1;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);
  
  // optional int32 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_WillPurchaseAlert)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 player_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_WillPurchaseAlert* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_MinimapEvent : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_MinimapEvent();
  virtual ~CDOTAUserMsg_MinimapEvent();
  
  CDOTAUserMsg_MinimapEvent(const CDOTAUserMsg_MinimapEvent& from);
  
  inline CDOTAUserMsg_MinimapEvent& operator=(const CDOTAUserMsg_MinimapEvent& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_MinimapEvent& default_instance();
  
  void Swap(CDOTAUserMsg_MinimapEvent* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_MinimapEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_MinimapEvent& from);
  void MergeFrom(const CDOTAUserMsg_MinimapEvent& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 event_type = 1;
  inline bool has_event_type() const;
  inline void clear_event_type();
  static const int kEventTypeFieldNumber = 1;
  inline ::google::protobuf::int32 event_type() const;
  inline void set_event_type(::google::protobuf::int32 value);
  
  // optional int32 entity_handle = 2;
  inline bool has_entity_handle() const;
  inline void clear_entity_handle();
  static const int kEntityHandleFieldNumber = 2;
  inline ::google::protobuf::int32 entity_handle() const;
  inline void set_entity_handle(::google::protobuf::int32 value);
  
  // optional int32 x = 3;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 3;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);
  
  // optional int32 y = 4;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 4;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);
  
  // optional int32 duration = 5;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 5;
  inline ::google::protobuf::int32 duration() const;
  inline void set_duration(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_MinimapEvent)
 private:
  inline void set_has_event_type();
  inline void clear_has_event_type();
  inline void set_has_entity_handle();
  inline void clear_has_entity_handle();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_duration();
  inline void clear_has_duration();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 event_type_;
  ::google::protobuf::int32 entity_handle_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 duration_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_MinimapEvent* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_MapLine : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_MapLine();
  virtual ~CDOTAUserMsg_MapLine();
  
  CDOTAUserMsg_MapLine(const CDOTAUserMsg_MapLine& from);
  
  inline CDOTAUserMsg_MapLine& operator=(const CDOTAUserMsg_MapLine& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_MapLine& default_instance();
  
  void Swap(CDOTAUserMsg_MapLine* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_MapLine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_MapLine& from);
  void MergeFrom(const CDOTAUserMsg_MapLine& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);
  
  // optional .CDOTAMsg_MapLine mapline = 2;
  inline bool has_mapline() const;
  inline void clear_mapline();
  static const int kMaplineFieldNumber = 2;
  inline const ::CDOTAMsg_MapLine& mapline() const;
  inline ::CDOTAMsg_MapLine* mutable_mapline();
  inline ::CDOTAMsg_MapLine* release_mapline();
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_MapLine)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_mapline();
  inline void clear_has_mapline();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::CDOTAMsg_MapLine* mapline_;
  ::google::protobuf::int32 player_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_MapLine* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_MinimapDebugPoint : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_MinimapDebugPoint();
  virtual ~CDOTAUserMsg_MinimapDebugPoint();
  
  CDOTAUserMsg_MinimapDebugPoint(const CDOTAUserMsg_MinimapDebugPoint& from);
  
  inline CDOTAUserMsg_MinimapDebugPoint& operator=(const CDOTAUserMsg_MinimapDebugPoint& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_MinimapDebugPoint& default_instance();
  
  void Swap(CDOTAUserMsg_MinimapDebugPoint* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_MinimapDebugPoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_MinimapDebugPoint& from);
  void MergeFrom(const CDOTAUserMsg_MinimapDebugPoint& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .CMsgVector location = 1;
  inline bool has_location() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 1;
  inline const ::CMsgVector& location() const;
  inline ::CMsgVector* mutable_location();
  inline ::CMsgVector* release_location();
  
  // optional uint32 color = 2;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 2;
  inline ::google::protobuf::uint32 color() const;
  inline void set_color(::google::protobuf::uint32 value);
  
  // optional int32 size = 3;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 3;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);
  
  // optional float duration = 4;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 4;
  inline float duration() const;
  inline void set_duration(float value);
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_MinimapDebugPoint)
 private:
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_duration();
  inline void clear_has_duration();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::CMsgVector* location_;
  ::google::protobuf::uint32 color_;
  ::google::protobuf::int32 size_;
  float duration_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_MinimapDebugPoint* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_CreateLinearProjectile : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_CreateLinearProjectile();
  virtual ~CDOTAUserMsg_CreateLinearProjectile();
  
  CDOTAUserMsg_CreateLinearProjectile(const CDOTAUserMsg_CreateLinearProjectile& from);
  
  inline CDOTAUserMsg_CreateLinearProjectile& operator=(const CDOTAUserMsg_CreateLinearProjectile& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_CreateLinearProjectile& default_instance();
  
  void Swap(CDOTAUserMsg_CreateLinearProjectile* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_CreateLinearProjectile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_CreateLinearProjectile& from);
  void MergeFrom(const CDOTAUserMsg_CreateLinearProjectile& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .CMsgVector origin = 1;
  inline bool has_origin() const;
  inline void clear_origin();
  static const int kOriginFieldNumber = 1;
  inline const ::CMsgVector& origin() const;
  inline ::CMsgVector* mutable_origin();
  inline ::CMsgVector* release_origin();
  
  // optional .CMsgVector2D velocity = 2;
  inline bool has_velocity() const;
  inline void clear_velocity();
  static const int kVelocityFieldNumber = 2;
  inline const ::CMsgVector2D& velocity() const;
  inline ::CMsgVector2D* mutable_velocity();
  inline ::CMsgVector2D* release_velocity();
  
  // optional int32 latency = 3;
  inline bool has_latency() const;
  inline void clear_latency();
  static const int kLatencyFieldNumber = 3;
  inline ::google::protobuf::int32 latency() const;
  inline void set_latency(::google::protobuf::int32 value);
  
  // optional int32 entindex = 4;
  inline bool has_entindex() const;
  inline void clear_entindex();
  static const int kEntindexFieldNumber = 4;
  inline ::google::protobuf::int32 entindex() const;
  inline void set_entindex(::google::protobuf::int32 value);
  
  // optional int32 particle_index = 5;
  inline bool has_particle_index() const;
  inline void clear_particle_index();
  static const int kParticleIndexFieldNumber = 5;
  inline ::google::protobuf::int32 particle_index() const;
  inline void set_particle_index(::google::protobuf::int32 value);
  
  // optional int32 handle = 6;
  inline bool has_handle() const;
  inline void clear_handle();
  static const int kHandleFieldNumber = 6;
  inline ::google::protobuf::int32 handle() const;
  inline void set_handle(::google::protobuf::int32 value);
  
  // optional .CMsgVector2D acceleration = 7;
  inline bool has_acceleration() const;
  inline void clear_acceleration();
  static const int kAccelerationFieldNumber = 7;
  inline const ::CMsgVector2D& acceleration() const;
  inline ::CMsgVector2D* mutable_acceleration();
  inline ::CMsgVector2D* release_acceleration();
  
  // optional float max_speed = 8;
  inline bool has_max_speed() const;
  inline void clear_max_speed();
  static const int kMaxSpeedFieldNumber = 8;
  inline float max_speed() const;
  inline void set_max_speed(float value);
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_CreateLinearProjectile)
 private:
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_velocity();
  inline void clear_has_velocity();
  inline void set_has_latency();
  inline void clear_has_latency();
  inline void set_has_entindex();
  inline void clear_has_entindex();
  inline void set_has_particle_index();
  inline void clear_has_particle_index();
  inline void set_has_handle();
  inline void clear_has_handle();
  inline void set_has_acceleration();
  inline void clear_has_acceleration();
  inline void set_has_max_speed();
  inline void clear_has_max_speed();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::CMsgVector* origin_;
  ::CMsgVector2D* velocity_;
  ::google::protobuf::int32 latency_;
  ::google::protobuf::int32 entindex_;
  ::google::protobuf::int32 particle_index_;
  ::google::protobuf::int32 handle_;
  ::CMsgVector2D* acceleration_;
  float max_speed_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_CreateLinearProjectile* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_DestroyLinearProjectile : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_DestroyLinearProjectile();
  virtual ~CDOTAUserMsg_DestroyLinearProjectile();
  
  CDOTAUserMsg_DestroyLinearProjectile(const CDOTAUserMsg_DestroyLinearProjectile& from);
  
  inline CDOTAUserMsg_DestroyLinearProjectile& operator=(const CDOTAUserMsg_DestroyLinearProjectile& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_DestroyLinearProjectile& default_instance();
  
  void Swap(CDOTAUserMsg_DestroyLinearProjectile* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_DestroyLinearProjectile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_DestroyLinearProjectile& from);
  void MergeFrom(const CDOTAUserMsg_DestroyLinearProjectile& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 handle = 1;
  inline bool has_handle() const;
  inline void clear_handle();
  static const int kHandleFieldNumber = 1;
  inline ::google::protobuf::int32 handle() const;
  inline void set_handle(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_DestroyLinearProjectile)
 private:
  inline void set_has_handle();
  inline void clear_has_handle();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 handle_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_DestroyLinearProjectile* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_DodgeTrackingProjectiles : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_DodgeTrackingProjectiles();
  virtual ~CDOTAUserMsg_DodgeTrackingProjectiles();
  
  CDOTAUserMsg_DodgeTrackingProjectiles(const CDOTAUserMsg_DodgeTrackingProjectiles& from);
  
  inline CDOTAUserMsg_DodgeTrackingProjectiles& operator=(const CDOTAUserMsg_DodgeTrackingProjectiles& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_DodgeTrackingProjectiles& default_instance();
  
  void Swap(CDOTAUserMsg_DodgeTrackingProjectiles* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_DodgeTrackingProjectiles* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_DodgeTrackingProjectiles& from);
  void MergeFrom(const CDOTAUserMsg_DodgeTrackingProjectiles& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 entindex = 1;
  inline bool has_entindex() const;
  inline void clear_entindex();
  static const int kEntindexFieldNumber = 1;
  inline ::google::protobuf::int32 entindex() const;
  inline void set_entindex(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_DodgeTrackingProjectiles)
 private:
  inline void set_has_entindex();
  inline void clear_has_entindex();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 entindex_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_DodgeTrackingProjectiles* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_SpectatorPlayerClick : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_SpectatorPlayerClick();
  virtual ~CDOTAUserMsg_SpectatorPlayerClick();
  
  CDOTAUserMsg_SpectatorPlayerClick(const CDOTAUserMsg_SpectatorPlayerClick& from);
  
  inline CDOTAUserMsg_SpectatorPlayerClick& operator=(const CDOTAUserMsg_SpectatorPlayerClick& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_SpectatorPlayerClick& default_instance();
  
  void Swap(CDOTAUserMsg_SpectatorPlayerClick* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_SpectatorPlayerClick* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_SpectatorPlayerClick& from);
  void MergeFrom(const CDOTAUserMsg_SpectatorPlayerClick& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 entindex = 1;
  inline bool has_entindex() const;
  inline void clear_entindex();
  static const int kEntindexFieldNumber = 1;
  inline ::google::protobuf::int32 entindex() const;
  inline void set_entindex(::google::protobuf::int32 value);
  
  // optional int32 order_type = 2;
  inline bool has_order_type() const;
  inline void clear_order_type();
  static const int kOrderTypeFieldNumber = 2;
  inline ::google::protobuf::int32 order_type() const;
  inline void set_order_type(::google::protobuf::int32 value);
  
  // optional int32 target_index = 3;
  inline bool has_target_index() const;
  inline void clear_target_index();
  static const int kTargetIndexFieldNumber = 3;
  inline ::google::protobuf::int32 target_index() const;
  inline void set_target_index(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_SpectatorPlayerClick)
 private:
  inline void set_has_entindex();
  inline void clear_has_entindex();
  inline void set_has_order_type();
  inline void clear_has_order_type();
  inline void set_has_target_index();
  inline void clear_has_target_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 entindex_;
  ::google::protobuf::int32 order_type_;
  ::google::protobuf::int32 target_index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_SpectatorPlayerClick* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_NevermoreRequiem : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_NevermoreRequiem();
  virtual ~CDOTAUserMsg_NevermoreRequiem();
  
  CDOTAUserMsg_NevermoreRequiem(const CDOTAUserMsg_NevermoreRequiem& from);
  
  inline CDOTAUserMsg_NevermoreRequiem& operator=(const CDOTAUserMsg_NevermoreRequiem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_NevermoreRequiem& default_instance();
  
  void Swap(CDOTAUserMsg_NevermoreRequiem* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_NevermoreRequiem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_NevermoreRequiem& from);
  void MergeFrom(const CDOTAUserMsg_NevermoreRequiem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 entity_handle = 1;
  inline bool has_entity_handle() const;
  inline void clear_entity_handle();
  static const int kEntityHandleFieldNumber = 1;
  inline ::google::protobuf::int32 entity_handle() const;
  inline void set_entity_handle(::google::protobuf::int32 value);
  
  // optional int32 lines = 2;
  inline bool has_lines() const;
  inline void clear_lines();
  static const int kLinesFieldNumber = 2;
  inline ::google::protobuf::int32 lines() const;
  inline void set_lines(::google::protobuf::int32 value);
  
  // optional .CMsgVector origin = 3;
  inline bool has_origin() const;
  inline void clear_origin();
  static const int kOriginFieldNumber = 3;
  inline const ::CMsgVector& origin() const;
  inline ::CMsgVector* mutable_origin();
  inline ::CMsgVector* release_origin();
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_NevermoreRequiem)
 private:
  inline void set_has_entity_handle();
  inline void clear_has_entity_handle();
  inline void set_has_lines();
  inline void clear_has_lines();
  inline void set_has_origin();
  inline void clear_has_origin();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 entity_handle_;
  ::google::protobuf::int32 lines_;
  ::CMsgVector* origin_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_NevermoreRequiem* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_InvalidCommand : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_InvalidCommand();
  virtual ~CDOTAUserMsg_InvalidCommand();
  
  CDOTAUserMsg_InvalidCommand(const CDOTAUserMsg_InvalidCommand& from);
  
  inline CDOTAUserMsg_InvalidCommand& operator=(const CDOTAUserMsg_InvalidCommand& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_InvalidCommand& default_instance();
  
  void Swap(CDOTAUserMsg_InvalidCommand* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_InvalidCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_InvalidCommand& from);
  void MergeFrom(const CDOTAUserMsg_InvalidCommand& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string message = 1;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 1;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_InvalidCommand)
 private:
  inline void set_has_message();
  inline void clear_has_message();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* message_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_InvalidCommand* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_HudError : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_HudError();
  virtual ~CDOTAUserMsg_HudError();
  
  CDOTAUserMsg_HudError(const CDOTAUserMsg_HudError& from);
  
  inline CDOTAUserMsg_HudError& operator=(const CDOTAUserMsg_HudError& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_HudError& default_instance();
  
  void Swap(CDOTAUserMsg_HudError* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_HudError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_HudError& from);
  void MergeFrom(const CDOTAUserMsg_HudError& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 order_id = 1;
  inline bool has_order_id() const;
  inline void clear_order_id();
  static const int kOrderIdFieldNumber = 1;
  inline ::google::protobuf::int32 order_id() const;
  inline void set_order_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_HudError)
 private:
  inline void set_has_order_id();
  inline void clear_has_order_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 order_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_HudError* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_SharedCooldown : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_SharedCooldown();
  virtual ~CDOTAUserMsg_SharedCooldown();
  
  CDOTAUserMsg_SharedCooldown(const CDOTAUserMsg_SharedCooldown& from);
  
  inline CDOTAUserMsg_SharedCooldown& operator=(const CDOTAUserMsg_SharedCooldown& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_SharedCooldown& default_instance();
  
  void Swap(CDOTAUserMsg_SharedCooldown* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_SharedCooldown* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_SharedCooldown& from);
  void MergeFrom(const CDOTAUserMsg_SharedCooldown& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 entindex = 1;
  inline bool has_entindex() const;
  inline void clear_entindex();
  static const int kEntindexFieldNumber = 1;
  inline ::google::protobuf::int32 entindex() const;
  inline void set_entindex(::google::protobuf::int32 value);
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional float cooldown = 3;
  inline bool has_cooldown() const;
  inline void clear_cooldown();
  static const int kCooldownFieldNumber = 3;
  inline float cooldown() const;
  inline void set_cooldown(float value);
  
  // optional int32 name_index = 4;
  inline bool has_name_index() const;
  inline void clear_name_index();
  static const int kNameIndexFieldNumber = 4;
  inline ::google::protobuf::int32 name_index() const;
  inline void set_name_index(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_SharedCooldown)
 private:
  inline void set_has_entindex();
  inline void clear_has_entindex();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_cooldown();
  inline void clear_has_cooldown();
  inline void set_has_name_index();
  inline void clear_has_name_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::int32 entindex_;
  float cooldown_;
  ::google::protobuf::int32 name_index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_SharedCooldown* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_SetNextAutobuyItem : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_SetNextAutobuyItem();
  virtual ~CDOTAUserMsg_SetNextAutobuyItem();
  
  CDOTAUserMsg_SetNextAutobuyItem(const CDOTAUserMsg_SetNextAutobuyItem& from);
  
  inline CDOTAUserMsg_SetNextAutobuyItem& operator=(const CDOTAUserMsg_SetNextAutobuyItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_SetNextAutobuyItem& default_instance();
  
  void Swap(CDOTAUserMsg_SetNextAutobuyItem* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_SetNextAutobuyItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_SetNextAutobuyItem& from);
  void MergeFrom(const CDOTAUserMsg_SetNextAutobuyItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_SetNextAutobuyItem)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_SetNextAutobuyItem* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_HalloweenDrops : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_HalloweenDrops();
  virtual ~CDOTAUserMsg_HalloweenDrops();
  
  CDOTAUserMsg_HalloweenDrops(const CDOTAUserMsg_HalloweenDrops& from);
  
  inline CDOTAUserMsg_HalloweenDrops& operator=(const CDOTAUserMsg_HalloweenDrops& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_HalloweenDrops& default_instance();
  
  void Swap(CDOTAUserMsg_HalloweenDrops* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_HalloweenDrops* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_HalloweenDrops& from);
  void MergeFrom(const CDOTAUserMsg_HalloweenDrops& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated uint32 item_defs = 1;
  inline int item_defs_size() const;
  inline void clear_item_defs();
  static const int kItemDefsFieldNumber = 1;
  inline ::google::protobuf::uint32 item_defs(int index) const;
  inline void set_item_defs(int index, ::google::protobuf::uint32 value);
  inline void add_item_defs(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      item_defs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_item_defs();
  
  // repeated uint32 player_ids = 2;
  inline int player_ids_size() const;
  inline void clear_player_ids();
  static const int kPlayerIdsFieldNumber = 2;
  inline ::google::protobuf::uint32 player_ids(int index) const;
  inline void set_player_ids(int index, ::google::protobuf::uint32 value);
  inline void add_player_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      player_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_player_ids();
  
  // optional uint32 prize_list = 3;
  inline bool has_prize_list() const;
  inline void clear_prize_list();
  static const int kPrizeListFieldNumber = 3;
  inline ::google::protobuf::uint32 prize_list() const;
  inline void set_prize_list(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_HalloweenDrops)
 private:
  inline void set_has_prize_list();
  inline void clear_has_prize_list();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > item_defs_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > player_ids_;
  ::google::protobuf::uint32 prize_list_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_HalloweenDrops* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAResponseQuerySerialized_Fact : public ::google::protobuf::Message {
 public:
  CDOTAResponseQuerySerialized_Fact();
  virtual ~CDOTAResponseQuerySerialized_Fact();
  
  CDOTAResponseQuerySerialized_Fact(const CDOTAResponseQuerySerialized_Fact& from);
  
  inline CDOTAResponseQuerySerialized_Fact& operator=(const CDOTAResponseQuerySerialized_Fact& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAResponseQuerySerialized_Fact& default_instance();
  
  void Swap(CDOTAResponseQuerySerialized_Fact* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAResponseQuerySerialized_Fact* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAResponseQuerySerialized_Fact& from);
  void MergeFrom(const CDOTAResponseQuerySerialized_Fact& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CDOTAResponseQuerySerialized_Fact_ValueType ValueType;
  static const ValueType NUMERIC = CDOTAResponseQuerySerialized_Fact_ValueType_NUMERIC;
  static const ValueType STRING = CDOTAResponseQuerySerialized_Fact_ValueType_STRING;
  static inline bool ValueType_IsValid(int value) {
    return CDOTAResponseQuerySerialized_Fact_ValueType_IsValid(value);
  }
  static const ValueType ValueType_MIN =
    CDOTAResponseQuerySerialized_Fact_ValueType_ValueType_MIN;
  static const ValueType ValueType_MAX =
    CDOTAResponseQuerySerialized_Fact_ValueType_ValueType_MAX;
  static const int ValueType_ARRAYSIZE =
    CDOTAResponseQuerySerialized_Fact_ValueType_ValueType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ValueType_descriptor() {
    return CDOTAResponseQuerySerialized_Fact_ValueType_descriptor();
  }
  static inline const ::std::string& ValueType_Name(ValueType value) {
    return CDOTAResponseQuerySerialized_Fact_ValueType_Name(value);
  }
  static inline bool ValueType_Parse(const ::std::string& name,
      ValueType* value) {
    return CDOTAResponseQuerySerialized_Fact_ValueType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required int32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);
  
  // required .CDOTAResponseQuerySerialized.Fact.ValueType valtype = 2 [default = NUMERIC];
  inline bool has_valtype() const;
  inline void clear_valtype();
  static const int kValtypeFieldNumber = 2;
  inline ::CDOTAResponseQuerySerialized_Fact_ValueType valtype() const;
  inline void set_valtype(::CDOTAResponseQuerySerialized_Fact_ValueType value);
  
  // optional float val_numeric = 3;
  inline bool has_val_numeric() const;
  inline void clear_val_numeric();
  static const int kValNumericFieldNumber = 3;
  inline float val_numeric() const;
  inline void set_val_numeric(float value);
  
  // optional string val_string = 4;
  inline bool has_val_string() const;
  inline void clear_val_string();
  static const int kValStringFieldNumber = 4;
  inline const ::std::string& val_string() const;
  inline void set_val_string(const ::std::string& value);
  inline void set_val_string(const char* value);
  inline void set_val_string(const char* value, size_t size);
  inline ::std::string* mutable_val_string();
  inline ::std::string* release_val_string();
  
  // @@protoc_insertion_point(class_scope:CDOTAResponseQuerySerialized.Fact)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_valtype();
  inline void clear_has_valtype();
  inline void set_has_val_numeric();
  inline void clear_has_val_numeric();
  inline void set_has_val_string();
  inline void clear_has_val_string();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 key_;
  int valtype_;
  ::std::string* val_string_;
  float val_numeric_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAResponseQuerySerialized_Fact* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAResponseQuerySerialized : public ::google::protobuf::Message {
 public:
  CDOTAResponseQuerySerialized();
  virtual ~CDOTAResponseQuerySerialized();
  
  CDOTAResponseQuerySerialized(const CDOTAResponseQuerySerialized& from);
  
  inline CDOTAResponseQuerySerialized& operator=(const CDOTAResponseQuerySerialized& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAResponseQuerySerialized& default_instance();
  
  void Swap(CDOTAResponseQuerySerialized* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAResponseQuerySerialized* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAResponseQuerySerialized& from);
  void MergeFrom(const CDOTAResponseQuerySerialized& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CDOTAResponseQuerySerialized_Fact Fact;
  
  // accessors -------------------------------------------------------
  
  // repeated .CDOTAResponseQuerySerialized.Fact facts = 1;
  inline int facts_size() const;
  inline void clear_facts();
  static const int kFactsFieldNumber = 1;
  inline const ::CDOTAResponseQuerySerialized_Fact& facts(int index) const;
  inline ::CDOTAResponseQuerySerialized_Fact* mutable_facts(int index);
  inline ::CDOTAResponseQuerySerialized_Fact* add_facts();
  inline const ::google::protobuf::RepeatedPtrField< ::CDOTAResponseQuerySerialized_Fact >&
      facts() const;
  inline ::google::protobuf::RepeatedPtrField< ::CDOTAResponseQuerySerialized_Fact >*
      mutable_facts();
  
  // @@protoc_insertion_point(class_scope:CDOTAResponseQuerySerialized)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::CDOTAResponseQuerySerialized_Fact > facts_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAResponseQuerySerialized* default_instance_;
};
// -------------------------------------------------------------------

class CDOTASpeechMatchOnClient : public ::google::protobuf::Message {
 public:
  CDOTASpeechMatchOnClient();
  virtual ~CDOTASpeechMatchOnClient();
  
  CDOTASpeechMatchOnClient(const CDOTASpeechMatchOnClient& from);
  
  inline CDOTASpeechMatchOnClient& operator=(const CDOTASpeechMatchOnClient& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTASpeechMatchOnClient& default_instance();
  
  void Swap(CDOTASpeechMatchOnClient* other);
  
  // implements Message ----------------------------------------------
  
  CDOTASpeechMatchOnClient* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTASpeechMatchOnClient& from);
  void MergeFrom(const CDOTASpeechMatchOnClient& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 concept = 1;
  inline bool has_concept() const;
  inline void clear_concept();
  static const int kConceptFieldNumber = 1;
  inline ::google::protobuf::int32 concept() const;
  inline void set_concept(::google::protobuf::int32 value);
  
  // optional int32 recipient_type = 2;
  inline bool has_recipient_type() const;
  inline void clear_recipient_type();
  static const int kRecipientTypeFieldNumber = 2;
  inline ::google::protobuf::int32 recipient_type() const;
  inline void set_recipient_type(::google::protobuf::int32 value);
  
  // optional .CDOTAResponseQuerySerialized responsequery = 3;
  inline bool has_responsequery() const;
  inline void clear_responsequery();
  static const int kResponsequeryFieldNumber = 3;
  inline const ::CDOTAResponseQuerySerialized& responsequery() const;
  inline ::CDOTAResponseQuerySerialized* mutable_responsequery();
  inline ::CDOTAResponseQuerySerialized* release_responsequery();
  
  // optional sfixed32 randomseed = 4 [default = 0];
  inline bool has_randomseed() const;
  inline void clear_randomseed();
  static const int kRandomseedFieldNumber = 4;
  inline ::google::protobuf::int32 randomseed() const;
  inline void set_randomseed(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:CDOTASpeechMatchOnClient)
 private:
  inline void set_has_concept();
  inline void clear_has_concept();
  inline void set_has_recipient_type();
  inline void clear_has_recipient_type();
  inline void set_has_responsequery();
  inline void clear_has_responsequery();
  inline void set_has_randomseed();
  inline void clear_has_randomseed();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 concept_;
  ::google::protobuf::int32 recipient_type_;
  ::CDOTAResponseQuerySerialized* responsequery_;
  ::google::protobuf::int32 randomseed_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTASpeechMatchOnClient* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_UnitEvent_Speech : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_UnitEvent_Speech();
  virtual ~CDOTAUserMsg_UnitEvent_Speech();
  
  CDOTAUserMsg_UnitEvent_Speech(const CDOTAUserMsg_UnitEvent_Speech& from);
  
  inline CDOTAUserMsg_UnitEvent_Speech& operator=(const CDOTAUserMsg_UnitEvent_Speech& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_UnitEvent_Speech& default_instance();
  
  void Swap(CDOTAUserMsg_UnitEvent_Speech* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_UnitEvent_Speech* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_UnitEvent_Speech& from);
  void MergeFrom(const CDOTAUserMsg_UnitEvent_Speech& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 concept = 1;
  inline bool has_concept() const;
  inline void clear_concept();
  static const int kConceptFieldNumber = 1;
  inline ::google::protobuf::int32 concept() const;
  inline void set_concept(::google::protobuf::int32 value);
  
  // optional string response = 2;
  inline bool has_response() const;
  inline void clear_response();
  static const int kResponseFieldNumber = 2;
  inline const ::std::string& response() const;
  inline void set_response(const ::std::string& value);
  inline void set_response(const char* value);
  inline void set_response(const char* value, size_t size);
  inline ::std::string* mutable_response();
  inline ::std::string* release_response();
  
  // optional int32 recipient_type = 3;
  inline bool has_recipient_type() const;
  inline void clear_recipient_type();
  static const int kRecipientTypeFieldNumber = 3;
  inline ::google::protobuf::int32 recipient_type() const;
  inline void set_recipient_type(::google::protobuf::int32 value);
  
  // optional int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional bool muteable = 5 [default = false];
  inline bool has_muteable() const;
  inline void clear_muteable();
  static const int kMuteableFieldNumber = 5;
  inline bool muteable() const;
  inline void set_muteable(bool value);
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_UnitEvent.Speech)
 private:
  inline void set_has_concept();
  inline void clear_has_concept();
  inline void set_has_response();
  inline void clear_has_response();
  inline void set_has_recipient_type();
  inline void clear_has_recipient_type();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_muteable();
  inline void clear_has_muteable();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* response_;
  ::google::protobuf::int32 concept_;
  ::google::protobuf::int32 recipient_type_;
  ::google::protobuf::int32 level_;
  bool muteable_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_UnitEvent_Speech* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_UnitEvent_SpeechMute : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_UnitEvent_SpeechMute();
  virtual ~CDOTAUserMsg_UnitEvent_SpeechMute();
  
  CDOTAUserMsg_UnitEvent_SpeechMute(const CDOTAUserMsg_UnitEvent_SpeechMute& from);
  
  inline CDOTAUserMsg_UnitEvent_SpeechMute& operator=(const CDOTAUserMsg_UnitEvent_SpeechMute& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_UnitEvent_SpeechMute& default_instance();
  
  void Swap(CDOTAUserMsg_UnitEvent_SpeechMute* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_UnitEvent_SpeechMute* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_UnitEvent_SpeechMute& from);
  void MergeFrom(const CDOTAUserMsg_UnitEvent_SpeechMute& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional float delay = 1 [default = 0.5];
  inline bool has_delay() const;
  inline void clear_delay();
  static const int kDelayFieldNumber = 1;
  inline float delay() const;
  inline void set_delay(float value);
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_UnitEvent.SpeechMute)
 private:
  inline void set_has_delay();
  inline void clear_has_delay();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float delay_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_UnitEvent_SpeechMute* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_UnitEvent_AddGesture : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_UnitEvent_AddGesture();
  virtual ~CDOTAUserMsg_UnitEvent_AddGesture();
  
  CDOTAUserMsg_UnitEvent_AddGesture(const CDOTAUserMsg_UnitEvent_AddGesture& from);
  
  inline CDOTAUserMsg_UnitEvent_AddGesture& operator=(const CDOTAUserMsg_UnitEvent_AddGesture& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_UnitEvent_AddGesture& default_instance();
  
  void Swap(CDOTAUserMsg_UnitEvent_AddGesture* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_UnitEvent_AddGesture* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_UnitEvent_AddGesture& from);
  void MergeFrom(const CDOTAUserMsg_UnitEvent_AddGesture& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .Activity activity = 1 [default = ACT_INVALID];
  inline bool has_activity() const;
  inline void clear_activity();
  static const int kActivityFieldNumber = 1;
  inline Activity activity() const;
  inline void set_activity(Activity value);
  
  // optional int32 slot = 2;
  inline bool has_slot() const;
  inline void clear_slot();
  static const int kSlotFieldNumber = 2;
  inline ::google::protobuf::int32 slot() const;
  inline void set_slot(::google::protobuf::int32 value);
  
  // optional float fade_in = 3 [default = 0];
  inline bool has_fade_in() const;
  inline void clear_fade_in();
  static const int kFadeInFieldNumber = 3;
  inline float fade_in() const;
  inline void set_fade_in(float value);
  
  // optional float fade_out = 4 [default = 0.1];
  inline bool has_fade_out() const;
  inline void clear_fade_out();
  static const int kFadeOutFieldNumber = 4;
  inline float fade_out() const;
  inline void set_fade_out(float value);
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_UnitEvent.AddGesture)
 private:
  inline void set_has_activity();
  inline void clear_has_activity();
  inline void set_has_slot();
  inline void clear_has_slot();
  inline void set_has_fade_in();
  inline void clear_has_fade_in();
  inline void set_has_fade_out();
  inline void clear_has_fade_out();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int activity_;
  ::google::protobuf::int32 slot_;
  float fade_in_;
  float fade_out_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_UnitEvent_AddGesture* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_UnitEvent_RemoveGesture : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_UnitEvent_RemoveGesture();
  virtual ~CDOTAUserMsg_UnitEvent_RemoveGesture();
  
  CDOTAUserMsg_UnitEvent_RemoveGesture(const CDOTAUserMsg_UnitEvent_RemoveGesture& from);
  
  inline CDOTAUserMsg_UnitEvent_RemoveGesture& operator=(const CDOTAUserMsg_UnitEvent_RemoveGesture& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_UnitEvent_RemoveGesture& default_instance();
  
  void Swap(CDOTAUserMsg_UnitEvent_RemoveGesture* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_UnitEvent_RemoveGesture* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_UnitEvent_RemoveGesture& from);
  void MergeFrom(const CDOTAUserMsg_UnitEvent_RemoveGesture& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .Activity activity = 1 [default = ACT_INVALID];
  inline bool has_activity() const;
  inline void clear_activity();
  static const int kActivityFieldNumber = 1;
  inline Activity activity() const;
  inline void set_activity(Activity value);
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_UnitEvent.RemoveGesture)
 private:
  inline void set_has_activity();
  inline void clear_has_activity();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int activity_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_UnitEvent_RemoveGesture* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_UnitEvent_BloodImpact : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_UnitEvent_BloodImpact();
  virtual ~CDOTAUserMsg_UnitEvent_BloodImpact();
  
  CDOTAUserMsg_UnitEvent_BloodImpact(const CDOTAUserMsg_UnitEvent_BloodImpact& from);
  
  inline CDOTAUserMsg_UnitEvent_BloodImpact& operator=(const CDOTAUserMsg_UnitEvent_BloodImpact& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_UnitEvent_BloodImpact& default_instance();
  
  void Swap(CDOTAUserMsg_UnitEvent_BloodImpact* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_UnitEvent_BloodImpact* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_UnitEvent_BloodImpact& from);
  void MergeFrom(const CDOTAUserMsg_UnitEvent_BloodImpact& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 scale = 1;
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 1;
  inline ::google::protobuf::int32 scale() const;
  inline void set_scale(::google::protobuf::int32 value);
  
  // optional int32 x_normal = 2;
  inline bool has_x_normal() const;
  inline void clear_x_normal();
  static const int kXNormalFieldNumber = 2;
  inline ::google::protobuf::int32 x_normal() const;
  inline void set_x_normal(::google::protobuf::int32 value);
  
  // optional int32 y_normal = 3;
  inline bool has_y_normal() const;
  inline void clear_y_normal();
  static const int kYNormalFieldNumber = 3;
  inline ::google::protobuf::int32 y_normal() const;
  inline void set_y_normal(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_UnitEvent.BloodImpact)
 private:
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_x_normal();
  inline void clear_has_x_normal();
  inline void set_has_y_normal();
  inline void clear_has_y_normal();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 scale_;
  ::google::protobuf::int32 x_normal_;
  ::google::protobuf::int32 y_normal_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_UnitEvent_BloodImpact* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_UnitEvent_FadeGesture : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_UnitEvent_FadeGesture();
  virtual ~CDOTAUserMsg_UnitEvent_FadeGesture();
  
  CDOTAUserMsg_UnitEvent_FadeGesture(const CDOTAUserMsg_UnitEvent_FadeGesture& from);
  
  inline CDOTAUserMsg_UnitEvent_FadeGesture& operator=(const CDOTAUserMsg_UnitEvent_FadeGesture& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_UnitEvent_FadeGesture& default_instance();
  
  void Swap(CDOTAUserMsg_UnitEvent_FadeGesture* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_UnitEvent_FadeGesture* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_UnitEvent_FadeGesture& from);
  void MergeFrom(const CDOTAUserMsg_UnitEvent_FadeGesture& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .Activity activity = 1 [default = ACT_INVALID];
  inline bool has_activity() const;
  inline void clear_activity();
  static const int kActivityFieldNumber = 1;
  inline Activity activity() const;
  inline void set_activity(Activity value);
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_UnitEvent.FadeGesture)
 private:
  inline void set_has_activity();
  inline void clear_has_activity();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int activity_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_UnitEvent_FadeGesture* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_UnitEvent : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_UnitEvent();
  virtual ~CDOTAUserMsg_UnitEvent();
  
  CDOTAUserMsg_UnitEvent(const CDOTAUserMsg_UnitEvent& from);
  
  inline CDOTAUserMsg_UnitEvent& operator=(const CDOTAUserMsg_UnitEvent& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_UnitEvent& default_instance();
  
  void Swap(CDOTAUserMsg_UnitEvent* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_UnitEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_UnitEvent& from);
  void MergeFrom(const CDOTAUserMsg_UnitEvent& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CDOTAUserMsg_UnitEvent_Speech Speech;
  typedef CDOTAUserMsg_UnitEvent_SpeechMute SpeechMute;
  typedef CDOTAUserMsg_UnitEvent_AddGesture AddGesture;
  typedef CDOTAUserMsg_UnitEvent_RemoveGesture RemoveGesture;
  typedef CDOTAUserMsg_UnitEvent_BloodImpact BloodImpact;
  typedef CDOTAUserMsg_UnitEvent_FadeGesture FadeGesture;
  
  // accessors -------------------------------------------------------
  
  // required .EDotaEntityMessages msg_type = 1 [default = DOTA_UNIT_SPEECH];
  inline bool has_msg_type() const;
  inline void clear_msg_type();
  static const int kMsgTypeFieldNumber = 1;
  inline EDotaEntityMessages msg_type() const;
  inline void set_msg_type(EDotaEntityMessages value);
  
  // required int32 entity_index = 2;
  inline bool has_entity_index() const;
  inline void clear_entity_index();
  static const int kEntityIndexFieldNumber = 2;
  inline ::google::protobuf::int32 entity_index() const;
  inline void set_entity_index(::google::protobuf::int32 value);
  
  // optional .CDOTAUserMsg_UnitEvent.Speech speech = 3;
  inline bool has_speech() const;
  inline void clear_speech();
  static const int kSpeechFieldNumber = 3;
  inline const ::CDOTAUserMsg_UnitEvent_Speech& speech() const;
  inline ::CDOTAUserMsg_UnitEvent_Speech* mutable_speech();
  inline ::CDOTAUserMsg_UnitEvent_Speech* release_speech();
  
  // optional .CDOTAUserMsg_UnitEvent.SpeechMute speech_mute = 4;
  inline bool has_speech_mute() const;
  inline void clear_speech_mute();
  static const int kSpeechMuteFieldNumber = 4;
  inline const ::CDOTAUserMsg_UnitEvent_SpeechMute& speech_mute() const;
  inline ::CDOTAUserMsg_UnitEvent_SpeechMute* mutable_speech_mute();
  inline ::CDOTAUserMsg_UnitEvent_SpeechMute* release_speech_mute();
  
  // optional .CDOTAUserMsg_UnitEvent.AddGesture add_gesture = 5;
  inline bool has_add_gesture() const;
  inline void clear_add_gesture();
  static const int kAddGestureFieldNumber = 5;
  inline const ::CDOTAUserMsg_UnitEvent_AddGesture& add_gesture() const;
  inline ::CDOTAUserMsg_UnitEvent_AddGesture* mutable_add_gesture();
  inline ::CDOTAUserMsg_UnitEvent_AddGesture* release_add_gesture();
  
  // optional .CDOTAUserMsg_UnitEvent.RemoveGesture remove_gesture = 6;
  inline bool has_remove_gesture() const;
  inline void clear_remove_gesture();
  static const int kRemoveGestureFieldNumber = 6;
  inline const ::CDOTAUserMsg_UnitEvent_RemoveGesture& remove_gesture() const;
  inline ::CDOTAUserMsg_UnitEvent_RemoveGesture* mutable_remove_gesture();
  inline ::CDOTAUserMsg_UnitEvent_RemoveGesture* release_remove_gesture();
  
  // optional .CDOTAUserMsg_UnitEvent.BloodImpact blood_impact = 7;
  inline bool has_blood_impact() const;
  inline void clear_blood_impact();
  static const int kBloodImpactFieldNumber = 7;
  inline const ::CDOTAUserMsg_UnitEvent_BloodImpact& blood_impact() const;
  inline ::CDOTAUserMsg_UnitEvent_BloodImpact* mutable_blood_impact();
  inline ::CDOTAUserMsg_UnitEvent_BloodImpact* release_blood_impact();
  
  // optional .CDOTAUserMsg_UnitEvent.FadeGesture fade_gesture = 8;
  inline bool has_fade_gesture() const;
  inline void clear_fade_gesture();
  static const int kFadeGestureFieldNumber = 8;
  inline const ::CDOTAUserMsg_UnitEvent_FadeGesture& fade_gesture() const;
  inline ::CDOTAUserMsg_UnitEvent_FadeGesture* mutable_fade_gesture();
  inline ::CDOTAUserMsg_UnitEvent_FadeGesture* release_fade_gesture();
  
  // optional .CDOTASpeechMatchOnClient speech_match_on_client = 9;
  inline bool has_speech_match_on_client() const;
  inline void clear_speech_match_on_client();
  static const int kSpeechMatchOnClientFieldNumber = 9;
  inline const ::CDOTASpeechMatchOnClient& speech_match_on_client() const;
  inline ::CDOTASpeechMatchOnClient* mutable_speech_match_on_client();
  inline ::CDOTASpeechMatchOnClient* release_speech_match_on_client();
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_UnitEvent)
 private:
  inline void set_has_msg_type();
  inline void clear_has_msg_type();
  inline void set_has_entity_index();
  inline void clear_has_entity_index();
  inline void set_has_speech();
  inline void clear_has_speech();
  inline void set_has_speech_mute();
  inline void clear_has_speech_mute();
  inline void set_has_add_gesture();
  inline void clear_has_add_gesture();
  inline void set_has_remove_gesture();
  inline void clear_has_remove_gesture();
  inline void set_has_blood_impact();
  inline void clear_has_blood_impact();
  inline void set_has_fade_gesture();
  inline void clear_has_fade_gesture();
  inline void set_has_speech_match_on_client();
  inline void clear_has_speech_match_on_client();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msg_type_;
  ::google::protobuf::int32 entity_index_;
  ::CDOTAUserMsg_UnitEvent_Speech* speech_;
  ::CDOTAUserMsg_UnitEvent_SpeechMute* speech_mute_;
  ::CDOTAUserMsg_UnitEvent_AddGesture* add_gesture_;
  ::CDOTAUserMsg_UnitEvent_RemoveGesture* remove_gesture_;
  ::CDOTAUserMsg_UnitEvent_BloodImpact* blood_impact_;
  ::CDOTAUserMsg_UnitEvent_FadeGesture* fade_gesture_;
  ::CDOTASpeechMatchOnClient* speech_match_on_client_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_UnitEvent* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_ItemPurchased : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_ItemPurchased();
  virtual ~CDOTAUserMsg_ItemPurchased();
  
  CDOTAUserMsg_ItemPurchased(const CDOTAUserMsg_ItemPurchased& from);
  
  inline CDOTAUserMsg_ItemPurchased& operator=(const CDOTAUserMsg_ItemPurchased& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_ItemPurchased& default_instance();
  
  void Swap(CDOTAUserMsg_ItemPurchased* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_ItemPurchased* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_ItemPurchased& from);
  void MergeFrom(const CDOTAUserMsg_ItemPurchased& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 item_index = 1;
  inline bool has_item_index() const;
  inline void clear_item_index();
  static const int kItemIndexFieldNumber = 1;
  inline ::google::protobuf::int32 item_index() const;
  inline void set_item_index(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_ItemPurchased)
 private:
  inline void set_has_item_index();
  inline void clear_has_item_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 item_index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_ItemPurchased* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_ItemFound : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_ItemFound();
  virtual ~CDOTAUserMsg_ItemFound();
  
  CDOTAUserMsg_ItemFound(const CDOTAUserMsg_ItemFound& from);
  
  inline CDOTAUserMsg_ItemFound& operator=(const CDOTAUserMsg_ItemFound& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_ItemFound& default_instance();
  
  void Swap(CDOTAUserMsg_ItemFound* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_ItemFound* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_ItemFound& from);
  void MergeFrom(const CDOTAUserMsg_ItemFound& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 player = 1;
  inline bool has_player() const;
  inline void clear_player();
  static const int kPlayerFieldNumber = 1;
  inline ::google::protobuf::int32 player() const;
  inline void set_player(::google::protobuf::int32 value);
  
  // optional int32 quality = 2;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 2;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);
  
  // optional int32 rarity = 3;
  inline bool has_rarity() const;
  inline void clear_rarity();
  static const int kRarityFieldNumber = 3;
  inline ::google::protobuf::int32 rarity() const;
  inline void set_rarity(::google::protobuf::int32 value);
  
  // optional int32 method = 4;
  inline bool has_method() const;
  inline void clear_method();
  static const int kMethodFieldNumber = 4;
  inline ::google::protobuf::int32 method() const;
  inline void set_method(::google::protobuf::int32 value);
  
  // optional int32 itemdef = 5;
  inline bool has_itemdef() const;
  inline void clear_itemdef();
  static const int kItemdefFieldNumber = 5;
  inline ::google::protobuf::int32 itemdef() const;
  inline void set_itemdef(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_ItemFound)
 private:
  inline void set_has_player();
  inline void clear_has_player();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_rarity();
  inline void clear_has_rarity();
  inline void set_has_method();
  inline void clear_has_method();
  inline void set_has_itemdef();
  inline void clear_has_itemdef();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 player_;
  ::google::protobuf::int32 quality_;
  ::google::protobuf::int32 rarity_;
  ::google::protobuf::int32 method_;
  ::google::protobuf::int32 itemdef_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_ItemFound* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_ParticleManager_ReleaseParticleIndex : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_ParticleManager_ReleaseParticleIndex();
  virtual ~CDOTAUserMsg_ParticleManager_ReleaseParticleIndex();
  
  CDOTAUserMsg_ParticleManager_ReleaseParticleIndex(const CDOTAUserMsg_ParticleManager_ReleaseParticleIndex& from);
  
  inline CDOTAUserMsg_ParticleManager_ReleaseParticleIndex& operator=(const CDOTAUserMsg_ParticleManager_ReleaseParticleIndex& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_ParticleManager_ReleaseParticleIndex& default_instance();
  
  void Swap(CDOTAUserMsg_ParticleManager_ReleaseParticleIndex* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_ParticleManager_ReleaseParticleIndex* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_ParticleManager_ReleaseParticleIndex& from);
  void MergeFrom(const CDOTAUserMsg_ParticleManager_ReleaseParticleIndex& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_ParticleManager.ReleaseParticleIndex)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_ParticleManager_ReleaseParticleIndex* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_ParticleManager_CreateParticle : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_ParticleManager_CreateParticle();
  virtual ~CDOTAUserMsg_ParticleManager_CreateParticle();
  
  CDOTAUserMsg_ParticleManager_CreateParticle(const CDOTAUserMsg_ParticleManager_CreateParticle& from);
  
  inline CDOTAUserMsg_ParticleManager_CreateParticle& operator=(const CDOTAUserMsg_ParticleManager_CreateParticle& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_ParticleManager_CreateParticle& default_instance();
  
  void Swap(CDOTAUserMsg_ParticleManager_CreateParticle* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_ParticleManager_CreateParticle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_ParticleManager_CreateParticle& from);
  void MergeFrom(const CDOTAUserMsg_ParticleManager_CreateParticle& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 particle_name_index = 1;
  inline bool has_particle_name_index() const;
  inline void clear_particle_name_index();
  static const int kParticleNameIndexFieldNumber = 1;
  inline ::google::protobuf::int32 particle_name_index() const;
  inline void set_particle_name_index(::google::protobuf::int32 value);
  
  // optional int32 attach_type = 2;
  inline bool has_attach_type() const;
  inline void clear_attach_type();
  static const int kAttachTypeFieldNumber = 2;
  inline ::google::protobuf::int32 attach_type() const;
  inline void set_attach_type(::google::protobuf::int32 value);
  
  // optional int32 entity_handle = 3;
  inline bool has_entity_handle() const;
  inline void clear_entity_handle();
  static const int kEntityHandleFieldNumber = 3;
  inline ::google::protobuf::int32 entity_handle() const;
  inline void set_entity_handle(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_ParticleManager.CreateParticle)
 private:
  inline void set_has_particle_name_index();
  inline void clear_has_particle_name_index();
  inline void set_has_attach_type();
  inline void clear_has_attach_type();
  inline void set_has_entity_handle();
  inline void clear_has_entity_handle();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 particle_name_index_;
  ::google::protobuf::int32 attach_type_;
  ::google::protobuf::int32 entity_handle_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_ParticleManager_CreateParticle* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_ParticleManager_DestroyParticle : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_ParticleManager_DestroyParticle();
  virtual ~CDOTAUserMsg_ParticleManager_DestroyParticle();
  
  CDOTAUserMsg_ParticleManager_DestroyParticle(const CDOTAUserMsg_ParticleManager_DestroyParticle& from);
  
  inline CDOTAUserMsg_ParticleManager_DestroyParticle& operator=(const CDOTAUserMsg_ParticleManager_DestroyParticle& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_ParticleManager_DestroyParticle& default_instance();
  
  void Swap(CDOTAUserMsg_ParticleManager_DestroyParticle* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_ParticleManager_DestroyParticle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_ParticleManager_DestroyParticle& from);
  void MergeFrom(const CDOTAUserMsg_ParticleManager_DestroyParticle& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool destroy_immediately = 1;
  inline bool has_destroy_immediately() const;
  inline void clear_destroy_immediately();
  static const int kDestroyImmediatelyFieldNumber = 1;
  inline bool destroy_immediately() const;
  inline void set_destroy_immediately(bool value);
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_ParticleManager.DestroyParticle)
 private:
  inline void set_has_destroy_immediately();
  inline void clear_has_destroy_immediately();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool destroy_immediately_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_ParticleManager_DestroyParticle* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_ParticleManager_DestroyParticleInvolving : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_ParticleManager_DestroyParticleInvolving();
  virtual ~CDOTAUserMsg_ParticleManager_DestroyParticleInvolving();
  
  CDOTAUserMsg_ParticleManager_DestroyParticleInvolving(const CDOTAUserMsg_ParticleManager_DestroyParticleInvolving& from);
  
  inline CDOTAUserMsg_ParticleManager_DestroyParticleInvolving& operator=(const CDOTAUserMsg_ParticleManager_DestroyParticleInvolving& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_ParticleManager_DestroyParticleInvolving& default_instance();
  
  void Swap(CDOTAUserMsg_ParticleManager_DestroyParticleInvolving* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_ParticleManager_DestroyParticleInvolving* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_ParticleManager_DestroyParticleInvolving& from);
  void MergeFrom(const CDOTAUserMsg_ParticleManager_DestroyParticleInvolving& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool destroy_immediately = 1;
  inline bool has_destroy_immediately() const;
  inline void clear_destroy_immediately();
  static const int kDestroyImmediatelyFieldNumber = 1;
  inline bool destroy_immediately() const;
  inline void set_destroy_immediately(bool value);
  
  // optional int32 entity_handle = 3;
  inline bool has_entity_handle() const;
  inline void clear_entity_handle();
  static const int kEntityHandleFieldNumber = 3;
  inline ::google::protobuf::int32 entity_handle() const;
  inline void set_entity_handle(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_ParticleManager.DestroyParticleInvolving)
 private:
  inline void set_has_destroy_immediately();
  inline void clear_has_destroy_immediately();
  inline void set_has_entity_handle();
  inline void clear_has_entity_handle();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool destroy_immediately_;
  ::google::protobuf::int32 entity_handle_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_ParticleManager_DestroyParticleInvolving* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_ParticleManager_UpdateParticle : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_ParticleManager_UpdateParticle();
  virtual ~CDOTAUserMsg_ParticleManager_UpdateParticle();
  
  CDOTAUserMsg_ParticleManager_UpdateParticle(const CDOTAUserMsg_ParticleManager_UpdateParticle& from);
  
  inline CDOTAUserMsg_ParticleManager_UpdateParticle& operator=(const CDOTAUserMsg_ParticleManager_UpdateParticle& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_ParticleManager_UpdateParticle& default_instance();
  
  void Swap(CDOTAUserMsg_ParticleManager_UpdateParticle* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_ParticleManager_UpdateParticle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_ParticleManager_UpdateParticle& from);
  void MergeFrom(const CDOTAUserMsg_ParticleManager_UpdateParticle& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 control_point = 1;
  inline bool has_control_point() const;
  inline void clear_control_point();
  static const int kControlPointFieldNumber = 1;
  inline ::google::protobuf::int32 control_point() const;
  inline void set_control_point(::google::protobuf::int32 value);
  
  // optional .CMsgVector position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline const ::CMsgVector& position() const;
  inline ::CMsgVector* mutable_position();
  inline ::CMsgVector* release_position();
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_ParticleManager.UpdateParticle)
 private:
  inline void set_has_control_point();
  inline void clear_has_control_point();
  inline void set_has_position();
  inline void clear_has_position();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::CMsgVector* position_;
  ::google::protobuf::int32 control_point_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_ParticleManager_UpdateParticle* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_ParticleManager_UpdateParticleFwd : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_ParticleManager_UpdateParticleFwd();
  virtual ~CDOTAUserMsg_ParticleManager_UpdateParticleFwd();
  
  CDOTAUserMsg_ParticleManager_UpdateParticleFwd(const CDOTAUserMsg_ParticleManager_UpdateParticleFwd& from);
  
  inline CDOTAUserMsg_ParticleManager_UpdateParticleFwd& operator=(const CDOTAUserMsg_ParticleManager_UpdateParticleFwd& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_ParticleManager_UpdateParticleFwd& default_instance();
  
  void Swap(CDOTAUserMsg_ParticleManager_UpdateParticleFwd* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_ParticleManager_UpdateParticleFwd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleFwd& from);
  void MergeFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleFwd& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 control_point = 1;
  inline bool has_control_point() const;
  inline void clear_control_point();
  static const int kControlPointFieldNumber = 1;
  inline ::google::protobuf::int32 control_point() const;
  inline void set_control_point(::google::protobuf::int32 value);
  
  // optional .CMsgVector forward = 2;
  inline bool has_forward() const;
  inline void clear_forward();
  static const int kForwardFieldNumber = 2;
  inline const ::CMsgVector& forward() const;
  inline ::CMsgVector* mutable_forward();
  inline ::CMsgVector* release_forward();
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_ParticleManager.UpdateParticleFwd)
 private:
  inline void set_has_control_point();
  inline void clear_has_control_point();
  inline void set_has_forward();
  inline void clear_has_forward();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::CMsgVector* forward_;
  ::google::protobuf::int32 control_point_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_ParticleManager_UpdateParticleFwd* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_ParticleManager_UpdateParticleOrient : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_ParticleManager_UpdateParticleOrient();
  virtual ~CDOTAUserMsg_ParticleManager_UpdateParticleOrient();
  
  CDOTAUserMsg_ParticleManager_UpdateParticleOrient(const CDOTAUserMsg_ParticleManager_UpdateParticleOrient& from);
  
  inline CDOTAUserMsg_ParticleManager_UpdateParticleOrient& operator=(const CDOTAUserMsg_ParticleManager_UpdateParticleOrient& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_ParticleManager_UpdateParticleOrient& default_instance();
  
  void Swap(CDOTAUserMsg_ParticleManager_UpdateParticleOrient* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_ParticleManager_UpdateParticleOrient* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleOrient& from);
  void MergeFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleOrient& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 control_point = 1;
  inline bool has_control_point() const;
  inline void clear_control_point();
  static const int kControlPointFieldNumber = 1;
  inline ::google::protobuf::int32 control_point() const;
  inline void set_control_point(::google::protobuf::int32 value);
  
  // optional .CMsgVector forward = 2;
  inline bool has_forward() const;
  inline void clear_forward();
  static const int kForwardFieldNumber = 2;
  inline const ::CMsgVector& forward() const;
  inline ::CMsgVector* mutable_forward();
  inline ::CMsgVector* release_forward();
  
  // optional .CMsgVector right = 3;
  inline bool has_right() const;
  inline void clear_right();
  static const int kRightFieldNumber = 3;
  inline const ::CMsgVector& right() const;
  inline ::CMsgVector* mutable_right();
  inline ::CMsgVector* release_right();
  
  // optional .CMsgVector up = 4;
  inline bool has_up() const;
  inline void clear_up();
  static const int kUpFieldNumber = 4;
  inline const ::CMsgVector& up() const;
  inline ::CMsgVector* mutable_up();
  inline ::CMsgVector* release_up();
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_ParticleManager.UpdateParticleOrient)
 private:
  inline void set_has_control_point();
  inline void clear_has_control_point();
  inline void set_has_forward();
  inline void clear_has_forward();
  inline void set_has_right();
  inline void clear_has_right();
  inline void set_has_up();
  inline void clear_has_up();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::CMsgVector* forward_;
  ::CMsgVector* right_;
  ::CMsgVector* up_;
  ::google::protobuf::int32 control_point_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_ParticleManager_UpdateParticleOrient* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_ParticleManager_UpdateParticleFallback : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_ParticleManager_UpdateParticleFallback();
  virtual ~CDOTAUserMsg_ParticleManager_UpdateParticleFallback();
  
  CDOTAUserMsg_ParticleManager_UpdateParticleFallback(const CDOTAUserMsg_ParticleManager_UpdateParticleFallback& from);
  
  inline CDOTAUserMsg_ParticleManager_UpdateParticleFallback& operator=(const CDOTAUserMsg_ParticleManager_UpdateParticleFallback& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_ParticleManager_UpdateParticleFallback& default_instance();
  
  void Swap(CDOTAUserMsg_ParticleManager_UpdateParticleFallback* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_ParticleManager_UpdateParticleFallback* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleFallback& from);
  void MergeFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleFallback& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 control_point = 1;
  inline bool has_control_point() const;
  inline void clear_control_point();
  static const int kControlPointFieldNumber = 1;
  inline ::google::protobuf::int32 control_point() const;
  inline void set_control_point(::google::protobuf::int32 value);
  
  // optional .CMsgVector position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline const ::CMsgVector& position() const;
  inline ::CMsgVector* mutable_position();
  inline ::CMsgVector* release_position();
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_ParticleManager.UpdateParticleFallback)
 private:
  inline void set_has_control_point();
  inline void clear_has_control_point();
  inline void set_has_position();
  inline void clear_has_position();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::CMsgVector* position_;
  ::google::protobuf::int32 control_point_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_ParticleManager_UpdateParticleFallback* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_ParticleManager_UpdateParticleOffset : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_ParticleManager_UpdateParticleOffset();
  virtual ~CDOTAUserMsg_ParticleManager_UpdateParticleOffset();
  
  CDOTAUserMsg_ParticleManager_UpdateParticleOffset(const CDOTAUserMsg_ParticleManager_UpdateParticleOffset& from);
  
  inline CDOTAUserMsg_ParticleManager_UpdateParticleOffset& operator=(const CDOTAUserMsg_ParticleManager_UpdateParticleOffset& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_ParticleManager_UpdateParticleOffset& default_instance();
  
  void Swap(CDOTAUserMsg_ParticleManager_UpdateParticleOffset* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_ParticleManager_UpdateParticleOffset* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleOffset& from);
  void MergeFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleOffset& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 control_point = 1;
  inline bool has_control_point() const;
  inline void clear_control_point();
  static const int kControlPointFieldNumber = 1;
  inline ::google::protobuf::int32 control_point() const;
  inline void set_control_point(::google::protobuf::int32 value);
  
  // optional .CMsgVector origin_offset = 2;
  inline bool has_origin_offset() const;
  inline void clear_origin_offset();
  static const int kOriginOffsetFieldNumber = 2;
  inline const ::CMsgVector& origin_offset() const;
  inline ::CMsgVector* mutable_origin_offset();
  inline ::CMsgVector* release_origin_offset();
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_ParticleManager.UpdateParticleOffset)
 private:
  inline void set_has_control_point();
  inline void clear_has_control_point();
  inline void set_has_origin_offset();
  inline void clear_has_origin_offset();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::CMsgVector* origin_offset_;
  ::google::protobuf::int32 control_point_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_ParticleManager_UpdateParticleOffset* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_ParticleManager_UpdateParticleEnt : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_ParticleManager_UpdateParticleEnt();
  virtual ~CDOTAUserMsg_ParticleManager_UpdateParticleEnt();
  
  CDOTAUserMsg_ParticleManager_UpdateParticleEnt(const CDOTAUserMsg_ParticleManager_UpdateParticleEnt& from);
  
  inline CDOTAUserMsg_ParticleManager_UpdateParticleEnt& operator=(const CDOTAUserMsg_ParticleManager_UpdateParticleEnt& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_ParticleManager_UpdateParticleEnt& default_instance();
  
  void Swap(CDOTAUserMsg_ParticleManager_UpdateParticleEnt* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_ParticleManager_UpdateParticleEnt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleEnt& from);
  void MergeFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleEnt& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 control_point = 1;
  inline bool has_control_point() const;
  inline void clear_control_point();
  static const int kControlPointFieldNumber = 1;
  inline ::google::protobuf::int32 control_point() const;
  inline void set_control_point(::google::protobuf::int32 value);
  
  // optional int32 entity_handle = 2;
  inline bool has_entity_handle() const;
  inline void clear_entity_handle();
  static const int kEntityHandleFieldNumber = 2;
  inline ::google::protobuf::int32 entity_handle() const;
  inline void set_entity_handle(::google::protobuf::int32 value);
  
  // optional int32 attach_type = 3;
  inline bool has_attach_type() const;
  inline void clear_attach_type();
  static const int kAttachTypeFieldNumber = 3;
  inline ::google::protobuf::int32 attach_type() const;
  inline void set_attach_type(::google::protobuf::int32 value);
  
  // optional int32 attachment = 4;
  inline bool has_attachment() const;
  inline void clear_attachment();
  static const int kAttachmentFieldNumber = 4;
  inline ::google::protobuf::int32 attachment() const;
  inline void set_attachment(::google::protobuf::int32 value);
  
  // optional .CMsgVector fallback_position = 5;
  inline bool has_fallback_position() const;
  inline void clear_fallback_position();
  static const int kFallbackPositionFieldNumber = 5;
  inline const ::CMsgVector& fallback_position() const;
  inline ::CMsgVector* mutable_fallback_position();
  inline ::CMsgVector* release_fallback_position();
  
  // optional bool include_wearables = 6;
  inline bool has_include_wearables() const;
  inline void clear_include_wearables();
  static const int kIncludeWearablesFieldNumber = 6;
  inline bool include_wearables() const;
  inline void set_include_wearables(bool value);
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_ParticleManager.UpdateParticleEnt)
 private:
  inline void set_has_control_point();
  inline void clear_has_control_point();
  inline void set_has_entity_handle();
  inline void clear_has_entity_handle();
  inline void set_has_attach_type();
  inline void clear_has_attach_type();
  inline void set_has_attachment();
  inline void clear_has_attachment();
  inline void set_has_fallback_position();
  inline void clear_has_fallback_position();
  inline void set_has_include_wearables();
  inline void clear_has_include_wearables();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 control_point_;
  ::google::protobuf::int32 entity_handle_;
  ::google::protobuf::int32 attach_type_;
  ::google::protobuf::int32 attachment_;
  ::CMsgVector* fallback_position_;
  bool include_wearables_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_ParticleManager_UpdateParticleEnt* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen();
  virtual ~CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen();
  
  CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen(const CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen& from);
  
  inline CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen& operator=(const CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen& default_instance();
  
  void Swap(CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen& from);
  void MergeFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool set_frozen = 1;
  inline bool has_set_frozen() const;
  inline void clear_set_frozen();
  static const int kSetFrozenFieldNumber = 1;
  inline bool set_frozen() const;
  inline void set_set_frozen(bool value);
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_ParticleManager.UpdateParticleSetFrozen)
 private:
  inline void set_has_set_frozen();
  inline void clear_has_set_frozen();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool set_frozen_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw();
  virtual ~CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw();
  
  CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw(const CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw& from);
  
  inline CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw& operator=(const CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw& default_instance();
  
  void Swap(CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw& from);
  void MergeFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool should_draw = 1;
  inline bool has_should_draw() const;
  inline void clear_should_draw();
  static const int kShouldDrawFieldNumber = 1;
  inline bool should_draw() const;
  inline void set_should_draw(bool value);
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw)
 private:
  inline void set_has_should_draw();
  inline void clear_has_should_draw();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool should_draw_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_ParticleManager : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_ParticleManager();
  virtual ~CDOTAUserMsg_ParticleManager();
  
  CDOTAUserMsg_ParticleManager(const CDOTAUserMsg_ParticleManager& from);
  
  inline CDOTAUserMsg_ParticleManager& operator=(const CDOTAUserMsg_ParticleManager& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_ParticleManager& default_instance();
  
  void Swap(CDOTAUserMsg_ParticleManager* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_ParticleManager* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_ParticleManager& from);
  void MergeFrom(const CDOTAUserMsg_ParticleManager& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CDOTAUserMsg_ParticleManager_ReleaseParticleIndex ReleaseParticleIndex;
  typedef CDOTAUserMsg_ParticleManager_CreateParticle CreateParticle;
  typedef CDOTAUserMsg_ParticleManager_DestroyParticle DestroyParticle;
  typedef CDOTAUserMsg_ParticleManager_DestroyParticleInvolving DestroyParticleInvolving;
  typedef CDOTAUserMsg_ParticleManager_UpdateParticle UpdateParticle;
  typedef CDOTAUserMsg_ParticleManager_UpdateParticleFwd UpdateParticleFwd;
  typedef CDOTAUserMsg_ParticleManager_UpdateParticleOrient UpdateParticleOrient;
  typedef CDOTAUserMsg_ParticleManager_UpdateParticleFallback UpdateParticleFallback;
  typedef CDOTAUserMsg_ParticleManager_UpdateParticleOffset UpdateParticleOffset;
  typedef CDOTAUserMsg_ParticleManager_UpdateParticleEnt UpdateParticleEnt;
  typedef CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen UpdateParticleSetFrozen;
  typedef CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw UpdateParticleShouldDraw;
  
  // accessors -------------------------------------------------------
  
  // required .DOTA_PARTICLE_MESSAGE type = 1 [default = DOTA_PARTICLE_MANAGER_EVENT_CREATE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline DOTA_PARTICLE_MESSAGE type() const;
  inline void set_type(DOTA_PARTICLE_MESSAGE value);
  
  // required uint32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);
  
  // optional .CDOTAUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;
  inline bool has_release_particle_index() const;
  inline void clear_release_particle_index();
  static const int kReleaseParticleIndexFieldNumber = 3;
  inline const ::CDOTAUserMsg_ParticleManager_ReleaseParticleIndex& release_particle_index() const;
  inline ::CDOTAUserMsg_ParticleManager_ReleaseParticleIndex* mutable_release_particle_index();
  inline ::CDOTAUserMsg_ParticleManager_ReleaseParticleIndex* release_release_particle_index();
  
  // optional .CDOTAUserMsg_ParticleManager.CreateParticle create_particle = 4;
  inline bool has_create_particle() const;
  inline void clear_create_particle();
  static const int kCreateParticleFieldNumber = 4;
  inline const ::CDOTAUserMsg_ParticleManager_CreateParticle& create_particle() const;
  inline ::CDOTAUserMsg_ParticleManager_CreateParticle* mutable_create_particle();
  inline ::CDOTAUserMsg_ParticleManager_CreateParticle* release_create_particle();
  
  // optional .CDOTAUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;
  inline bool has_destroy_particle() const;
  inline void clear_destroy_particle();
  static const int kDestroyParticleFieldNumber = 5;
  inline const ::CDOTAUserMsg_ParticleManager_DestroyParticle& destroy_particle() const;
  inline ::CDOTAUserMsg_ParticleManager_DestroyParticle* mutable_destroy_particle();
  inline ::CDOTAUserMsg_ParticleManager_DestroyParticle* release_destroy_particle();
  
  // optional .CDOTAUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;
  inline bool has_destroy_particle_involving() const;
  inline void clear_destroy_particle_involving();
  static const int kDestroyParticleInvolvingFieldNumber = 6;
  inline const ::CDOTAUserMsg_ParticleManager_DestroyParticleInvolving& destroy_particle_involving() const;
  inline ::CDOTAUserMsg_ParticleManager_DestroyParticleInvolving* mutable_destroy_particle_involving();
  inline ::CDOTAUserMsg_ParticleManager_DestroyParticleInvolving* release_destroy_particle_involving();
  
  // optional .CDOTAUserMsg_ParticleManager.UpdateParticle update_particle = 7;
  inline bool has_update_particle() const;
  inline void clear_update_particle();
  static const int kUpdateParticleFieldNumber = 7;
  inline const ::CDOTAUserMsg_ParticleManager_UpdateParticle& update_particle() const;
  inline ::CDOTAUserMsg_ParticleManager_UpdateParticle* mutable_update_particle();
  inline ::CDOTAUserMsg_ParticleManager_UpdateParticle* release_update_particle();
  
  // optional .CDOTAUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;
  inline bool has_update_particle_fwd() const;
  inline void clear_update_particle_fwd();
  static const int kUpdateParticleFwdFieldNumber = 8;
  inline const ::CDOTAUserMsg_ParticleManager_UpdateParticleFwd& update_particle_fwd() const;
  inline ::CDOTAUserMsg_ParticleManager_UpdateParticleFwd* mutable_update_particle_fwd();
  inline ::CDOTAUserMsg_ParticleManager_UpdateParticleFwd* release_update_particle_fwd();
  
  // optional .CDOTAUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;
  inline bool has_update_particle_orient() const;
  inline void clear_update_particle_orient();
  static const int kUpdateParticleOrientFieldNumber = 9;
  inline const ::CDOTAUserMsg_ParticleManager_UpdateParticleOrient& update_particle_orient() const;
  inline ::CDOTAUserMsg_ParticleManager_UpdateParticleOrient* mutable_update_particle_orient();
  inline ::CDOTAUserMsg_ParticleManager_UpdateParticleOrient* release_update_particle_orient();
  
  // optional .CDOTAUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;
  inline bool has_update_particle_fallback() const;
  inline void clear_update_particle_fallback();
  static const int kUpdateParticleFallbackFieldNumber = 10;
  inline const ::CDOTAUserMsg_ParticleManager_UpdateParticleFallback& update_particle_fallback() const;
  inline ::CDOTAUserMsg_ParticleManager_UpdateParticleFallback* mutable_update_particle_fallback();
  inline ::CDOTAUserMsg_ParticleManager_UpdateParticleFallback* release_update_particle_fallback();
  
  // optional .CDOTAUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;
  inline bool has_update_particle_offset() const;
  inline void clear_update_particle_offset();
  static const int kUpdateParticleOffsetFieldNumber = 11;
  inline const ::CDOTAUserMsg_ParticleManager_UpdateParticleOffset& update_particle_offset() const;
  inline ::CDOTAUserMsg_ParticleManager_UpdateParticleOffset* mutable_update_particle_offset();
  inline ::CDOTAUserMsg_ParticleManager_UpdateParticleOffset* release_update_particle_offset();
  
  // optional .CDOTAUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;
  inline bool has_update_particle_ent() const;
  inline void clear_update_particle_ent();
  static const int kUpdateParticleEntFieldNumber = 12;
  inline const ::CDOTAUserMsg_ParticleManager_UpdateParticleEnt& update_particle_ent() const;
  inline ::CDOTAUserMsg_ParticleManager_UpdateParticleEnt* mutable_update_particle_ent();
  inline ::CDOTAUserMsg_ParticleManager_UpdateParticleEnt* release_update_particle_ent();
  
  // optional .CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw update_particle_should_draw = 14;
  inline bool has_update_particle_should_draw() const;
  inline void clear_update_particle_should_draw();
  static const int kUpdateParticleShouldDrawFieldNumber = 14;
  inline const ::CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw& update_particle_should_draw() const;
  inline ::CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw* mutable_update_particle_should_draw();
  inline ::CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw* release_update_particle_should_draw();
  
  // optional .CDOTAUserMsg_ParticleManager.UpdateParticleSetFrozen update_particle_set_frozen = 15;
  inline bool has_update_particle_set_frozen() const;
  inline void clear_update_particle_set_frozen();
  static const int kUpdateParticleSetFrozenFieldNumber = 15;
  inline const ::CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen& update_particle_set_frozen() const;
  inline ::CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen* mutable_update_particle_set_frozen();
  inline ::CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen* release_update_particle_set_frozen();
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_ParticleManager)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_release_particle_index();
  inline void clear_has_release_particle_index();
  inline void set_has_create_particle();
  inline void clear_has_create_particle();
  inline void set_has_destroy_particle();
  inline void clear_has_destroy_particle();
  inline void set_has_destroy_particle_involving();
  inline void clear_has_destroy_particle_involving();
  inline void set_has_update_particle();
  inline void clear_has_update_particle();
  inline void set_has_update_particle_fwd();
  inline void clear_has_update_particle_fwd();
  inline void set_has_update_particle_orient();
  inline void clear_has_update_particle_orient();
  inline void set_has_update_particle_fallback();
  inline void clear_has_update_particle_fallback();
  inline void set_has_update_particle_offset();
  inline void clear_has_update_particle_offset();
  inline void set_has_update_particle_ent();
  inline void clear_has_update_particle_ent();
  inline void set_has_update_particle_should_draw();
  inline void clear_has_update_particle_should_draw();
  inline void set_has_update_particle_set_frozen();
  inline void clear_has_update_particle_set_frozen();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int type_;
  ::google::protobuf::uint32 index_;
  ::CDOTAUserMsg_ParticleManager_ReleaseParticleIndex* release_particle_index_;
  ::CDOTAUserMsg_ParticleManager_CreateParticle* create_particle_;
  ::CDOTAUserMsg_ParticleManager_DestroyParticle* destroy_particle_;
  ::CDOTAUserMsg_ParticleManager_DestroyParticleInvolving* destroy_particle_involving_;
  ::CDOTAUserMsg_ParticleManager_UpdateParticle* update_particle_;
  ::CDOTAUserMsg_ParticleManager_UpdateParticleFwd* update_particle_fwd_;
  ::CDOTAUserMsg_ParticleManager_UpdateParticleOrient* update_particle_orient_;
  ::CDOTAUserMsg_ParticleManager_UpdateParticleFallback* update_particle_fallback_;
  ::CDOTAUserMsg_ParticleManager_UpdateParticleOffset* update_particle_offset_;
  ::CDOTAUserMsg_ParticleManager_UpdateParticleEnt* update_particle_ent_;
  ::CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw* update_particle_should_draw_;
  ::CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen* update_particle_set_frozen_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_ParticleManager* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_OverheadEvent : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_OverheadEvent();
  virtual ~CDOTAUserMsg_OverheadEvent();
  
  CDOTAUserMsg_OverheadEvent(const CDOTAUserMsg_OverheadEvent& from);
  
  inline CDOTAUserMsg_OverheadEvent& operator=(const CDOTAUserMsg_OverheadEvent& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_OverheadEvent& default_instance();
  
  void Swap(CDOTAUserMsg_OverheadEvent* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_OverheadEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_OverheadEvent& from);
  void MergeFrom(const CDOTAUserMsg_OverheadEvent& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .DOTA_OVERHEAD_ALERT message_type = 1 [default = OVERHEAD_ALERT_GOLD];
  inline bool has_message_type() const;
  inline void clear_message_type();
  static const int kMessageTypeFieldNumber = 1;
  inline DOTA_OVERHEAD_ALERT message_type() const;
  inline void set_message_type(DOTA_OVERHEAD_ALERT value);
  
  // optional int32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);
  
  // optional int32 target_player_entindex = 3;
  inline bool has_target_player_entindex() const;
  inline void clear_target_player_entindex();
  static const int kTargetPlayerEntindexFieldNumber = 3;
  inline ::google::protobuf::int32 target_player_entindex() const;
  inline void set_target_player_entindex(::google::protobuf::int32 value);
  
  // optional int32 target_entindex = 4;
  inline bool has_target_entindex() const;
  inline void clear_target_entindex();
  static const int kTargetEntindexFieldNumber = 4;
  inline ::google::protobuf::int32 target_entindex() const;
  inline void set_target_entindex(::google::protobuf::int32 value);
  
  // optional int32 source_player_entindex = 5;
  inline bool has_source_player_entindex() const;
  inline void clear_source_player_entindex();
  static const int kSourcePlayerEntindexFieldNumber = 5;
  inline ::google::protobuf::int32 source_player_entindex() const;
  inline void set_source_player_entindex(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_OverheadEvent)
 private:
  inline void set_has_message_type();
  inline void clear_has_message_type();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_target_player_entindex();
  inline void clear_has_target_player_entindex();
  inline void set_has_target_entindex();
  inline void clear_has_target_entindex();
  inline void set_has_source_player_entindex();
  inline void clear_has_source_player_entindex();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int message_type_;
  ::google::protobuf::int32 value_;
  ::google::protobuf::int32 target_player_entindex_;
  ::google::protobuf::int32 target_entindex_;
  ::google::protobuf::int32 source_player_entindex_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_OverheadEvent* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_TutorialTipInfo : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_TutorialTipInfo();
  virtual ~CDOTAUserMsg_TutorialTipInfo();
  
  CDOTAUserMsg_TutorialTipInfo(const CDOTAUserMsg_TutorialTipInfo& from);
  
  inline CDOTAUserMsg_TutorialTipInfo& operator=(const CDOTAUserMsg_TutorialTipInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_TutorialTipInfo& default_instance();
  
  void Swap(CDOTAUserMsg_TutorialTipInfo* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_TutorialTipInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_TutorialTipInfo& from);
  void MergeFrom(const CDOTAUserMsg_TutorialTipInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional int32 progress = 2;
  inline bool has_progress() const;
  inline void clear_progress();
  static const int kProgressFieldNumber = 2;
  inline ::google::protobuf::int32 progress() const;
  inline void set_progress(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_TutorialTipInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_progress();
  inline void clear_has_progress();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::int32 progress_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_TutorialTipInfo* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_TutorialFinish : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_TutorialFinish();
  virtual ~CDOTAUserMsg_TutorialFinish();
  
  CDOTAUserMsg_TutorialFinish(const CDOTAUserMsg_TutorialFinish& from);
  
  inline CDOTAUserMsg_TutorialFinish& operator=(const CDOTAUserMsg_TutorialFinish& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_TutorialFinish& default_instance();
  
  void Swap(CDOTAUserMsg_TutorialFinish* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_TutorialFinish* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_TutorialFinish& from);
  void MergeFrom(const CDOTAUserMsg_TutorialFinish& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string heading = 1;
  inline bool has_heading() const;
  inline void clear_heading();
  static const int kHeadingFieldNumber = 1;
  inline const ::std::string& heading() const;
  inline void set_heading(const ::std::string& value);
  inline void set_heading(const char* value);
  inline void set_heading(const char* value, size_t size);
  inline ::std::string* mutable_heading();
  inline ::std::string* release_heading();
  
  // optional string emblem = 2;
  inline bool has_emblem() const;
  inline void clear_emblem();
  static const int kEmblemFieldNumber = 2;
  inline const ::std::string& emblem() const;
  inline void set_emblem(const ::std::string& value);
  inline void set_emblem(const char* value);
  inline void set_emblem(const char* value, size_t size);
  inline ::std::string* mutable_emblem();
  inline ::std::string* release_emblem();
  
  // optional string body = 3;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 3;
  inline const ::std::string& body() const;
  inline void set_body(const ::std::string& value);
  inline void set_body(const char* value);
  inline void set_body(const char* value, size_t size);
  inline ::std::string* mutable_body();
  inline ::std::string* release_body();
  
  // optional bool success = 4;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 4;
  inline bool success() const;
  inline void set_success(bool value);
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_TutorialFinish)
 private:
  inline void set_has_heading();
  inline void clear_has_heading();
  inline void set_has_emblem();
  inline void clear_has_emblem();
  inline void set_has_body();
  inline void clear_has_body();
  inline void set_has_success();
  inline void clear_has_success();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* heading_;
  ::std::string* emblem_;
  ::std::string* body_;
  bool success_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_TutorialFinish* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_TutorialMinimapPosition : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_TutorialMinimapPosition();
  virtual ~CDOTAUserMsg_TutorialMinimapPosition();
  
  CDOTAUserMsg_TutorialMinimapPosition(const CDOTAUserMsg_TutorialMinimapPosition& from);
  
  inline CDOTAUserMsg_TutorialMinimapPosition& operator=(const CDOTAUserMsg_TutorialMinimapPosition& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_TutorialMinimapPosition& default_instance();
  
  void Swap(CDOTAUserMsg_TutorialMinimapPosition* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_TutorialMinimapPosition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_TutorialMinimapPosition& from);
  void MergeFrom(const CDOTAUserMsg_TutorialMinimapPosition& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_TutorialMinimapPosition)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_TutorialMinimapPosition* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_SendGenericToolTip : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_SendGenericToolTip();
  virtual ~CDOTAUserMsg_SendGenericToolTip();
  
  CDOTAUserMsg_SendGenericToolTip(const CDOTAUserMsg_SendGenericToolTip& from);
  
  inline CDOTAUserMsg_SendGenericToolTip& operator=(const CDOTAUserMsg_SendGenericToolTip& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_SendGenericToolTip& default_instance();
  
  void Swap(CDOTAUserMsg_SendGenericToolTip* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_SendGenericToolTip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_SendGenericToolTip& from);
  void MergeFrom(const CDOTAUserMsg_SendGenericToolTip& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string title = 1;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 1;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  
  // optional string text = 2;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 2;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  
  // optional int32 entindex = 3;
  inline bool has_entindex() const;
  inline void clear_entindex();
  static const int kEntindexFieldNumber = 3;
  inline ::google::protobuf::int32 entindex() const;
  inline void set_entindex(::google::protobuf::int32 value);
  
  // optional bool close = 4;
  inline bool has_close() const;
  inline void clear_close();
  static const int kCloseFieldNumber = 4;
  inline bool close() const;
  inline void set_close(bool value);
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_SendGenericToolTip)
 private:
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_text();
  inline void clear_has_text();
  inline void set_has_entindex();
  inline void clear_has_entindex();
  inline void set_has_close();
  inline void clear_has_close();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* title_;
  ::std::string* text_;
  ::google::protobuf::int32 entindex_;
  bool close_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_SendGenericToolTip* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_WorldLine : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_WorldLine();
  virtual ~CDOTAUserMsg_WorldLine();
  
  CDOTAUserMsg_WorldLine(const CDOTAUserMsg_WorldLine& from);
  
  inline CDOTAUserMsg_WorldLine& operator=(const CDOTAUserMsg_WorldLine& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_WorldLine& default_instance();
  
  void Swap(CDOTAUserMsg_WorldLine* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_WorldLine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_WorldLine& from);
  void MergeFrom(const CDOTAUserMsg_WorldLine& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);
  
  // optional .CDOTAMsg_WorldLine worldline = 2;
  inline bool has_worldline() const;
  inline void clear_worldline();
  static const int kWorldlineFieldNumber = 2;
  inline const ::CDOTAMsg_WorldLine& worldline() const;
  inline ::CDOTAMsg_WorldLine* mutable_worldline();
  inline ::CDOTAMsg_WorldLine* release_worldline();
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_WorldLine)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_worldline();
  inline void clear_has_worldline();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::CDOTAMsg_WorldLine* worldline_;
  ::google::protobuf::int32 player_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_WorldLine* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_TournamentDrop : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_TournamentDrop();
  virtual ~CDOTAUserMsg_TournamentDrop();
  
  CDOTAUserMsg_TournamentDrop(const CDOTAUserMsg_TournamentDrop& from);
  
  inline CDOTAUserMsg_TournamentDrop& operator=(const CDOTAUserMsg_TournamentDrop& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_TournamentDrop& default_instance();
  
  void Swap(CDOTAUserMsg_TournamentDrop* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_TournamentDrop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_TournamentDrop& from);
  void MergeFrom(const CDOTAUserMsg_TournamentDrop& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string winner_name = 1;
  inline bool has_winner_name() const;
  inline void clear_winner_name();
  static const int kWinnerNameFieldNumber = 1;
  inline const ::std::string& winner_name() const;
  inline void set_winner_name(const ::std::string& value);
  inline void set_winner_name(const char* value);
  inline void set_winner_name(const char* value, size_t size);
  inline ::std::string* mutable_winner_name();
  inline ::std::string* release_winner_name();
  
  // optional int32 event_type = 2;
  inline bool has_event_type() const;
  inline void clear_event_type();
  static const int kEventTypeFieldNumber = 2;
  inline ::google::protobuf::int32 event_type() const;
  inline void set_event_type(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_TournamentDrop)
 private:
  inline void set_has_winner_name();
  inline void clear_has_winner_name();
  inline void set_has_event_type();
  inline void clear_has_event_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* winner_name_;
  ::google::protobuf::int32 event_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_TournamentDrop* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_ChatWheel : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_ChatWheel();
  virtual ~CDOTAUserMsg_ChatWheel();
  
  CDOTAUserMsg_ChatWheel(const CDOTAUserMsg_ChatWheel& from);
  
  inline CDOTAUserMsg_ChatWheel& operator=(const CDOTAUserMsg_ChatWheel& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_ChatWheel& default_instance();
  
  void Swap(CDOTAUserMsg_ChatWheel* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_ChatWheel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_ChatWheel& from);
  void MergeFrom(const CDOTAUserMsg_ChatWheel& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .EDOTAChatWheelMessage chat_message = 1 [default = k_EDOTA_CW_Ok];
  inline bool has_chat_message() const;
  inline void clear_chat_message();
  static const int kChatMessageFieldNumber = 1;
  inline EDOTAChatWheelMessage chat_message() const;
  inline void set_chat_message(EDOTAChatWheelMessage value);
  
  // optional uint32 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::uint32 player_id() const;
  inline void set_player_id(::google::protobuf::uint32 value);
  
  // optional uint32 account_id = 3;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 3;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);
  
  // optional uint32 param_hero_id = 4;
  inline bool has_param_hero_id() const;
  inline void clear_param_hero_id();
  static const int kParamHeroIdFieldNumber = 4;
  inline ::google::protobuf::uint32 param_hero_id() const;
  inline void set_param_hero_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_ChatWheel)
 private:
  inline void set_has_chat_message();
  inline void clear_has_chat_message();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_param_hero_id();
  inline void clear_has_param_hero_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int chat_message_;
  ::google::protobuf::uint32 player_id_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 param_hero_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_ChatWheel* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_ReceivedXmasGift : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_ReceivedXmasGift();
  virtual ~CDOTAUserMsg_ReceivedXmasGift();
  
  CDOTAUserMsg_ReceivedXmasGift(const CDOTAUserMsg_ReceivedXmasGift& from);
  
  inline CDOTAUserMsg_ReceivedXmasGift& operator=(const CDOTAUserMsg_ReceivedXmasGift& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_ReceivedXmasGift& default_instance();
  
  void Swap(CDOTAUserMsg_ReceivedXmasGift* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_ReceivedXmasGift* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_ReceivedXmasGift& from);
  void MergeFrom(const CDOTAUserMsg_ReceivedXmasGift& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);
  
  // optional string item_name = 2;
  inline bool has_item_name() const;
  inline void clear_item_name();
  static const int kItemNameFieldNumber = 2;
  inline const ::std::string& item_name() const;
  inline void set_item_name(const ::std::string& value);
  inline void set_item_name(const char* value);
  inline void set_item_name(const char* value, size_t size);
  inline ::std::string* mutable_item_name();
  inline ::std::string* release_item_name();
  
  // optional int32 inventory_slot = 3;
  inline bool has_inventory_slot() const;
  inline void clear_inventory_slot();
  static const int kInventorySlotFieldNumber = 3;
  inline ::google::protobuf::int32 inventory_slot() const;
  inline void set_inventory_slot(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_ReceivedXmasGift)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_item_name();
  inline void clear_has_item_name();
  inline void set_has_inventory_slot();
  inline void clear_has_inventory_slot();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* item_name_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 inventory_slot_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_ReceivedXmasGift* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_ShowSurvey : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_ShowSurvey();
  virtual ~CDOTAUserMsg_ShowSurvey();
  
  CDOTAUserMsg_ShowSurvey(const CDOTAUserMsg_ShowSurvey& from);
  
  inline CDOTAUserMsg_ShowSurvey& operator=(const CDOTAUserMsg_ShowSurvey& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_ShowSurvey& default_instance();
  
  void Swap(CDOTAUserMsg_ShowSurvey* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_ShowSurvey* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_ShowSurvey& from);
  void MergeFrom(const CDOTAUserMsg_ShowSurvey& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 survey_id = 1;
  inline bool has_survey_id() const;
  inline void clear_survey_id();
  static const int kSurveyIdFieldNumber = 1;
  inline ::google::protobuf::int32 survey_id() const;
  inline void set_survey_id(::google::protobuf::int32 value);
  
  // optional uint32 match_id = 2;
  inline bool has_match_id() const;
  inline void clear_match_id();
  static const int kMatchIdFieldNumber = 2;
  inline ::google::protobuf::uint32 match_id() const;
  inline void set_match_id(::google::protobuf::uint32 value);
  
  // optional string response_style = 3;
  inline bool has_response_style() const;
  inline void clear_response_style();
  static const int kResponseStyleFieldNumber = 3;
  inline const ::std::string& response_style() const;
  inline void set_response_style(const ::std::string& value);
  inline void set_response_style(const char* value);
  inline void set_response_style(const char* value, size_t size);
  inline ::std::string* mutable_response_style();
  inline ::std::string* release_response_style();
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_ShowSurvey)
 private:
  inline void set_has_survey_id();
  inline void clear_has_survey_id();
  inline void set_has_match_id();
  inline void clear_has_match_id();
  inline void set_has_response_style();
  inline void clear_has_response_style();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 survey_id_;
  ::google::protobuf::uint32 match_id_;
  ::std::string* response_style_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_ShowSurvey* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_UpdateSharedContent : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_UpdateSharedContent();
  virtual ~CDOTAUserMsg_UpdateSharedContent();
  
  CDOTAUserMsg_UpdateSharedContent(const CDOTAUserMsg_UpdateSharedContent& from);
  
  inline CDOTAUserMsg_UpdateSharedContent& operator=(const CDOTAUserMsg_UpdateSharedContent& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_UpdateSharedContent& default_instance();
  
  void Swap(CDOTAUserMsg_UpdateSharedContent* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_UpdateSharedContent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_UpdateSharedContent& from);
  void MergeFrom(const CDOTAUserMsg_UpdateSharedContent& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 slot_type = 1;
  inline bool has_slot_type() const;
  inline void clear_slot_type();
  static const int kSlotTypeFieldNumber = 1;
  inline ::google::protobuf::int32 slot_type() const;
  inline void set_slot_type(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_UpdateSharedContent)
 private:
  inline void set_has_slot_type();
  inline void clear_has_slot_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 slot_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_UpdateSharedContent* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_TutorialRequestExp : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_TutorialRequestExp();
  virtual ~CDOTAUserMsg_TutorialRequestExp();
  
  CDOTAUserMsg_TutorialRequestExp(const CDOTAUserMsg_TutorialRequestExp& from);
  
  inline CDOTAUserMsg_TutorialRequestExp& operator=(const CDOTAUserMsg_TutorialRequestExp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_TutorialRequestExp& default_instance();
  
  void Swap(CDOTAUserMsg_TutorialRequestExp* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_TutorialRequestExp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_TutorialRequestExp& from);
  void MergeFrom(const CDOTAUserMsg_TutorialRequestExp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_TutorialRequestExp)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_TutorialRequestExp* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_TutorialFade : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_TutorialFade();
  virtual ~CDOTAUserMsg_TutorialFade();
  
  CDOTAUserMsg_TutorialFade(const CDOTAUserMsg_TutorialFade& from);
  
  inline CDOTAUserMsg_TutorialFade& operator=(const CDOTAUserMsg_TutorialFade& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_TutorialFade& default_instance();
  
  void Swap(CDOTAUserMsg_TutorialFade* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_TutorialFade* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_TutorialFade& from);
  void MergeFrom(const CDOTAUserMsg_TutorialFade& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 tgt_alpha = 1;
  inline bool has_tgt_alpha() const;
  inline void clear_tgt_alpha();
  static const int kTgtAlphaFieldNumber = 1;
  inline ::google::protobuf::int32 tgt_alpha() const;
  inline void set_tgt_alpha(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_TutorialFade)
 private:
  inline void set_has_tgt_alpha();
  inline void clear_has_tgt_alpha();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 tgt_alpha_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_TutorialFade* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_TutorialPingMinimap : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_TutorialPingMinimap();
  virtual ~CDOTAUserMsg_TutorialPingMinimap();
  
  CDOTAUserMsg_TutorialPingMinimap(const CDOTAUserMsg_TutorialPingMinimap& from);
  
  inline CDOTAUserMsg_TutorialPingMinimap& operator=(const CDOTAUserMsg_TutorialPingMinimap& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_TutorialPingMinimap& default_instance();
  
  void Swap(CDOTAUserMsg_TutorialPingMinimap* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_TutorialPingMinimap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_TutorialPingMinimap& from);
  void MergeFrom(const CDOTAUserMsg_TutorialPingMinimap& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 player_id() const;
  inline void set_player_id(::google::protobuf::uint32 value);
  
  // optional float pos_x = 2;
  inline bool has_pos_x() const;
  inline void clear_pos_x();
  static const int kPosXFieldNumber = 2;
  inline float pos_x() const;
  inline void set_pos_x(float value);
  
  // optional float pos_y = 3;
  inline bool has_pos_y() const;
  inline void clear_pos_y();
  static const int kPosYFieldNumber = 3;
  inline float pos_y() const;
  inline void set_pos_y(float value);
  
  // optional float pos_z = 4;
  inline bool has_pos_z() const;
  inline void clear_pos_z();
  static const int kPosZFieldNumber = 4;
  inline float pos_z() const;
  inline void set_pos_z(float value);
  
  // optional int32 entity_index = 5;
  inline bool has_entity_index() const;
  inline void clear_entity_index();
  static const int kEntityIndexFieldNumber = 5;
  inline ::google::protobuf::int32 entity_index() const;
  inline void set_entity_index(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_TutorialPingMinimap)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_pos_x();
  inline void clear_has_pos_x();
  inline void set_has_pos_y();
  inline void clear_has_pos_y();
  inline void set_has_pos_z();
  inline void clear_has_pos_z();
  inline void set_has_entity_index();
  inline void clear_has_entity_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 player_id_;
  float pos_x_;
  float pos_y_;
  float pos_z_;
  ::google::protobuf::int32 entity_index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_TutorialPingMinimap* default_instance_;
};
// -------------------------------------------------------------------

class CDOTA_UM_GamerulesStateChanged : public ::google::protobuf::Message {
 public:
  CDOTA_UM_GamerulesStateChanged();
  virtual ~CDOTA_UM_GamerulesStateChanged();
  
  CDOTA_UM_GamerulesStateChanged(const CDOTA_UM_GamerulesStateChanged& from);
  
  inline CDOTA_UM_GamerulesStateChanged& operator=(const CDOTA_UM_GamerulesStateChanged& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTA_UM_GamerulesStateChanged& default_instance();
  
  void Swap(CDOTA_UM_GamerulesStateChanged* other);
  
  // implements Message ----------------------------------------------
  
  CDOTA_UM_GamerulesStateChanged* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTA_UM_GamerulesStateChanged& from);
  void MergeFrom(const CDOTA_UM_GamerulesStateChanged& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 state = 1;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CDOTA_UM_GamerulesStateChanged)
 private:
  inline void set_has_state();
  inline void clear_has_state();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 state_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTA_UM_GamerulesStateChanged* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_AddQuestLogEntry : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_AddQuestLogEntry();
  virtual ~CDOTAUserMsg_AddQuestLogEntry();
  
  CDOTAUserMsg_AddQuestLogEntry(const CDOTAUserMsg_AddQuestLogEntry& from);
  
  inline CDOTAUserMsg_AddQuestLogEntry& operator=(const CDOTAUserMsg_AddQuestLogEntry& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_AddQuestLogEntry& default_instance();
  
  void Swap(CDOTAUserMsg_AddQuestLogEntry* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_AddQuestLogEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_AddQuestLogEntry& from);
  void MergeFrom(const CDOTAUserMsg_AddQuestLogEntry& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string npc_name = 1;
  inline bool has_npc_name() const;
  inline void clear_npc_name();
  static const int kNpcNameFieldNumber = 1;
  inline const ::std::string& npc_name() const;
  inline void set_npc_name(const ::std::string& value);
  inline void set_npc_name(const char* value);
  inline void set_npc_name(const char* value, size_t size);
  inline ::std::string* mutable_npc_name();
  inline ::std::string* release_npc_name();
  
  // optional string npc_dialog = 2;
  inline bool has_npc_dialog() const;
  inline void clear_npc_dialog();
  static const int kNpcDialogFieldNumber = 2;
  inline const ::std::string& npc_dialog() const;
  inline void set_npc_dialog(const ::std::string& value);
  inline void set_npc_dialog(const char* value);
  inline void set_npc_dialog(const char* value, size_t size);
  inline ::std::string* mutable_npc_dialog();
  inline ::std::string* release_npc_dialog();
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_AddQuestLogEntry)
 private:
  inline void set_has_npc_name();
  inline void clear_has_npc_name();
  inline void set_has_npc_dialog();
  inline void clear_has_npc_dialog();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* npc_name_;
  ::std::string* npc_dialog_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_AddQuestLogEntry* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_SendStatPopup : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_SendStatPopup();
  virtual ~CDOTAUserMsg_SendStatPopup();
  
  CDOTAUserMsg_SendStatPopup(const CDOTAUserMsg_SendStatPopup& from);
  
  inline CDOTAUserMsg_SendStatPopup& operator=(const CDOTAUserMsg_SendStatPopup& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_SendStatPopup& default_instance();
  
  void Swap(CDOTAUserMsg_SendStatPopup* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_SendStatPopup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_SendStatPopup& from);
  void MergeFrom(const CDOTAUserMsg_SendStatPopup& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);
  
  // optional .CDOTAMsg_SendStatPopup statpopup = 2;
  inline bool has_statpopup() const;
  inline void clear_statpopup();
  static const int kStatpopupFieldNumber = 2;
  inline const ::CDOTAMsg_SendStatPopup& statpopup() const;
  inline ::CDOTAMsg_SendStatPopup* mutable_statpopup();
  inline ::CDOTAMsg_SendStatPopup* release_statpopup();
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_SendStatPopup)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_statpopup();
  inline void clear_has_statpopup();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::CDOTAMsg_SendStatPopup* statpopup_;
  ::google::protobuf::int32 player_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_SendStatPopup* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_SendRoshanPopup : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_SendRoshanPopup();
  virtual ~CDOTAUserMsg_SendRoshanPopup();
  
  CDOTAUserMsg_SendRoshanPopup(const CDOTAUserMsg_SendRoshanPopup& from);
  
  inline CDOTAUserMsg_SendRoshanPopup& operator=(const CDOTAUserMsg_SendRoshanPopup& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_SendRoshanPopup& default_instance();
  
  void Swap(CDOTAUserMsg_SendRoshanPopup* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_SendRoshanPopup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_SendRoshanPopup& from);
  void MergeFrom(const CDOTAUserMsg_SendRoshanPopup& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool reclaimed = 1;
  inline bool has_reclaimed() const;
  inline void clear_reclaimed();
  static const int kReclaimedFieldNumber = 1;
  inline bool reclaimed() const;
  inline void set_reclaimed(bool value);
  
  // optional int32 gametime = 2;
  inline bool has_gametime() const;
  inline void clear_gametime();
  static const int kGametimeFieldNumber = 2;
  inline ::google::protobuf::int32 gametime() const;
  inline void set_gametime(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_SendRoshanPopup)
 private:
  inline void set_has_reclaimed();
  inline void clear_has_reclaimed();
  inline void set_has_gametime();
  inline void clear_has_gametime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool reclaimed_;
  ::google::protobuf::int32 gametime_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_SendRoshanPopup* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_SendFinalGold : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_SendFinalGold();
  virtual ~CDOTAUserMsg_SendFinalGold();
  
  CDOTAUserMsg_SendFinalGold(const CDOTAUserMsg_SendFinalGold& from);
  
  inline CDOTAUserMsg_SendFinalGold& operator=(const CDOTAUserMsg_SendFinalGold& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_SendFinalGold& default_instance();
  
  void Swap(CDOTAUserMsg_SendFinalGold* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_SendFinalGold* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_SendFinalGold& from);
  void MergeFrom(const CDOTAUserMsg_SendFinalGold& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated uint32 reliable_gold = 1;
  inline int reliable_gold_size() const;
  inline void clear_reliable_gold();
  static const int kReliableGoldFieldNumber = 1;
  inline ::google::protobuf::uint32 reliable_gold(int index) const;
  inline void set_reliable_gold(int index, ::google::protobuf::uint32 value);
  inline void add_reliable_gold(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      reliable_gold() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_reliable_gold();
  
  // repeated uint32 unreliable_gold = 2;
  inline int unreliable_gold_size() const;
  inline void clear_unreliable_gold();
  static const int kUnreliableGoldFieldNumber = 2;
  inline ::google::protobuf::uint32 unreliable_gold(int index) const;
  inline void set_unreliable_gold(int index, ::google::protobuf::uint32 value);
  inline void add_unreliable_gold(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      unreliable_gold() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_unreliable_gold();
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_SendFinalGold)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > reliable_gold_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > unreliable_gold_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_SendFinalGold* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_CustomMsg : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_CustomMsg();
  virtual ~CDOTAUserMsg_CustomMsg();
  
  CDOTAUserMsg_CustomMsg(const CDOTAUserMsg_CustomMsg& from);
  
  inline CDOTAUserMsg_CustomMsg& operator=(const CDOTAUserMsg_CustomMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_CustomMsg& default_instance();
  
  void Swap(CDOTAUserMsg_CustomMsg* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_CustomMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_CustomMsg& from);
  void MergeFrom(const CDOTAUserMsg_CustomMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string message = 1;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 1;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  
  // optional int32 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);
  
  // optional int32 value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_CustomMsg)
 private:
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* message_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_CustomMsg* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_CoachHUDPing : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_CoachHUDPing();
  virtual ~CDOTAUserMsg_CoachHUDPing();
  
  CDOTAUserMsg_CoachHUDPing(const CDOTAUserMsg_CoachHUDPing& from);
  
  inline CDOTAUserMsg_CoachHUDPing& operator=(const CDOTAUserMsg_CoachHUDPing& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_CoachHUDPing& default_instance();
  
  void Swap(CDOTAUserMsg_CoachHUDPing* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_CoachHUDPing* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_CoachHUDPing& from);
  void MergeFrom(const CDOTAUserMsg_CoachHUDPing& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 player_id() const;
  inline void set_player_id(::google::protobuf::uint32 value);
  
  // optional .CDOTAMsg_CoachHUDPing hud_ping = 2;
  inline bool has_hud_ping() const;
  inline void clear_hud_ping();
  static const int kHudPingFieldNumber = 2;
  inline const ::CDOTAMsg_CoachHUDPing& hud_ping() const;
  inline ::CDOTAMsg_CoachHUDPing* mutable_hud_ping();
  inline ::CDOTAMsg_CoachHUDPing* release_hud_ping();
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_CoachHUDPing)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_hud_ping();
  inline void clear_has_hud_ping();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::CDOTAMsg_CoachHUDPing* hud_ping_;
  ::google::protobuf::uint32 player_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_CoachHUDPing* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_ClientLoadGridNav : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_ClientLoadGridNav();
  virtual ~CDOTAUserMsg_ClientLoadGridNav();
  
  CDOTAUserMsg_ClientLoadGridNav(const CDOTAUserMsg_ClientLoadGridNav& from);
  
  inline CDOTAUserMsg_ClientLoadGridNav& operator=(const CDOTAUserMsg_ClientLoadGridNav& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_ClientLoadGridNav& default_instance();
  
  void Swap(CDOTAUserMsg_ClientLoadGridNav* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_ClientLoadGridNav* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_ClientLoadGridNav& from);
  void MergeFrom(const CDOTAUserMsg_ClientLoadGridNav& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_ClientLoadGridNav)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_ClientLoadGridNav* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_AbilityPing : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_AbilityPing();
  virtual ~CDOTAUserMsg_AbilityPing();
  
  CDOTAUserMsg_AbilityPing(const CDOTAUserMsg_AbilityPing& from);
  
  inline CDOTAUserMsg_AbilityPing& operator=(const CDOTAUserMsg_AbilityPing& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_AbilityPing& default_instance();
  
  void Swap(CDOTAUserMsg_AbilityPing* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_AbilityPing* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_AbilityPing& from);
  void MergeFrom(const CDOTAUserMsg_AbilityPing& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 player_id() const;
  inline void set_player_id(::google::protobuf::uint32 value);
  
  // optional uint32 ability_id = 2;
  inline bool has_ability_id() const;
  inline void clear_ability_id();
  static const int kAbilityIdFieldNumber = 2;
  inline ::google::protobuf::uint32 ability_id() const;
  inline void set_ability_id(::google::protobuf::uint32 value);
  
  // optional .DOTA_ABILITY_PING_TYPE type = 3 [default = ABILITY_PING_READY];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline DOTA_ABILITY_PING_TYPE type() const;
  inline void set_type(DOTA_ABILITY_PING_TYPE value);
  
  // optional uint32 cooldown_seconds = 4;
  inline bool has_cooldown_seconds() const;
  inline void clear_cooldown_seconds();
  static const int kCooldownSecondsFieldNumber = 4;
  inline ::google::protobuf::uint32 cooldown_seconds() const;
  inline void set_cooldown_seconds(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_AbilityPing)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_ability_id();
  inline void clear_has_ability_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_cooldown_seconds();
  inline void clear_has_cooldown_seconds();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 player_id_;
  ::google::protobuf::uint32 ability_id_;
  int type_;
  ::google::protobuf::uint32 cooldown_seconds_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_AbilityPing* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_ShowGenericPopup : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_ShowGenericPopup();
  virtual ~CDOTAUserMsg_ShowGenericPopup();
  
  CDOTAUserMsg_ShowGenericPopup(const CDOTAUserMsg_ShowGenericPopup& from);
  
  inline CDOTAUserMsg_ShowGenericPopup& operator=(const CDOTAUserMsg_ShowGenericPopup& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_ShowGenericPopup& default_instance();
  
  void Swap(CDOTAUserMsg_ShowGenericPopup* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_ShowGenericPopup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_ShowGenericPopup& from);
  void MergeFrom(const CDOTAUserMsg_ShowGenericPopup& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::std::string& header() const;
  inline void set_header(const ::std::string& value);
  inline void set_header(const char* value);
  inline void set_header(const char* value, size_t size);
  inline ::std::string* mutable_header();
  inline ::std::string* release_header();
  
  // required string body = 2;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 2;
  inline const ::std::string& body() const;
  inline void set_body(const ::std::string& value);
  inline void set_body(const char* value);
  inline void set_body(const char* value, size_t size);
  inline ::std::string* mutable_body();
  inline ::std::string* release_body();
  
  // optional string param1 = 3;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 3;
  inline const ::std::string& param1() const;
  inline void set_param1(const ::std::string& value);
  inline void set_param1(const char* value);
  inline void set_param1(const char* value, size_t size);
  inline ::std::string* mutable_param1();
  inline ::std::string* release_param1();
  
  // optional string param2 = 4;
  inline bool has_param2() const;
  inline void clear_param2();
  static const int kParam2FieldNumber = 4;
  inline const ::std::string& param2() const;
  inline void set_param2(const ::std::string& value);
  inline void set_param2(const char* value);
  inline void set_param2(const char* value, size_t size);
  inline ::std::string* mutable_param2();
  inline ::std::string* release_param2();
  
  // optional bool tint_screen = 5;
  inline bool has_tint_screen() const;
  inline void clear_tint_screen();
  static const int kTintScreenFieldNumber = 5;
  inline bool tint_screen() const;
  inline void set_tint_screen(bool value);
  
  // optional bool show_no_other_dialogs = 6;
  inline bool has_show_no_other_dialogs() const;
  inline void clear_show_no_other_dialogs();
  static const int kShowNoOtherDialogsFieldNumber = 6;
  inline bool show_no_other_dialogs() const;
  inline void set_show_no_other_dialogs(bool value);
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_ShowGenericPopup)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_body();
  inline void clear_has_body();
  inline void set_has_param1();
  inline void clear_has_param1();
  inline void set_has_param2();
  inline void clear_has_param2();
  inline void set_has_tint_screen();
  inline void clear_has_tint_screen();
  inline void set_has_show_no_other_dialogs();
  inline void clear_has_show_no_other_dialogs();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* header_;
  ::std::string* body_;
  ::std::string* param1_;
  ::std::string* param2_;
  bool tint_screen_;
  bool show_no_other_dialogs_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_ShowGenericPopup* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_VoteStart : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_VoteStart();
  virtual ~CDOTAUserMsg_VoteStart();
  
  CDOTAUserMsg_VoteStart(const CDOTAUserMsg_VoteStart& from);
  
  inline CDOTAUserMsg_VoteStart& operator=(const CDOTAUserMsg_VoteStart& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_VoteStart& default_instance();
  
  void Swap(CDOTAUserMsg_VoteStart* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_VoteStart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_VoteStart& from);
  void MergeFrom(const CDOTAUserMsg_VoteStart& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string title = 1;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 1;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  
  // optional float duration = 2;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 2;
  inline float duration() const;
  inline void set_duration(float value);
  
  // optional int32 choice_count = 3;
  inline bool has_choice_count() const;
  inline void clear_choice_count();
  static const int kChoiceCountFieldNumber = 3;
  inline ::google::protobuf::int32 choice_count() const;
  inline void set_choice_count(::google::protobuf::int32 value);
  
  // repeated string choices = 4;
  inline int choices_size() const;
  inline void clear_choices();
  static const int kChoicesFieldNumber = 4;
  inline const ::std::string& choices(int index) const;
  inline ::std::string* mutable_choices(int index);
  inline void set_choices(int index, const ::std::string& value);
  inline void set_choices(int index, const char* value);
  inline void set_choices(int index, const char* value, size_t size);
  inline ::std::string* add_choices();
  inline void add_choices(const ::std::string& value);
  inline void add_choices(const char* value);
  inline void add_choices(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& choices() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_choices();
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_VoteStart)
 private:
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_choice_count();
  inline void clear_has_choice_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* title_;
  float duration_;
  ::google::protobuf::int32 choice_count_;
  ::google::protobuf::RepeatedPtrField< ::std::string> choices_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_VoteStart* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_VoteUpdate : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_VoteUpdate();
  virtual ~CDOTAUserMsg_VoteUpdate();
  
  CDOTAUserMsg_VoteUpdate(const CDOTAUserMsg_VoteUpdate& from);
  
  inline CDOTAUserMsg_VoteUpdate& operator=(const CDOTAUserMsg_VoteUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_VoteUpdate& default_instance();
  
  void Swap(CDOTAUserMsg_VoteUpdate* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_VoteUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_VoteUpdate& from);
  void MergeFrom(const CDOTAUserMsg_VoteUpdate& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated int32 choice_counts = 1;
  inline int choice_counts_size() const;
  inline void clear_choice_counts();
  static const int kChoiceCountsFieldNumber = 1;
  inline ::google::protobuf::int32 choice_counts(int index) const;
  inline void set_choice_counts(int index, ::google::protobuf::int32 value);
  inline void add_choice_counts(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      choice_counts() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_choice_counts();
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_VoteUpdate)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > choice_counts_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_VoteUpdate* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_VoteEnd : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_VoteEnd();
  virtual ~CDOTAUserMsg_VoteEnd();
  
  CDOTAUserMsg_VoteEnd(const CDOTAUserMsg_VoteEnd& from);
  
  inline CDOTAUserMsg_VoteEnd& operator=(const CDOTAUserMsg_VoteEnd& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_VoteEnd& default_instance();
  
  void Swap(CDOTAUserMsg_VoteEnd* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_VoteEnd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_VoteEnd& from);
  void MergeFrom(const CDOTAUserMsg_VoteEnd& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 selected_choice = 1;
  inline bool has_selected_choice() const;
  inline void clear_selected_choice();
  static const int kSelectedChoiceFieldNumber = 1;
  inline ::google::protobuf::int32 selected_choice() const;
  inline void set_selected_choice(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_VoteEnd)
 private:
  inline void set_has_selected_choice();
  inline void clear_has_selected_choice();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 selected_choice_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_VoteEnd* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_BoosterStatePlayer : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_BoosterStatePlayer();
  virtual ~CDOTAUserMsg_BoosterStatePlayer();
  
  CDOTAUserMsg_BoosterStatePlayer(const CDOTAUserMsg_BoosterStatePlayer& from);
  
  inline CDOTAUserMsg_BoosterStatePlayer& operator=(const CDOTAUserMsg_BoosterStatePlayer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_BoosterStatePlayer& default_instance();
  
  void Swap(CDOTAUserMsg_BoosterStatePlayer* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_BoosterStatePlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_BoosterStatePlayer& from);
  void MergeFrom(const CDOTAUserMsg_BoosterStatePlayer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 player_id() const;
  inline void set_player_id(::google::protobuf::uint32 value);
  
  // optional float bonus = 2;
  inline bool has_bonus() const;
  inline void clear_bonus();
  static const int kBonusFieldNumber = 2;
  inline float bonus() const;
  inline void set_bonus(float value);
  
  // optional float event_bonus = 3;
  inline bool has_event_bonus() const;
  inline void clear_event_bonus();
  static const int kEventBonusFieldNumber = 3;
  inline float event_bonus() const;
  inline void set_event_bonus(float value);
  
  // optional uint32 bonus_item_id = 4;
  inline bool has_bonus_item_id() const;
  inline void clear_bonus_item_id();
  static const int kBonusItemIdFieldNumber = 4;
  inline ::google::protobuf::uint32 bonus_item_id() const;
  inline void set_bonus_item_id(::google::protobuf::uint32 value);
  
  // optional uint32 event_bonus_item_id = 5;
  inline bool has_event_bonus_item_id() const;
  inline void clear_event_bonus_item_id();
  static const int kEventBonusItemIdFieldNumber = 5;
  inline ::google::protobuf::uint32 event_bonus_item_id() const;
  inline void set_event_bonus_item_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_BoosterStatePlayer)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_bonus();
  inline void clear_has_bonus();
  inline void set_has_event_bonus();
  inline void clear_has_event_bonus();
  inline void set_has_bonus_item_id();
  inline void clear_has_bonus_item_id();
  inline void set_has_event_bonus_item_id();
  inline void clear_has_event_bonus_item_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 player_id_;
  float bonus_;
  float event_bonus_;
  ::google::protobuf::uint32 bonus_item_id_;
  ::google::protobuf::uint32 event_bonus_item_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_BoosterStatePlayer* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_BoosterState : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_BoosterState();
  virtual ~CDOTAUserMsg_BoosterState();
  
  CDOTAUserMsg_BoosterState(const CDOTAUserMsg_BoosterState& from);
  
  inline CDOTAUserMsg_BoosterState& operator=(const CDOTAUserMsg_BoosterState& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_BoosterState& default_instance();
  
  void Swap(CDOTAUserMsg_BoosterState* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_BoosterState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_BoosterState& from);
  void MergeFrom(const CDOTAUserMsg_BoosterState& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .CDOTAUserMsg_BoosterStatePlayer boosted_players = 1;
  inline int boosted_players_size() const;
  inline void clear_boosted_players();
  static const int kBoostedPlayersFieldNumber = 1;
  inline const ::CDOTAUserMsg_BoosterStatePlayer& boosted_players(int index) const;
  inline ::CDOTAUserMsg_BoosterStatePlayer* mutable_boosted_players(int index);
  inline ::CDOTAUserMsg_BoosterStatePlayer* add_boosted_players();
  inline const ::google::protobuf::RepeatedPtrField< ::CDOTAUserMsg_BoosterStatePlayer >&
      boosted_players() const;
  inline ::google::protobuf::RepeatedPtrField< ::CDOTAUserMsg_BoosterStatePlayer >*
      mutable_boosted_players();
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_BoosterState)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::CDOTAUserMsg_BoosterStatePlayer > boosted_players_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_BoosterState* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_PlayerMMR : public ::google::protobuf::Message {
 public:
  CDOTAUserMsg_PlayerMMR();
  virtual ~CDOTAUserMsg_PlayerMMR();
  
  CDOTAUserMsg_PlayerMMR(const CDOTAUserMsg_PlayerMMR& from);
  
  inline CDOTAUserMsg_PlayerMMR& operator=(const CDOTAUserMsg_PlayerMMR& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAUserMsg_PlayerMMR& default_instance();
  
  void Swap(CDOTAUserMsg_PlayerMMR* other);
  
  // implements Message ----------------------------------------------
  
  CDOTAUserMsg_PlayerMMR* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAUserMsg_PlayerMMR& from);
  void MergeFrom(const CDOTAUserMsg_PlayerMMR& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated sint32 mmr = 1 [packed = true];
  inline int mmr_size() const;
  inline void clear_mmr();
  static const int kMmrFieldNumber = 1;
  inline ::google::protobuf::int32 mmr(int index) const;
  inline void set_mmr(int index, ::google::protobuf::int32 value);
  inline void add_mmr(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      mmr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_mmr();
  
  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_PlayerMMR)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > mmr_;
  mutable int _mmr_cached_byte_size_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fusermessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fusermessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fusermessages_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTAUserMsg_PlayerMMR* default_instance_;
};
// ===================================================================


// ===================================================================

// CDOTAUserMsg_AIDebugLine

// optional string message = 1;
inline bool CDOTAUserMsg_AIDebugLine::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_AIDebugLine::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_AIDebugLine::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_AIDebugLine::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& CDOTAUserMsg_AIDebugLine::message() const {
  return *message_;
}
inline void CDOTAUserMsg_AIDebugLine::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void CDOTAUserMsg_AIDebugLine::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void CDOTAUserMsg_AIDebugLine::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDOTAUserMsg_AIDebugLine::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* CDOTAUserMsg_AIDebugLine::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CDOTAUserMsg_Ping

// optional string message = 1;
inline bool CDOTAUserMsg_Ping::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_Ping::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_Ping::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_Ping::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& CDOTAUserMsg_Ping::message() const {
  return *message_;
}
inline void CDOTAUserMsg_Ping::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void CDOTAUserMsg_Ping::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void CDOTAUserMsg_Ping::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDOTAUserMsg_Ping::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* CDOTAUserMsg_Ping::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CDOTAUserMsg_SwapVerify

// optional uint32 player_id = 1;
inline bool CDOTAUserMsg_SwapVerify::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_SwapVerify::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_SwapVerify::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_SwapVerify::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
inline ::google::protobuf::uint32 CDOTAUserMsg_SwapVerify::player_id() const {
  return player_id_;
}
inline void CDOTAUserMsg_SwapVerify::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_ChatEvent

// required .DOTA_CHAT_MESSAGE type = 1 [default = CHAT_MESSAGE_INVALID];
inline bool CDOTAUserMsg_ChatEvent::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_ChatEvent::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_ChatEvent::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_ChatEvent::clear_type() {
  type_ = -1;
  clear_has_type();
}
inline DOTA_CHAT_MESSAGE CDOTAUserMsg_ChatEvent::type() const {
  return static_cast< DOTA_CHAT_MESSAGE >(type_);
}
inline void CDOTAUserMsg_ChatEvent::set_type(DOTA_CHAT_MESSAGE value) {
  GOOGLE_DCHECK(DOTA_CHAT_MESSAGE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint32 value = 2;
inline bool CDOTAUserMsg_ChatEvent::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_ChatEvent::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_ChatEvent::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_ChatEvent::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 CDOTAUserMsg_ChatEvent::value() const {
  return value_;
}
inline void CDOTAUserMsg_ChatEvent::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
}

// optional sint32 playerid_1 = 3 [default = -1];
inline bool CDOTAUserMsg_ChatEvent::has_playerid_1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAUserMsg_ChatEvent::set_has_playerid_1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTAUserMsg_ChatEvent::clear_has_playerid_1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTAUserMsg_ChatEvent::clear_playerid_1() {
  playerid_1_ = -1;
  clear_has_playerid_1();
}
inline ::google::protobuf::int32 CDOTAUserMsg_ChatEvent::playerid_1() const {
  return playerid_1_;
}
inline void CDOTAUserMsg_ChatEvent::set_playerid_1(::google::protobuf::int32 value) {
  set_has_playerid_1();
  playerid_1_ = value;
}

// optional sint32 playerid_2 = 4 [default = -1];
inline bool CDOTAUserMsg_ChatEvent::has_playerid_2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTAUserMsg_ChatEvent::set_has_playerid_2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDOTAUserMsg_ChatEvent::clear_has_playerid_2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDOTAUserMsg_ChatEvent::clear_playerid_2() {
  playerid_2_ = -1;
  clear_has_playerid_2();
}
inline ::google::protobuf::int32 CDOTAUserMsg_ChatEvent::playerid_2() const {
  return playerid_2_;
}
inline void CDOTAUserMsg_ChatEvent::set_playerid_2(::google::protobuf::int32 value) {
  set_has_playerid_2();
  playerid_2_ = value;
}

// optional sint32 playerid_3 = 5 [default = -1];
inline bool CDOTAUserMsg_ChatEvent::has_playerid_3() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDOTAUserMsg_ChatEvent::set_has_playerid_3() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CDOTAUserMsg_ChatEvent::clear_has_playerid_3() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CDOTAUserMsg_ChatEvent::clear_playerid_3() {
  playerid_3_ = -1;
  clear_has_playerid_3();
}
inline ::google::protobuf::int32 CDOTAUserMsg_ChatEvent::playerid_3() const {
  return playerid_3_;
}
inline void CDOTAUserMsg_ChatEvent::set_playerid_3(::google::protobuf::int32 value) {
  set_has_playerid_3();
  playerid_3_ = value;
}

// optional sint32 playerid_4 = 6 [default = -1];
inline bool CDOTAUserMsg_ChatEvent::has_playerid_4() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CDOTAUserMsg_ChatEvent::set_has_playerid_4() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CDOTAUserMsg_ChatEvent::clear_has_playerid_4() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CDOTAUserMsg_ChatEvent::clear_playerid_4() {
  playerid_4_ = -1;
  clear_has_playerid_4();
}
inline ::google::protobuf::int32 CDOTAUserMsg_ChatEvent::playerid_4() const {
  return playerid_4_;
}
inline void CDOTAUserMsg_ChatEvent::set_playerid_4(::google::protobuf::int32 value) {
  set_has_playerid_4();
  playerid_4_ = value;
}

// optional sint32 playerid_5 = 7 [default = -1];
inline bool CDOTAUserMsg_ChatEvent::has_playerid_5() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CDOTAUserMsg_ChatEvent::set_has_playerid_5() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CDOTAUserMsg_ChatEvent::clear_has_playerid_5() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CDOTAUserMsg_ChatEvent::clear_playerid_5() {
  playerid_5_ = -1;
  clear_has_playerid_5();
}
inline ::google::protobuf::int32 CDOTAUserMsg_ChatEvent::playerid_5() const {
  return playerid_5_;
}
inline void CDOTAUserMsg_ChatEvent::set_playerid_5(::google::protobuf::int32 value) {
  set_has_playerid_5();
  playerid_5_ = value;
}

// optional sint32 playerid_6 = 8 [default = -1];
inline bool CDOTAUserMsg_ChatEvent::has_playerid_6() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CDOTAUserMsg_ChatEvent::set_has_playerid_6() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CDOTAUserMsg_ChatEvent::clear_has_playerid_6() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CDOTAUserMsg_ChatEvent::clear_playerid_6() {
  playerid_6_ = -1;
  clear_has_playerid_6();
}
inline ::google::protobuf::int32 CDOTAUserMsg_ChatEvent::playerid_6() const {
  return playerid_6_;
}
inline void CDOTAUserMsg_ChatEvent::set_playerid_6(::google::protobuf::int32 value) {
  set_has_playerid_6();
  playerid_6_ = value;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_CombatLogData

// optional .DOTA_COMBATLOG_TYPES type = 1 [default = DOTA_COMBATLOG_DAMAGE];
inline bool CDOTAUserMsg_CombatLogData::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_CombatLogData::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_CombatLogData::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_CombatLogData::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline DOTA_COMBATLOG_TYPES CDOTAUserMsg_CombatLogData::type() const {
  return static_cast< DOTA_COMBATLOG_TYPES >(type_);
}
inline void CDOTAUserMsg_CombatLogData::set_type(DOTA_COMBATLOG_TYPES value) {
  GOOGLE_DCHECK(DOTA_COMBATLOG_TYPES_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint32 target_name = 2;
inline bool CDOTAUserMsg_CombatLogData::has_target_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_CombatLogData::set_has_target_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_CombatLogData::clear_has_target_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_CombatLogData::clear_target_name() {
  target_name_ = 0u;
  clear_has_target_name();
}
inline ::google::protobuf::uint32 CDOTAUserMsg_CombatLogData::target_name() const {
  return target_name_;
}
inline void CDOTAUserMsg_CombatLogData::set_target_name(::google::protobuf::uint32 value) {
  set_has_target_name();
  target_name_ = value;
}

// optional uint32 attacker_name = 3;
inline bool CDOTAUserMsg_CombatLogData::has_attacker_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAUserMsg_CombatLogData::set_has_attacker_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTAUserMsg_CombatLogData::clear_has_attacker_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTAUserMsg_CombatLogData::clear_attacker_name() {
  attacker_name_ = 0u;
  clear_has_attacker_name();
}
inline ::google::protobuf::uint32 CDOTAUserMsg_CombatLogData::attacker_name() const {
  return attacker_name_;
}
inline void CDOTAUserMsg_CombatLogData::set_attacker_name(::google::protobuf::uint32 value) {
  set_has_attacker_name();
  attacker_name_ = value;
}

// optional bool attacker_illusion = 4;
inline bool CDOTAUserMsg_CombatLogData::has_attacker_illusion() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTAUserMsg_CombatLogData::set_has_attacker_illusion() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDOTAUserMsg_CombatLogData::clear_has_attacker_illusion() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDOTAUserMsg_CombatLogData::clear_attacker_illusion() {
  attacker_illusion_ = false;
  clear_has_attacker_illusion();
}
inline bool CDOTAUserMsg_CombatLogData::attacker_illusion() const {
  return attacker_illusion_;
}
inline void CDOTAUserMsg_CombatLogData::set_attacker_illusion(bool value) {
  set_has_attacker_illusion();
  attacker_illusion_ = value;
}

// optional bool target_illusion = 5;
inline bool CDOTAUserMsg_CombatLogData::has_target_illusion() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDOTAUserMsg_CombatLogData::set_has_target_illusion() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CDOTAUserMsg_CombatLogData::clear_has_target_illusion() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CDOTAUserMsg_CombatLogData::clear_target_illusion() {
  target_illusion_ = false;
  clear_has_target_illusion();
}
inline bool CDOTAUserMsg_CombatLogData::target_illusion() const {
  return target_illusion_;
}
inline void CDOTAUserMsg_CombatLogData::set_target_illusion(bool value) {
  set_has_target_illusion();
  target_illusion_ = value;
}

// optional uint32 inflictor_name = 6;
inline bool CDOTAUserMsg_CombatLogData::has_inflictor_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CDOTAUserMsg_CombatLogData::set_has_inflictor_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CDOTAUserMsg_CombatLogData::clear_has_inflictor_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CDOTAUserMsg_CombatLogData::clear_inflictor_name() {
  inflictor_name_ = 0u;
  clear_has_inflictor_name();
}
inline ::google::protobuf::uint32 CDOTAUserMsg_CombatLogData::inflictor_name() const {
  return inflictor_name_;
}
inline void CDOTAUserMsg_CombatLogData::set_inflictor_name(::google::protobuf::uint32 value) {
  set_has_inflictor_name();
  inflictor_name_ = value;
}

// optional int32 value = 7;
inline bool CDOTAUserMsg_CombatLogData::has_value() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CDOTAUserMsg_CombatLogData::set_has_value() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CDOTAUserMsg_CombatLogData::clear_has_value() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CDOTAUserMsg_CombatLogData::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 CDOTAUserMsg_CombatLogData::value() const {
  return value_;
}
inline void CDOTAUserMsg_CombatLogData::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// optional int32 health = 8;
inline bool CDOTAUserMsg_CombatLogData::has_health() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CDOTAUserMsg_CombatLogData::set_has_health() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CDOTAUserMsg_CombatLogData::clear_has_health() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CDOTAUserMsg_CombatLogData::clear_health() {
  health_ = 0;
  clear_has_health();
}
inline ::google::protobuf::int32 CDOTAUserMsg_CombatLogData::health() const {
  return health_;
}
inline void CDOTAUserMsg_CombatLogData::set_health(::google::protobuf::int32 value) {
  set_has_health();
  health_ = value;
}

// optional float time = 9;
inline bool CDOTAUserMsg_CombatLogData::has_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CDOTAUserMsg_CombatLogData::set_has_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CDOTAUserMsg_CombatLogData::clear_has_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CDOTAUserMsg_CombatLogData::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline float CDOTAUserMsg_CombatLogData::time() const {
  return time_;
}
inline void CDOTAUserMsg_CombatLogData::set_time(float value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_CombatLogShowDeath

// -------------------------------------------------------------------

// CDOTAUserMsg_BotChat

// optional uint32 player_id = 1;
inline bool CDOTAUserMsg_BotChat::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_BotChat::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_BotChat::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_BotChat::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
inline ::google::protobuf::uint32 CDOTAUserMsg_BotChat::player_id() const {
  return player_id_;
}
inline void CDOTAUserMsg_BotChat::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional string format = 2;
inline bool CDOTAUserMsg_BotChat::has_format() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_BotChat::set_has_format() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_BotChat::clear_has_format() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_BotChat::clear_format() {
  if (format_ != &::google::protobuf::internal::kEmptyString) {
    format_->clear();
  }
  clear_has_format();
}
inline const ::std::string& CDOTAUserMsg_BotChat::format() const {
  return *format_;
}
inline void CDOTAUserMsg_BotChat::set_format(const ::std::string& value) {
  set_has_format();
  if (format_ == &::google::protobuf::internal::kEmptyString) {
    format_ = new ::std::string;
  }
  format_->assign(value);
}
inline void CDOTAUserMsg_BotChat::set_format(const char* value) {
  set_has_format();
  if (format_ == &::google::protobuf::internal::kEmptyString) {
    format_ = new ::std::string;
  }
  format_->assign(value);
}
inline void CDOTAUserMsg_BotChat::set_format(const char* value, size_t size) {
  set_has_format();
  if (format_ == &::google::protobuf::internal::kEmptyString) {
    format_ = new ::std::string;
  }
  format_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDOTAUserMsg_BotChat::mutable_format() {
  set_has_format();
  if (format_ == &::google::protobuf::internal::kEmptyString) {
    format_ = new ::std::string;
  }
  return format_;
}
inline ::std::string* CDOTAUserMsg_BotChat::release_format() {
  clear_has_format();
  if (format_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = format_;
    format_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string message = 3;
inline bool CDOTAUserMsg_BotChat::has_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAUserMsg_BotChat::set_has_message() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTAUserMsg_BotChat::clear_has_message() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTAUserMsg_BotChat::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& CDOTAUserMsg_BotChat::message() const {
  return *message_;
}
inline void CDOTAUserMsg_BotChat::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void CDOTAUserMsg_BotChat::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void CDOTAUserMsg_BotChat::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDOTAUserMsg_BotChat::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* CDOTAUserMsg_BotChat::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string target = 4;
inline bool CDOTAUserMsg_BotChat::has_target() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTAUserMsg_BotChat::set_has_target() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDOTAUserMsg_BotChat::clear_has_target() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDOTAUserMsg_BotChat::clear_target() {
  if (target_ != &::google::protobuf::internal::kEmptyString) {
    target_->clear();
  }
  clear_has_target();
}
inline const ::std::string& CDOTAUserMsg_BotChat::target() const {
  return *target_;
}
inline void CDOTAUserMsg_BotChat::set_target(const ::std::string& value) {
  set_has_target();
  if (target_ == &::google::protobuf::internal::kEmptyString) {
    target_ = new ::std::string;
  }
  target_->assign(value);
}
inline void CDOTAUserMsg_BotChat::set_target(const char* value) {
  set_has_target();
  if (target_ == &::google::protobuf::internal::kEmptyString) {
    target_ = new ::std::string;
  }
  target_->assign(value);
}
inline void CDOTAUserMsg_BotChat::set_target(const char* value, size_t size) {
  set_has_target();
  if (target_ == &::google::protobuf::internal::kEmptyString) {
    target_ = new ::std::string;
  }
  target_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDOTAUserMsg_BotChat::mutable_target() {
  set_has_target();
  if (target_ == &::google::protobuf::internal::kEmptyString) {
    target_ = new ::std::string;
  }
  return target_;
}
inline ::std::string* CDOTAUserMsg_BotChat::release_target() {
  clear_has_target();
  if (target_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = target_;
    target_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CDOTAUserMsg_CombatHeroPositions

// optional uint32 index = 1;
inline bool CDOTAUserMsg_CombatHeroPositions::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_CombatHeroPositions::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_CombatHeroPositions::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_CombatHeroPositions::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 CDOTAUserMsg_CombatHeroPositions::index() const {
  return index_;
}
inline void CDOTAUserMsg_CombatHeroPositions::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 time = 2;
inline bool CDOTAUserMsg_CombatHeroPositions::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_CombatHeroPositions::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_CombatHeroPositions::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_CombatHeroPositions::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 CDOTAUserMsg_CombatHeroPositions::time() const {
  return time_;
}
inline void CDOTAUserMsg_CombatHeroPositions::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// optional .CMsgVector2D world_pos = 3;
inline bool CDOTAUserMsg_CombatHeroPositions::has_world_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAUserMsg_CombatHeroPositions::set_has_world_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTAUserMsg_CombatHeroPositions::clear_has_world_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTAUserMsg_CombatHeroPositions::clear_world_pos() {
  if (world_pos_ != NULL) world_pos_->::CMsgVector2D::Clear();
  clear_has_world_pos();
}
inline const ::CMsgVector2D& CDOTAUserMsg_CombatHeroPositions::world_pos() const {
  return world_pos_ != NULL ? *world_pos_ : *default_instance_->world_pos_;
}
inline ::CMsgVector2D* CDOTAUserMsg_CombatHeroPositions::mutable_world_pos() {
  set_has_world_pos();
  if (world_pos_ == NULL) world_pos_ = new ::CMsgVector2D;
  return world_pos_;
}
inline ::CMsgVector2D* CDOTAUserMsg_CombatHeroPositions::release_world_pos() {
  clear_has_world_pos();
  ::CMsgVector2D* temp = world_pos_;
  world_pos_ = NULL;
  return temp;
}

// optional int32 health = 4;
inline bool CDOTAUserMsg_CombatHeroPositions::has_health() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTAUserMsg_CombatHeroPositions::set_has_health() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDOTAUserMsg_CombatHeroPositions::clear_has_health() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDOTAUserMsg_CombatHeroPositions::clear_health() {
  health_ = 0;
  clear_has_health();
}
inline ::google::protobuf::int32 CDOTAUserMsg_CombatHeroPositions::health() const {
  return health_;
}
inline void CDOTAUserMsg_CombatHeroPositions::set_health(::google::protobuf::int32 value) {
  set_has_health();
  health_ = value;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability

// optional uint32 ability = 1;
inline bool CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::has_ability() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::set_has_ability() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::clear_has_ability() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::clear_ability() {
  ability_ = 0u;
  clear_has_ability();
}
inline ::google::protobuf::uint32 CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::ability() const {
  return ability_;
}
inline void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::set_ability(::google::protobuf::uint32 value) {
  set_has_ability();
  ability_ = value;
}

// optional int32 damage = 2;
inline bool CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::has_damage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::set_has_damage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::clear_has_damage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::clear_damage() {
  damage_ = 0;
  clear_has_damage();
}
inline ::google::protobuf::int32 CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::damage() const {
  return damage_;
}
inline void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::set_damage(::google::protobuf::int32 value) {
  set_has_damage();
  damage_ = value;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_MiniKillCamInfo_Attacker

// optional uint32 attacker = 1;
inline bool CDOTAUserMsg_MiniKillCamInfo_Attacker::has_attacker() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_MiniKillCamInfo_Attacker::set_has_attacker() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_MiniKillCamInfo_Attacker::clear_has_attacker() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_MiniKillCamInfo_Attacker::clear_attacker() {
  attacker_ = 0u;
  clear_has_attacker();
}
inline ::google::protobuf::uint32 CDOTAUserMsg_MiniKillCamInfo_Attacker::attacker() const {
  return attacker_;
}
inline void CDOTAUserMsg_MiniKillCamInfo_Attacker::set_attacker(::google::protobuf::uint32 value) {
  set_has_attacker();
  attacker_ = value;
}

// optional int32 total_damage = 2;
inline bool CDOTAUserMsg_MiniKillCamInfo_Attacker::has_total_damage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_MiniKillCamInfo_Attacker::set_has_total_damage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_MiniKillCamInfo_Attacker::clear_has_total_damage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_MiniKillCamInfo_Attacker::clear_total_damage() {
  total_damage_ = 0;
  clear_has_total_damage();
}
inline ::google::protobuf::int32 CDOTAUserMsg_MiniKillCamInfo_Attacker::total_damage() const {
  return total_damage_;
}
inline void CDOTAUserMsg_MiniKillCamInfo_Attacker::set_total_damage(::google::protobuf::int32 value) {
  set_has_total_damage();
  total_damage_ = value;
}

// repeated .CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;
inline int CDOTAUserMsg_MiniKillCamInfo_Attacker::abilities_size() const {
  return abilities_.size();
}
inline void CDOTAUserMsg_MiniKillCamInfo_Attacker::clear_abilities() {
  abilities_.Clear();
}
inline const ::CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability& CDOTAUserMsg_MiniKillCamInfo_Attacker::abilities(int index) const {
  return abilities_.Get(index);
}
inline ::CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability* CDOTAUserMsg_MiniKillCamInfo_Attacker::mutable_abilities(int index) {
  return abilities_.Mutable(index);
}
inline ::CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability* CDOTAUserMsg_MiniKillCamInfo_Attacker::add_abilities() {
  return abilities_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability >&
CDOTAUserMsg_MiniKillCamInfo_Attacker::abilities() const {
  return abilities_;
}
inline ::google::protobuf::RepeatedPtrField< ::CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability >*
CDOTAUserMsg_MiniKillCamInfo_Attacker::mutable_abilities() {
  return &abilities_;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_MiniKillCamInfo

// repeated .CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;
inline int CDOTAUserMsg_MiniKillCamInfo::attackers_size() const {
  return attackers_.size();
}
inline void CDOTAUserMsg_MiniKillCamInfo::clear_attackers() {
  attackers_.Clear();
}
inline const ::CDOTAUserMsg_MiniKillCamInfo_Attacker& CDOTAUserMsg_MiniKillCamInfo::attackers(int index) const {
  return attackers_.Get(index);
}
inline ::CDOTAUserMsg_MiniKillCamInfo_Attacker* CDOTAUserMsg_MiniKillCamInfo::mutable_attackers(int index) {
  return attackers_.Mutable(index);
}
inline ::CDOTAUserMsg_MiniKillCamInfo_Attacker* CDOTAUserMsg_MiniKillCamInfo::add_attackers() {
  return attackers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CDOTAUserMsg_MiniKillCamInfo_Attacker >&
CDOTAUserMsg_MiniKillCamInfo::attackers() const {
  return attackers_;
}
inline ::google::protobuf::RepeatedPtrField< ::CDOTAUserMsg_MiniKillCamInfo_Attacker >*
CDOTAUserMsg_MiniKillCamInfo::mutable_attackers() {
  return &attackers_;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_GlobalLightColor

// optional uint32 color = 1;
inline bool CDOTAUserMsg_GlobalLightColor::has_color() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_GlobalLightColor::set_has_color() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_GlobalLightColor::clear_has_color() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_GlobalLightColor::clear_color() {
  color_ = 0u;
  clear_has_color();
}
inline ::google::protobuf::uint32 CDOTAUserMsg_GlobalLightColor::color() const {
  return color_;
}
inline void CDOTAUserMsg_GlobalLightColor::set_color(::google::protobuf::uint32 value) {
  set_has_color();
  color_ = value;
}

// optional float duration = 2;
inline bool CDOTAUserMsg_GlobalLightColor::has_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_GlobalLightColor::set_has_duration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_GlobalLightColor::clear_has_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_GlobalLightColor::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline float CDOTAUserMsg_GlobalLightColor::duration() const {
  return duration_;
}
inline void CDOTAUserMsg_GlobalLightColor::set_duration(float value) {
  set_has_duration();
  duration_ = value;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_GlobalLightDirection

// optional .CMsgVector direction = 1;
inline bool CDOTAUserMsg_GlobalLightDirection::has_direction() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_GlobalLightDirection::set_has_direction() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_GlobalLightDirection::clear_has_direction() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_GlobalLightDirection::clear_direction() {
  if (direction_ != NULL) direction_->::CMsgVector::Clear();
  clear_has_direction();
}
inline const ::CMsgVector& CDOTAUserMsg_GlobalLightDirection::direction() const {
  return direction_ != NULL ? *direction_ : *default_instance_->direction_;
}
inline ::CMsgVector* CDOTAUserMsg_GlobalLightDirection::mutable_direction() {
  set_has_direction();
  if (direction_ == NULL) direction_ = new ::CMsgVector;
  return direction_;
}
inline ::CMsgVector* CDOTAUserMsg_GlobalLightDirection::release_direction() {
  clear_has_direction();
  ::CMsgVector* temp = direction_;
  direction_ = NULL;
  return temp;
}

// optional float duration = 2;
inline bool CDOTAUserMsg_GlobalLightDirection::has_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_GlobalLightDirection::set_has_duration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_GlobalLightDirection::clear_has_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_GlobalLightDirection::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline float CDOTAUserMsg_GlobalLightDirection::duration() const {
  return duration_;
}
inline void CDOTAUserMsg_GlobalLightDirection::set_duration(float value) {
  set_has_duration();
  duration_ = value;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_LocationPing

// optional uint32 player_id = 1;
inline bool CDOTAUserMsg_LocationPing::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_LocationPing::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_LocationPing::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_LocationPing::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
inline ::google::protobuf::uint32 CDOTAUserMsg_LocationPing::player_id() const {
  return player_id_;
}
inline void CDOTAUserMsg_LocationPing::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional .CDOTAMsg_LocationPing location_ping = 2;
inline bool CDOTAUserMsg_LocationPing::has_location_ping() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_LocationPing::set_has_location_ping() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_LocationPing::clear_has_location_ping() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_LocationPing::clear_location_ping() {
  if (location_ping_ != NULL) location_ping_->::CDOTAMsg_LocationPing::Clear();
  clear_has_location_ping();
}
inline const ::CDOTAMsg_LocationPing& CDOTAUserMsg_LocationPing::location_ping() const {
  return location_ping_ != NULL ? *location_ping_ : *default_instance_->location_ping_;
}
inline ::CDOTAMsg_LocationPing* CDOTAUserMsg_LocationPing::mutable_location_ping() {
  set_has_location_ping();
  if (location_ping_ == NULL) location_ping_ = new ::CDOTAMsg_LocationPing;
  return location_ping_;
}
inline ::CDOTAMsg_LocationPing* CDOTAUserMsg_LocationPing::release_location_ping() {
  clear_has_location_ping();
  ::CDOTAMsg_LocationPing* temp = location_ping_;
  location_ping_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_ItemAlert

// optional uint32 player_id = 1;
inline bool CDOTAUserMsg_ItemAlert::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_ItemAlert::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_ItemAlert::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_ItemAlert::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
inline ::google::protobuf::uint32 CDOTAUserMsg_ItemAlert::player_id() const {
  return player_id_;
}
inline void CDOTAUserMsg_ItemAlert::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional .CDOTAMsg_ItemAlert item_alert = 2;
inline bool CDOTAUserMsg_ItemAlert::has_item_alert() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_ItemAlert::set_has_item_alert() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_ItemAlert::clear_has_item_alert() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_ItemAlert::clear_item_alert() {
  if (item_alert_ != NULL) item_alert_->::CDOTAMsg_ItemAlert::Clear();
  clear_has_item_alert();
}
inline const ::CDOTAMsg_ItemAlert& CDOTAUserMsg_ItemAlert::item_alert() const {
  return item_alert_ != NULL ? *item_alert_ : *default_instance_->item_alert_;
}
inline ::CDOTAMsg_ItemAlert* CDOTAUserMsg_ItemAlert::mutable_item_alert() {
  set_has_item_alert();
  if (item_alert_ == NULL) item_alert_ = new ::CDOTAMsg_ItemAlert;
  return item_alert_;
}
inline ::CDOTAMsg_ItemAlert* CDOTAUserMsg_ItemAlert::release_item_alert() {
  clear_has_item_alert();
  ::CDOTAMsg_ItemAlert* temp = item_alert_;
  item_alert_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_WillPurchaseAlert

// optional int32 itemid = 1;
inline bool CDOTAUserMsg_WillPurchaseAlert::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_WillPurchaseAlert::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_WillPurchaseAlert::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_WillPurchaseAlert::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 CDOTAUserMsg_WillPurchaseAlert::itemid() const {
  return itemid_;
}
inline void CDOTAUserMsg_WillPurchaseAlert::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional int32 player_id = 2;
inline bool CDOTAUserMsg_WillPurchaseAlert::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_WillPurchaseAlert::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_WillPurchaseAlert::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_WillPurchaseAlert::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 CDOTAUserMsg_WillPurchaseAlert::player_id() const {
  return player_id_;
}
inline void CDOTAUserMsg_WillPurchaseAlert::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_MinimapEvent

// optional int32 event_type = 1;
inline bool CDOTAUserMsg_MinimapEvent::has_event_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_MinimapEvent::set_has_event_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_MinimapEvent::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_MinimapEvent::clear_event_type() {
  event_type_ = 0;
  clear_has_event_type();
}
inline ::google::protobuf::int32 CDOTAUserMsg_MinimapEvent::event_type() const {
  return event_type_;
}
inline void CDOTAUserMsg_MinimapEvent::set_event_type(::google::protobuf::int32 value) {
  set_has_event_type();
  event_type_ = value;
}

// optional int32 entity_handle = 2;
inline bool CDOTAUserMsg_MinimapEvent::has_entity_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_MinimapEvent::set_has_entity_handle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_MinimapEvent::clear_has_entity_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_MinimapEvent::clear_entity_handle() {
  entity_handle_ = 0;
  clear_has_entity_handle();
}
inline ::google::protobuf::int32 CDOTAUserMsg_MinimapEvent::entity_handle() const {
  return entity_handle_;
}
inline void CDOTAUserMsg_MinimapEvent::set_entity_handle(::google::protobuf::int32 value) {
  set_has_entity_handle();
  entity_handle_ = value;
}

// optional int32 x = 3;
inline bool CDOTAUserMsg_MinimapEvent::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAUserMsg_MinimapEvent::set_has_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTAUserMsg_MinimapEvent::clear_has_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTAUserMsg_MinimapEvent::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 CDOTAUserMsg_MinimapEvent::x() const {
  return x_;
}
inline void CDOTAUserMsg_MinimapEvent::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// optional int32 y = 4;
inline bool CDOTAUserMsg_MinimapEvent::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTAUserMsg_MinimapEvent::set_has_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDOTAUserMsg_MinimapEvent::clear_has_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDOTAUserMsg_MinimapEvent::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 CDOTAUserMsg_MinimapEvent::y() const {
  return y_;
}
inline void CDOTAUserMsg_MinimapEvent::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}

// optional int32 duration = 5;
inline bool CDOTAUserMsg_MinimapEvent::has_duration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDOTAUserMsg_MinimapEvent::set_has_duration() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CDOTAUserMsg_MinimapEvent::clear_has_duration() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CDOTAUserMsg_MinimapEvent::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline ::google::protobuf::int32 CDOTAUserMsg_MinimapEvent::duration() const {
  return duration_;
}
inline void CDOTAUserMsg_MinimapEvent::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_MapLine

// optional int32 player_id = 1;
inline bool CDOTAUserMsg_MapLine::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_MapLine::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_MapLine::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_MapLine::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 CDOTAUserMsg_MapLine::player_id() const {
  return player_id_;
}
inline void CDOTAUserMsg_MapLine::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional .CDOTAMsg_MapLine mapline = 2;
inline bool CDOTAUserMsg_MapLine::has_mapline() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_MapLine::set_has_mapline() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_MapLine::clear_has_mapline() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_MapLine::clear_mapline() {
  if (mapline_ != NULL) mapline_->::CDOTAMsg_MapLine::Clear();
  clear_has_mapline();
}
inline const ::CDOTAMsg_MapLine& CDOTAUserMsg_MapLine::mapline() const {
  return mapline_ != NULL ? *mapline_ : *default_instance_->mapline_;
}
inline ::CDOTAMsg_MapLine* CDOTAUserMsg_MapLine::mutable_mapline() {
  set_has_mapline();
  if (mapline_ == NULL) mapline_ = new ::CDOTAMsg_MapLine;
  return mapline_;
}
inline ::CDOTAMsg_MapLine* CDOTAUserMsg_MapLine::release_mapline() {
  clear_has_mapline();
  ::CDOTAMsg_MapLine* temp = mapline_;
  mapline_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_MinimapDebugPoint

// optional .CMsgVector location = 1;
inline bool CDOTAUserMsg_MinimapDebugPoint::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_MinimapDebugPoint::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_MinimapDebugPoint::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_MinimapDebugPoint::clear_location() {
  if (location_ != NULL) location_->::CMsgVector::Clear();
  clear_has_location();
}
inline const ::CMsgVector& CDOTAUserMsg_MinimapDebugPoint::location() const {
  return location_ != NULL ? *location_ : *default_instance_->location_;
}
inline ::CMsgVector* CDOTAUserMsg_MinimapDebugPoint::mutable_location() {
  set_has_location();
  if (location_ == NULL) location_ = new ::CMsgVector;
  return location_;
}
inline ::CMsgVector* CDOTAUserMsg_MinimapDebugPoint::release_location() {
  clear_has_location();
  ::CMsgVector* temp = location_;
  location_ = NULL;
  return temp;
}

// optional uint32 color = 2;
inline bool CDOTAUserMsg_MinimapDebugPoint::has_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_MinimapDebugPoint::set_has_color() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_MinimapDebugPoint::clear_has_color() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_MinimapDebugPoint::clear_color() {
  color_ = 0u;
  clear_has_color();
}
inline ::google::protobuf::uint32 CDOTAUserMsg_MinimapDebugPoint::color() const {
  return color_;
}
inline void CDOTAUserMsg_MinimapDebugPoint::set_color(::google::protobuf::uint32 value) {
  set_has_color();
  color_ = value;
}

// optional int32 size = 3;
inline bool CDOTAUserMsg_MinimapDebugPoint::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAUserMsg_MinimapDebugPoint::set_has_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTAUserMsg_MinimapDebugPoint::clear_has_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTAUserMsg_MinimapDebugPoint::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 CDOTAUserMsg_MinimapDebugPoint::size() const {
  return size_;
}
inline void CDOTAUserMsg_MinimapDebugPoint::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
}

// optional float duration = 4;
inline bool CDOTAUserMsg_MinimapDebugPoint::has_duration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTAUserMsg_MinimapDebugPoint::set_has_duration() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDOTAUserMsg_MinimapDebugPoint::clear_has_duration() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDOTAUserMsg_MinimapDebugPoint::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline float CDOTAUserMsg_MinimapDebugPoint::duration() const {
  return duration_;
}
inline void CDOTAUserMsg_MinimapDebugPoint::set_duration(float value) {
  set_has_duration();
  duration_ = value;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_CreateLinearProjectile

// optional .CMsgVector origin = 1;
inline bool CDOTAUserMsg_CreateLinearProjectile::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_CreateLinearProjectile::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_CreateLinearProjectile::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_CreateLinearProjectile::clear_origin() {
  if (origin_ != NULL) origin_->::CMsgVector::Clear();
  clear_has_origin();
}
inline const ::CMsgVector& CDOTAUserMsg_CreateLinearProjectile::origin() const {
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
inline ::CMsgVector* CDOTAUserMsg_CreateLinearProjectile::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) origin_ = new ::CMsgVector;
  return origin_;
}
inline ::CMsgVector* CDOTAUserMsg_CreateLinearProjectile::release_origin() {
  clear_has_origin();
  ::CMsgVector* temp = origin_;
  origin_ = NULL;
  return temp;
}

// optional .CMsgVector2D velocity = 2;
inline bool CDOTAUserMsg_CreateLinearProjectile::has_velocity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_CreateLinearProjectile::set_has_velocity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_CreateLinearProjectile::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_CreateLinearProjectile::clear_velocity() {
  if (velocity_ != NULL) velocity_->::CMsgVector2D::Clear();
  clear_has_velocity();
}
inline const ::CMsgVector2D& CDOTAUserMsg_CreateLinearProjectile::velocity() const {
  return velocity_ != NULL ? *velocity_ : *default_instance_->velocity_;
}
inline ::CMsgVector2D* CDOTAUserMsg_CreateLinearProjectile::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) velocity_ = new ::CMsgVector2D;
  return velocity_;
}
inline ::CMsgVector2D* CDOTAUserMsg_CreateLinearProjectile::release_velocity() {
  clear_has_velocity();
  ::CMsgVector2D* temp = velocity_;
  velocity_ = NULL;
  return temp;
}

// optional int32 latency = 3;
inline bool CDOTAUserMsg_CreateLinearProjectile::has_latency() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAUserMsg_CreateLinearProjectile::set_has_latency() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTAUserMsg_CreateLinearProjectile::clear_has_latency() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTAUserMsg_CreateLinearProjectile::clear_latency() {
  latency_ = 0;
  clear_has_latency();
}
inline ::google::protobuf::int32 CDOTAUserMsg_CreateLinearProjectile::latency() const {
  return latency_;
}
inline void CDOTAUserMsg_CreateLinearProjectile::set_latency(::google::protobuf::int32 value) {
  set_has_latency();
  latency_ = value;
}

// optional int32 entindex = 4;
inline bool CDOTAUserMsg_CreateLinearProjectile::has_entindex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTAUserMsg_CreateLinearProjectile::set_has_entindex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDOTAUserMsg_CreateLinearProjectile::clear_has_entindex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDOTAUserMsg_CreateLinearProjectile::clear_entindex() {
  entindex_ = 0;
  clear_has_entindex();
}
inline ::google::protobuf::int32 CDOTAUserMsg_CreateLinearProjectile::entindex() const {
  return entindex_;
}
inline void CDOTAUserMsg_CreateLinearProjectile::set_entindex(::google::protobuf::int32 value) {
  set_has_entindex();
  entindex_ = value;
}

// optional int32 particle_index = 5;
inline bool CDOTAUserMsg_CreateLinearProjectile::has_particle_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDOTAUserMsg_CreateLinearProjectile::set_has_particle_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CDOTAUserMsg_CreateLinearProjectile::clear_has_particle_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CDOTAUserMsg_CreateLinearProjectile::clear_particle_index() {
  particle_index_ = 0;
  clear_has_particle_index();
}
inline ::google::protobuf::int32 CDOTAUserMsg_CreateLinearProjectile::particle_index() const {
  return particle_index_;
}
inline void CDOTAUserMsg_CreateLinearProjectile::set_particle_index(::google::protobuf::int32 value) {
  set_has_particle_index();
  particle_index_ = value;
}

// optional int32 handle = 6;
inline bool CDOTAUserMsg_CreateLinearProjectile::has_handle() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CDOTAUserMsg_CreateLinearProjectile::set_has_handle() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CDOTAUserMsg_CreateLinearProjectile::clear_has_handle() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CDOTAUserMsg_CreateLinearProjectile::clear_handle() {
  handle_ = 0;
  clear_has_handle();
}
inline ::google::protobuf::int32 CDOTAUserMsg_CreateLinearProjectile::handle() const {
  return handle_;
}
inline void CDOTAUserMsg_CreateLinearProjectile::set_handle(::google::protobuf::int32 value) {
  set_has_handle();
  handle_ = value;
}

// optional .CMsgVector2D acceleration = 7;
inline bool CDOTAUserMsg_CreateLinearProjectile::has_acceleration() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CDOTAUserMsg_CreateLinearProjectile::set_has_acceleration() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CDOTAUserMsg_CreateLinearProjectile::clear_has_acceleration() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CDOTAUserMsg_CreateLinearProjectile::clear_acceleration() {
  if (acceleration_ != NULL) acceleration_->::CMsgVector2D::Clear();
  clear_has_acceleration();
}
inline const ::CMsgVector2D& CDOTAUserMsg_CreateLinearProjectile::acceleration() const {
  return acceleration_ != NULL ? *acceleration_ : *default_instance_->acceleration_;
}
inline ::CMsgVector2D* CDOTAUserMsg_CreateLinearProjectile::mutable_acceleration() {
  set_has_acceleration();
  if (acceleration_ == NULL) acceleration_ = new ::CMsgVector2D;
  return acceleration_;
}
inline ::CMsgVector2D* CDOTAUserMsg_CreateLinearProjectile::release_acceleration() {
  clear_has_acceleration();
  ::CMsgVector2D* temp = acceleration_;
  acceleration_ = NULL;
  return temp;
}

// optional float max_speed = 8;
inline bool CDOTAUserMsg_CreateLinearProjectile::has_max_speed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CDOTAUserMsg_CreateLinearProjectile::set_has_max_speed() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CDOTAUserMsg_CreateLinearProjectile::clear_has_max_speed() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CDOTAUserMsg_CreateLinearProjectile::clear_max_speed() {
  max_speed_ = 0;
  clear_has_max_speed();
}
inline float CDOTAUserMsg_CreateLinearProjectile::max_speed() const {
  return max_speed_;
}
inline void CDOTAUserMsg_CreateLinearProjectile::set_max_speed(float value) {
  set_has_max_speed();
  max_speed_ = value;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_DestroyLinearProjectile

// optional int32 handle = 1;
inline bool CDOTAUserMsg_DestroyLinearProjectile::has_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_DestroyLinearProjectile::set_has_handle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_DestroyLinearProjectile::clear_has_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_DestroyLinearProjectile::clear_handle() {
  handle_ = 0;
  clear_has_handle();
}
inline ::google::protobuf::int32 CDOTAUserMsg_DestroyLinearProjectile::handle() const {
  return handle_;
}
inline void CDOTAUserMsg_DestroyLinearProjectile::set_handle(::google::protobuf::int32 value) {
  set_has_handle();
  handle_ = value;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_DodgeTrackingProjectiles

// required int32 entindex = 1;
inline bool CDOTAUserMsg_DodgeTrackingProjectiles::has_entindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_DodgeTrackingProjectiles::set_has_entindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_DodgeTrackingProjectiles::clear_has_entindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_DodgeTrackingProjectiles::clear_entindex() {
  entindex_ = 0;
  clear_has_entindex();
}
inline ::google::protobuf::int32 CDOTAUserMsg_DodgeTrackingProjectiles::entindex() const {
  return entindex_;
}
inline void CDOTAUserMsg_DodgeTrackingProjectiles::set_entindex(::google::protobuf::int32 value) {
  set_has_entindex();
  entindex_ = value;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_SpectatorPlayerClick

// required int32 entindex = 1;
inline bool CDOTAUserMsg_SpectatorPlayerClick::has_entindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_SpectatorPlayerClick::set_has_entindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_SpectatorPlayerClick::clear_has_entindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_SpectatorPlayerClick::clear_entindex() {
  entindex_ = 0;
  clear_has_entindex();
}
inline ::google::protobuf::int32 CDOTAUserMsg_SpectatorPlayerClick::entindex() const {
  return entindex_;
}
inline void CDOTAUserMsg_SpectatorPlayerClick::set_entindex(::google::protobuf::int32 value) {
  set_has_entindex();
  entindex_ = value;
}

// optional int32 order_type = 2;
inline bool CDOTAUserMsg_SpectatorPlayerClick::has_order_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_SpectatorPlayerClick::set_has_order_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_SpectatorPlayerClick::clear_has_order_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_SpectatorPlayerClick::clear_order_type() {
  order_type_ = 0;
  clear_has_order_type();
}
inline ::google::protobuf::int32 CDOTAUserMsg_SpectatorPlayerClick::order_type() const {
  return order_type_;
}
inline void CDOTAUserMsg_SpectatorPlayerClick::set_order_type(::google::protobuf::int32 value) {
  set_has_order_type();
  order_type_ = value;
}

// optional int32 target_index = 3;
inline bool CDOTAUserMsg_SpectatorPlayerClick::has_target_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAUserMsg_SpectatorPlayerClick::set_has_target_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTAUserMsg_SpectatorPlayerClick::clear_has_target_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTAUserMsg_SpectatorPlayerClick::clear_target_index() {
  target_index_ = 0;
  clear_has_target_index();
}
inline ::google::protobuf::int32 CDOTAUserMsg_SpectatorPlayerClick::target_index() const {
  return target_index_;
}
inline void CDOTAUserMsg_SpectatorPlayerClick::set_target_index(::google::protobuf::int32 value) {
  set_has_target_index();
  target_index_ = value;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_NevermoreRequiem

// optional int32 entity_handle = 1;
inline bool CDOTAUserMsg_NevermoreRequiem::has_entity_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_NevermoreRequiem::set_has_entity_handle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_NevermoreRequiem::clear_has_entity_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_NevermoreRequiem::clear_entity_handle() {
  entity_handle_ = 0;
  clear_has_entity_handle();
}
inline ::google::protobuf::int32 CDOTAUserMsg_NevermoreRequiem::entity_handle() const {
  return entity_handle_;
}
inline void CDOTAUserMsg_NevermoreRequiem::set_entity_handle(::google::protobuf::int32 value) {
  set_has_entity_handle();
  entity_handle_ = value;
}

// optional int32 lines = 2;
inline bool CDOTAUserMsg_NevermoreRequiem::has_lines() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_NevermoreRequiem::set_has_lines() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_NevermoreRequiem::clear_has_lines() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_NevermoreRequiem::clear_lines() {
  lines_ = 0;
  clear_has_lines();
}
inline ::google::protobuf::int32 CDOTAUserMsg_NevermoreRequiem::lines() const {
  return lines_;
}
inline void CDOTAUserMsg_NevermoreRequiem::set_lines(::google::protobuf::int32 value) {
  set_has_lines();
  lines_ = value;
}

// optional .CMsgVector origin = 3;
inline bool CDOTAUserMsg_NevermoreRequiem::has_origin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAUserMsg_NevermoreRequiem::set_has_origin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTAUserMsg_NevermoreRequiem::clear_has_origin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTAUserMsg_NevermoreRequiem::clear_origin() {
  if (origin_ != NULL) origin_->::CMsgVector::Clear();
  clear_has_origin();
}
inline const ::CMsgVector& CDOTAUserMsg_NevermoreRequiem::origin() const {
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
inline ::CMsgVector* CDOTAUserMsg_NevermoreRequiem::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) origin_ = new ::CMsgVector;
  return origin_;
}
inline ::CMsgVector* CDOTAUserMsg_NevermoreRequiem::release_origin() {
  clear_has_origin();
  ::CMsgVector* temp = origin_;
  origin_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_InvalidCommand

// optional string message = 1;
inline bool CDOTAUserMsg_InvalidCommand::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_InvalidCommand::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_InvalidCommand::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_InvalidCommand::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& CDOTAUserMsg_InvalidCommand::message() const {
  return *message_;
}
inline void CDOTAUserMsg_InvalidCommand::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void CDOTAUserMsg_InvalidCommand::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void CDOTAUserMsg_InvalidCommand::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDOTAUserMsg_InvalidCommand::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* CDOTAUserMsg_InvalidCommand::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CDOTAUserMsg_HudError

// optional int32 order_id = 1;
inline bool CDOTAUserMsg_HudError::has_order_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_HudError::set_has_order_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_HudError::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_HudError::clear_order_id() {
  order_id_ = 0;
  clear_has_order_id();
}
inline ::google::protobuf::int32 CDOTAUserMsg_HudError::order_id() const {
  return order_id_;
}
inline void CDOTAUserMsg_HudError::set_order_id(::google::protobuf::int32 value) {
  set_has_order_id();
  order_id_ = value;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_SharedCooldown

// optional int32 entindex = 1;
inline bool CDOTAUserMsg_SharedCooldown::has_entindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_SharedCooldown::set_has_entindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_SharedCooldown::clear_has_entindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_SharedCooldown::clear_entindex() {
  entindex_ = 0;
  clear_has_entindex();
}
inline ::google::protobuf::int32 CDOTAUserMsg_SharedCooldown::entindex() const {
  return entindex_;
}
inline void CDOTAUserMsg_SharedCooldown::set_entindex(::google::protobuf::int32 value) {
  set_has_entindex();
  entindex_ = value;
}

// optional string name = 2;
inline bool CDOTAUserMsg_SharedCooldown::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_SharedCooldown::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_SharedCooldown::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_SharedCooldown::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CDOTAUserMsg_SharedCooldown::name() const {
  return *name_;
}
inline void CDOTAUserMsg_SharedCooldown::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CDOTAUserMsg_SharedCooldown::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CDOTAUserMsg_SharedCooldown::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDOTAUserMsg_SharedCooldown::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CDOTAUserMsg_SharedCooldown::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional float cooldown = 3;
inline bool CDOTAUserMsg_SharedCooldown::has_cooldown() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAUserMsg_SharedCooldown::set_has_cooldown() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTAUserMsg_SharedCooldown::clear_has_cooldown() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTAUserMsg_SharedCooldown::clear_cooldown() {
  cooldown_ = 0;
  clear_has_cooldown();
}
inline float CDOTAUserMsg_SharedCooldown::cooldown() const {
  return cooldown_;
}
inline void CDOTAUserMsg_SharedCooldown::set_cooldown(float value) {
  set_has_cooldown();
  cooldown_ = value;
}

// optional int32 name_index = 4;
inline bool CDOTAUserMsg_SharedCooldown::has_name_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTAUserMsg_SharedCooldown::set_has_name_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDOTAUserMsg_SharedCooldown::clear_has_name_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDOTAUserMsg_SharedCooldown::clear_name_index() {
  name_index_ = 0;
  clear_has_name_index();
}
inline ::google::protobuf::int32 CDOTAUserMsg_SharedCooldown::name_index() const {
  return name_index_;
}
inline void CDOTAUserMsg_SharedCooldown::set_name_index(::google::protobuf::int32 value) {
  set_has_name_index();
  name_index_ = value;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_SetNextAutobuyItem

// optional string name = 1;
inline bool CDOTAUserMsg_SetNextAutobuyItem::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_SetNextAutobuyItem::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_SetNextAutobuyItem::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_SetNextAutobuyItem::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CDOTAUserMsg_SetNextAutobuyItem::name() const {
  return *name_;
}
inline void CDOTAUserMsg_SetNextAutobuyItem::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CDOTAUserMsg_SetNextAutobuyItem::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CDOTAUserMsg_SetNextAutobuyItem::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDOTAUserMsg_SetNextAutobuyItem::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CDOTAUserMsg_SetNextAutobuyItem::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CDOTAUserMsg_HalloweenDrops

// repeated uint32 item_defs = 1;
inline int CDOTAUserMsg_HalloweenDrops::item_defs_size() const {
  return item_defs_.size();
}
inline void CDOTAUserMsg_HalloweenDrops::clear_item_defs() {
  item_defs_.Clear();
}
inline ::google::protobuf::uint32 CDOTAUserMsg_HalloweenDrops::item_defs(int index) const {
  return item_defs_.Get(index);
}
inline void CDOTAUserMsg_HalloweenDrops::set_item_defs(int index, ::google::protobuf::uint32 value) {
  item_defs_.Set(index, value);
}
inline void CDOTAUserMsg_HalloweenDrops::add_item_defs(::google::protobuf::uint32 value) {
  item_defs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTAUserMsg_HalloweenDrops::item_defs() const {
  return item_defs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTAUserMsg_HalloweenDrops::mutable_item_defs() {
  return &item_defs_;
}

// repeated uint32 player_ids = 2;
inline int CDOTAUserMsg_HalloweenDrops::player_ids_size() const {
  return player_ids_.size();
}
inline void CDOTAUserMsg_HalloweenDrops::clear_player_ids() {
  player_ids_.Clear();
}
inline ::google::protobuf::uint32 CDOTAUserMsg_HalloweenDrops::player_ids(int index) const {
  return player_ids_.Get(index);
}
inline void CDOTAUserMsg_HalloweenDrops::set_player_ids(int index, ::google::protobuf::uint32 value) {
  player_ids_.Set(index, value);
}
inline void CDOTAUserMsg_HalloweenDrops::add_player_ids(::google::protobuf::uint32 value) {
  player_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTAUserMsg_HalloweenDrops::player_ids() const {
  return player_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTAUserMsg_HalloweenDrops::mutable_player_ids() {
  return &player_ids_;
}

// optional uint32 prize_list = 3;
inline bool CDOTAUserMsg_HalloweenDrops::has_prize_list() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAUserMsg_HalloweenDrops::set_has_prize_list() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTAUserMsg_HalloweenDrops::clear_has_prize_list() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTAUserMsg_HalloweenDrops::clear_prize_list() {
  prize_list_ = 0u;
  clear_has_prize_list();
}
inline ::google::protobuf::uint32 CDOTAUserMsg_HalloweenDrops::prize_list() const {
  return prize_list_;
}
inline void CDOTAUserMsg_HalloweenDrops::set_prize_list(::google::protobuf::uint32 value) {
  set_has_prize_list();
  prize_list_ = value;
}

// -------------------------------------------------------------------

// CDOTAResponseQuerySerialized_Fact

// required int32 key = 1;
inline bool CDOTAResponseQuerySerialized_Fact::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAResponseQuerySerialized_Fact::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAResponseQuerySerialized_Fact::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAResponseQuerySerialized_Fact::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 CDOTAResponseQuerySerialized_Fact::key() const {
  return key_;
}
inline void CDOTAResponseQuerySerialized_Fact::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
}

// required .CDOTAResponseQuerySerialized.Fact.ValueType valtype = 2 [default = NUMERIC];
inline bool CDOTAResponseQuerySerialized_Fact::has_valtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAResponseQuerySerialized_Fact::set_has_valtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAResponseQuerySerialized_Fact::clear_has_valtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAResponseQuerySerialized_Fact::clear_valtype() {
  valtype_ = 1;
  clear_has_valtype();
}
inline ::CDOTAResponseQuerySerialized_Fact_ValueType CDOTAResponseQuerySerialized_Fact::valtype() const {
  return static_cast< ::CDOTAResponseQuerySerialized_Fact_ValueType >(valtype_);
}
inline void CDOTAResponseQuerySerialized_Fact::set_valtype(::CDOTAResponseQuerySerialized_Fact_ValueType value) {
  GOOGLE_DCHECK(::CDOTAResponseQuerySerialized_Fact_ValueType_IsValid(value));
  set_has_valtype();
  valtype_ = value;
}

// optional float val_numeric = 3;
inline bool CDOTAResponseQuerySerialized_Fact::has_val_numeric() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAResponseQuerySerialized_Fact::set_has_val_numeric() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTAResponseQuerySerialized_Fact::clear_has_val_numeric() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTAResponseQuerySerialized_Fact::clear_val_numeric() {
  val_numeric_ = 0;
  clear_has_val_numeric();
}
inline float CDOTAResponseQuerySerialized_Fact::val_numeric() const {
  return val_numeric_;
}
inline void CDOTAResponseQuerySerialized_Fact::set_val_numeric(float value) {
  set_has_val_numeric();
  val_numeric_ = value;
}

// optional string val_string = 4;
inline bool CDOTAResponseQuerySerialized_Fact::has_val_string() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTAResponseQuerySerialized_Fact::set_has_val_string() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDOTAResponseQuerySerialized_Fact::clear_has_val_string() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDOTAResponseQuerySerialized_Fact::clear_val_string() {
  if (val_string_ != &::google::protobuf::internal::kEmptyString) {
    val_string_->clear();
  }
  clear_has_val_string();
}
inline const ::std::string& CDOTAResponseQuerySerialized_Fact::val_string() const {
  return *val_string_;
}
inline void CDOTAResponseQuerySerialized_Fact::set_val_string(const ::std::string& value) {
  set_has_val_string();
  if (val_string_ == &::google::protobuf::internal::kEmptyString) {
    val_string_ = new ::std::string;
  }
  val_string_->assign(value);
}
inline void CDOTAResponseQuerySerialized_Fact::set_val_string(const char* value) {
  set_has_val_string();
  if (val_string_ == &::google::protobuf::internal::kEmptyString) {
    val_string_ = new ::std::string;
  }
  val_string_->assign(value);
}
inline void CDOTAResponseQuerySerialized_Fact::set_val_string(const char* value, size_t size) {
  set_has_val_string();
  if (val_string_ == &::google::protobuf::internal::kEmptyString) {
    val_string_ = new ::std::string;
  }
  val_string_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDOTAResponseQuerySerialized_Fact::mutable_val_string() {
  set_has_val_string();
  if (val_string_ == &::google::protobuf::internal::kEmptyString) {
    val_string_ = new ::std::string;
  }
  return val_string_;
}
inline ::std::string* CDOTAResponseQuerySerialized_Fact::release_val_string() {
  clear_has_val_string();
  if (val_string_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = val_string_;
    val_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CDOTAResponseQuerySerialized

// repeated .CDOTAResponseQuerySerialized.Fact facts = 1;
inline int CDOTAResponseQuerySerialized::facts_size() const {
  return facts_.size();
}
inline void CDOTAResponseQuerySerialized::clear_facts() {
  facts_.Clear();
}
inline const ::CDOTAResponseQuerySerialized_Fact& CDOTAResponseQuerySerialized::facts(int index) const {
  return facts_.Get(index);
}
inline ::CDOTAResponseQuerySerialized_Fact* CDOTAResponseQuerySerialized::mutable_facts(int index) {
  return facts_.Mutable(index);
}
inline ::CDOTAResponseQuerySerialized_Fact* CDOTAResponseQuerySerialized::add_facts() {
  return facts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CDOTAResponseQuerySerialized_Fact >&
CDOTAResponseQuerySerialized::facts() const {
  return facts_;
}
inline ::google::protobuf::RepeatedPtrField< ::CDOTAResponseQuerySerialized_Fact >*
CDOTAResponseQuerySerialized::mutable_facts() {
  return &facts_;
}

// -------------------------------------------------------------------

// CDOTASpeechMatchOnClient

// optional int32 concept = 1;
inline bool CDOTASpeechMatchOnClient::has_concept() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTASpeechMatchOnClient::set_has_concept() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTASpeechMatchOnClient::clear_has_concept() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTASpeechMatchOnClient::clear_concept() {
  concept_ = 0;
  clear_has_concept();
}
inline ::google::protobuf::int32 CDOTASpeechMatchOnClient::concept() const {
  return concept_;
}
inline void CDOTASpeechMatchOnClient::set_concept(::google::protobuf::int32 value) {
  set_has_concept();
  concept_ = value;
}

// optional int32 recipient_type = 2;
inline bool CDOTASpeechMatchOnClient::has_recipient_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTASpeechMatchOnClient::set_has_recipient_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTASpeechMatchOnClient::clear_has_recipient_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTASpeechMatchOnClient::clear_recipient_type() {
  recipient_type_ = 0;
  clear_has_recipient_type();
}
inline ::google::protobuf::int32 CDOTASpeechMatchOnClient::recipient_type() const {
  return recipient_type_;
}
inline void CDOTASpeechMatchOnClient::set_recipient_type(::google::protobuf::int32 value) {
  set_has_recipient_type();
  recipient_type_ = value;
}

// optional .CDOTAResponseQuerySerialized responsequery = 3;
inline bool CDOTASpeechMatchOnClient::has_responsequery() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTASpeechMatchOnClient::set_has_responsequery() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTASpeechMatchOnClient::clear_has_responsequery() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTASpeechMatchOnClient::clear_responsequery() {
  if (responsequery_ != NULL) responsequery_->::CDOTAResponseQuerySerialized::Clear();
  clear_has_responsequery();
}
inline const ::CDOTAResponseQuerySerialized& CDOTASpeechMatchOnClient::responsequery() const {
  return responsequery_ != NULL ? *responsequery_ : *default_instance_->responsequery_;
}
inline ::CDOTAResponseQuerySerialized* CDOTASpeechMatchOnClient::mutable_responsequery() {
  set_has_responsequery();
  if (responsequery_ == NULL) responsequery_ = new ::CDOTAResponseQuerySerialized;
  return responsequery_;
}
inline ::CDOTAResponseQuerySerialized* CDOTASpeechMatchOnClient::release_responsequery() {
  clear_has_responsequery();
  ::CDOTAResponseQuerySerialized* temp = responsequery_;
  responsequery_ = NULL;
  return temp;
}

// optional sfixed32 randomseed = 4 [default = 0];
inline bool CDOTASpeechMatchOnClient::has_randomseed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTASpeechMatchOnClient::set_has_randomseed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDOTASpeechMatchOnClient::clear_has_randomseed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDOTASpeechMatchOnClient::clear_randomseed() {
  randomseed_ = 0;
  clear_has_randomseed();
}
inline ::google::protobuf::int32 CDOTASpeechMatchOnClient::randomseed() const {
  return randomseed_;
}
inline void CDOTASpeechMatchOnClient::set_randomseed(::google::protobuf::int32 value) {
  set_has_randomseed();
  randomseed_ = value;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_UnitEvent_Speech

// optional int32 concept = 1;
inline bool CDOTAUserMsg_UnitEvent_Speech::has_concept() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_UnitEvent_Speech::set_has_concept() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_UnitEvent_Speech::clear_has_concept() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_UnitEvent_Speech::clear_concept() {
  concept_ = 0;
  clear_has_concept();
}
inline ::google::protobuf::int32 CDOTAUserMsg_UnitEvent_Speech::concept() const {
  return concept_;
}
inline void CDOTAUserMsg_UnitEvent_Speech::set_concept(::google::protobuf::int32 value) {
  set_has_concept();
  concept_ = value;
}

// optional string response = 2;
inline bool CDOTAUserMsg_UnitEvent_Speech::has_response() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_UnitEvent_Speech::set_has_response() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_UnitEvent_Speech::clear_has_response() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_UnitEvent_Speech::clear_response() {
  if (response_ != &::google::protobuf::internal::kEmptyString) {
    response_->clear();
  }
  clear_has_response();
}
inline const ::std::string& CDOTAUserMsg_UnitEvent_Speech::response() const {
  return *response_;
}
inline void CDOTAUserMsg_UnitEvent_Speech::set_response(const ::std::string& value) {
  set_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    response_ = new ::std::string;
  }
  response_->assign(value);
}
inline void CDOTAUserMsg_UnitEvent_Speech::set_response(const char* value) {
  set_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    response_ = new ::std::string;
  }
  response_->assign(value);
}
inline void CDOTAUserMsg_UnitEvent_Speech::set_response(const char* value, size_t size) {
  set_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    response_ = new ::std::string;
  }
  response_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDOTAUserMsg_UnitEvent_Speech::mutable_response() {
  set_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    response_ = new ::std::string;
  }
  return response_;
}
inline ::std::string* CDOTAUserMsg_UnitEvent_Speech::release_response() {
  clear_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = response_;
    response_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 recipient_type = 3;
inline bool CDOTAUserMsg_UnitEvent_Speech::has_recipient_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAUserMsg_UnitEvent_Speech::set_has_recipient_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTAUserMsg_UnitEvent_Speech::clear_has_recipient_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTAUserMsg_UnitEvent_Speech::clear_recipient_type() {
  recipient_type_ = 0;
  clear_has_recipient_type();
}
inline ::google::protobuf::int32 CDOTAUserMsg_UnitEvent_Speech::recipient_type() const {
  return recipient_type_;
}
inline void CDOTAUserMsg_UnitEvent_Speech::set_recipient_type(::google::protobuf::int32 value) {
  set_has_recipient_type();
  recipient_type_ = value;
}

// optional int32 level = 4;
inline bool CDOTAUserMsg_UnitEvent_Speech::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTAUserMsg_UnitEvent_Speech::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDOTAUserMsg_UnitEvent_Speech::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDOTAUserMsg_UnitEvent_Speech::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 CDOTAUserMsg_UnitEvent_Speech::level() const {
  return level_;
}
inline void CDOTAUserMsg_UnitEvent_Speech::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional bool muteable = 5 [default = false];
inline bool CDOTAUserMsg_UnitEvent_Speech::has_muteable() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDOTAUserMsg_UnitEvent_Speech::set_has_muteable() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CDOTAUserMsg_UnitEvent_Speech::clear_has_muteable() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CDOTAUserMsg_UnitEvent_Speech::clear_muteable() {
  muteable_ = false;
  clear_has_muteable();
}
inline bool CDOTAUserMsg_UnitEvent_Speech::muteable() const {
  return muteable_;
}
inline void CDOTAUserMsg_UnitEvent_Speech::set_muteable(bool value) {
  set_has_muteable();
  muteable_ = value;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_UnitEvent_SpeechMute

// optional float delay = 1 [default = 0.5];
inline bool CDOTAUserMsg_UnitEvent_SpeechMute::has_delay() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_UnitEvent_SpeechMute::set_has_delay() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_UnitEvent_SpeechMute::clear_has_delay() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_UnitEvent_SpeechMute::clear_delay() {
  delay_ = 0.5f;
  clear_has_delay();
}
inline float CDOTAUserMsg_UnitEvent_SpeechMute::delay() const {
  return delay_;
}
inline void CDOTAUserMsg_UnitEvent_SpeechMute::set_delay(float value) {
  set_has_delay();
  delay_ = value;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_UnitEvent_AddGesture

// optional .Activity activity = 1 [default = ACT_INVALID];
inline bool CDOTAUserMsg_UnitEvent_AddGesture::has_activity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_UnitEvent_AddGesture::set_has_activity() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_UnitEvent_AddGesture::clear_has_activity() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_UnitEvent_AddGesture::clear_activity() {
  activity_ = -1;
  clear_has_activity();
}
inline Activity CDOTAUserMsg_UnitEvent_AddGesture::activity() const {
  return static_cast< Activity >(activity_);
}
inline void CDOTAUserMsg_UnitEvent_AddGesture::set_activity(Activity value) {
  GOOGLE_DCHECK(Activity_IsValid(value));
  set_has_activity();
  activity_ = value;
}

// optional int32 slot = 2;
inline bool CDOTAUserMsg_UnitEvent_AddGesture::has_slot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_UnitEvent_AddGesture::set_has_slot() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_UnitEvent_AddGesture::clear_has_slot() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_UnitEvent_AddGesture::clear_slot() {
  slot_ = 0;
  clear_has_slot();
}
inline ::google::protobuf::int32 CDOTAUserMsg_UnitEvent_AddGesture::slot() const {
  return slot_;
}
inline void CDOTAUserMsg_UnitEvent_AddGesture::set_slot(::google::protobuf::int32 value) {
  set_has_slot();
  slot_ = value;
}

// optional float fade_in = 3 [default = 0];
inline bool CDOTAUserMsg_UnitEvent_AddGesture::has_fade_in() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAUserMsg_UnitEvent_AddGesture::set_has_fade_in() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTAUserMsg_UnitEvent_AddGesture::clear_has_fade_in() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTAUserMsg_UnitEvent_AddGesture::clear_fade_in() {
  fade_in_ = 0;
  clear_has_fade_in();
}
inline float CDOTAUserMsg_UnitEvent_AddGesture::fade_in() const {
  return fade_in_;
}
inline void CDOTAUserMsg_UnitEvent_AddGesture::set_fade_in(float value) {
  set_has_fade_in();
  fade_in_ = value;
}

// optional float fade_out = 4 [default = 0.1];
inline bool CDOTAUserMsg_UnitEvent_AddGesture::has_fade_out() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTAUserMsg_UnitEvent_AddGesture::set_has_fade_out() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDOTAUserMsg_UnitEvent_AddGesture::clear_has_fade_out() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDOTAUserMsg_UnitEvent_AddGesture::clear_fade_out() {
  fade_out_ = 0.1f;
  clear_has_fade_out();
}
inline float CDOTAUserMsg_UnitEvent_AddGesture::fade_out() const {
  return fade_out_;
}
inline void CDOTAUserMsg_UnitEvent_AddGesture::set_fade_out(float value) {
  set_has_fade_out();
  fade_out_ = value;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_UnitEvent_RemoveGesture

// optional .Activity activity = 1 [default = ACT_INVALID];
inline bool CDOTAUserMsg_UnitEvent_RemoveGesture::has_activity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_UnitEvent_RemoveGesture::set_has_activity() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_UnitEvent_RemoveGesture::clear_has_activity() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_UnitEvent_RemoveGesture::clear_activity() {
  activity_ = -1;
  clear_has_activity();
}
inline Activity CDOTAUserMsg_UnitEvent_RemoveGesture::activity() const {
  return static_cast< Activity >(activity_);
}
inline void CDOTAUserMsg_UnitEvent_RemoveGesture::set_activity(Activity value) {
  GOOGLE_DCHECK(Activity_IsValid(value));
  set_has_activity();
  activity_ = value;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_UnitEvent_BloodImpact

// optional int32 scale = 1;
inline bool CDOTAUserMsg_UnitEvent_BloodImpact::has_scale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_UnitEvent_BloodImpact::set_has_scale() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_UnitEvent_BloodImpact::clear_has_scale() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_UnitEvent_BloodImpact::clear_scale() {
  scale_ = 0;
  clear_has_scale();
}
inline ::google::protobuf::int32 CDOTAUserMsg_UnitEvent_BloodImpact::scale() const {
  return scale_;
}
inline void CDOTAUserMsg_UnitEvent_BloodImpact::set_scale(::google::protobuf::int32 value) {
  set_has_scale();
  scale_ = value;
}

// optional int32 x_normal = 2;
inline bool CDOTAUserMsg_UnitEvent_BloodImpact::has_x_normal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_UnitEvent_BloodImpact::set_has_x_normal() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_UnitEvent_BloodImpact::clear_has_x_normal() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_UnitEvent_BloodImpact::clear_x_normal() {
  x_normal_ = 0;
  clear_has_x_normal();
}
inline ::google::protobuf::int32 CDOTAUserMsg_UnitEvent_BloodImpact::x_normal() const {
  return x_normal_;
}
inline void CDOTAUserMsg_UnitEvent_BloodImpact::set_x_normal(::google::protobuf::int32 value) {
  set_has_x_normal();
  x_normal_ = value;
}

// optional int32 y_normal = 3;
inline bool CDOTAUserMsg_UnitEvent_BloodImpact::has_y_normal() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAUserMsg_UnitEvent_BloodImpact::set_has_y_normal() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTAUserMsg_UnitEvent_BloodImpact::clear_has_y_normal() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTAUserMsg_UnitEvent_BloodImpact::clear_y_normal() {
  y_normal_ = 0;
  clear_has_y_normal();
}
inline ::google::protobuf::int32 CDOTAUserMsg_UnitEvent_BloodImpact::y_normal() const {
  return y_normal_;
}
inline void CDOTAUserMsg_UnitEvent_BloodImpact::set_y_normal(::google::protobuf::int32 value) {
  set_has_y_normal();
  y_normal_ = value;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_UnitEvent_FadeGesture

// optional .Activity activity = 1 [default = ACT_INVALID];
inline bool CDOTAUserMsg_UnitEvent_FadeGesture::has_activity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_UnitEvent_FadeGesture::set_has_activity() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_UnitEvent_FadeGesture::clear_has_activity() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_UnitEvent_FadeGesture::clear_activity() {
  activity_ = -1;
  clear_has_activity();
}
inline Activity CDOTAUserMsg_UnitEvent_FadeGesture::activity() const {
  return static_cast< Activity >(activity_);
}
inline void CDOTAUserMsg_UnitEvent_FadeGesture::set_activity(Activity value) {
  GOOGLE_DCHECK(Activity_IsValid(value));
  set_has_activity();
  activity_ = value;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_UnitEvent

// required .EDotaEntityMessages msg_type = 1 [default = DOTA_UNIT_SPEECH];
inline bool CDOTAUserMsg_UnitEvent::has_msg_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_UnitEvent::set_has_msg_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_UnitEvent::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_UnitEvent::clear_msg_type() {
  msg_type_ = 0;
  clear_has_msg_type();
}
inline EDotaEntityMessages CDOTAUserMsg_UnitEvent::msg_type() const {
  return static_cast< EDotaEntityMessages >(msg_type_);
}
inline void CDOTAUserMsg_UnitEvent::set_msg_type(EDotaEntityMessages value) {
  GOOGLE_DCHECK(EDotaEntityMessages_IsValid(value));
  set_has_msg_type();
  msg_type_ = value;
}

// required int32 entity_index = 2;
inline bool CDOTAUserMsg_UnitEvent::has_entity_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_UnitEvent::set_has_entity_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_UnitEvent::clear_has_entity_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_UnitEvent::clear_entity_index() {
  entity_index_ = 0;
  clear_has_entity_index();
}
inline ::google::protobuf::int32 CDOTAUserMsg_UnitEvent::entity_index() const {
  return entity_index_;
}
inline void CDOTAUserMsg_UnitEvent::set_entity_index(::google::protobuf::int32 value) {
  set_has_entity_index();
  entity_index_ = value;
}

// optional .CDOTAUserMsg_UnitEvent.Speech speech = 3;
inline bool CDOTAUserMsg_UnitEvent::has_speech() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAUserMsg_UnitEvent::set_has_speech() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTAUserMsg_UnitEvent::clear_has_speech() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTAUserMsg_UnitEvent::clear_speech() {
  if (speech_ != NULL) speech_->::CDOTAUserMsg_UnitEvent_Speech::Clear();
  clear_has_speech();
}
inline const ::CDOTAUserMsg_UnitEvent_Speech& CDOTAUserMsg_UnitEvent::speech() const {
  return speech_ != NULL ? *speech_ : *default_instance_->speech_;
}
inline ::CDOTAUserMsg_UnitEvent_Speech* CDOTAUserMsg_UnitEvent::mutable_speech() {
  set_has_speech();
  if (speech_ == NULL) speech_ = new ::CDOTAUserMsg_UnitEvent_Speech;
  return speech_;
}
inline ::CDOTAUserMsg_UnitEvent_Speech* CDOTAUserMsg_UnitEvent::release_speech() {
  clear_has_speech();
  ::CDOTAUserMsg_UnitEvent_Speech* temp = speech_;
  speech_ = NULL;
  return temp;
}

// optional .CDOTAUserMsg_UnitEvent.SpeechMute speech_mute = 4;
inline bool CDOTAUserMsg_UnitEvent::has_speech_mute() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTAUserMsg_UnitEvent::set_has_speech_mute() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDOTAUserMsg_UnitEvent::clear_has_speech_mute() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDOTAUserMsg_UnitEvent::clear_speech_mute() {
  if (speech_mute_ != NULL) speech_mute_->::CDOTAUserMsg_UnitEvent_SpeechMute::Clear();
  clear_has_speech_mute();
}
inline const ::CDOTAUserMsg_UnitEvent_SpeechMute& CDOTAUserMsg_UnitEvent::speech_mute() const {
  return speech_mute_ != NULL ? *speech_mute_ : *default_instance_->speech_mute_;
}
inline ::CDOTAUserMsg_UnitEvent_SpeechMute* CDOTAUserMsg_UnitEvent::mutable_speech_mute() {
  set_has_speech_mute();
  if (speech_mute_ == NULL) speech_mute_ = new ::CDOTAUserMsg_UnitEvent_SpeechMute;
  return speech_mute_;
}
inline ::CDOTAUserMsg_UnitEvent_SpeechMute* CDOTAUserMsg_UnitEvent::release_speech_mute() {
  clear_has_speech_mute();
  ::CDOTAUserMsg_UnitEvent_SpeechMute* temp = speech_mute_;
  speech_mute_ = NULL;
  return temp;
}

// optional .CDOTAUserMsg_UnitEvent.AddGesture add_gesture = 5;
inline bool CDOTAUserMsg_UnitEvent::has_add_gesture() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDOTAUserMsg_UnitEvent::set_has_add_gesture() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CDOTAUserMsg_UnitEvent::clear_has_add_gesture() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CDOTAUserMsg_UnitEvent::clear_add_gesture() {
  if (add_gesture_ != NULL) add_gesture_->::CDOTAUserMsg_UnitEvent_AddGesture::Clear();
  clear_has_add_gesture();
}
inline const ::CDOTAUserMsg_UnitEvent_AddGesture& CDOTAUserMsg_UnitEvent::add_gesture() const {
  return add_gesture_ != NULL ? *add_gesture_ : *default_instance_->add_gesture_;
}
inline ::CDOTAUserMsg_UnitEvent_AddGesture* CDOTAUserMsg_UnitEvent::mutable_add_gesture() {
  set_has_add_gesture();
  if (add_gesture_ == NULL) add_gesture_ = new ::CDOTAUserMsg_UnitEvent_AddGesture;
  return add_gesture_;
}
inline ::CDOTAUserMsg_UnitEvent_AddGesture* CDOTAUserMsg_UnitEvent::release_add_gesture() {
  clear_has_add_gesture();
  ::CDOTAUserMsg_UnitEvent_AddGesture* temp = add_gesture_;
  add_gesture_ = NULL;
  return temp;
}

// optional .CDOTAUserMsg_UnitEvent.RemoveGesture remove_gesture = 6;
inline bool CDOTAUserMsg_UnitEvent::has_remove_gesture() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CDOTAUserMsg_UnitEvent::set_has_remove_gesture() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CDOTAUserMsg_UnitEvent::clear_has_remove_gesture() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CDOTAUserMsg_UnitEvent::clear_remove_gesture() {
  if (remove_gesture_ != NULL) remove_gesture_->::CDOTAUserMsg_UnitEvent_RemoveGesture::Clear();
  clear_has_remove_gesture();
}
inline const ::CDOTAUserMsg_UnitEvent_RemoveGesture& CDOTAUserMsg_UnitEvent::remove_gesture() const {
  return remove_gesture_ != NULL ? *remove_gesture_ : *default_instance_->remove_gesture_;
}
inline ::CDOTAUserMsg_UnitEvent_RemoveGesture* CDOTAUserMsg_UnitEvent::mutable_remove_gesture() {
  set_has_remove_gesture();
  if (remove_gesture_ == NULL) remove_gesture_ = new ::CDOTAUserMsg_UnitEvent_RemoveGesture;
  return remove_gesture_;
}
inline ::CDOTAUserMsg_UnitEvent_RemoveGesture* CDOTAUserMsg_UnitEvent::release_remove_gesture() {
  clear_has_remove_gesture();
  ::CDOTAUserMsg_UnitEvent_RemoveGesture* temp = remove_gesture_;
  remove_gesture_ = NULL;
  return temp;
}

// optional .CDOTAUserMsg_UnitEvent.BloodImpact blood_impact = 7;
inline bool CDOTAUserMsg_UnitEvent::has_blood_impact() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CDOTAUserMsg_UnitEvent::set_has_blood_impact() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CDOTAUserMsg_UnitEvent::clear_has_blood_impact() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CDOTAUserMsg_UnitEvent::clear_blood_impact() {
  if (blood_impact_ != NULL) blood_impact_->::CDOTAUserMsg_UnitEvent_BloodImpact::Clear();
  clear_has_blood_impact();
}
inline const ::CDOTAUserMsg_UnitEvent_BloodImpact& CDOTAUserMsg_UnitEvent::blood_impact() const {
  return blood_impact_ != NULL ? *blood_impact_ : *default_instance_->blood_impact_;
}
inline ::CDOTAUserMsg_UnitEvent_BloodImpact* CDOTAUserMsg_UnitEvent::mutable_blood_impact() {
  set_has_blood_impact();
  if (blood_impact_ == NULL) blood_impact_ = new ::CDOTAUserMsg_UnitEvent_BloodImpact;
  return blood_impact_;
}
inline ::CDOTAUserMsg_UnitEvent_BloodImpact* CDOTAUserMsg_UnitEvent::release_blood_impact() {
  clear_has_blood_impact();
  ::CDOTAUserMsg_UnitEvent_BloodImpact* temp = blood_impact_;
  blood_impact_ = NULL;
  return temp;
}

// optional .CDOTAUserMsg_UnitEvent.FadeGesture fade_gesture = 8;
inline bool CDOTAUserMsg_UnitEvent::has_fade_gesture() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CDOTAUserMsg_UnitEvent::set_has_fade_gesture() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CDOTAUserMsg_UnitEvent::clear_has_fade_gesture() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CDOTAUserMsg_UnitEvent::clear_fade_gesture() {
  if (fade_gesture_ != NULL) fade_gesture_->::CDOTAUserMsg_UnitEvent_FadeGesture::Clear();
  clear_has_fade_gesture();
}
inline const ::CDOTAUserMsg_UnitEvent_FadeGesture& CDOTAUserMsg_UnitEvent::fade_gesture() const {
  return fade_gesture_ != NULL ? *fade_gesture_ : *default_instance_->fade_gesture_;
}
inline ::CDOTAUserMsg_UnitEvent_FadeGesture* CDOTAUserMsg_UnitEvent::mutable_fade_gesture() {
  set_has_fade_gesture();
  if (fade_gesture_ == NULL) fade_gesture_ = new ::CDOTAUserMsg_UnitEvent_FadeGesture;
  return fade_gesture_;
}
inline ::CDOTAUserMsg_UnitEvent_FadeGesture* CDOTAUserMsg_UnitEvent::release_fade_gesture() {
  clear_has_fade_gesture();
  ::CDOTAUserMsg_UnitEvent_FadeGesture* temp = fade_gesture_;
  fade_gesture_ = NULL;
  return temp;
}

// optional .CDOTASpeechMatchOnClient speech_match_on_client = 9;
inline bool CDOTAUserMsg_UnitEvent::has_speech_match_on_client() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CDOTAUserMsg_UnitEvent::set_has_speech_match_on_client() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CDOTAUserMsg_UnitEvent::clear_has_speech_match_on_client() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CDOTAUserMsg_UnitEvent::clear_speech_match_on_client() {
  if (speech_match_on_client_ != NULL) speech_match_on_client_->::CDOTASpeechMatchOnClient::Clear();
  clear_has_speech_match_on_client();
}
inline const ::CDOTASpeechMatchOnClient& CDOTAUserMsg_UnitEvent::speech_match_on_client() const {
  return speech_match_on_client_ != NULL ? *speech_match_on_client_ : *default_instance_->speech_match_on_client_;
}
inline ::CDOTASpeechMatchOnClient* CDOTAUserMsg_UnitEvent::mutable_speech_match_on_client() {
  set_has_speech_match_on_client();
  if (speech_match_on_client_ == NULL) speech_match_on_client_ = new ::CDOTASpeechMatchOnClient;
  return speech_match_on_client_;
}
inline ::CDOTASpeechMatchOnClient* CDOTAUserMsg_UnitEvent::release_speech_match_on_client() {
  clear_has_speech_match_on_client();
  ::CDOTASpeechMatchOnClient* temp = speech_match_on_client_;
  speech_match_on_client_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_ItemPurchased

// optional int32 item_index = 1;
inline bool CDOTAUserMsg_ItemPurchased::has_item_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_ItemPurchased::set_has_item_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_ItemPurchased::clear_has_item_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_ItemPurchased::clear_item_index() {
  item_index_ = 0;
  clear_has_item_index();
}
inline ::google::protobuf::int32 CDOTAUserMsg_ItemPurchased::item_index() const {
  return item_index_;
}
inline void CDOTAUserMsg_ItemPurchased::set_item_index(::google::protobuf::int32 value) {
  set_has_item_index();
  item_index_ = value;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_ItemFound

// optional int32 player = 1;
inline bool CDOTAUserMsg_ItemFound::has_player() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_ItemFound::set_has_player() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_ItemFound::clear_has_player() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_ItemFound::clear_player() {
  player_ = 0;
  clear_has_player();
}
inline ::google::protobuf::int32 CDOTAUserMsg_ItemFound::player() const {
  return player_;
}
inline void CDOTAUserMsg_ItemFound::set_player(::google::protobuf::int32 value) {
  set_has_player();
  player_ = value;
}

// optional int32 quality = 2;
inline bool CDOTAUserMsg_ItemFound::has_quality() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_ItemFound::set_has_quality() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_ItemFound::clear_has_quality() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_ItemFound::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 CDOTAUserMsg_ItemFound::quality() const {
  return quality_;
}
inline void CDOTAUserMsg_ItemFound::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
}

// optional int32 rarity = 3;
inline bool CDOTAUserMsg_ItemFound::has_rarity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAUserMsg_ItemFound::set_has_rarity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTAUserMsg_ItemFound::clear_has_rarity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTAUserMsg_ItemFound::clear_rarity() {
  rarity_ = 0;
  clear_has_rarity();
}
inline ::google::protobuf::int32 CDOTAUserMsg_ItemFound::rarity() const {
  return rarity_;
}
inline void CDOTAUserMsg_ItemFound::set_rarity(::google::protobuf::int32 value) {
  set_has_rarity();
  rarity_ = value;
}

// optional int32 method = 4;
inline bool CDOTAUserMsg_ItemFound::has_method() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTAUserMsg_ItemFound::set_has_method() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDOTAUserMsg_ItemFound::clear_has_method() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDOTAUserMsg_ItemFound::clear_method() {
  method_ = 0;
  clear_has_method();
}
inline ::google::protobuf::int32 CDOTAUserMsg_ItemFound::method() const {
  return method_;
}
inline void CDOTAUserMsg_ItemFound::set_method(::google::protobuf::int32 value) {
  set_has_method();
  method_ = value;
}

// optional int32 itemdef = 5;
inline bool CDOTAUserMsg_ItemFound::has_itemdef() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDOTAUserMsg_ItemFound::set_has_itemdef() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CDOTAUserMsg_ItemFound::clear_has_itemdef() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CDOTAUserMsg_ItemFound::clear_itemdef() {
  itemdef_ = 0;
  clear_has_itemdef();
}
inline ::google::protobuf::int32 CDOTAUserMsg_ItemFound::itemdef() const {
  return itemdef_;
}
inline void CDOTAUserMsg_ItemFound::set_itemdef(::google::protobuf::int32 value) {
  set_has_itemdef();
  itemdef_ = value;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_ParticleManager_ReleaseParticleIndex

// -------------------------------------------------------------------

// CDOTAUserMsg_ParticleManager_CreateParticle

// optional int32 particle_name_index = 1;
inline bool CDOTAUserMsg_ParticleManager_CreateParticle::has_particle_name_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_ParticleManager_CreateParticle::set_has_particle_name_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_ParticleManager_CreateParticle::clear_has_particle_name_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_ParticleManager_CreateParticle::clear_particle_name_index() {
  particle_name_index_ = 0;
  clear_has_particle_name_index();
}
inline ::google::protobuf::int32 CDOTAUserMsg_ParticleManager_CreateParticle::particle_name_index() const {
  return particle_name_index_;
}
inline void CDOTAUserMsg_ParticleManager_CreateParticle::set_particle_name_index(::google::protobuf::int32 value) {
  set_has_particle_name_index();
  particle_name_index_ = value;
}

// optional int32 attach_type = 2;
inline bool CDOTAUserMsg_ParticleManager_CreateParticle::has_attach_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_ParticleManager_CreateParticle::set_has_attach_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_ParticleManager_CreateParticle::clear_has_attach_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_ParticleManager_CreateParticle::clear_attach_type() {
  attach_type_ = 0;
  clear_has_attach_type();
}
inline ::google::protobuf::int32 CDOTAUserMsg_ParticleManager_CreateParticle::attach_type() const {
  return attach_type_;
}
inline void CDOTAUserMsg_ParticleManager_CreateParticle::set_attach_type(::google::protobuf::int32 value) {
  set_has_attach_type();
  attach_type_ = value;
}

// optional int32 entity_handle = 3;
inline bool CDOTAUserMsg_ParticleManager_CreateParticle::has_entity_handle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAUserMsg_ParticleManager_CreateParticle::set_has_entity_handle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTAUserMsg_ParticleManager_CreateParticle::clear_has_entity_handle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTAUserMsg_ParticleManager_CreateParticle::clear_entity_handle() {
  entity_handle_ = 0;
  clear_has_entity_handle();
}
inline ::google::protobuf::int32 CDOTAUserMsg_ParticleManager_CreateParticle::entity_handle() const {
  return entity_handle_;
}
inline void CDOTAUserMsg_ParticleManager_CreateParticle::set_entity_handle(::google::protobuf::int32 value) {
  set_has_entity_handle();
  entity_handle_ = value;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_ParticleManager_DestroyParticle

// optional bool destroy_immediately = 1;
inline bool CDOTAUserMsg_ParticleManager_DestroyParticle::has_destroy_immediately() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_ParticleManager_DestroyParticle::set_has_destroy_immediately() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_ParticleManager_DestroyParticle::clear_has_destroy_immediately() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_ParticleManager_DestroyParticle::clear_destroy_immediately() {
  destroy_immediately_ = false;
  clear_has_destroy_immediately();
}
inline bool CDOTAUserMsg_ParticleManager_DestroyParticle::destroy_immediately() const {
  return destroy_immediately_;
}
inline void CDOTAUserMsg_ParticleManager_DestroyParticle::set_destroy_immediately(bool value) {
  set_has_destroy_immediately();
  destroy_immediately_ = value;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_ParticleManager_DestroyParticleInvolving

// optional bool destroy_immediately = 1;
inline bool CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::has_destroy_immediately() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::set_has_destroy_immediately() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::clear_has_destroy_immediately() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::clear_destroy_immediately() {
  destroy_immediately_ = false;
  clear_has_destroy_immediately();
}
inline bool CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::destroy_immediately() const {
  return destroy_immediately_;
}
inline void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::set_destroy_immediately(bool value) {
  set_has_destroy_immediately();
  destroy_immediately_ = value;
}

// optional int32 entity_handle = 3;
inline bool CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::has_entity_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::set_has_entity_handle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::clear_has_entity_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::clear_entity_handle() {
  entity_handle_ = 0;
  clear_has_entity_handle();
}
inline ::google::protobuf::int32 CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::entity_handle() const {
  return entity_handle_;
}
inline void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::set_entity_handle(::google::protobuf::int32 value) {
  set_has_entity_handle();
  entity_handle_ = value;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_ParticleManager_UpdateParticle

// optional int32 control_point = 1;
inline bool CDOTAUserMsg_ParticleManager_UpdateParticle::has_control_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticle::set_has_control_point() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticle::clear_has_control_point() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticle::clear_control_point() {
  control_point_ = 0;
  clear_has_control_point();
}
inline ::google::protobuf::int32 CDOTAUserMsg_ParticleManager_UpdateParticle::control_point() const {
  return control_point_;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticle::set_control_point(::google::protobuf::int32 value) {
  set_has_control_point();
  control_point_ = value;
}

// optional .CMsgVector position = 2;
inline bool CDOTAUserMsg_ParticleManager_UpdateParticle::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticle::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticle::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticle::clear_position() {
  if (position_ != NULL) position_->::CMsgVector::Clear();
  clear_has_position();
}
inline const ::CMsgVector& CDOTAUserMsg_ParticleManager_UpdateParticle::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::CMsgVector* CDOTAUserMsg_ParticleManager_UpdateParticle::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::CMsgVector;
  return position_;
}
inline ::CMsgVector* CDOTAUserMsg_ParticleManager_UpdateParticle::release_position() {
  clear_has_position();
  ::CMsgVector* temp = position_;
  position_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_ParticleManager_UpdateParticleFwd

// optional int32 control_point = 1;
inline bool CDOTAUserMsg_ParticleManager_UpdateParticleFwd::has_control_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::set_has_control_point() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::clear_has_control_point() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::clear_control_point() {
  control_point_ = 0;
  clear_has_control_point();
}
inline ::google::protobuf::int32 CDOTAUserMsg_ParticleManager_UpdateParticleFwd::control_point() const {
  return control_point_;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::set_control_point(::google::protobuf::int32 value) {
  set_has_control_point();
  control_point_ = value;
}

// optional .CMsgVector forward = 2;
inline bool CDOTAUserMsg_ParticleManager_UpdateParticleFwd::has_forward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::set_has_forward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::clear_has_forward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::clear_forward() {
  if (forward_ != NULL) forward_->::CMsgVector::Clear();
  clear_has_forward();
}
inline const ::CMsgVector& CDOTAUserMsg_ParticleManager_UpdateParticleFwd::forward() const {
  return forward_ != NULL ? *forward_ : *default_instance_->forward_;
}
inline ::CMsgVector* CDOTAUserMsg_ParticleManager_UpdateParticleFwd::mutable_forward() {
  set_has_forward();
  if (forward_ == NULL) forward_ = new ::CMsgVector;
  return forward_;
}
inline ::CMsgVector* CDOTAUserMsg_ParticleManager_UpdateParticleFwd::release_forward() {
  clear_has_forward();
  ::CMsgVector* temp = forward_;
  forward_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_ParticleManager_UpdateParticleOrient

// optional int32 control_point = 1;
inline bool CDOTAUserMsg_ParticleManager_UpdateParticleOrient::has_control_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::set_has_control_point() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::clear_has_control_point() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::clear_control_point() {
  control_point_ = 0;
  clear_has_control_point();
}
inline ::google::protobuf::int32 CDOTAUserMsg_ParticleManager_UpdateParticleOrient::control_point() const {
  return control_point_;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::set_control_point(::google::protobuf::int32 value) {
  set_has_control_point();
  control_point_ = value;
}

// optional .CMsgVector forward = 2;
inline bool CDOTAUserMsg_ParticleManager_UpdateParticleOrient::has_forward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::set_has_forward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::clear_has_forward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::clear_forward() {
  if (forward_ != NULL) forward_->::CMsgVector::Clear();
  clear_has_forward();
}
inline const ::CMsgVector& CDOTAUserMsg_ParticleManager_UpdateParticleOrient::forward() const {
  return forward_ != NULL ? *forward_ : *default_instance_->forward_;
}
inline ::CMsgVector* CDOTAUserMsg_ParticleManager_UpdateParticleOrient::mutable_forward() {
  set_has_forward();
  if (forward_ == NULL) forward_ = new ::CMsgVector;
  return forward_;
}
inline ::CMsgVector* CDOTAUserMsg_ParticleManager_UpdateParticleOrient::release_forward() {
  clear_has_forward();
  ::CMsgVector* temp = forward_;
  forward_ = NULL;
  return temp;
}

// optional .CMsgVector right = 3;
inline bool CDOTAUserMsg_ParticleManager_UpdateParticleOrient::has_right() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::set_has_right() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::clear_has_right() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::clear_right() {
  if (right_ != NULL) right_->::CMsgVector::Clear();
  clear_has_right();
}
inline const ::CMsgVector& CDOTAUserMsg_ParticleManager_UpdateParticleOrient::right() const {
  return right_ != NULL ? *right_ : *default_instance_->right_;
}
inline ::CMsgVector* CDOTAUserMsg_ParticleManager_UpdateParticleOrient::mutable_right() {
  set_has_right();
  if (right_ == NULL) right_ = new ::CMsgVector;
  return right_;
}
inline ::CMsgVector* CDOTAUserMsg_ParticleManager_UpdateParticleOrient::release_right() {
  clear_has_right();
  ::CMsgVector* temp = right_;
  right_ = NULL;
  return temp;
}

// optional .CMsgVector up = 4;
inline bool CDOTAUserMsg_ParticleManager_UpdateParticleOrient::has_up() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::set_has_up() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::clear_has_up() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::clear_up() {
  if (up_ != NULL) up_->::CMsgVector::Clear();
  clear_has_up();
}
inline const ::CMsgVector& CDOTAUserMsg_ParticleManager_UpdateParticleOrient::up() const {
  return up_ != NULL ? *up_ : *default_instance_->up_;
}
inline ::CMsgVector* CDOTAUserMsg_ParticleManager_UpdateParticleOrient::mutable_up() {
  set_has_up();
  if (up_ == NULL) up_ = new ::CMsgVector;
  return up_;
}
inline ::CMsgVector* CDOTAUserMsg_ParticleManager_UpdateParticleOrient::release_up() {
  clear_has_up();
  ::CMsgVector* temp = up_;
  up_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_ParticleManager_UpdateParticleFallback

// optional int32 control_point = 1;
inline bool CDOTAUserMsg_ParticleManager_UpdateParticleFallback::has_control_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::set_has_control_point() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::clear_has_control_point() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::clear_control_point() {
  control_point_ = 0;
  clear_has_control_point();
}
inline ::google::protobuf::int32 CDOTAUserMsg_ParticleManager_UpdateParticleFallback::control_point() const {
  return control_point_;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::set_control_point(::google::protobuf::int32 value) {
  set_has_control_point();
  control_point_ = value;
}

// optional .CMsgVector position = 2;
inline bool CDOTAUserMsg_ParticleManager_UpdateParticleFallback::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::clear_position() {
  if (position_ != NULL) position_->::CMsgVector::Clear();
  clear_has_position();
}
inline const ::CMsgVector& CDOTAUserMsg_ParticleManager_UpdateParticleFallback::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::CMsgVector* CDOTAUserMsg_ParticleManager_UpdateParticleFallback::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::CMsgVector;
  return position_;
}
inline ::CMsgVector* CDOTAUserMsg_ParticleManager_UpdateParticleFallback::release_position() {
  clear_has_position();
  ::CMsgVector* temp = position_;
  position_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_ParticleManager_UpdateParticleOffset

// optional int32 control_point = 1;
inline bool CDOTAUserMsg_ParticleManager_UpdateParticleOffset::has_control_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::set_has_control_point() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::clear_has_control_point() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::clear_control_point() {
  control_point_ = 0;
  clear_has_control_point();
}
inline ::google::protobuf::int32 CDOTAUserMsg_ParticleManager_UpdateParticleOffset::control_point() const {
  return control_point_;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::set_control_point(::google::protobuf::int32 value) {
  set_has_control_point();
  control_point_ = value;
}

// optional .CMsgVector origin_offset = 2;
inline bool CDOTAUserMsg_ParticleManager_UpdateParticleOffset::has_origin_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::set_has_origin_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::clear_has_origin_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::clear_origin_offset() {
  if (origin_offset_ != NULL) origin_offset_->::CMsgVector::Clear();
  clear_has_origin_offset();
}
inline const ::CMsgVector& CDOTAUserMsg_ParticleManager_UpdateParticleOffset::origin_offset() const {
  return origin_offset_ != NULL ? *origin_offset_ : *default_instance_->origin_offset_;
}
inline ::CMsgVector* CDOTAUserMsg_ParticleManager_UpdateParticleOffset::mutable_origin_offset() {
  set_has_origin_offset();
  if (origin_offset_ == NULL) origin_offset_ = new ::CMsgVector;
  return origin_offset_;
}
inline ::CMsgVector* CDOTAUserMsg_ParticleManager_UpdateParticleOffset::release_origin_offset() {
  clear_has_origin_offset();
  ::CMsgVector* temp = origin_offset_;
  origin_offset_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_ParticleManager_UpdateParticleEnt

// optional int32 control_point = 1;
inline bool CDOTAUserMsg_ParticleManager_UpdateParticleEnt::has_control_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::set_has_control_point() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::clear_has_control_point() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::clear_control_point() {
  control_point_ = 0;
  clear_has_control_point();
}
inline ::google::protobuf::int32 CDOTAUserMsg_ParticleManager_UpdateParticleEnt::control_point() const {
  return control_point_;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::set_control_point(::google::protobuf::int32 value) {
  set_has_control_point();
  control_point_ = value;
}

// optional int32 entity_handle = 2;
inline bool CDOTAUserMsg_ParticleManager_UpdateParticleEnt::has_entity_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::set_has_entity_handle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::clear_has_entity_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::clear_entity_handle() {
  entity_handle_ = 0;
  clear_has_entity_handle();
}
inline ::google::protobuf::int32 CDOTAUserMsg_ParticleManager_UpdateParticleEnt::entity_handle() const {
  return entity_handle_;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::set_entity_handle(::google::protobuf::int32 value) {
  set_has_entity_handle();
  entity_handle_ = value;
}

// optional int32 attach_type = 3;
inline bool CDOTAUserMsg_ParticleManager_UpdateParticleEnt::has_attach_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::set_has_attach_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::clear_has_attach_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::clear_attach_type() {
  attach_type_ = 0;
  clear_has_attach_type();
}
inline ::google::protobuf::int32 CDOTAUserMsg_ParticleManager_UpdateParticleEnt::attach_type() const {
  return attach_type_;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::set_attach_type(::google::protobuf::int32 value) {
  set_has_attach_type();
  attach_type_ = value;
}

// optional int32 attachment = 4;
inline bool CDOTAUserMsg_ParticleManager_UpdateParticleEnt::has_attachment() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::set_has_attachment() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::clear_has_attachment() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::clear_attachment() {
  attachment_ = 0;
  clear_has_attachment();
}
inline ::google::protobuf::int32 CDOTAUserMsg_ParticleManager_UpdateParticleEnt::attachment() const {
  return attachment_;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::set_attachment(::google::protobuf::int32 value) {
  set_has_attachment();
  attachment_ = value;
}

// optional .CMsgVector fallback_position = 5;
inline bool CDOTAUserMsg_ParticleManager_UpdateParticleEnt::has_fallback_position() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::set_has_fallback_position() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::clear_has_fallback_position() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::clear_fallback_position() {
  if (fallback_position_ != NULL) fallback_position_->::CMsgVector::Clear();
  clear_has_fallback_position();
}
inline const ::CMsgVector& CDOTAUserMsg_ParticleManager_UpdateParticleEnt::fallback_position() const {
  return fallback_position_ != NULL ? *fallback_position_ : *default_instance_->fallback_position_;
}
inline ::CMsgVector* CDOTAUserMsg_ParticleManager_UpdateParticleEnt::mutable_fallback_position() {
  set_has_fallback_position();
  if (fallback_position_ == NULL) fallback_position_ = new ::CMsgVector;
  return fallback_position_;
}
inline ::CMsgVector* CDOTAUserMsg_ParticleManager_UpdateParticleEnt::release_fallback_position() {
  clear_has_fallback_position();
  ::CMsgVector* temp = fallback_position_;
  fallback_position_ = NULL;
  return temp;
}

// optional bool include_wearables = 6;
inline bool CDOTAUserMsg_ParticleManager_UpdateParticleEnt::has_include_wearables() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::set_has_include_wearables() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::clear_has_include_wearables() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::clear_include_wearables() {
  include_wearables_ = false;
  clear_has_include_wearables();
}
inline bool CDOTAUserMsg_ParticleManager_UpdateParticleEnt::include_wearables() const {
  return include_wearables_;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::set_include_wearables(bool value) {
  set_has_include_wearables();
  include_wearables_ = value;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen

// optional bool set_frozen = 1;
inline bool CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::has_set_frozen() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::set_has_set_frozen() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::clear_has_set_frozen() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::clear_set_frozen() {
  set_frozen_ = false;
  clear_has_set_frozen();
}
inline bool CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::set_frozen() const {
  return set_frozen_;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::set_set_frozen(bool value) {
  set_has_set_frozen();
  set_frozen_ = value;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw

// optional bool should_draw = 1;
inline bool CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::has_should_draw() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::set_has_should_draw() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::clear_has_should_draw() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::clear_should_draw() {
  should_draw_ = false;
  clear_has_should_draw();
}
inline bool CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::should_draw() const {
  return should_draw_;
}
inline void CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::set_should_draw(bool value) {
  set_has_should_draw();
  should_draw_ = value;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_ParticleManager

// required .DOTA_PARTICLE_MESSAGE type = 1 [default = DOTA_PARTICLE_MANAGER_EVENT_CREATE];
inline bool CDOTAUserMsg_ParticleManager::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_ParticleManager::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_ParticleManager::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_ParticleManager::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline DOTA_PARTICLE_MESSAGE CDOTAUserMsg_ParticleManager::type() const {
  return static_cast< DOTA_PARTICLE_MESSAGE >(type_);
}
inline void CDOTAUserMsg_ParticleManager::set_type(DOTA_PARTICLE_MESSAGE value) {
  GOOGLE_DCHECK(DOTA_PARTICLE_MESSAGE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint32 index = 2;
inline bool CDOTAUserMsg_ParticleManager::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_ParticleManager::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_ParticleManager::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_ParticleManager::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 CDOTAUserMsg_ParticleManager::index() const {
  return index_;
}
inline void CDOTAUserMsg_ParticleManager::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// optional .CDOTAUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;
inline bool CDOTAUserMsg_ParticleManager::has_release_particle_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAUserMsg_ParticleManager::set_has_release_particle_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTAUserMsg_ParticleManager::clear_has_release_particle_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTAUserMsg_ParticleManager::clear_release_particle_index() {
  if (release_particle_index_ != NULL) release_particle_index_->::CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::Clear();
  clear_has_release_particle_index();
}
inline const ::CDOTAUserMsg_ParticleManager_ReleaseParticleIndex& CDOTAUserMsg_ParticleManager::release_particle_index() const {
  return release_particle_index_ != NULL ? *release_particle_index_ : *default_instance_->release_particle_index_;
}
inline ::CDOTAUserMsg_ParticleManager_ReleaseParticleIndex* CDOTAUserMsg_ParticleManager::mutable_release_particle_index() {
  set_has_release_particle_index();
  if (release_particle_index_ == NULL) release_particle_index_ = new ::CDOTAUserMsg_ParticleManager_ReleaseParticleIndex;
  return release_particle_index_;
}
inline ::CDOTAUserMsg_ParticleManager_ReleaseParticleIndex* CDOTAUserMsg_ParticleManager::release_release_particle_index() {
  clear_has_release_particle_index();
  ::CDOTAUserMsg_ParticleManager_ReleaseParticleIndex* temp = release_particle_index_;
  release_particle_index_ = NULL;
  return temp;
}

// optional .CDOTAUserMsg_ParticleManager.CreateParticle create_particle = 4;
inline bool CDOTAUserMsg_ParticleManager::has_create_particle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTAUserMsg_ParticleManager::set_has_create_particle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDOTAUserMsg_ParticleManager::clear_has_create_particle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDOTAUserMsg_ParticleManager::clear_create_particle() {
  if (create_particle_ != NULL) create_particle_->::CDOTAUserMsg_ParticleManager_CreateParticle::Clear();
  clear_has_create_particle();
}
inline const ::CDOTAUserMsg_ParticleManager_CreateParticle& CDOTAUserMsg_ParticleManager::create_particle() const {
  return create_particle_ != NULL ? *create_particle_ : *default_instance_->create_particle_;
}
inline ::CDOTAUserMsg_ParticleManager_CreateParticle* CDOTAUserMsg_ParticleManager::mutable_create_particle() {
  set_has_create_particle();
  if (create_particle_ == NULL) create_particle_ = new ::CDOTAUserMsg_ParticleManager_CreateParticle;
  return create_particle_;
}
inline ::CDOTAUserMsg_ParticleManager_CreateParticle* CDOTAUserMsg_ParticleManager::release_create_particle() {
  clear_has_create_particle();
  ::CDOTAUserMsg_ParticleManager_CreateParticle* temp = create_particle_;
  create_particle_ = NULL;
  return temp;
}

// optional .CDOTAUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;
inline bool CDOTAUserMsg_ParticleManager::has_destroy_particle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDOTAUserMsg_ParticleManager::set_has_destroy_particle() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CDOTAUserMsg_ParticleManager::clear_has_destroy_particle() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CDOTAUserMsg_ParticleManager::clear_destroy_particle() {
  if (destroy_particle_ != NULL) destroy_particle_->::CDOTAUserMsg_ParticleManager_DestroyParticle::Clear();
  clear_has_destroy_particle();
}
inline const ::CDOTAUserMsg_ParticleManager_DestroyParticle& CDOTAUserMsg_ParticleManager::destroy_particle() const {
  return destroy_particle_ != NULL ? *destroy_particle_ : *default_instance_->destroy_particle_;
}
inline ::CDOTAUserMsg_ParticleManager_DestroyParticle* CDOTAUserMsg_ParticleManager::mutable_destroy_particle() {
  set_has_destroy_particle();
  if (destroy_particle_ == NULL) destroy_particle_ = new ::CDOTAUserMsg_ParticleManager_DestroyParticle;
  return destroy_particle_;
}
inline ::CDOTAUserMsg_ParticleManager_DestroyParticle* CDOTAUserMsg_ParticleManager::release_destroy_particle() {
  clear_has_destroy_particle();
  ::CDOTAUserMsg_ParticleManager_DestroyParticle* temp = destroy_particle_;
  destroy_particle_ = NULL;
  return temp;
}

// optional .CDOTAUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;
inline bool CDOTAUserMsg_ParticleManager::has_destroy_particle_involving() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CDOTAUserMsg_ParticleManager::set_has_destroy_particle_involving() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CDOTAUserMsg_ParticleManager::clear_has_destroy_particle_involving() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CDOTAUserMsg_ParticleManager::clear_destroy_particle_involving() {
  if (destroy_particle_involving_ != NULL) destroy_particle_involving_->::CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::Clear();
  clear_has_destroy_particle_involving();
}
inline const ::CDOTAUserMsg_ParticleManager_DestroyParticleInvolving& CDOTAUserMsg_ParticleManager::destroy_particle_involving() const {
  return destroy_particle_involving_ != NULL ? *destroy_particle_involving_ : *default_instance_->destroy_particle_involving_;
}
inline ::CDOTAUserMsg_ParticleManager_DestroyParticleInvolving* CDOTAUserMsg_ParticleManager::mutable_destroy_particle_involving() {
  set_has_destroy_particle_involving();
  if (destroy_particle_involving_ == NULL) destroy_particle_involving_ = new ::CDOTAUserMsg_ParticleManager_DestroyParticleInvolving;
  return destroy_particle_involving_;
}
inline ::CDOTAUserMsg_ParticleManager_DestroyParticleInvolving* CDOTAUserMsg_ParticleManager::release_destroy_particle_involving() {
  clear_has_destroy_particle_involving();
  ::CDOTAUserMsg_ParticleManager_DestroyParticleInvolving* temp = destroy_particle_involving_;
  destroy_particle_involving_ = NULL;
  return temp;
}

// optional .CDOTAUserMsg_ParticleManager.UpdateParticle update_particle = 7;
inline bool CDOTAUserMsg_ParticleManager::has_update_particle() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CDOTAUserMsg_ParticleManager::set_has_update_particle() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CDOTAUserMsg_ParticleManager::clear_has_update_particle() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CDOTAUserMsg_ParticleManager::clear_update_particle() {
  if (update_particle_ != NULL) update_particle_->::CDOTAUserMsg_ParticleManager_UpdateParticle::Clear();
  clear_has_update_particle();
}
inline const ::CDOTAUserMsg_ParticleManager_UpdateParticle& CDOTAUserMsg_ParticleManager::update_particle() const {
  return update_particle_ != NULL ? *update_particle_ : *default_instance_->update_particle_;
}
inline ::CDOTAUserMsg_ParticleManager_UpdateParticle* CDOTAUserMsg_ParticleManager::mutable_update_particle() {
  set_has_update_particle();
  if (update_particle_ == NULL) update_particle_ = new ::CDOTAUserMsg_ParticleManager_UpdateParticle;
  return update_particle_;
}
inline ::CDOTAUserMsg_ParticleManager_UpdateParticle* CDOTAUserMsg_ParticleManager::release_update_particle() {
  clear_has_update_particle();
  ::CDOTAUserMsg_ParticleManager_UpdateParticle* temp = update_particle_;
  update_particle_ = NULL;
  return temp;
}

// optional .CDOTAUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;
inline bool CDOTAUserMsg_ParticleManager::has_update_particle_fwd() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CDOTAUserMsg_ParticleManager::set_has_update_particle_fwd() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CDOTAUserMsg_ParticleManager::clear_has_update_particle_fwd() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CDOTAUserMsg_ParticleManager::clear_update_particle_fwd() {
  if (update_particle_fwd_ != NULL) update_particle_fwd_->::CDOTAUserMsg_ParticleManager_UpdateParticleFwd::Clear();
  clear_has_update_particle_fwd();
}
inline const ::CDOTAUserMsg_ParticleManager_UpdateParticleFwd& CDOTAUserMsg_ParticleManager::update_particle_fwd() const {
  return update_particle_fwd_ != NULL ? *update_particle_fwd_ : *default_instance_->update_particle_fwd_;
}
inline ::CDOTAUserMsg_ParticleManager_UpdateParticleFwd* CDOTAUserMsg_ParticleManager::mutable_update_particle_fwd() {
  set_has_update_particle_fwd();
  if (update_particle_fwd_ == NULL) update_particle_fwd_ = new ::CDOTAUserMsg_ParticleManager_UpdateParticleFwd;
  return update_particle_fwd_;
}
inline ::CDOTAUserMsg_ParticleManager_UpdateParticleFwd* CDOTAUserMsg_ParticleManager::release_update_particle_fwd() {
  clear_has_update_particle_fwd();
  ::CDOTAUserMsg_ParticleManager_UpdateParticleFwd* temp = update_particle_fwd_;
  update_particle_fwd_ = NULL;
  return temp;
}

// optional .CDOTAUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;
inline bool CDOTAUserMsg_ParticleManager::has_update_particle_orient() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CDOTAUserMsg_ParticleManager::set_has_update_particle_orient() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CDOTAUserMsg_ParticleManager::clear_has_update_particle_orient() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CDOTAUserMsg_ParticleManager::clear_update_particle_orient() {
  if (update_particle_orient_ != NULL) update_particle_orient_->::CDOTAUserMsg_ParticleManager_UpdateParticleOrient::Clear();
  clear_has_update_particle_orient();
}
inline const ::CDOTAUserMsg_ParticleManager_UpdateParticleOrient& CDOTAUserMsg_ParticleManager::update_particle_orient() const {
  return update_particle_orient_ != NULL ? *update_particle_orient_ : *default_instance_->update_particle_orient_;
}
inline ::CDOTAUserMsg_ParticleManager_UpdateParticleOrient* CDOTAUserMsg_ParticleManager::mutable_update_particle_orient() {
  set_has_update_particle_orient();
  if (update_particle_orient_ == NULL) update_particle_orient_ = new ::CDOTAUserMsg_ParticleManager_UpdateParticleOrient;
  return update_particle_orient_;
}
inline ::CDOTAUserMsg_ParticleManager_UpdateParticleOrient* CDOTAUserMsg_ParticleManager::release_update_particle_orient() {
  clear_has_update_particle_orient();
  ::CDOTAUserMsg_ParticleManager_UpdateParticleOrient* temp = update_particle_orient_;
  update_particle_orient_ = NULL;
  return temp;
}

// optional .CDOTAUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;
inline bool CDOTAUserMsg_ParticleManager::has_update_particle_fallback() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CDOTAUserMsg_ParticleManager::set_has_update_particle_fallback() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CDOTAUserMsg_ParticleManager::clear_has_update_particle_fallback() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CDOTAUserMsg_ParticleManager::clear_update_particle_fallback() {
  if (update_particle_fallback_ != NULL) update_particle_fallback_->::CDOTAUserMsg_ParticleManager_UpdateParticleFallback::Clear();
  clear_has_update_particle_fallback();
}
inline const ::CDOTAUserMsg_ParticleManager_UpdateParticleFallback& CDOTAUserMsg_ParticleManager::update_particle_fallback() const {
  return update_particle_fallback_ != NULL ? *update_particle_fallback_ : *default_instance_->update_particle_fallback_;
}
inline ::CDOTAUserMsg_ParticleManager_UpdateParticleFallback* CDOTAUserMsg_ParticleManager::mutable_update_particle_fallback() {
  set_has_update_particle_fallback();
  if (update_particle_fallback_ == NULL) update_particle_fallback_ = new ::CDOTAUserMsg_ParticleManager_UpdateParticleFallback;
  return update_particle_fallback_;
}
inline ::CDOTAUserMsg_ParticleManager_UpdateParticleFallback* CDOTAUserMsg_ParticleManager::release_update_particle_fallback() {
  clear_has_update_particle_fallback();
  ::CDOTAUserMsg_ParticleManager_UpdateParticleFallback* temp = update_particle_fallback_;
  update_particle_fallback_ = NULL;
  return temp;
}

// optional .CDOTAUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;
inline bool CDOTAUserMsg_ParticleManager::has_update_particle_offset() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CDOTAUserMsg_ParticleManager::set_has_update_particle_offset() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CDOTAUserMsg_ParticleManager::clear_has_update_particle_offset() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CDOTAUserMsg_ParticleManager::clear_update_particle_offset() {
  if (update_particle_offset_ != NULL) update_particle_offset_->::CDOTAUserMsg_ParticleManager_UpdateParticleOffset::Clear();
  clear_has_update_particle_offset();
}
inline const ::CDOTAUserMsg_ParticleManager_UpdateParticleOffset& CDOTAUserMsg_ParticleManager::update_particle_offset() const {
  return update_particle_offset_ != NULL ? *update_particle_offset_ : *default_instance_->update_particle_offset_;
}
inline ::CDOTAUserMsg_ParticleManager_UpdateParticleOffset* CDOTAUserMsg_ParticleManager::mutable_update_particle_offset() {
  set_has_update_particle_offset();
  if (update_particle_offset_ == NULL) update_particle_offset_ = new ::CDOTAUserMsg_ParticleManager_UpdateParticleOffset;
  return update_particle_offset_;
}
inline ::CDOTAUserMsg_ParticleManager_UpdateParticleOffset* CDOTAUserMsg_ParticleManager::release_update_particle_offset() {
  clear_has_update_particle_offset();
  ::CDOTAUserMsg_ParticleManager_UpdateParticleOffset* temp = update_particle_offset_;
  update_particle_offset_ = NULL;
  return temp;
}

// optional .CDOTAUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;
inline bool CDOTAUserMsg_ParticleManager::has_update_particle_ent() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CDOTAUserMsg_ParticleManager::set_has_update_particle_ent() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CDOTAUserMsg_ParticleManager::clear_has_update_particle_ent() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CDOTAUserMsg_ParticleManager::clear_update_particle_ent() {
  if (update_particle_ent_ != NULL) update_particle_ent_->::CDOTAUserMsg_ParticleManager_UpdateParticleEnt::Clear();
  clear_has_update_particle_ent();
}
inline const ::CDOTAUserMsg_ParticleManager_UpdateParticleEnt& CDOTAUserMsg_ParticleManager::update_particle_ent() const {
  return update_particle_ent_ != NULL ? *update_particle_ent_ : *default_instance_->update_particle_ent_;
}
inline ::CDOTAUserMsg_ParticleManager_UpdateParticleEnt* CDOTAUserMsg_ParticleManager::mutable_update_particle_ent() {
  set_has_update_particle_ent();
  if (update_particle_ent_ == NULL) update_particle_ent_ = new ::CDOTAUserMsg_ParticleManager_UpdateParticleEnt;
  return update_particle_ent_;
}
inline ::CDOTAUserMsg_ParticleManager_UpdateParticleEnt* CDOTAUserMsg_ParticleManager::release_update_particle_ent() {
  clear_has_update_particle_ent();
  ::CDOTAUserMsg_ParticleManager_UpdateParticleEnt* temp = update_particle_ent_;
  update_particle_ent_ = NULL;
  return temp;
}

// optional .CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw update_particle_should_draw = 14;
inline bool CDOTAUserMsg_ParticleManager::has_update_particle_should_draw() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CDOTAUserMsg_ParticleManager::set_has_update_particle_should_draw() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CDOTAUserMsg_ParticleManager::clear_has_update_particle_should_draw() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CDOTAUserMsg_ParticleManager::clear_update_particle_should_draw() {
  if (update_particle_should_draw_ != NULL) update_particle_should_draw_->::CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::Clear();
  clear_has_update_particle_should_draw();
}
inline const ::CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw& CDOTAUserMsg_ParticleManager::update_particle_should_draw() const {
  return update_particle_should_draw_ != NULL ? *update_particle_should_draw_ : *default_instance_->update_particle_should_draw_;
}
inline ::CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw* CDOTAUserMsg_ParticleManager::mutable_update_particle_should_draw() {
  set_has_update_particle_should_draw();
  if (update_particle_should_draw_ == NULL) update_particle_should_draw_ = new ::CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw;
  return update_particle_should_draw_;
}
inline ::CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw* CDOTAUserMsg_ParticleManager::release_update_particle_should_draw() {
  clear_has_update_particle_should_draw();
  ::CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw* temp = update_particle_should_draw_;
  update_particle_should_draw_ = NULL;
  return temp;
}

// optional .CDOTAUserMsg_ParticleManager.UpdateParticleSetFrozen update_particle_set_frozen = 15;
inline bool CDOTAUserMsg_ParticleManager::has_update_particle_set_frozen() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CDOTAUserMsg_ParticleManager::set_has_update_particle_set_frozen() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CDOTAUserMsg_ParticleManager::clear_has_update_particle_set_frozen() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CDOTAUserMsg_ParticleManager::clear_update_particle_set_frozen() {
  if (update_particle_set_frozen_ != NULL) update_particle_set_frozen_->::CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::Clear();
  clear_has_update_particle_set_frozen();
}
inline const ::CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen& CDOTAUserMsg_ParticleManager::update_particle_set_frozen() const {
  return update_particle_set_frozen_ != NULL ? *update_particle_set_frozen_ : *default_instance_->update_particle_set_frozen_;
}
inline ::CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen* CDOTAUserMsg_ParticleManager::mutable_update_particle_set_frozen() {
  set_has_update_particle_set_frozen();
  if (update_particle_set_frozen_ == NULL) update_particle_set_frozen_ = new ::CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen;
  return update_particle_set_frozen_;
}
inline ::CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen* CDOTAUserMsg_ParticleManager::release_update_particle_set_frozen() {
  clear_has_update_particle_set_frozen();
  ::CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen* temp = update_particle_set_frozen_;
  update_particle_set_frozen_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_OverheadEvent

// required .DOTA_OVERHEAD_ALERT message_type = 1 [default = OVERHEAD_ALERT_GOLD];
inline bool CDOTAUserMsg_OverheadEvent::has_message_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_OverheadEvent::set_has_message_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_OverheadEvent::clear_has_message_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_OverheadEvent::clear_message_type() {
  message_type_ = 0;
  clear_has_message_type();
}
inline DOTA_OVERHEAD_ALERT CDOTAUserMsg_OverheadEvent::message_type() const {
  return static_cast< DOTA_OVERHEAD_ALERT >(message_type_);
}
inline void CDOTAUserMsg_OverheadEvent::set_message_type(DOTA_OVERHEAD_ALERT value) {
  GOOGLE_DCHECK(DOTA_OVERHEAD_ALERT_IsValid(value));
  set_has_message_type();
  message_type_ = value;
}

// optional int32 value = 2;
inline bool CDOTAUserMsg_OverheadEvent::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_OverheadEvent::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_OverheadEvent::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_OverheadEvent::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 CDOTAUserMsg_OverheadEvent::value() const {
  return value_;
}
inline void CDOTAUserMsg_OverheadEvent::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// optional int32 target_player_entindex = 3;
inline bool CDOTAUserMsg_OverheadEvent::has_target_player_entindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAUserMsg_OverheadEvent::set_has_target_player_entindex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTAUserMsg_OverheadEvent::clear_has_target_player_entindex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTAUserMsg_OverheadEvent::clear_target_player_entindex() {
  target_player_entindex_ = 0;
  clear_has_target_player_entindex();
}
inline ::google::protobuf::int32 CDOTAUserMsg_OverheadEvent::target_player_entindex() const {
  return target_player_entindex_;
}
inline void CDOTAUserMsg_OverheadEvent::set_target_player_entindex(::google::protobuf::int32 value) {
  set_has_target_player_entindex();
  target_player_entindex_ = value;
}

// optional int32 target_entindex = 4;
inline bool CDOTAUserMsg_OverheadEvent::has_target_entindex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTAUserMsg_OverheadEvent::set_has_target_entindex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDOTAUserMsg_OverheadEvent::clear_has_target_entindex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDOTAUserMsg_OverheadEvent::clear_target_entindex() {
  target_entindex_ = 0;
  clear_has_target_entindex();
}
inline ::google::protobuf::int32 CDOTAUserMsg_OverheadEvent::target_entindex() const {
  return target_entindex_;
}
inline void CDOTAUserMsg_OverheadEvent::set_target_entindex(::google::protobuf::int32 value) {
  set_has_target_entindex();
  target_entindex_ = value;
}

// optional int32 source_player_entindex = 5;
inline bool CDOTAUserMsg_OverheadEvent::has_source_player_entindex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDOTAUserMsg_OverheadEvent::set_has_source_player_entindex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CDOTAUserMsg_OverheadEvent::clear_has_source_player_entindex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CDOTAUserMsg_OverheadEvent::clear_source_player_entindex() {
  source_player_entindex_ = 0;
  clear_has_source_player_entindex();
}
inline ::google::protobuf::int32 CDOTAUserMsg_OverheadEvent::source_player_entindex() const {
  return source_player_entindex_;
}
inline void CDOTAUserMsg_OverheadEvent::set_source_player_entindex(::google::protobuf::int32 value) {
  set_has_source_player_entindex();
  source_player_entindex_ = value;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_TutorialTipInfo

// optional string name = 1;
inline bool CDOTAUserMsg_TutorialTipInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_TutorialTipInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_TutorialTipInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_TutorialTipInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CDOTAUserMsg_TutorialTipInfo::name() const {
  return *name_;
}
inline void CDOTAUserMsg_TutorialTipInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CDOTAUserMsg_TutorialTipInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CDOTAUserMsg_TutorialTipInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDOTAUserMsg_TutorialTipInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CDOTAUserMsg_TutorialTipInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 progress = 2;
inline bool CDOTAUserMsg_TutorialTipInfo::has_progress() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_TutorialTipInfo::set_has_progress() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_TutorialTipInfo::clear_has_progress() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_TutorialTipInfo::clear_progress() {
  progress_ = 0;
  clear_has_progress();
}
inline ::google::protobuf::int32 CDOTAUserMsg_TutorialTipInfo::progress() const {
  return progress_;
}
inline void CDOTAUserMsg_TutorialTipInfo::set_progress(::google::protobuf::int32 value) {
  set_has_progress();
  progress_ = value;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_TutorialFinish

// optional string heading = 1;
inline bool CDOTAUserMsg_TutorialFinish::has_heading() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_TutorialFinish::set_has_heading() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_TutorialFinish::clear_has_heading() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_TutorialFinish::clear_heading() {
  if (heading_ != &::google::protobuf::internal::kEmptyString) {
    heading_->clear();
  }
  clear_has_heading();
}
inline const ::std::string& CDOTAUserMsg_TutorialFinish::heading() const {
  return *heading_;
}
inline void CDOTAUserMsg_TutorialFinish::set_heading(const ::std::string& value) {
  set_has_heading();
  if (heading_ == &::google::protobuf::internal::kEmptyString) {
    heading_ = new ::std::string;
  }
  heading_->assign(value);
}
inline void CDOTAUserMsg_TutorialFinish::set_heading(const char* value) {
  set_has_heading();
  if (heading_ == &::google::protobuf::internal::kEmptyString) {
    heading_ = new ::std::string;
  }
  heading_->assign(value);
}
inline void CDOTAUserMsg_TutorialFinish::set_heading(const char* value, size_t size) {
  set_has_heading();
  if (heading_ == &::google::protobuf::internal::kEmptyString) {
    heading_ = new ::std::string;
  }
  heading_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDOTAUserMsg_TutorialFinish::mutable_heading() {
  set_has_heading();
  if (heading_ == &::google::protobuf::internal::kEmptyString) {
    heading_ = new ::std::string;
  }
  return heading_;
}
inline ::std::string* CDOTAUserMsg_TutorialFinish::release_heading() {
  clear_has_heading();
  if (heading_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = heading_;
    heading_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string emblem = 2;
inline bool CDOTAUserMsg_TutorialFinish::has_emblem() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_TutorialFinish::set_has_emblem() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_TutorialFinish::clear_has_emblem() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_TutorialFinish::clear_emblem() {
  if (emblem_ != &::google::protobuf::internal::kEmptyString) {
    emblem_->clear();
  }
  clear_has_emblem();
}
inline const ::std::string& CDOTAUserMsg_TutorialFinish::emblem() const {
  return *emblem_;
}
inline void CDOTAUserMsg_TutorialFinish::set_emblem(const ::std::string& value) {
  set_has_emblem();
  if (emblem_ == &::google::protobuf::internal::kEmptyString) {
    emblem_ = new ::std::string;
  }
  emblem_->assign(value);
}
inline void CDOTAUserMsg_TutorialFinish::set_emblem(const char* value) {
  set_has_emblem();
  if (emblem_ == &::google::protobuf::internal::kEmptyString) {
    emblem_ = new ::std::string;
  }
  emblem_->assign(value);
}
inline void CDOTAUserMsg_TutorialFinish::set_emblem(const char* value, size_t size) {
  set_has_emblem();
  if (emblem_ == &::google::protobuf::internal::kEmptyString) {
    emblem_ = new ::std::string;
  }
  emblem_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDOTAUserMsg_TutorialFinish::mutable_emblem() {
  set_has_emblem();
  if (emblem_ == &::google::protobuf::internal::kEmptyString) {
    emblem_ = new ::std::string;
  }
  return emblem_;
}
inline ::std::string* CDOTAUserMsg_TutorialFinish::release_emblem() {
  clear_has_emblem();
  if (emblem_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = emblem_;
    emblem_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string body = 3;
inline bool CDOTAUserMsg_TutorialFinish::has_body() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAUserMsg_TutorialFinish::set_has_body() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTAUserMsg_TutorialFinish::clear_has_body() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTAUserMsg_TutorialFinish::clear_body() {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    body_->clear();
  }
  clear_has_body();
}
inline const ::std::string& CDOTAUserMsg_TutorialFinish::body() const {
  return *body_;
}
inline void CDOTAUserMsg_TutorialFinish::set_body(const ::std::string& value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void CDOTAUserMsg_TutorialFinish::set_body(const char* value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void CDOTAUserMsg_TutorialFinish::set_body(const char* value, size_t size) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDOTAUserMsg_TutorialFinish::mutable_body() {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  return body_;
}
inline ::std::string* CDOTAUserMsg_TutorialFinish::release_body() {
  clear_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = body_;
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool success = 4;
inline bool CDOTAUserMsg_TutorialFinish::has_success() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTAUserMsg_TutorialFinish::set_has_success() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDOTAUserMsg_TutorialFinish::clear_has_success() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDOTAUserMsg_TutorialFinish::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool CDOTAUserMsg_TutorialFinish::success() const {
  return success_;
}
inline void CDOTAUserMsg_TutorialFinish::set_success(bool value) {
  set_has_success();
  success_ = value;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_TutorialMinimapPosition

// -------------------------------------------------------------------

// CDOTAUserMsg_SendGenericToolTip

// optional string title = 1;
inline bool CDOTAUserMsg_SendGenericToolTip::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_SendGenericToolTip::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_SendGenericToolTip::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_SendGenericToolTip::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& CDOTAUserMsg_SendGenericToolTip::title() const {
  return *title_;
}
inline void CDOTAUserMsg_SendGenericToolTip::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void CDOTAUserMsg_SendGenericToolTip::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void CDOTAUserMsg_SendGenericToolTip::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDOTAUserMsg_SendGenericToolTip::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* CDOTAUserMsg_SendGenericToolTip::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string text = 2;
inline bool CDOTAUserMsg_SendGenericToolTip::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_SendGenericToolTip::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_SendGenericToolTip::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_SendGenericToolTip::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& CDOTAUserMsg_SendGenericToolTip::text() const {
  return *text_;
}
inline void CDOTAUserMsg_SendGenericToolTip::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void CDOTAUserMsg_SendGenericToolTip::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void CDOTAUserMsg_SendGenericToolTip::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDOTAUserMsg_SendGenericToolTip::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* CDOTAUserMsg_SendGenericToolTip::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 entindex = 3;
inline bool CDOTAUserMsg_SendGenericToolTip::has_entindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAUserMsg_SendGenericToolTip::set_has_entindex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTAUserMsg_SendGenericToolTip::clear_has_entindex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTAUserMsg_SendGenericToolTip::clear_entindex() {
  entindex_ = 0;
  clear_has_entindex();
}
inline ::google::protobuf::int32 CDOTAUserMsg_SendGenericToolTip::entindex() const {
  return entindex_;
}
inline void CDOTAUserMsg_SendGenericToolTip::set_entindex(::google::protobuf::int32 value) {
  set_has_entindex();
  entindex_ = value;
}

// optional bool close = 4;
inline bool CDOTAUserMsg_SendGenericToolTip::has_close() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTAUserMsg_SendGenericToolTip::set_has_close() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDOTAUserMsg_SendGenericToolTip::clear_has_close() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDOTAUserMsg_SendGenericToolTip::clear_close() {
  close_ = false;
  clear_has_close();
}
inline bool CDOTAUserMsg_SendGenericToolTip::close() const {
  return close_;
}
inline void CDOTAUserMsg_SendGenericToolTip::set_close(bool value) {
  set_has_close();
  close_ = value;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_WorldLine

// optional int32 player_id = 1;
inline bool CDOTAUserMsg_WorldLine::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_WorldLine::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_WorldLine::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_WorldLine::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 CDOTAUserMsg_WorldLine::player_id() const {
  return player_id_;
}
inline void CDOTAUserMsg_WorldLine::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional .CDOTAMsg_WorldLine worldline = 2;
inline bool CDOTAUserMsg_WorldLine::has_worldline() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_WorldLine::set_has_worldline() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_WorldLine::clear_has_worldline() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_WorldLine::clear_worldline() {
  if (worldline_ != NULL) worldline_->::CDOTAMsg_WorldLine::Clear();
  clear_has_worldline();
}
inline const ::CDOTAMsg_WorldLine& CDOTAUserMsg_WorldLine::worldline() const {
  return worldline_ != NULL ? *worldline_ : *default_instance_->worldline_;
}
inline ::CDOTAMsg_WorldLine* CDOTAUserMsg_WorldLine::mutable_worldline() {
  set_has_worldline();
  if (worldline_ == NULL) worldline_ = new ::CDOTAMsg_WorldLine;
  return worldline_;
}
inline ::CDOTAMsg_WorldLine* CDOTAUserMsg_WorldLine::release_worldline() {
  clear_has_worldline();
  ::CDOTAMsg_WorldLine* temp = worldline_;
  worldline_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_TournamentDrop

// optional string winner_name = 1;
inline bool CDOTAUserMsg_TournamentDrop::has_winner_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_TournamentDrop::set_has_winner_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_TournamentDrop::clear_has_winner_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_TournamentDrop::clear_winner_name() {
  if (winner_name_ != &::google::protobuf::internal::kEmptyString) {
    winner_name_->clear();
  }
  clear_has_winner_name();
}
inline const ::std::string& CDOTAUserMsg_TournamentDrop::winner_name() const {
  return *winner_name_;
}
inline void CDOTAUserMsg_TournamentDrop::set_winner_name(const ::std::string& value) {
  set_has_winner_name();
  if (winner_name_ == &::google::protobuf::internal::kEmptyString) {
    winner_name_ = new ::std::string;
  }
  winner_name_->assign(value);
}
inline void CDOTAUserMsg_TournamentDrop::set_winner_name(const char* value) {
  set_has_winner_name();
  if (winner_name_ == &::google::protobuf::internal::kEmptyString) {
    winner_name_ = new ::std::string;
  }
  winner_name_->assign(value);
}
inline void CDOTAUserMsg_TournamentDrop::set_winner_name(const char* value, size_t size) {
  set_has_winner_name();
  if (winner_name_ == &::google::protobuf::internal::kEmptyString) {
    winner_name_ = new ::std::string;
  }
  winner_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDOTAUserMsg_TournamentDrop::mutable_winner_name() {
  set_has_winner_name();
  if (winner_name_ == &::google::protobuf::internal::kEmptyString) {
    winner_name_ = new ::std::string;
  }
  return winner_name_;
}
inline ::std::string* CDOTAUserMsg_TournamentDrop::release_winner_name() {
  clear_has_winner_name();
  if (winner_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = winner_name_;
    winner_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 event_type = 2;
inline bool CDOTAUserMsg_TournamentDrop::has_event_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_TournamentDrop::set_has_event_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_TournamentDrop::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_TournamentDrop::clear_event_type() {
  event_type_ = 0;
  clear_has_event_type();
}
inline ::google::protobuf::int32 CDOTAUserMsg_TournamentDrop::event_type() const {
  return event_type_;
}
inline void CDOTAUserMsg_TournamentDrop::set_event_type(::google::protobuf::int32 value) {
  set_has_event_type();
  event_type_ = value;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_ChatWheel

// optional .EDOTAChatWheelMessage chat_message = 1 [default = k_EDOTA_CW_Ok];
inline bool CDOTAUserMsg_ChatWheel::has_chat_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_ChatWheel::set_has_chat_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_ChatWheel::clear_has_chat_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_ChatWheel::clear_chat_message() {
  chat_message_ = 0;
  clear_has_chat_message();
}
inline EDOTAChatWheelMessage CDOTAUserMsg_ChatWheel::chat_message() const {
  return static_cast< EDOTAChatWheelMessage >(chat_message_);
}
inline void CDOTAUserMsg_ChatWheel::set_chat_message(EDOTAChatWheelMessage value) {
  GOOGLE_DCHECK(EDOTAChatWheelMessage_IsValid(value));
  set_has_chat_message();
  chat_message_ = value;
}

// optional uint32 player_id = 2;
inline bool CDOTAUserMsg_ChatWheel::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_ChatWheel::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_ChatWheel::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_ChatWheel::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
inline ::google::protobuf::uint32 CDOTAUserMsg_ChatWheel::player_id() const {
  return player_id_;
}
inline void CDOTAUserMsg_ChatWheel::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional uint32 account_id = 3;
inline bool CDOTAUserMsg_ChatWheel::has_account_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAUserMsg_ChatWheel::set_has_account_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTAUserMsg_ChatWheel::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTAUserMsg_ChatWheel::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CDOTAUserMsg_ChatWheel::account_id() const {
  return account_id_;
}
inline void CDOTAUserMsg_ChatWheel::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
}

// optional uint32 param_hero_id = 4;
inline bool CDOTAUserMsg_ChatWheel::has_param_hero_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTAUserMsg_ChatWheel::set_has_param_hero_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDOTAUserMsg_ChatWheel::clear_has_param_hero_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDOTAUserMsg_ChatWheel::clear_param_hero_id() {
  param_hero_id_ = 0u;
  clear_has_param_hero_id();
}
inline ::google::protobuf::uint32 CDOTAUserMsg_ChatWheel::param_hero_id() const {
  return param_hero_id_;
}
inline void CDOTAUserMsg_ChatWheel::set_param_hero_id(::google::protobuf::uint32 value) {
  set_has_param_hero_id();
  param_hero_id_ = value;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_ReceivedXmasGift

// optional int32 player_id = 1;
inline bool CDOTAUserMsg_ReceivedXmasGift::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_ReceivedXmasGift::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_ReceivedXmasGift::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_ReceivedXmasGift::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 CDOTAUserMsg_ReceivedXmasGift::player_id() const {
  return player_id_;
}
inline void CDOTAUserMsg_ReceivedXmasGift::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional string item_name = 2;
inline bool CDOTAUserMsg_ReceivedXmasGift::has_item_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_ReceivedXmasGift::set_has_item_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_ReceivedXmasGift::clear_has_item_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_ReceivedXmasGift::clear_item_name() {
  if (item_name_ != &::google::protobuf::internal::kEmptyString) {
    item_name_->clear();
  }
  clear_has_item_name();
}
inline const ::std::string& CDOTAUserMsg_ReceivedXmasGift::item_name() const {
  return *item_name_;
}
inline void CDOTAUserMsg_ReceivedXmasGift::set_item_name(const ::std::string& value) {
  set_has_item_name();
  if (item_name_ == &::google::protobuf::internal::kEmptyString) {
    item_name_ = new ::std::string;
  }
  item_name_->assign(value);
}
inline void CDOTAUserMsg_ReceivedXmasGift::set_item_name(const char* value) {
  set_has_item_name();
  if (item_name_ == &::google::protobuf::internal::kEmptyString) {
    item_name_ = new ::std::string;
  }
  item_name_->assign(value);
}
inline void CDOTAUserMsg_ReceivedXmasGift::set_item_name(const char* value, size_t size) {
  set_has_item_name();
  if (item_name_ == &::google::protobuf::internal::kEmptyString) {
    item_name_ = new ::std::string;
  }
  item_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDOTAUserMsg_ReceivedXmasGift::mutable_item_name() {
  set_has_item_name();
  if (item_name_ == &::google::protobuf::internal::kEmptyString) {
    item_name_ = new ::std::string;
  }
  return item_name_;
}
inline ::std::string* CDOTAUserMsg_ReceivedXmasGift::release_item_name() {
  clear_has_item_name();
  if (item_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = item_name_;
    item_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 inventory_slot = 3;
inline bool CDOTAUserMsg_ReceivedXmasGift::has_inventory_slot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAUserMsg_ReceivedXmasGift::set_has_inventory_slot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTAUserMsg_ReceivedXmasGift::clear_has_inventory_slot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTAUserMsg_ReceivedXmasGift::clear_inventory_slot() {
  inventory_slot_ = 0;
  clear_has_inventory_slot();
}
inline ::google::protobuf::int32 CDOTAUserMsg_ReceivedXmasGift::inventory_slot() const {
  return inventory_slot_;
}
inline void CDOTAUserMsg_ReceivedXmasGift::set_inventory_slot(::google::protobuf::int32 value) {
  set_has_inventory_slot();
  inventory_slot_ = value;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_ShowSurvey

// optional int32 survey_id = 1;
inline bool CDOTAUserMsg_ShowSurvey::has_survey_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_ShowSurvey::set_has_survey_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_ShowSurvey::clear_has_survey_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_ShowSurvey::clear_survey_id() {
  survey_id_ = 0;
  clear_has_survey_id();
}
inline ::google::protobuf::int32 CDOTAUserMsg_ShowSurvey::survey_id() const {
  return survey_id_;
}
inline void CDOTAUserMsg_ShowSurvey::set_survey_id(::google::protobuf::int32 value) {
  set_has_survey_id();
  survey_id_ = value;
}

// optional uint32 match_id = 2;
inline bool CDOTAUserMsg_ShowSurvey::has_match_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_ShowSurvey::set_has_match_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_ShowSurvey::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_ShowSurvey::clear_match_id() {
  match_id_ = 0u;
  clear_has_match_id();
}
inline ::google::protobuf::uint32 CDOTAUserMsg_ShowSurvey::match_id() const {
  return match_id_;
}
inline void CDOTAUserMsg_ShowSurvey::set_match_id(::google::protobuf::uint32 value) {
  set_has_match_id();
  match_id_ = value;
}

// optional string response_style = 3;
inline bool CDOTAUserMsg_ShowSurvey::has_response_style() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAUserMsg_ShowSurvey::set_has_response_style() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTAUserMsg_ShowSurvey::clear_has_response_style() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTAUserMsg_ShowSurvey::clear_response_style() {
  if (response_style_ != &::google::protobuf::internal::kEmptyString) {
    response_style_->clear();
  }
  clear_has_response_style();
}
inline const ::std::string& CDOTAUserMsg_ShowSurvey::response_style() const {
  return *response_style_;
}
inline void CDOTAUserMsg_ShowSurvey::set_response_style(const ::std::string& value) {
  set_has_response_style();
  if (response_style_ == &::google::protobuf::internal::kEmptyString) {
    response_style_ = new ::std::string;
  }
  response_style_->assign(value);
}
inline void CDOTAUserMsg_ShowSurvey::set_response_style(const char* value) {
  set_has_response_style();
  if (response_style_ == &::google::protobuf::internal::kEmptyString) {
    response_style_ = new ::std::string;
  }
  response_style_->assign(value);
}
inline void CDOTAUserMsg_ShowSurvey::set_response_style(const char* value, size_t size) {
  set_has_response_style();
  if (response_style_ == &::google::protobuf::internal::kEmptyString) {
    response_style_ = new ::std::string;
  }
  response_style_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDOTAUserMsg_ShowSurvey::mutable_response_style() {
  set_has_response_style();
  if (response_style_ == &::google::protobuf::internal::kEmptyString) {
    response_style_ = new ::std::string;
  }
  return response_style_;
}
inline ::std::string* CDOTAUserMsg_ShowSurvey::release_response_style() {
  clear_has_response_style();
  if (response_style_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = response_style_;
    response_style_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CDOTAUserMsg_UpdateSharedContent

// optional int32 slot_type = 1;
inline bool CDOTAUserMsg_UpdateSharedContent::has_slot_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_UpdateSharedContent::set_has_slot_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_UpdateSharedContent::clear_has_slot_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_UpdateSharedContent::clear_slot_type() {
  slot_type_ = 0;
  clear_has_slot_type();
}
inline ::google::protobuf::int32 CDOTAUserMsg_UpdateSharedContent::slot_type() const {
  return slot_type_;
}
inline void CDOTAUserMsg_UpdateSharedContent::set_slot_type(::google::protobuf::int32 value) {
  set_has_slot_type();
  slot_type_ = value;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_TutorialRequestExp

// -------------------------------------------------------------------

// CDOTAUserMsg_TutorialFade

// optional int32 tgt_alpha = 1;
inline bool CDOTAUserMsg_TutorialFade::has_tgt_alpha() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_TutorialFade::set_has_tgt_alpha() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_TutorialFade::clear_has_tgt_alpha() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_TutorialFade::clear_tgt_alpha() {
  tgt_alpha_ = 0;
  clear_has_tgt_alpha();
}
inline ::google::protobuf::int32 CDOTAUserMsg_TutorialFade::tgt_alpha() const {
  return tgt_alpha_;
}
inline void CDOTAUserMsg_TutorialFade::set_tgt_alpha(::google::protobuf::int32 value) {
  set_has_tgt_alpha();
  tgt_alpha_ = value;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_TutorialPingMinimap

// optional uint32 player_id = 1;
inline bool CDOTAUserMsg_TutorialPingMinimap::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_TutorialPingMinimap::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_TutorialPingMinimap::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_TutorialPingMinimap::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
inline ::google::protobuf::uint32 CDOTAUserMsg_TutorialPingMinimap::player_id() const {
  return player_id_;
}
inline void CDOTAUserMsg_TutorialPingMinimap::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional float pos_x = 2;
inline bool CDOTAUserMsg_TutorialPingMinimap::has_pos_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_TutorialPingMinimap::set_has_pos_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_TutorialPingMinimap::clear_has_pos_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_TutorialPingMinimap::clear_pos_x() {
  pos_x_ = 0;
  clear_has_pos_x();
}
inline float CDOTAUserMsg_TutorialPingMinimap::pos_x() const {
  return pos_x_;
}
inline void CDOTAUserMsg_TutorialPingMinimap::set_pos_x(float value) {
  set_has_pos_x();
  pos_x_ = value;
}

// optional float pos_y = 3;
inline bool CDOTAUserMsg_TutorialPingMinimap::has_pos_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAUserMsg_TutorialPingMinimap::set_has_pos_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTAUserMsg_TutorialPingMinimap::clear_has_pos_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTAUserMsg_TutorialPingMinimap::clear_pos_y() {
  pos_y_ = 0;
  clear_has_pos_y();
}
inline float CDOTAUserMsg_TutorialPingMinimap::pos_y() const {
  return pos_y_;
}
inline void CDOTAUserMsg_TutorialPingMinimap::set_pos_y(float value) {
  set_has_pos_y();
  pos_y_ = value;
}

// optional float pos_z = 4;
inline bool CDOTAUserMsg_TutorialPingMinimap::has_pos_z() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTAUserMsg_TutorialPingMinimap::set_has_pos_z() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDOTAUserMsg_TutorialPingMinimap::clear_has_pos_z() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDOTAUserMsg_TutorialPingMinimap::clear_pos_z() {
  pos_z_ = 0;
  clear_has_pos_z();
}
inline float CDOTAUserMsg_TutorialPingMinimap::pos_z() const {
  return pos_z_;
}
inline void CDOTAUserMsg_TutorialPingMinimap::set_pos_z(float value) {
  set_has_pos_z();
  pos_z_ = value;
}

// optional int32 entity_index = 5;
inline bool CDOTAUserMsg_TutorialPingMinimap::has_entity_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDOTAUserMsg_TutorialPingMinimap::set_has_entity_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CDOTAUserMsg_TutorialPingMinimap::clear_has_entity_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CDOTAUserMsg_TutorialPingMinimap::clear_entity_index() {
  entity_index_ = 0;
  clear_has_entity_index();
}
inline ::google::protobuf::int32 CDOTAUserMsg_TutorialPingMinimap::entity_index() const {
  return entity_index_;
}
inline void CDOTAUserMsg_TutorialPingMinimap::set_entity_index(::google::protobuf::int32 value) {
  set_has_entity_index();
  entity_index_ = value;
}

// -------------------------------------------------------------------

// CDOTA_UM_GamerulesStateChanged

// optional uint32 state = 1;
inline bool CDOTA_UM_GamerulesStateChanged::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTA_UM_GamerulesStateChanged::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTA_UM_GamerulesStateChanged::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTA_UM_GamerulesStateChanged::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 CDOTA_UM_GamerulesStateChanged::state() const {
  return state_;
}
inline void CDOTA_UM_GamerulesStateChanged::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_AddQuestLogEntry

// optional string npc_name = 1;
inline bool CDOTAUserMsg_AddQuestLogEntry::has_npc_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_AddQuestLogEntry::set_has_npc_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_AddQuestLogEntry::clear_has_npc_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_AddQuestLogEntry::clear_npc_name() {
  if (npc_name_ != &::google::protobuf::internal::kEmptyString) {
    npc_name_->clear();
  }
  clear_has_npc_name();
}
inline const ::std::string& CDOTAUserMsg_AddQuestLogEntry::npc_name() const {
  return *npc_name_;
}
inline void CDOTAUserMsg_AddQuestLogEntry::set_npc_name(const ::std::string& value) {
  set_has_npc_name();
  if (npc_name_ == &::google::protobuf::internal::kEmptyString) {
    npc_name_ = new ::std::string;
  }
  npc_name_->assign(value);
}
inline void CDOTAUserMsg_AddQuestLogEntry::set_npc_name(const char* value) {
  set_has_npc_name();
  if (npc_name_ == &::google::protobuf::internal::kEmptyString) {
    npc_name_ = new ::std::string;
  }
  npc_name_->assign(value);
}
inline void CDOTAUserMsg_AddQuestLogEntry::set_npc_name(const char* value, size_t size) {
  set_has_npc_name();
  if (npc_name_ == &::google::protobuf::internal::kEmptyString) {
    npc_name_ = new ::std::string;
  }
  npc_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDOTAUserMsg_AddQuestLogEntry::mutable_npc_name() {
  set_has_npc_name();
  if (npc_name_ == &::google::protobuf::internal::kEmptyString) {
    npc_name_ = new ::std::string;
  }
  return npc_name_;
}
inline ::std::string* CDOTAUserMsg_AddQuestLogEntry::release_npc_name() {
  clear_has_npc_name();
  if (npc_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = npc_name_;
    npc_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string npc_dialog = 2;
inline bool CDOTAUserMsg_AddQuestLogEntry::has_npc_dialog() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_AddQuestLogEntry::set_has_npc_dialog() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_AddQuestLogEntry::clear_has_npc_dialog() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_AddQuestLogEntry::clear_npc_dialog() {
  if (npc_dialog_ != &::google::protobuf::internal::kEmptyString) {
    npc_dialog_->clear();
  }
  clear_has_npc_dialog();
}
inline const ::std::string& CDOTAUserMsg_AddQuestLogEntry::npc_dialog() const {
  return *npc_dialog_;
}
inline void CDOTAUserMsg_AddQuestLogEntry::set_npc_dialog(const ::std::string& value) {
  set_has_npc_dialog();
  if (npc_dialog_ == &::google::protobuf::internal::kEmptyString) {
    npc_dialog_ = new ::std::string;
  }
  npc_dialog_->assign(value);
}
inline void CDOTAUserMsg_AddQuestLogEntry::set_npc_dialog(const char* value) {
  set_has_npc_dialog();
  if (npc_dialog_ == &::google::protobuf::internal::kEmptyString) {
    npc_dialog_ = new ::std::string;
  }
  npc_dialog_->assign(value);
}
inline void CDOTAUserMsg_AddQuestLogEntry::set_npc_dialog(const char* value, size_t size) {
  set_has_npc_dialog();
  if (npc_dialog_ == &::google::protobuf::internal::kEmptyString) {
    npc_dialog_ = new ::std::string;
  }
  npc_dialog_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDOTAUserMsg_AddQuestLogEntry::mutable_npc_dialog() {
  set_has_npc_dialog();
  if (npc_dialog_ == &::google::protobuf::internal::kEmptyString) {
    npc_dialog_ = new ::std::string;
  }
  return npc_dialog_;
}
inline ::std::string* CDOTAUserMsg_AddQuestLogEntry::release_npc_dialog() {
  clear_has_npc_dialog();
  if (npc_dialog_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = npc_dialog_;
    npc_dialog_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CDOTAUserMsg_SendStatPopup

// optional int32 player_id = 1;
inline bool CDOTAUserMsg_SendStatPopup::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_SendStatPopup::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_SendStatPopup::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_SendStatPopup::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 CDOTAUserMsg_SendStatPopup::player_id() const {
  return player_id_;
}
inline void CDOTAUserMsg_SendStatPopup::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional .CDOTAMsg_SendStatPopup statpopup = 2;
inline bool CDOTAUserMsg_SendStatPopup::has_statpopup() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_SendStatPopup::set_has_statpopup() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_SendStatPopup::clear_has_statpopup() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_SendStatPopup::clear_statpopup() {
  if (statpopup_ != NULL) statpopup_->::CDOTAMsg_SendStatPopup::Clear();
  clear_has_statpopup();
}
inline const ::CDOTAMsg_SendStatPopup& CDOTAUserMsg_SendStatPopup::statpopup() const {
  return statpopup_ != NULL ? *statpopup_ : *default_instance_->statpopup_;
}
inline ::CDOTAMsg_SendStatPopup* CDOTAUserMsg_SendStatPopup::mutable_statpopup() {
  set_has_statpopup();
  if (statpopup_ == NULL) statpopup_ = new ::CDOTAMsg_SendStatPopup;
  return statpopup_;
}
inline ::CDOTAMsg_SendStatPopup* CDOTAUserMsg_SendStatPopup::release_statpopup() {
  clear_has_statpopup();
  ::CDOTAMsg_SendStatPopup* temp = statpopup_;
  statpopup_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_SendRoshanPopup

// optional bool reclaimed = 1;
inline bool CDOTAUserMsg_SendRoshanPopup::has_reclaimed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_SendRoshanPopup::set_has_reclaimed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_SendRoshanPopup::clear_has_reclaimed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_SendRoshanPopup::clear_reclaimed() {
  reclaimed_ = false;
  clear_has_reclaimed();
}
inline bool CDOTAUserMsg_SendRoshanPopup::reclaimed() const {
  return reclaimed_;
}
inline void CDOTAUserMsg_SendRoshanPopup::set_reclaimed(bool value) {
  set_has_reclaimed();
  reclaimed_ = value;
}

// optional int32 gametime = 2;
inline bool CDOTAUserMsg_SendRoshanPopup::has_gametime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_SendRoshanPopup::set_has_gametime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_SendRoshanPopup::clear_has_gametime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_SendRoshanPopup::clear_gametime() {
  gametime_ = 0;
  clear_has_gametime();
}
inline ::google::protobuf::int32 CDOTAUserMsg_SendRoshanPopup::gametime() const {
  return gametime_;
}
inline void CDOTAUserMsg_SendRoshanPopup::set_gametime(::google::protobuf::int32 value) {
  set_has_gametime();
  gametime_ = value;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_SendFinalGold

// repeated uint32 reliable_gold = 1;
inline int CDOTAUserMsg_SendFinalGold::reliable_gold_size() const {
  return reliable_gold_.size();
}
inline void CDOTAUserMsg_SendFinalGold::clear_reliable_gold() {
  reliable_gold_.Clear();
}
inline ::google::protobuf::uint32 CDOTAUserMsg_SendFinalGold::reliable_gold(int index) const {
  return reliable_gold_.Get(index);
}
inline void CDOTAUserMsg_SendFinalGold::set_reliable_gold(int index, ::google::protobuf::uint32 value) {
  reliable_gold_.Set(index, value);
}
inline void CDOTAUserMsg_SendFinalGold::add_reliable_gold(::google::protobuf::uint32 value) {
  reliable_gold_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTAUserMsg_SendFinalGold::reliable_gold() const {
  return reliable_gold_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTAUserMsg_SendFinalGold::mutable_reliable_gold() {
  return &reliable_gold_;
}

// repeated uint32 unreliable_gold = 2;
inline int CDOTAUserMsg_SendFinalGold::unreliable_gold_size() const {
  return unreliable_gold_.size();
}
inline void CDOTAUserMsg_SendFinalGold::clear_unreliable_gold() {
  unreliable_gold_.Clear();
}
inline ::google::protobuf::uint32 CDOTAUserMsg_SendFinalGold::unreliable_gold(int index) const {
  return unreliable_gold_.Get(index);
}
inline void CDOTAUserMsg_SendFinalGold::set_unreliable_gold(int index, ::google::protobuf::uint32 value) {
  unreliable_gold_.Set(index, value);
}
inline void CDOTAUserMsg_SendFinalGold::add_unreliable_gold(::google::protobuf::uint32 value) {
  unreliable_gold_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTAUserMsg_SendFinalGold::unreliable_gold() const {
  return unreliable_gold_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTAUserMsg_SendFinalGold::mutable_unreliable_gold() {
  return &unreliable_gold_;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_CustomMsg

// optional string message = 1;
inline bool CDOTAUserMsg_CustomMsg::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_CustomMsg::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_CustomMsg::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_CustomMsg::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& CDOTAUserMsg_CustomMsg::message() const {
  return *message_;
}
inline void CDOTAUserMsg_CustomMsg::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void CDOTAUserMsg_CustomMsg::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void CDOTAUserMsg_CustomMsg::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDOTAUserMsg_CustomMsg::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* CDOTAUserMsg_CustomMsg::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 player_id = 2;
inline bool CDOTAUserMsg_CustomMsg::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_CustomMsg::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_CustomMsg::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_CustomMsg::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 CDOTAUserMsg_CustomMsg::player_id() const {
  return player_id_;
}
inline void CDOTAUserMsg_CustomMsg::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional int32 value = 3;
inline bool CDOTAUserMsg_CustomMsg::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAUserMsg_CustomMsg::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTAUserMsg_CustomMsg::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTAUserMsg_CustomMsg::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 CDOTAUserMsg_CustomMsg::value() const {
  return value_;
}
inline void CDOTAUserMsg_CustomMsg::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_CoachHUDPing

// optional uint32 player_id = 1;
inline bool CDOTAUserMsg_CoachHUDPing::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_CoachHUDPing::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_CoachHUDPing::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_CoachHUDPing::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
inline ::google::protobuf::uint32 CDOTAUserMsg_CoachHUDPing::player_id() const {
  return player_id_;
}
inline void CDOTAUserMsg_CoachHUDPing::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional .CDOTAMsg_CoachHUDPing hud_ping = 2;
inline bool CDOTAUserMsg_CoachHUDPing::has_hud_ping() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_CoachHUDPing::set_has_hud_ping() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_CoachHUDPing::clear_has_hud_ping() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_CoachHUDPing::clear_hud_ping() {
  if (hud_ping_ != NULL) hud_ping_->::CDOTAMsg_CoachHUDPing::Clear();
  clear_has_hud_ping();
}
inline const ::CDOTAMsg_CoachHUDPing& CDOTAUserMsg_CoachHUDPing::hud_ping() const {
  return hud_ping_ != NULL ? *hud_ping_ : *default_instance_->hud_ping_;
}
inline ::CDOTAMsg_CoachHUDPing* CDOTAUserMsg_CoachHUDPing::mutable_hud_ping() {
  set_has_hud_ping();
  if (hud_ping_ == NULL) hud_ping_ = new ::CDOTAMsg_CoachHUDPing;
  return hud_ping_;
}
inline ::CDOTAMsg_CoachHUDPing* CDOTAUserMsg_CoachHUDPing::release_hud_ping() {
  clear_has_hud_ping();
  ::CDOTAMsg_CoachHUDPing* temp = hud_ping_;
  hud_ping_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_ClientLoadGridNav

// -------------------------------------------------------------------

// CDOTAUserMsg_AbilityPing

// optional uint32 player_id = 1;
inline bool CDOTAUserMsg_AbilityPing::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_AbilityPing::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_AbilityPing::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_AbilityPing::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
inline ::google::protobuf::uint32 CDOTAUserMsg_AbilityPing::player_id() const {
  return player_id_;
}
inline void CDOTAUserMsg_AbilityPing::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional uint32 ability_id = 2;
inline bool CDOTAUserMsg_AbilityPing::has_ability_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_AbilityPing::set_has_ability_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_AbilityPing::clear_has_ability_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_AbilityPing::clear_ability_id() {
  ability_id_ = 0u;
  clear_has_ability_id();
}
inline ::google::protobuf::uint32 CDOTAUserMsg_AbilityPing::ability_id() const {
  return ability_id_;
}
inline void CDOTAUserMsg_AbilityPing::set_ability_id(::google::protobuf::uint32 value) {
  set_has_ability_id();
  ability_id_ = value;
}

// optional .DOTA_ABILITY_PING_TYPE type = 3 [default = ABILITY_PING_READY];
inline bool CDOTAUserMsg_AbilityPing::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAUserMsg_AbilityPing::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTAUserMsg_AbilityPing::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTAUserMsg_AbilityPing::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline DOTA_ABILITY_PING_TYPE CDOTAUserMsg_AbilityPing::type() const {
  return static_cast< DOTA_ABILITY_PING_TYPE >(type_);
}
inline void CDOTAUserMsg_AbilityPing::set_type(DOTA_ABILITY_PING_TYPE value) {
  GOOGLE_DCHECK(DOTA_ABILITY_PING_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint32 cooldown_seconds = 4;
inline bool CDOTAUserMsg_AbilityPing::has_cooldown_seconds() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTAUserMsg_AbilityPing::set_has_cooldown_seconds() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDOTAUserMsg_AbilityPing::clear_has_cooldown_seconds() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDOTAUserMsg_AbilityPing::clear_cooldown_seconds() {
  cooldown_seconds_ = 0u;
  clear_has_cooldown_seconds();
}
inline ::google::protobuf::uint32 CDOTAUserMsg_AbilityPing::cooldown_seconds() const {
  return cooldown_seconds_;
}
inline void CDOTAUserMsg_AbilityPing::set_cooldown_seconds(::google::protobuf::uint32 value) {
  set_has_cooldown_seconds();
  cooldown_seconds_ = value;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_ShowGenericPopup

// required string header = 1;
inline bool CDOTAUserMsg_ShowGenericPopup::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_ShowGenericPopup::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_ShowGenericPopup::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_ShowGenericPopup::clear_header() {
  if (header_ != &::google::protobuf::internal::kEmptyString) {
    header_->clear();
  }
  clear_has_header();
}
inline const ::std::string& CDOTAUserMsg_ShowGenericPopup::header() const {
  return *header_;
}
inline void CDOTAUserMsg_ShowGenericPopup::set_header(const ::std::string& value) {
  set_has_header();
  if (header_ == &::google::protobuf::internal::kEmptyString) {
    header_ = new ::std::string;
  }
  header_->assign(value);
}
inline void CDOTAUserMsg_ShowGenericPopup::set_header(const char* value) {
  set_has_header();
  if (header_ == &::google::protobuf::internal::kEmptyString) {
    header_ = new ::std::string;
  }
  header_->assign(value);
}
inline void CDOTAUserMsg_ShowGenericPopup::set_header(const char* value, size_t size) {
  set_has_header();
  if (header_ == &::google::protobuf::internal::kEmptyString) {
    header_ = new ::std::string;
  }
  header_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDOTAUserMsg_ShowGenericPopup::mutable_header() {
  set_has_header();
  if (header_ == &::google::protobuf::internal::kEmptyString) {
    header_ = new ::std::string;
  }
  return header_;
}
inline ::std::string* CDOTAUserMsg_ShowGenericPopup::release_header() {
  clear_has_header();
  if (header_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = header_;
    header_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string body = 2;
inline bool CDOTAUserMsg_ShowGenericPopup::has_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_ShowGenericPopup::set_has_body() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_ShowGenericPopup::clear_has_body() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_ShowGenericPopup::clear_body() {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    body_->clear();
  }
  clear_has_body();
}
inline const ::std::string& CDOTAUserMsg_ShowGenericPopup::body() const {
  return *body_;
}
inline void CDOTAUserMsg_ShowGenericPopup::set_body(const ::std::string& value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void CDOTAUserMsg_ShowGenericPopup::set_body(const char* value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void CDOTAUserMsg_ShowGenericPopup::set_body(const char* value, size_t size) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDOTAUserMsg_ShowGenericPopup::mutable_body() {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  return body_;
}
inline ::std::string* CDOTAUserMsg_ShowGenericPopup::release_body() {
  clear_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = body_;
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string param1 = 3;
inline bool CDOTAUserMsg_ShowGenericPopup::has_param1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAUserMsg_ShowGenericPopup::set_has_param1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTAUserMsg_ShowGenericPopup::clear_has_param1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTAUserMsg_ShowGenericPopup::clear_param1() {
  if (param1_ != &::google::protobuf::internal::kEmptyString) {
    param1_->clear();
  }
  clear_has_param1();
}
inline const ::std::string& CDOTAUserMsg_ShowGenericPopup::param1() const {
  return *param1_;
}
inline void CDOTAUserMsg_ShowGenericPopup::set_param1(const ::std::string& value) {
  set_has_param1();
  if (param1_ == &::google::protobuf::internal::kEmptyString) {
    param1_ = new ::std::string;
  }
  param1_->assign(value);
}
inline void CDOTAUserMsg_ShowGenericPopup::set_param1(const char* value) {
  set_has_param1();
  if (param1_ == &::google::protobuf::internal::kEmptyString) {
    param1_ = new ::std::string;
  }
  param1_->assign(value);
}
inline void CDOTAUserMsg_ShowGenericPopup::set_param1(const char* value, size_t size) {
  set_has_param1();
  if (param1_ == &::google::protobuf::internal::kEmptyString) {
    param1_ = new ::std::string;
  }
  param1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDOTAUserMsg_ShowGenericPopup::mutable_param1() {
  set_has_param1();
  if (param1_ == &::google::protobuf::internal::kEmptyString) {
    param1_ = new ::std::string;
  }
  return param1_;
}
inline ::std::string* CDOTAUserMsg_ShowGenericPopup::release_param1() {
  clear_has_param1();
  if (param1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = param1_;
    param1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string param2 = 4;
inline bool CDOTAUserMsg_ShowGenericPopup::has_param2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTAUserMsg_ShowGenericPopup::set_has_param2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDOTAUserMsg_ShowGenericPopup::clear_has_param2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDOTAUserMsg_ShowGenericPopup::clear_param2() {
  if (param2_ != &::google::protobuf::internal::kEmptyString) {
    param2_->clear();
  }
  clear_has_param2();
}
inline const ::std::string& CDOTAUserMsg_ShowGenericPopup::param2() const {
  return *param2_;
}
inline void CDOTAUserMsg_ShowGenericPopup::set_param2(const ::std::string& value) {
  set_has_param2();
  if (param2_ == &::google::protobuf::internal::kEmptyString) {
    param2_ = new ::std::string;
  }
  param2_->assign(value);
}
inline void CDOTAUserMsg_ShowGenericPopup::set_param2(const char* value) {
  set_has_param2();
  if (param2_ == &::google::protobuf::internal::kEmptyString) {
    param2_ = new ::std::string;
  }
  param2_->assign(value);
}
inline void CDOTAUserMsg_ShowGenericPopup::set_param2(const char* value, size_t size) {
  set_has_param2();
  if (param2_ == &::google::protobuf::internal::kEmptyString) {
    param2_ = new ::std::string;
  }
  param2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDOTAUserMsg_ShowGenericPopup::mutable_param2() {
  set_has_param2();
  if (param2_ == &::google::protobuf::internal::kEmptyString) {
    param2_ = new ::std::string;
  }
  return param2_;
}
inline ::std::string* CDOTAUserMsg_ShowGenericPopup::release_param2() {
  clear_has_param2();
  if (param2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = param2_;
    param2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool tint_screen = 5;
inline bool CDOTAUserMsg_ShowGenericPopup::has_tint_screen() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDOTAUserMsg_ShowGenericPopup::set_has_tint_screen() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CDOTAUserMsg_ShowGenericPopup::clear_has_tint_screen() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CDOTAUserMsg_ShowGenericPopup::clear_tint_screen() {
  tint_screen_ = false;
  clear_has_tint_screen();
}
inline bool CDOTAUserMsg_ShowGenericPopup::tint_screen() const {
  return tint_screen_;
}
inline void CDOTAUserMsg_ShowGenericPopup::set_tint_screen(bool value) {
  set_has_tint_screen();
  tint_screen_ = value;
}

// optional bool show_no_other_dialogs = 6;
inline bool CDOTAUserMsg_ShowGenericPopup::has_show_no_other_dialogs() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CDOTAUserMsg_ShowGenericPopup::set_has_show_no_other_dialogs() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CDOTAUserMsg_ShowGenericPopup::clear_has_show_no_other_dialogs() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CDOTAUserMsg_ShowGenericPopup::clear_show_no_other_dialogs() {
  show_no_other_dialogs_ = false;
  clear_has_show_no_other_dialogs();
}
inline bool CDOTAUserMsg_ShowGenericPopup::show_no_other_dialogs() const {
  return show_no_other_dialogs_;
}
inline void CDOTAUserMsg_ShowGenericPopup::set_show_no_other_dialogs(bool value) {
  set_has_show_no_other_dialogs();
  show_no_other_dialogs_ = value;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_VoteStart

// optional string title = 1;
inline bool CDOTAUserMsg_VoteStart::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_VoteStart::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_VoteStart::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_VoteStart::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& CDOTAUserMsg_VoteStart::title() const {
  return *title_;
}
inline void CDOTAUserMsg_VoteStart::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void CDOTAUserMsg_VoteStart::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void CDOTAUserMsg_VoteStart::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDOTAUserMsg_VoteStart::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* CDOTAUserMsg_VoteStart::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional float duration = 2;
inline bool CDOTAUserMsg_VoteStart::has_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_VoteStart::set_has_duration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_VoteStart::clear_has_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_VoteStart::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline float CDOTAUserMsg_VoteStart::duration() const {
  return duration_;
}
inline void CDOTAUserMsg_VoteStart::set_duration(float value) {
  set_has_duration();
  duration_ = value;
}

// optional int32 choice_count = 3;
inline bool CDOTAUserMsg_VoteStart::has_choice_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAUserMsg_VoteStart::set_has_choice_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTAUserMsg_VoteStart::clear_has_choice_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTAUserMsg_VoteStart::clear_choice_count() {
  choice_count_ = 0;
  clear_has_choice_count();
}
inline ::google::protobuf::int32 CDOTAUserMsg_VoteStart::choice_count() const {
  return choice_count_;
}
inline void CDOTAUserMsg_VoteStart::set_choice_count(::google::protobuf::int32 value) {
  set_has_choice_count();
  choice_count_ = value;
}

// repeated string choices = 4;
inline int CDOTAUserMsg_VoteStart::choices_size() const {
  return choices_.size();
}
inline void CDOTAUserMsg_VoteStart::clear_choices() {
  choices_.Clear();
}
inline const ::std::string& CDOTAUserMsg_VoteStart::choices(int index) const {
  return choices_.Get(index);
}
inline ::std::string* CDOTAUserMsg_VoteStart::mutable_choices(int index) {
  return choices_.Mutable(index);
}
inline void CDOTAUserMsg_VoteStart::set_choices(int index, const ::std::string& value) {
  choices_.Mutable(index)->assign(value);
}
inline void CDOTAUserMsg_VoteStart::set_choices(int index, const char* value) {
  choices_.Mutable(index)->assign(value);
}
inline void CDOTAUserMsg_VoteStart::set_choices(int index, const char* value, size_t size) {
  choices_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDOTAUserMsg_VoteStart::add_choices() {
  return choices_.Add();
}
inline void CDOTAUserMsg_VoteStart::add_choices(const ::std::string& value) {
  choices_.Add()->assign(value);
}
inline void CDOTAUserMsg_VoteStart::add_choices(const char* value) {
  choices_.Add()->assign(value);
}
inline void CDOTAUserMsg_VoteStart::add_choices(const char* value, size_t size) {
  choices_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CDOTAUserMsg_VoteStart::choices() const {
  return choices_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CDOTAUserMsg_VoteStart::mutable_choices() {
  return &choices_;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_VoteUpdate

// repeated int32 choice_counts = 1;
inline int CDOTAUserMsg_VoteUpdate::choice_counts_size() const {
  return choice_counts_.size();
}
inline void CDOTAUserMsg_VoteUpdate::clear_choice_counts() {
  choice_counts_.Clear();
}
inline ::google::protobuf::int32 CDOTAUserMsg_VoteUpdate::choice_counts(int index) const {
  return choice_counts_.Get(index);
}
inline void CDOTAUserMsg_VoteUpdate::set_choice_counts(int index, ::google::protobuf::int32 value) {
  choice_counts_.Set(index, value);
}
inline void CDOTAUserMsg_VoteUpdate::add_choice_counts(::google::protobuf::int32 value) {
  choice_counts_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CDOTAUserMsg_VoteUpdate::choice_counts() const {
  return choice_counts_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CDOTAUserMsg_VoteUpdate::mutable_choice_counts() {
  return &choice_counts_;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_VoteEnd

// optional int32 selected_choice = 1;
inline bool CDOTAUserMsg_VoteEnd::has_selected_choice() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_VoteEnd::set_has_selected_choice() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_VoteEnd::clear_has_selected_choice() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_VoteEnd::clear_selected_choice() {
  selected_choice_ = 0;
  clear_has_selected_choice();
}
inline ::google::protobuf::int32 CDOTAUserMsg_VoteEnd::selected_choice() const {
  return selected_choice_;
}
inline void CDOTAUserMsg_VoteEnd::set_selected_choice(::google::protobuf::int32 value) {
  set_has_selected_choice();
  selected_choice_ = value;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_BoosterStatePlayer

// optional uint32 player_id = 1;
inline bool CDOTAUserMsg_BoosterStatePlayer::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAUserMsg_BoosterStatePlayer::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAUserMsg_BoosterStatePlayer::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAUserMsg_BoosterStatePlayer::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
inline ::google::protobuf::uint32 CDOTAUserMsg_BoosterStatePlayer::player_id() const {
  return player_id_;
}
inline void CDOTAUserMsg_BoosterStatePlayer::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional float bonus = 2;
inline bool CDOTAUserMsg_BoosterStatePlayer::has_bonus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAUserMsg_BoosterStatePlayer::set_has_bonus() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAUserMsg_BoosterStatePlayer::clear_has_bonus() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAUserMsg_BoosterStatePlayer::clear_bonus() {
  bonus_ = 0;
  clear_has_bonus();
}
inline float CDOTAUserMsg_BoosterStatePlayer::bonus() const {
  return bonus_;
}
inline void CDOTAUserMsg_BoosterStatePlayer::set_bonus(float value) {
  set_has_bonus();
  bonus_ = value;
}

// optional float event_bonus = 3;
inline bool CDOTAUserMsg_BoosterStatePlayer::has_event_bonus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAUserMsg_BoosterStatePlayer::set_has_event_bonus() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTAUserMsg_BoosterStatePlayer::clear_has_event_bonus() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTAUserMsg_BoosterStatePlayer::clear_event_bonus() {
  event_bonus_ = 0;
  clear_has_event_bonus();
}
inline float CDOTAUserMsg_BoosterStatePlayer::event_bonus() const {
  return event_bonus_;
}
inline void CDOTAUserMsg_BoosterStatePlayer::set_event_bonus(float value) {
  set_has_event_bonus();
  event_bonus_ = value;
}

// optional uint32 bonus_item_id = 4;
inline bool CDOTAUserMsg_BoosterStatePlayer::has_bonus_item_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTAUserMsg_BoosterStatePlayer::set_has_bonus_item_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDOTAUserMsg_BoosterStatePlayer::clear_has_bonus_item_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDOTAUserMsg_BoosterStatePlayer::clear_bonus_item_id() {
  bonus_item_id_ = 0u;
  clear_has_bonus_item_id();
}
inline ::google::protobuf::uint32 CDOTAUserMsg_BoosterStatePlayer::bonus_item_id() const {
  return bonus_item_id_;
}
inline void CDOTAUserMsg_BoosterStatePlayer::set_bonus_item_id(::google::protobuf::uint32 value) {
  set_has_bonus_item_id();
  bonus_item_id_ = value;
}

// optional uint32 event_bonus_item_id = 5;
inline bool CDOTAUserMsg_BoosterStatePlayer::has_event_bonus_item_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDOTAUserMsg_BoosterStatePlayer::set_has_event_bonus_item_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CDOTAUserMsg_BoosterStatePlayer::clear_has_event_bonus_item_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CDOTAUserMsg_BoosterStatePlayer::clear_event_bonus_item_id() {
  event_bonus_item_id_ = 0u;
  clear_has_event_bonus_item_id();
}
inline ::google::protobuf::uint32 CDOTAUserMsg_BoosterStatePlayer::event_bonus_item_id() const {
  return event_bonus_item_id_;
}
inline void CDOTAUserMsg_BoosterStatePlayer::set_event_bonus_item_id(::google::protobuf::uint32 value) {
  set_has_event_bonus_item_id();
  event_bonus_item_id_ = value;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_BoosterState

// repeated .CDOTAUserMsg_BoosterStatePlayer boosted_players = 1;
inline int CDOTAUserMsg_BoosterState::boosted_players_size() const {
  return boosted_players_.size();
}
inline void CDOTAUserMsg_BoosterState::clear_boosted_players() {
  boosted_players_.Clear();
}
inline const ::CDOTAUserMsg_BoosterStatePlayer& CDOTAUserMsg_BoosterState::boosted_players(int index) const {
  return boosted_players_.Get(index);
}
inline ::CDOTAUserMsg_BoosterStatePlayer* CDOTAUserMsg_BoosterState::mutable_boosted_players(int index) {
  return boosted_players_.Mutable(index);
}
inline ::CDOTAUserMsg_BoosterStatePlayer* CDOTAUserMsg_BoosterState::add_boosted_players() {
  return boosted_players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CDOTAUserMsg_BoosterStatePlayer >&
CDOTAUserMsg_BoosterState::boosted_players() const {
  return boosted_players_;
}
inline ::google::protobuf::RepeatedPtrField< ::CDOTAUserMsg_BoosterStatePlayer >*
CDOTAUserMsg_BoosterState::mutable_boosted_players() {
  return &boosted_players_;
}

// -------------------------------------------------------------------

// CDOTAUserMsg_PlayerMMR

// repeated sint32 mmr = 1 [packed = true];
inline int CDOTAUserMsg_PlayerMMR::mmr_size() const {
  return mmr_.size();
}
inline void CDOTAUserMsg_PlayerMMR::clear_mmr() {
  mmr_.Clear();
}
inline ::google::protobuf::int32 CDOTAUserMsg_PlayerMMR::mmr(int index) const {
  return mmr_.Get(index);
}
inline void CDOTAUserMsg_PlayerMMR::set_mmr(int index, ::google::protobuf::int32 value) {
  mmr_.Set(index, value);
}
inline void CDOTAUserMsg_PlayerMMR::add_mmr(::google::protobuf::int32 value) {
  mmr_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CDOTAUserMsg_PlayerMMR::mmr() const {
  return mmr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CDOTAUserMsg_PlayerMMR::mutable_mmr() {
  return &mmr_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CDOTAResponseQuerySerialized_Fact_ValueType>() {
  return ::CDOTAResponseQuerySerialized_Fact_ValueType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< EDotaUserMessages>() {
  return EDotaUserMessages_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< DOTA_CHAT_MESSAGE>() {
  return DOTA_CHAT_MESSAGE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< DOTA_NO_BATTLE_POINTS_REASONS>() {
  return DOTA_NO_BATTLE_POINTS_REASONS_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< DOTA_CHAT_INFORMATIONAL>() {
  return DOTA_CHAT_INFORMATIONAL_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< DOTA_ABILITY_PING_TYPE>() {
  return DOTA_ABILITY_PING_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< DOTA_COMBATLOG_TYPES>() {
  return DOTA_COMBATLOG_TYPES_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< EDotaEntityMessages>() {
  return EDotaEntityMessages_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< DOTA_PARTICLE_MESSAGE>() {
  return DOTA_PARTICLE_MESSAGE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< DOTA_OVERHEAD_ALERT>() {
  return DOTA_OVERHEAD_ALERT_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dota_5fusermessages_2eproto__INCLUDED
