// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "econ_gcmessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMsgApplyAutograph_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgApplyAutograph_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgEconPlayerStrangeCountAdjustment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgEconPlayerStrangeCountAdjustment_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgRequestItemPurgatory_FinalizePurchase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgRequestItemPurgatory_FinalizePurchase_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgRequestItemPurgatory_FinalizePurchaseResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgRequestItemPurgatory_FinalizePurchaseResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgRequestItemPurgatory_RefundPurchase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgRequestItemPurgatory_RefundPurchase_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgRequestItemPurgatory_RefundPurchaseResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgRequestItemPurgatory_RefundPurchaseResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgCraftingResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgCraftingResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCRequestStoreSalesData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCRequestStoreSalesData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCRequestStoreSalesDataResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCRequestStoreSalesDataResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCRequestStoreSalesDataResponse_Price_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCRequestStoreSalesDataResponse_Price_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCRequestStoreSalesDataUpToDateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCRequestStoreSalesDataUpToDateResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToGCPingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToGCPingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToGCPingResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToGCPingResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToGCGetUserSessionServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToGCGetUserSessionServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToGCGetUserSessionServerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToGCGetUserSessionServerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToGCGetUserServerMembers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToGCGetUserServerMembers_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToGCGetUserServerMembersResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToGCGetUserServerMembersResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgLookupMultipleAccountNames_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgLookupMultipleAccountNames_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgLookupMultipleAccountNamesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgLookupMultipleAccountNamesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgLookupMultipleAccountNamesResponse_Account_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgLookupMultipleAccountNamesResponse_Account_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToGCGetUserPCBangNo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToGCGetUserPCBangNo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToGCGetUserPCBangNoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToGCGetUserPCBangNoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgRequestCrateItems_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgRequestCrateItems_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgRequestCrateItemsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgRequestCrateItemsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToGCCanUseDropRateBonus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToGCCanUseDropRateBonus_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSQLAddDropRateBonus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSQLAddDropRateBonus_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToGCRefreshSOCache_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToGCRefreshSOCache_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToGCCheckAccountTradeStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToGCCheckAccountTradeStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToGCCheckAccountTradeStatusResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToGCCheckAccountTradeStatusResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EGCItemMsg_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGCMsgResponse_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EUnlockStyle_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EItemPurgatoryResponse_Finalize_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EItemPurgatoryResponse_Refund_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_econ_5fgcmessages_2eproto() {
  protobuf_AddDesc_econ_5fgcmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "econ_gcmessages.proto");
  GOOGLE_CHECK(file != NULL);
  CMsgApplyAutograph_descriptor_ = file->message_type(0);
  static const int CMsgApplyAutograph_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyAutograph, autograph_item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyAutograph, item_item_id_),
  };
  CMsgApplyAutograph_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgApplyAutograph_descriptor_,
      CMsgApplyAutograph::default_instance_,
      CMsgApplyAutograph_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyAutograph, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyAutograph, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgApplyAutograph));
  CMsgEconPlayerStrangeCountAdjustment_descriptor_ = file->message_type(1);
  static const int CMsgEconPlayerStrangeCountAdjustment_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEconPlayerStrangeCountAdjustment, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEconPlayerStrangeCountAdjustment, strange_count_adjustments_),
  };
  CMsgEconPlayerStrangeCountAdjustment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgEconPlayerStrangeCountAdjustment_descriptor_,
      CMsgEconPlayerStrangeCountAdjustment::default_instance_,
      CMsgEconPlayerStrangeCountAdjustment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEconPlayerStrangeCountAdjustment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEconPlayerStrangeCountAdjustment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgEconPlayerStrangeCountAdjustment));
  CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment_descriptor_ = CMsgEconPlayerStrangeCountAdjustment_descriptor_->nested_type(0);
  static const int CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment, event_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment, adjustment_),
  };
  CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment_descriptor_,
      CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::default_instance_,
      CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment));
  CMsgRequestItemPurgatory_FinalizePurchase_descriptor_ = file->message_type(2);
  static const int CMsgRequestItemPurgatory_FinalizePurchase_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestItemPurgatory_FinalizePurchase, item_ids_),
  };
  CMsgRequestItemPurgatory_FinalizePurchase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgRequestItemPurgatory_FinalizePurchase_descriptor_,
      CMsgRequestItemPurgatory_FinalizePurchase::default_instance_,
      CMsgRequestItemPurgatory_FinalizePurchase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestItemPurgatory_FinalizePurchase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestItemPurgatory_FinalizePurchase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgRequestItemPurgatory_FinalizePurchase));
  CMsgRequestItemPurgatory_FinalizePurchaseResponse_descriptor_ = file->message_type(3);
  static const int CMsgRequestItemPurgatory_FinalizePurchaseResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestItemPurgatory_FinalizePurchaseResponse, result_),
  };
  CMsgRequestItemPurgatory_FinalizePurchaseResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgRequestItemPurgatory_FinalizePurchaseResponse_descriptor_,
      CMsgRequestItemPurgatory_FinalizePurchaseResponse::default_instance_,
      CMsgRequestItemPurgatory_FinalizePurchaseResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestItemPurgatory_FinalizePurchaseResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestItemPurgatory_FinalizePurchaseResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgRequestItemPurgatory_FinalizePurchaseResponse));
  CMsgRequestItemPurgatory_RefundPurchase_descriptor_ = file->message_type(4);
  static const int CMsgRequestItemPurgatory_RefundPurchase_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestItemPurgatory_RefundPurchase, item_id_),
  };
  CMsgRequestItemPurgatory_RefundPurchase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgRequestItemPurgatory_RefundPurchase_descriptor_,
      CMsgRequestItemPurgatory_RefundPurchase::default_instance_,
      CMsgRequestItemPurgatory_RefundPurchase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestItemPurgatory_RefundPurchase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestItemPurgatory_RefundPurchase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgRequestItemPurgatory_RefundPurchase));
  CMsgRequestItemPurgatory_RefundPurchaseResponse_descriptor_ = file->message_type(5);
  static const int CMsgRequestItemPurgatory_RefundPurchaseResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestItemPurgatory_RefundPurchaseResponse, result_),
  };
  CMsgRequestItemPurgatory_RefundPurchaseResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgRequestItemPurgatory_RefundPurchaseResponse_descriptor_,
      CMsgRequestItemPurgatory_RefundPurchaseResponse::default_instance_,
      CMsgRequestItemPurgatory_RefundPurchaseResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestItemPurgatory_RefundPurchaseResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestItemPurgatory_RefundPurchaseResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgRequestItemPurgatory_RefundPurchaseResponse));
  CMsgCraftingResponse_descriptor_ = file->message_type(6);
  static const int CMsgCraftingResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCraftingResponse, item_ids_),
  };
  CMsgCraftingResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgCraftingResponse_descriptor_,
      CMsgCraftingResponse::default_instance_,
      CMsgCraftingResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCraftingResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCraftingResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgCraftingResponse));
  CMsgGCRequestStoreSalesData_descriptor_ = file->message_type(7);
  static const int CMsgGCRequestStoreSalesData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestStoreSalesData, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestStoreSalesData, currency_),
  };
  CMsgGCRequestStoreSalesData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCRequestStoreSalesData_descriptor_,
      CMsgGCRequestStoreSalesData::default_instance_,
      CMsgGCRequestStoreSalesData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestStoreSalesData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestStoreSalesData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCRequestStoreSalesData));
  CMsgGCRequestStoreSalesDataResponse_descriptor_ = file->message_type(8);
  static const int CMsgGCRequestStoreSalesDataResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestStoreSalesDataResponse, sale_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestStoreSalesDataResponse, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestStoreSalesDataResponse, expiration_time_),
  };
  CMsgGCRequestStoreSalesDataResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCRequestStoreSalesDataResponse_descriptor_,
      CMsgGCRequestStoreSalesDataResponse::default_instance_,
      CMsgGCRequestStoreSalesDataResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestStoreSalesDataResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestStoreSalesDataResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCRequestStoreSalesDataResponse));
  CMsgGCRequestStoreSalesDataResponse_Price_descriptor_ = CMsgGCRequestStoreSalesDataResponse_descriptor_->nested_type(0);
  static const int CMsgGCRequestStoreSalesDataResponse_Price_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestStoreSalesDataResponse_Price, item_def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestStoreSalesDataResponse_Price, price_),
  };
  CMsgGCRequestStoreSalesDataResponse_Price_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCRequestStoreSalesDataResponse_Price_descriptor_,
      CMsgGCRequestStoreSalesDataResponse_Price::default_instance_,
      CMsgGCRequestStoreSalesDataResponse_Price_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestStoreSalesDataResponse_Price, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestStoreSalesDataResponse_Price, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCRequestStoreSalesDataResponse_Price));
  CMsgGCRequestStoreSalesDataUpToDateResponse_descriptor_ = file->message_type(9);
  static const int CMsgGCRequestStoreSalesDataUpToDateResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestStoreSalesDataUpToDateResponse, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestStoreSalesDataUpToDateResponse, expiration_time_),
  };
  CMsgGCRequestStoreSalesDataUpToDateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCRequestStoreSalesDataUpToDateResponse_descriptor_,
      CMsgGCRequestStoreSalesDataUpToDateResponse::default_instance_,
      CMsgGCRequestStoreSalesDataUpToDateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestStoreSalesDataUpToDateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestStoreSalesDataUpToDateResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCRequestStoreSalesDataUpToDateResponse));
  CMsgGCToGCPingRequest_descriptor_ = file->message_type(10);
  static const int CMsgGCToGCPingRequest_offsets_[1] = {
  };
  CMsgGCToGCPingRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCToGCPingRequest_descriptor_,
      CMsgGCToGCPingRequest::default_instance_,
      CMsgGCToGCPingRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCPingRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCPingRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCToGCPingRequest));
  CMsgGCToGCPingResponse_descriptor_ = file->message_type(11);
  static const int CMsgGCToGCPingResponse_offsets_[1] = {
  };
  CMsgGCToGCPingResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCToGCPingResponse_descriptor_,
      CMsgGCToGCPingResponse::default_instance_,
      CMsgGCToGCPingResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCPingResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCPingResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCToGCPingResponse));
  CMsgGCToGCGetUserSessionServer_descriptor_ = file->message_type(12);
  static const int CMsgGCToGCGetUserSessionServer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCGetUserSessionServer, account_id_),
  };
  CMsgGCToGCGetUserSessionServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCToGCGetUserSessionServer_descriptor_,
      CMsgGCToGCGetUserSessionServer::default_instance_,
      CMsgGCToGCGetUserSessionServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCGetUserSessionServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCGetUserSessionServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCToGCGetUserSessionServer));
  CMsgGCToGCGetUserSessionServerResponse_descriptor_ = file->message_type(13);
  static const int CMsgGCToGCGetUserSessionServerResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCGetUserSessionServerResponse, server_steam_id_),
  };
  CMsgGCToGCGetUserSessionServerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCToGCGetUserSessionServerResponse_descriptor_,
      CMsgGCToGCGetUserSessionServerResponse::default_instance_,
      CMsgGCToGCGetUserSessionServerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCGetUserSessionServerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCGetUserSessionServerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCToGCGetUserSessionServerResponse));
  CMsgGCToGCGetUserServerMembers_descriptor_ = file->message_type(14);
  static const int CMsgGCToGCGetUserServerMembers_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCGetUserServerMembers, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCGetUserServerMembers, max_spectators_),
  };
  CMsgGCToGCGetUserServerMembers_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCToGCGetUserServerMembers_descriptor_,
      CMsgGCToGCGetUserServerMembers::default_instance_,
      CMsgGCToGCGetUserServerMembers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCGetUserServerMembers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCGetUserServerMembers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCToGCGetUserServerMembers));
  CMsgGCToGCGetUserServerMembersResponse_descriptor_ = file->message_type(15);
  static const int CMsgGCToGCGetUserServerMembersResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCGetUserServerMembersResponse, member_account_id_),
  };
  CMsgGCToGCGetUserServerMembersResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCToGCGetUserServerMembersResponse_descriptor_,
      CMsgGCToGCGetUserServerMembersResponse::default_instance_,
      CMsgGCToGCGetUserServerMembersResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCGetUserServerMembersResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCGetUserServerMembersResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCToGCGetUserServerMembersResponse));
  CMsgLookupMultipleAccountNames_descriptor_ = file->message_type(16);
  static const int CMsgLookupMultipleAccountNames_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLookupMultipleAccountNames, accountids_),
  };
  CMsgLookupMultipleAccountNames_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgLookupMultipleAccountNames_descriptor_,
      CMsgLookupMultipleAccountNames::default_instance_,
      CMsgLookupMultipleAccountNames_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLookupMultipleAccountNames, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLookupMultipleAccountNames, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgLookupMultipleAccountNames));
  CMsgLookupMultipleAccountNamesResponse_descriptor_ = file->message_type(17);
  static const int CMsgLookupMultipleAccountNamesResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLookupMultipleAccountNamesResponse, accounts_),
  };
  CMsgLookupMultipleAccountNamesResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgLookupMultipleAccountNamesResponse_descriptor_,
      CMsgLookupMultipleAccountNamesResponse::default_instance_,
      CMsgLookupMultipleAccountNamesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLookupMultipleAccountNamesResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLookupMultipleAccountNamesResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgLookupMultipleAccountNamesResponse));
  CMsgLookupMultipleAccountNamesResponse_Account_descriptor_ = CMsgLookupMultipleAccountNamesResponse_descriptor_->nested_type(0);
  static const int CMsgLookupMultipleAccountNamesResponse_Account_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLookupMultipleAccountNamesResponse_Account, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLookupMultipleAccountNamesResponse_Account, persona_),
  };
  CMsgLookupMultipleAccountNamesResponse_Account_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgLookupMultipleAccountNamesResponse_Account_descriptor_,
      CMsgLookupMultipleAccountNamesResponse_Account::default_instance_,
      CMsgLookupMultipleAccountNamesResponse_Account_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLookupMultipleAccountNamesResponse_Account, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLookupMultipleAccountNamesResponse_Account, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgLookupMultipleAccountNamesResponse_Account));
  CMsgGCToGCGetUserPCBangNo_descriptor_ = file->message_type(18);
  static const int CMsgGCToGCGetUserPCBangNo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCGetUserPCBangNo, account_id_),
  };
  CMsgGCToGCGetUserPCBangNo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCToGCGetUserPCBangNo_descriptor_,
      CMsgGCToGCGetUserPCBangNo::default_instance_,
      CMsgGCToGCGetUserPCBangNo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCGetUserPCBangNo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCGetUserPCBangNo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCToGCGetUserPCBangNo));
  CMsgGCToGCGetUserPCBangNoResponse_descriptor_ = file->message_type(19);
  static const int CMsgGCToGCGetUserPCBangNoResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCGetUserPCBangNoResponse, pc_bang_no_),
  };
  CMsgGCToGCGetUserPCBangNoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCToGCGetUserPCBangNoResponse_descriptor_,
      CMsgGCToGCGetUserPCBangNoResponse::default_instance_,
      CMsgGCToGCGetUserPCBangNoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCGetUserPCBangNoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCGetUserPCBangNoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCToGCGetUserPCBangNoResponse));
  CMsgRequestCrateItems_descriptor_ = file->message_type(20);
  static const int CMsgRequestCrateItems_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestCrateItems, crate_series_),
  };
  CMsgRequestCrateItems_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgRequestCrateItems_descriptor_,
      CMsgRequestCrateItems::default_instance_,
      CMsgRequestCrateItems_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestCrateItems, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestCrateItems, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgRequestCrateItems));
  CMsgRequestCrateItemsResponse_descriptor_ = file->message_type(21);
  static const int CMsgRequestCrateItemsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestCrateItemsResponse, crate_series_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestCrateItemsResponse, item_defs_),
  };
  CMsgRequestCrateItemsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgRequestCrateItemsResponse_descriptor_,
      CMsgRequestCrateItemsResponse::default_instance_,
      CMsgRequestCrateItemsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestCrateItemsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestCrateItemsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgRequestCrateItemsResponse));
  CMsgGCToGCCanUseDropRateBonus_descriptor_ = file->message_type(22);
  static const int CMsgGCToGCCanUseDropRateBonus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCCanUseDropRateBonus, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCCanUseDropRateBonus, drop_rate_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCCanUseDropRateBonus, booster_type_),
  };
  CMsgGCToGCCanUseDropRateBonus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCToGCCanUseDropRateBonus_descriptor_,
      CMsgGCToGCCanUseDropRateBonus::default_instance_,
      CMsgGCToGCCanUseDropRateBonus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCCanUseDropRateBonus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCCanUseDropRateBonus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCToGCCanUseDropRateBonus));
  CMsgSQLAddDropRateBonus_descriptor_ = file->message_type(23);
  static const int CMsgSQLAddDropRateBonus_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSQLAddDropRateBonus, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSQLAddDropRateBonus, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSQLAddDropRateBonus, item_def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSQLAddDropRateBonus, drop_rate_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSQLAddDropRateBonus, booster_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSQLAddDropRateBonus, seconds_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSQLAddDropRateBonus, end_time_stamp_),
  };
  CMsgSQLAddDropRateBonus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSQLAddDropRateBonus_descriptor_,
      CMsgSQLAddDropRateBonus::default_instance_,
      CMsgSQLAddDropRateBonus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSQLAddDropRateBonus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSQLAddDropRateBonus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSQLAddDropRateBonus));
  CMsgGCToGCRefreshSOCache_descriptor_ = file->message_type(24);
  static const int CMsgGCToGCRefreshSOCache_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCRefreshSOCache, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCRefreshSOCache, reload_),
  };
  CMsgGCToGCRefreshSOCache_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCToGCRefreshSOCache_descriptor_,
      CMsgGCToGCRefreshSOCache::default_instance_,
      CMsgGCToGCRefreshSOCache_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCRefreshSOCache, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCRefreshSOCache, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCToGCRefreshSOCache));
  CMsgGCToGCCheckAccountTradeStatus_descriptor_ = file->message_type(25);
  static const int CMsgGCToGCCheckAccountTradeStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCCheckAccountTradeStatus, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCCheckAccountTradeStatus, initiator_),
  };
  CMsgGCToGCCheckAccountTradeStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCToGCCheckAccountTradeStatus_descriptor_,
      CMsgGCToGCCheckAccountTradeStatus::default_instance_,
      CMsgGCToGCCheckAccountTradeStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCCheckAccountTradeStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCCheckAccountTradeStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCToGCCheckAccountTradeStatus));
  CMsgGCToGCCheckAccountTradeStatusResponse_descriptor_ = file->message_type(26);
  static const int CMsgGCToGCCheckAccountTradeStatusResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCCheckAccountTradeStatusResponse, can_trade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCCheckAccountTradeStatusResponse, error_code_),
  };
  CMsgGCToGCCheckAccountTradeStatusResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCToGCCheckAccountTradeStatusResponse_descriptor_,
      CMsgGCToGCCheckAccountTradeStatusResponse::default_instance_,
      CMsgGCToGCCheckAccountTradeStatusResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCCheckAccountTradeStatusResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCCheckAccountTradeStatusResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCToGCCheckAccountTradeStatusResponse));
  EGCItemMsg_descriptor_ = file->enum_type(0);
  EGCMsgResponse_descriptor_ = file->enum_type(1);
  EUnlockStyle_descriptor_ = file->enum_type(2);
  EItemPurgatoryResponse_Finalize_descriptor_ = file->enum_type(3);
  EItemPurgatoryResponse_Refund_descriptor_ = file->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_econ_5fgcmessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgApplyAutograph_descriptor_, &CMsgApplyAutograph::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgEconPlayerStrangeCountAdjustment_descriptor_, &CMsgEconPlayerStrangeCountAdjustment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment_descriptor_, &CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgRequestItemPurgatory_FinalizePurchase_descriptor_, &CMsgRequestItemPurgatory_FinalizePurchase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgRequestItemPurgatory_FinalizePurchaseResponse_descriptor_, &CMsgRequestItemPurgatory_FinalizePurchaseResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgRequestItemPurgatory_RefundPurchase_descriptor_, &CMsgRequestItemPurgatory_RefundPurchase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgRequestItemPurgatory_RefundPurchaseResponse_descriptor_, &CMsgRequestItemPurgatory_RefundPurchaseResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgCraftingResponse_descriptor_, &CMsgCraftingResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCRequestStoreSalesData_descriptor_, &CMsgGCRequestStoreSalesData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCRequestStoreSalesDataResponse_descriptor_, &CMsgGCRequestStoreSalesDataResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCRequestStoreSalesDataResponse_Price_descriptor_, &CMsgGCRequestStoreSalesDataResponse_Price::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCRequestStoreSalesDataUpToDateResponse_descriptor_, &CMsgGCRequestStoreSalesDataUpToDateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCToGCPingRequest_descriptor_, &CMsgGCToGCPingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCToGCPingResponse_descriptor_, &CMsgGCToGCPingResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCToGCGetUserSessionServer_descriptor_, &CMsgGCToGCGetUserSessionServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCToGCGetUserSessionServerResponse_descriptor_, &CMsgGCToGCGetUserSessionServerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCToGCGetUserServerMembers_descriptor_, &CMsgGCToGCGetUserServerMembers::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCToGCGetUserServerMembersResponse_descriptor_, &CMsgGCToGCGetUserServerMembersResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgLookupMultipleAccountNames_descriptor_, &CMsgLookupMultipleAccountNames::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgLookupMultipleAccountNamesResponse_descriptor_, &CMsgLookupMultipleAccountNamesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgLookupMultipleAccountNamesResponse_Account_descriptor_, &CMsgLookupMultipleAccountNamesResponse_Account::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCToGCGetUserPCBangNo_descriptor_, &CMsgGCToGCGetUserPCBangNo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCToGCGetUserPCBangNoResponse_descriptor_, &CMsgGCToGCGetUserPCBangNoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgRequestCrateItems_descriptor_, &CMsgRequestCrateItems::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgRequestCrateItemsResponse_descriptor_, &CMsgRequestCrateItemsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCToGCCanUseDropRateBonus_descriptor_, &CMsgGCToGCCanUseDropRateBonus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSQLAddDropRateBonus_descriptor_, &CMsgSQLAddDropRateBonus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCToGCRefreshSOCache_descriptor_, &CMsgGCToGCRefreshSOCache::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCToGCCheckAccountTradeStatus_descriptor_, &CMsgGCToGCCheckAccountTradeStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCToGCCheckAccountTradeStatusResponse_descriptor_, &CMsgGCToGCCheckAccountTradeStatusResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_econ_5fgcmessages_2eproto() {
  delete CMsgApplyAutograph::default_instance_;
  delete CMsgApplyAutograph_reflection_;
  delete CMsgEconPlayerStrangeCountAdjustment::default_instance_;
  delete CMsgEconPlayerStrangeCountAdjustment_reflection_;
  delete CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::default_instance_;
  delete CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment_reflection_;
  delete CMsgRequestItemPurgatory_FinalizePurchase::default_instance_;
  delete CMsgRequestItemPurgatory_FinalizePurchase_reflection_;
  delete CMsgRequestItemPurgatory_FinalizePurchaseResponse::default_instance_;
  delete CMsgRequestItemPurgatory_FinalizePurchaseResponse_reflection_;
  delete CMsgRequestItemPurgatory_RefundPurchase::default_instance_;
  delete CMsgRequestItemPurgatory_RefundPurchase_reflection_;
  delete CMsgRequestItemPurgatory_RefundPurchaseResponse::default_instance_;
  delete CMsgRequestItemPurgatory_RefundPurchaseResponse_reflection_;
  delete CMsgCraftingResponse::default_instance_;
  delete CMsgCraftingResponse_reflection_;
  delete CMsgGCRequestStoreSalesData::default_instance_;
  delete CMsgGCRequestStoreSalesData_reflection_;
  delete CMsgGCRequestStoreSalesDataResponse::default_instance_;
  delete CMsgGCRequestStoreSalesDataResponse_reflection_;
  delete CMsgGCRequestStoreSalesDataResponse_Price::default_instance_;
  delete CMsgGCRequestStoreSalesDataResponse_Price_reflection_;
  delete CMsgGCRequestStoreSalesDataUpToDateResponse::default_instance_;
  delete CMsgGCRequestStoreSalesDataUpToDateResponse_reflection_;
  delete CMsgGCToGCPingRequest::default_instance_;
  delete CMsgGCToGCPingRequest_reflection_;
  delete CMsgGCToGCPingResponse::default_instance_;
  delete CMsgGCToGCPingResponse_reflection_;
  delete CMsgGCToGCGetUserSessionServer::default_instance_;
  delete CMsgGCToGCGetUserSessionServer_reflection_;
  delete CMsgGCToGCGetUserSessionServerResponse::default_instance_;
  delete CMsgGCToGCGetUserSessionServerResponse_reflection_;
  delete CMsgGCToGCGetUserServerMembers::default_instance_;
  delete CMsgGCToGCGetUserServerMembers_reflection_;
  delete CMsgGCToGCGetUserServerMembersResponse::default_instance_;
  delete CMsgGCToGCGetUserServerMembersResponse_reflection_;
  delete CMsgLookupMultipleAccountNames::default_instance_;
  delete CMsgLookupMultipleAccountNames_reflection_;
  delete CMsgLookupMultipleAccountNamesResponse::default_instance_;
  delete CMsgLookupMultipleAccountNamesResponse_reflection_;
  delete CMsgLookupMultipleAccountNamesResponse_Account::default_instance_;
  delete CMsgLookupMultipleAccountNamesResponse_Account_reflection_;
  delete CMsgGCToGCGetUserPCBangNo::default_instance_;
  delete CMsgGCToGCGetUserPCBangNo_reflection_;
  delete CMsgGCToGCGetUserPCBangNoResponse::default_instance_;
  delete CMsgGCToGCGetUserPCBangNoResponse_reflection_;
  delete CMsgRequestCrateItems::default_instance_;
  delete CMsgRequestCrateItems_reflection_;
  delete CMsgRequestCrateItemsResponse::default_instance_;
  delete CMsgRequestCrateItemsResponse_reflection_;
  delete CMsgGCToGCCanUseDropRateBonus::default_instance_;
  delete CMsgGCToGCCanUseDropRateBonus_reflection_;
  delete CMsgSQLAddDropRateBonus::default_instance_;
  delete CMsgSQLAddDropRateBonus_reflection_;
  delete CMsgGCToGCRefreshSOCache::default_instance_;
  delete CMsgGCToGCRefreshSOCache_reflection_;
  delete CMsgGCToGCCheckAccountTradeStatus::default_instance_;
  delete CMsgGCToGCCheckAccountTradeStatus_reflection_;
  delete CMsgGCToGCCheckAccountTradeStatusResponse::default_instance_;
  delete CMsgGCToGCCheckAccountTradeStatusResponse_reflection_;
}

void protobuf_AddDesc_econ_5fgcmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_steammessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025econ_gcmessages.proto\032\023steammessages.p"
    "roto\"E\n\022CMsgApplyAutograph\022\031\n\021autograph_"
    "item_id\030\001 \001(\004\022\024\n\014item_item_id\030\002 \001(\004\"\360\001\n$"
    "CMsgEconPlayerStrangeCountAdjustment\022\022\n\n"
    "account_id\030\001 \001(\r\022`\n\031strange_count_adjust"
    "ments\030\002 \003(\0132=.CMsgEconPlayerStrangeCount"
    "Adjustment.CStrangeCountAdjustment\032R\n\027CS"
    "trangeCountAdjustment\022\022\n\nevent_type\030\001 \001("
    "\r\022\017\n\007item_id\030\002 \001(\004\022\022\n\nadjustment\030\003 \001(\r\"="
    "\n)CMsgRequestItemPurgatory_FinalizePurch"
    "ase\022\020\n\010item_ids\030\001 \003(\004\"C\n1CMsgRequestItem"
    "Purgatory_FinalizePurchaseResponse\022\016\n\006re"
    "sult\030\001 \001(\r\":\n\'CMsgRequestItemPurgatory_R"
    "efundPurchase\022\017\n\007item_id\030\001 \001(\004\"A\n/CMsgRe"
    "questItemPurgatory_RefundPurchaseRespons"
    "e\022\016\n\006result\030\001 \001(\r\"(\n\024CMsgCraftingRespons"
    "e\022\020\n\010item_ids\030\001 \003(\004\"@\n\033CMsgGCRequestStor"
    "eSalesData\022\017\n\007version\030\001 \001(\r\022\020\n\010currency\030"
    "\002 \001(\r\"\271\001\n#CMsgGCRequestStoreSalesDataRes"
    "ponse\022>\n\nsale_price\030\001 \003(\0132*.CMsgGCReques"
    "tStoreSalesDataResponse.Price\022\017\n\007version"
    "\030\002 \001(\r\022\027\n\017expiration_time\030\003 \001(\r\032(\n\005Price"
    "\022\020\n\010item_def\030\001 \001(\r\022\r\n\005price\030\002 \001(\r\"W\n+CMs"
    "gGCRequestStoreSalesDataUpToDateResponse"
    "\022\017\n\007version\030\001 \001(\r\022\027\n\017expiration_time\030\002 \001"
    "(\r\"\027\n\025CMsgGCToGCPingRequest\"\030\n\026CMsgGCToG"
    "CPingResponse\"4\n\036CMsgGCToGCGetUserSessio"
    "nServer\022\022\n\naccount_id\030\001 \001(\r\"A\n&CMsgGCToG"
    "CGetUserSessionServerResponse\022\027\n\017server_"
    "steam_id\030\001 \001(\006\"L\n\036CMsgGCToGCGetUserServe"
    "rMembers\022\022\n\naccount_id\030\001 \001(\r\022\026\n\016max_spec"
    "tators\030\002 \001(\r\"C\n&CMsgGCToGCGetUserServerM"
    "embersResponse\022\031\n\021member_account_id\030\001 \003("
    "\r\"8\n\036CMsgLookupMultipleAccountNames\022\026\n\na"
    "ccountids\030\001 \003(\rB\002\020\001\"\232\001\n&CMsgLookupMultip"
    "leAccountNamesResponse\022A\n\010accounts\030\001 \003(\013"
    "2/.CMsgLookupMultipleAccountNamesRespons"
    "e.Account\032-\n\007Account\022\021\n\taccountid\030\001 \001(\r\022"
    "\017\n\007persona\030\002 \001(\t\"/\n\031CMsgGCToGCGetUserPCB"
    "angNo\022\022\n\naccount_id\030\001 \001(\r\"7\n!CMsgGCToGCG"
    "etUserPCBangNoResponse\022\022\n\npc_bang_no\030\001 \001"
    "(\r\"-\n\025CMsgRequestCrateItems\022\024\n\014crate_ser"
    "ies\030\001 \001(\r\"H\n\035CMsgRequestCrateItemsRespon"
    "se\022\024\n\014crate_series\030\001 \001(\r\022\021\n\titem_defs\030\002 "
    "\003(\r\"b\n\035CMsgGCToGCCanUseDropRateBonus\022\022\n\n"
    "account_id\030\001 \001(\r\022\027\n\017drop_rate_bonus\030\002 \001("
    "\002\022\024\n\014booster_type\030\003 \001(\r\"\261\001\n\027CMsgSQLAddDr"
    "opRateBonus\022\022\n\naccount_id\030\001 \001(\r\022\017\n\007item_"
    "id\030\002 \001(\004\022\020\n\010item_def\030\003 \001(\r\022\027\n\017drop_rate_"
    "bonus\030\004 \001(\002\022\024\n\014booster_type\030\005 \001(\r\022\030\n\020sec"
    "onds_duration\030\006 \001(\r\022\026\n\016end_time_stamp\030\007 "
    "\001(\r\">\n\030CMsgGCToGCRefreshSOCache\022\022\n\naccou"
    "nt_id\030\001 \001(\r\022\016\n\006reload\030\002 \001(\010\"J\n!CMsgGCToG"
    "CCheckAccountTradeStatus\022\022\n\naccount_id\030\001"
    " \001(\r\022\021\n\tinitiator\030\002 \001(\010\"R\n)CMsgGCToGCChe"
    "ckAccountTradeStatusResponse\022\021\n\tcan_trad"
    "e\030\001 \001(\010\022\022\n\nerror_code\030\002 \001(\r*\224*\n\nEGCItemM"
    "sg\022\021\n\014k_EMsgGCBase\020\350\007\022\034\n\027k_EMsgGCSetItem"
    "Position\020\351\007\022\022\n\rk_EMsgGCCraft\020\352\007\022\032\n\025k_EMs"
    "gGCCraftResponse\020\353\007\022\023\n\016k_EMsgGCDelete\020\354\007"
    "\022$\n\037k_EMsgGCVerifyCacheSubscription\020\355\007\022\025"
    "\n\020k_EMsgGCNameItem\020\356\007\022\030\n\023k_EMsgGCUnlockC"
    "rate\020\357\007\022 \n\033k_EMsgGCUnlockCrateResponse\020\360"
    "\007\022\026\n\021k_EMsgGCPaintItem\020\361\007\022\036\n\031k_EMsgGCPai"
    "ntItemResponse\020\362\007\022\"\n\035k_EMsgGCGoldenWrenc"
    "hBroadcast\020\363\007\022\030\n\023k_EMsgGCMOTDRequest\020\364\007\022"
    " \n\033k_EMsgGCMOTDRequestResponse\020\365\007\022\'\n\"k_E"
    "MsgGCAddItemToSocket_DEPRECATED\020\366\007\022/\n*k_"
    "EMsgGCAddItemToSocketResponse_DEPRECATED"
    "\020\367\007\022+\n&k_EMsgGCAddSocketToBaseItem_DEPRE"
    "CATED\020\370\007\022\'\n\"k_EMsgGCAddSocketToItem_DEPR"
    "ECATED\020\371\007\022/\n*k_EMsgGCAddSocketToItemResp"
    "onse_DEPRECATED\020\372\007\022\031\n\024k_EMsgGCNameBaseIt"
    "em\020\373\007\022!\n\034k_EMsgGCNameBaseItemResponse\020\374\007"
    "\022(\n#k_EMsgGCRemoveSocketItem_DEPRECATED\020"
    "\375\007\0220\n+k_EMsgGCRemoveSocketItemResponse_D"
    "EPRECATED\020\376\007\022!\n\034k_EMsgGCCustomizeItemTex"
    "ture\020\377\007\022)\n$k_EMsgGCCustomizeItemTextureR"
    "esponse\020\200\010\022\033\n\026k_EMsgGCUseItemRequest\020\201\010\022"
    "\034\n\027k_EMsgGCUseItemResponse\020\202\010\022\030\n\023k_EMsgG"
    "CGiftedItems\020\203\010\022\033\n\026k_EMsgGCRemoveItemNam"
    "e\020\206\010\022\034\n\027k_EMsgGCRemoveItemPaint\020\207\010\022\031\n\024k_"
    "EMsgGCGiftWrapItem\020\210\010\022!\n\034k_EMsgGCGiftWra"
    "pItemResponse\020\211\010\022\030\n\023k_EMsgGCDeliverGift\020"
    "\212\010\022%\n k_EMsgGCDeliverGiftResponseGiver\020\213"
    "\010\022(\n#k_EMsgGCDeliverGiftResponseReceiver"
    "\020\214\010\022\036\n\031k_EMsgGCUnwrapGiftRequest\020\215\010\022\037\n\032k"
    "_EMsgGCUnwrapGiftResponse\020\216\010\022\031\n\024k_EMsgGC"
    "SetItemStyle\020\217\010\022\036\n\031k_EMsgGCUsedClaimCode"
    "Item\020\220\010\022\026\n\021k_EMsgGCSortItems\020\221\010\022*\n%k_EMs"
    "gGC_RevolvingLootList_DEPRECATED\020\222\010\022\032\n\025k"
    "_EMsgGCLookupAccount\020\223\010\022\"\n\035k_EMsgGCLooku"
    "pAccountResponse\020\224\010\022\036\n\031k_EMsgGCLookupAcc"
    "ountName\020\225\010\022&\n!k_EMsgGCLookupAccountName"
    "Response\020\226\010\022\035\n\030k_EMsgGCUpdateItemSchema\020"
    "\231\010\022 \n\033k_EMsgGCRemoveCustomTexture\020\233\010\022(\n#"
    "k_EMsgGCRemoveCustomTextureResponse\020\234\010\022\035"
    "\n\030k_EMsgGCRemoveMakersMark\020\235\010\022%\n k_EMsgG"
    "CRemoveMakersMarkResponse\020\236\010\022#\n\036k_EMsgGC"
    "RemoveUniqueCraftIndex\020\237\010\022+\n&k_EMsgGCRem"
    "oveUniqueCraftIndexResponse\020\240\010\022\033\n\026k_EMsg"
    "GCSaxxyBroadcast\020\241\010\022!\n\034k_EMsgGCBackpackS"
    "ortFinished\020\242\010\022$\n\037k_EMsgGCAdjustItemEqui"
    "ppedState\020\243\010\022\030\n\023k_EMsgGCCollectItem\020\245\010\022\035"
    "\n\030k_EMsgGCItemAcknowledged\020\246\010\022)\n$k_EMsgG"
    "CPresets_SelectPresetForClass\020\247\010\022$\n\037k_EM"
    "sgGCPresets_SetItemPosition\020\250\010\022\031\n\024k_EMsg"
    "GC_ReportAbuse\020\251\010\022!\n\034k_EMsgGC_ReportAbus"
    "eResponse\020\252\010\022.\n)k_EMsgGCPresets_SelectPr"
    "esetForClassReply\020\253\010\022!\n\034k_EMsgGCNameItem"
    "Notification\020\254\010\022#\n\036k_EMsgGCApplyConsumab"
    "leEffects\020\255\010\022 \n\033k_EMsgGCConsumableExhaus"
    "ted\020\256\010\022\036\n\031k_EMsgGCShowItemsPickedUp\020\257\010\022&"
    "\n!k_EMsgGCClientDisplayNotification\020\260\010\022\035"
    "\n\030k_EMsgGCApplyStrangePart\020\261\010\022(\n#k_EMsgG"
    "C_IncrementKillCountResponse\020\263\010\022 \n\033k_EMs"
    "gGCApplyPennantUpgrade\020\264\010\022\035\n\030k_EMsgGCSet"
    "ItemPositions\020\265\010\022\034\n\027k_EMsgGCApplyEggEsse"
    "nce\020\266\010\022#\n\036k_EMsgGCNameEggEssenceResponse"
    "\020\267\010\022\034\n\027k_EMsgGCUnlockItemStyle\020\270\010\022$\n\037k_E"
    "MsgGCUnlockItemStyleResponse\020\271\010\022*\n%k_EMs"
    "gGCFulfillDynamicRecipeComponent\020\272\010\0222\n-k"
    "_EMsgGCFulfillDynamicRecipeComponentResp"
    "onse\020\273\010\022$\n\037k_EMsgGCClientRequestMarketDa"
    "ta\020\274\010\022,\n\'k_EMsgGCClientRequestMarketData"
    "Response\020\275\010\022\030\n\023k_EMsgGCExtractGems\020\276\010\022\026\n"
    "\021k_EMsgGCAddSocket\020\277\010\022\034\n\027k_EMsgGCAddItem"
    "ToSocket\020\300\010\022$\n\037k_EMsgGCAddItemToSocketRe"
    "sponse\020\301\010\022\036\n\031k_EMsgGCAddSocketResponse\020\302"
    "\010\022!\n\034k_EMsgGCResetStrangeGemCount\020\303\010\022\036\n\031"
    "k_EMsgGCRequestCrateItems\020\304\010\022&\n!k_EMsgGC"
    "RequestCrateItemsResponse\020\305\010\022\030\n\023k_EMsgGC"
    "TradingBase\020\334\013\022)\n$k_EMsgGCTrading_Initia"
    "teTradeRequest\020\335\013\022*\n%k_EMsgGCTrading_Ini"
    "tiateTradeResponse\020\336\013\022!\n\034k_EMsgGCTrading"
    "_StartSession\020\337\013\022\"\n\035k_EMsgGCTrading_Sess"
    "ionClosed\020\345\013\0221\n,k_EMsgGCTrading_Initiate"
    "TradeRequestResponse\020\352\013\022)\n$k_EMsgGCServe"
    "rBrowser_FavoriteServer\020\301\014\022*\n%k_EMsgGCSe"
    "rverBrowser_BlacklistServer\020\302\014\022\036\n\031k_EMsg"
    "GCServerRentalsBase\020\244\r\022#\n\036k_EMsgGCItemPr"
    "eviewCheckStatus\020\245\r\022&\n!k_EMsgGCItemPrevi"
    "ewStatusResponse\020\246\r\022\037\n\032k_EMsgGCItemPrevi"
    "ewRequest\020\247\r\022\'\n\"k_EMsgGCItemPreviewReque"
    "stResponse\020\250\r\022\036\n\031k_EMsgGCItemPreviewExpi"
    "re\020\251\r\022*\n%k_EMsgGCItemPreviewExpireNotifi"
    "cation\020\252\r\022.\n)k_EMsgGCItemPreviewItemBoug"
    "htNotification\020\253\r\022\037\n\032k_EMsgGCDev_NewItem"
    "Request\020\321\017\022\'\n\"k_EMsgGCDev_NewItemRequest"
    "Response\020\322\017\022\035\n\030k_EMsgGCStoreGetUserData\020"
    "\304\023\022%\n k_EMsgGCStoreGetUserDataResponse\020\305"
    "\023\022\"\n\035k_EMsgGCStorePurchaseFinalize\020\310\023\022*\n"
    "%k_EMsgGCStorePurchaseFinalizeResponse\020\311"
    "\023\022 \n\033k_EMsgGCStorePurchaseCancel\020\312\023\022(\n#k"
    "_EMsgGCStorePurchaseCancelResponse\020\313\023\022\036\n"
    "\031k_EMsgGCStorePurchaseInit\020\316\023\022&\n!k_EMsgG"
    "CStorePurchaseInitResponse\020\317\023\022\"\n\035k_EMsgG"
    "CBannedWordListRequest\020\320\023\022#\n\036k_EMsgGCBan"
    "nedWordListResponse\020\321\023\022(\n#k_EMsgGCToGCBa"
    "nnedWordListBroadcast\020\322\023\022&\n!k_EMsgGCToGC"
    "BannedWordListUpdated\020\323\023\022\036\n\031k_EMsgGCToGC"
    "DirtySDOCache\020\324\023\022&\n!k_EMsgGCToGCDirtyMul"
    "tipleSDOCache\020\325\023\022\"\n\035k_EMsgGCToGCUpdateSQ"
    "LKeyValue\020\326\023\022(\n#k_EMsgGCToGCBroadcastCon"
    "soleCommand\020\331\023\022!\n\034k_EMsgGCServerVersionU"
    "pdated\020\332\023\022\033\n\026k_EMsgGCApplyAutograph\020\333\023\022%"
    "\n k_EMsgGCToGCWebAPIAccountChanged\020\334\023\022!\n"
    "\034k_EMsgGCRequestAnnouncements\020\335\023\022)\n$k_EM"
    "sgGCRequestAnnouncementsResponse\020\336\023\022!\n\034k"
    "_EMsgGCClientVersionUpdated\020\340\023\022+\n&k_EMsg"
    "GCItemPurgatory_FinalizePurchase\020\343\023\0223\n.k"
    "_EMsgGCItemPurgatory_FinalizePurchaseRes"
    "ponse\020\344\023\022)\n$k_EMsgGCItemPurgatory_Refund"
    "Purchase\020\345\023\0221\n,k_EMsgGCItemPurgatory_Ref"
    "undPurchaseResponse\020\346\023\022.\n)k_EMsgGCToGCPl"
    "ayerStrangeCountAdjustments\020\347\023\022\"\n\035k_EMsg"
    "GCRequestStoreSalesData\020\350\023\022*\n%k_EMsgGCRe"
    "questStoreSalesDataResponse\020\351\023\0222\n-k_EMsg"
    "GCRequestStoreSalesDataUpToDateResponse\020"
    "\352\023\022\034\n\027k_EMsgGCToGCPingRequest\020\353\023\022\035\n\030k_EM"
    "sgGCToGCPingResponse\020\354\023\022%\n k_EMsgGCToGCG"
    "etUserSessionServer\020\355\023\022-\n(k_EMsgGCToGCGe"
    "tUserSessionServerResponse\020\356\023\022%\n k_EMsgG"
    "CToGCGetUserServerMembers\020\357\023\022-\n(k_EMsgGC"
    "ToGCGetUserServerMembersResponse\020\360\023\022 \n\033k"
    "_EMsgGCToGCGetUserPCBangNo\020\361\023\022(\n#k_EMsgG"
    "CToGCGetUserPCBangNoResponse\020\362\023\022$\n\037k_EMs"
    "gGCToGCCanUseDropRateBonus\020\363\023\022\036\n\031k_EMsgS"
    "QLAddDropRateBonus\020\364\023\022\037\n\032k_EMsgGCToGCRef"
    "reshSOCache\020\365\023\022(\n#k_EMsgGCToGCCheckAccou"
    "ntTradeStatus\020\370\023\0220\n+k_EMsgGCToGCCheckAcc"
    "ountTradeStatusResponse\020\371\023*\233\002\n\016EGCMsgRes"
    "ponse\022\026\n\022k_EGCMsgResponseOK\020\000\022\032\n\026k_EGCMs"
    "gResponseDenied\020\001\022\037\n\033k_EGCMsgResponseSer"
    "verError\020\002\022\033\n\027k_EGCMsgResponseTimeout\020\003\022"
    "\033\n\027k_EGCMsgResponseInvalid\020\004\022\033\n\027k_EGCMsg"
    "ResponseNoMatch\020\005\022 \n\034k_EGCMsgResponseUnk"
    "nownError\020\006\022\037\n\033k_EGCMsgResponseNotLogged"
    "On\020\007\022\032\n\026k_EGCMsgFailedToCreate\020\010*\221\002\n\014EUn"
    "lockStyle\022\033\n\027k_UnlockStyle_Succeeded\020\000\022\037"
    "\n\033k_UnlockStyle_Failed_PreReq\020\001\022#\n\037k_Unl"
    "ockStyle_Failed_CantAfford\020\002\022#\n\037k_Unlock"
    "Style_Failed_CantCommit\020\003\022&\n\"k_UnlockSty"
    "le_Failed_CantLockCache\020\004\022)\n%k_UnlockSty"
    "le_Failed_CantAffordAttrib\020\005\022&\n\"k_Unlock"
    "Style_Failed_CantAffordGem\020\006*\363\002\n\037EItemPu"
    "rgatoryResponse_Finalize\022.\n*k_ItemPurgat"
    "oryResponse_Finalize_Succeeded\020\000\0226\n2k_It"
    "emPurgatoryResponse_Finalize_Failed_Inco"
    "mplete\020\001\022\?\n;k_ItemPurgatoryResponse_Fina"
    "lize_Failed_ItemsNotInPurgatory\020\002\022=\n9k_I"
    "temPurgatoryResponse_Finalize_Failed_Cou"
    "ldNotFindItems\020\003\0225\n1k_ItemPurgatoryRespo"
    "nse_Finalize_Failed_NoSOCache\020\004\0221\n-k_Ite"
    "mPurgatoryResponse_Finalize_BackpackFull"
    "\020\005*\347\002\n\035EItemPurgatoryResponse_Refund\022,\n("
    "k_ItemPurgatoryResponse_Refund_Succeeded"
    "\020\000\022<\n8k_ItemPurgatoryResponse_Refund_Fai"
    "led_ItemNotInPurgatory\020\001\022:\n6k_ItemPurgat"
    "oryResponse_Refund_Failed_CouldNotFindIt"
    "em\020\002\0223\n/k_ItemPurgatoryResponse_Refund_F"
    "ailed_NoSOCache\020\003\0222\n.k_ItemPurgatoryResp"
    "onse_Refund_Failed_NoDetail\020\004\0225\n1k_ItemP"
    "urgatoryResponse_Refund_Failed_NexonWebA"
    "PI\020\005", 8964);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "econ_gcmessages.proto", &protobuf_RegisterTypes);
  CMsgApplyAutograph::default_instance_ = new CMsgApplyAutograph();
  CMsgEconPlayerStrangeCountAdjustment::default_instance_ = new CMsgEconPlayerStrangeCountAdjustment();
  CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::default_instance_ = new CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment();
  CMsgRequestItemPurgatory_FinalizePurchase::default_instance_ = new CMsgRequestItemPurgatory_FinalizePurchase();
  CMsgRequestItemPurgatory_FinalizePurchaseResponse::default_instance_ = new CMsgRequestItemPurgatory_FinalizePurchaseResponse();
  CMsgRequestItemPurgatory_RefundPurchase::default_instance_ = new CMsgRequestItemPurgatory_RefundPurchase();
  CMsgRequestItemPurgatory_RefundPurchaseResponse::default_instance_ = new CMsgRequestItemPurgatory_RefundPurchaseResponse();
  CMsgCraftingResponse::default_instance_ = new CMsgCraftingResponse();
  CMsgGCRequestStoreSalesData::default_instance_ = new CMsgGCRequestStoreSalesData();
  CMsgGCRequestStoreSalesDataResponse::default_instance_ = new CMsgGCRequestStoreSalesDataResponse();
  CMsgGCRequestStoreSalesDataResponse_Price::default_instance_ = new CMsgGCRequestStoreSalesDataResponse_Price();
  CMsgGCRequestStoreSalesDataUpToDateResponse::default_instance_ = new CMsgGCRequestStoreSalesDataUpToDateResponse();
  CMsgGCToGCPingRequest::default_instance_ = new CMsgGCToGCPingRequest();
  CMsgGCToGCPingResponse::default_instance_ = new CMsgGCToGCPingResponse();
  CMsgGCToGCGetUserSessionServer::default_instance_ = new CMsgGCToGCGetUserSessionServer();
  CMsgGCToGCGetUserSessionServerResponse::default_instance_ = new CMsgGCToGCGetUserSessionServerResponse();
  CMsgGCToGCGetUserServerMembers::default_instance_ = new CMsgGCToGCGetUserServerMembers();
  CMsgGCToGCGetUserServerMembersResponse::default_instance_ = new CMsgGCToGCGetUserServerMembersResponse();
  CMsgLookupMultipleAccountNames::default_instance_ = new CMsgLookupMultipleAccountNames();
  CMsgLookupMultipleAccountNamesResponse::default_instance_ = new CMsgLookupMultipleAccountNamesResponse();
  CMsgLookupMultipleAccountNamesResponse_Account::default_instance_ = new CMsgLookupMultipleAccountNamesResponse_Account();
  CMsgGCToGCGetUserPCBangNo::default_instance_ = new CMsgGCToGCGetUserPCBangNo();
  CMsgGCToGCGetUserPCBangNoResponse::default_instance_ = new CMsgGCToGCGetUserPCBangNoResponse();
  CMsgRequestCrateItems::default_instance_ = new CMsgRequestCrateItems();
  CMsgRequestCrateItemsResponse::default_instance_ = new CMsgRequestCrateItemsResponse();
  CMsgGCToGCCanUseDropRateBonus::default_instance_ = new CMsgGCToGCCanUseDropRateBonus();
  CMsgSQLAddDropRateBonus::default_instance_ = new CMsgSQLAddDropRateBonus();
  CMsgGCToGCRefreshSOCache::default_instance_ = new CMsgGCToGCRefreshSOCache();
  CMsgGCToGCCheckAccountTradeStatus::default_instance_ = new CMsgGCToGCCheckAccountTradeStatus();
  CMsgGCToGCCheckAccountTradeStatusResponse::default_instance_ = new CMsgGCToGCCheckAccountTradeStatusResponse();
  CMsgApplyAutograph::default_instance_->InitAsDefaultInstance();
  CMsgEconPlayerStrangeCountAdjustment::default_instance_->InitAsDefaultInstance();
  CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::default_instance_->InitAsDefaultInstance();
  CMsgRequestItemPurgatory_FinalizePurchase::default_instance_->InitAsDefaultInstance();
  CMsgRequestItemPurgatory_FinalizePurchaseResponse::default_instance_->InitAsDefaultInstance();
  CMsgRequestItemPurgatory_RefundPurchase::default_instance_->InitAsDefaultInstance();
  CMsgRequestItemPurgatory_RefundPurchaseResponse::default_instance_->InitAsDefaultInstance();
  CMsgCraftingResponse::default_instance_->InitAsDefaultInstance();
  CMsgGCRequestStoreSalesData::default_instance_->InitAsDefaultInstance();
  CMsgGCRequestStoreSalesDataResponse::default_instance_->InitAsDefaultInstance();
  CMsgGCRequestStoreSalesDataResponse_Price::default_instance_->InitAsDefaultInstance();
  CMsgGCRequestStoreSalesDataUpToDateResponse::default_instance_->InitAsDefaultInstance();
  CMsgGCToGCPingRequest::default_instance_->InitAsDefaultInstance();
  CMsgGCToGCPingResponse::default_instance_->InitAsDefaultInstance();
  CMsgGCToGCGetUserSessionServer::default_instance_->InitAsDefaultInstance();
  CMsgGCToGCGetUserSessionServerResponse::default_instance_->InitAsDefaultInstance();
  CMsgGCToGCGetUserServerMembers::default_instance_->InitAsDefaultInstance();
  CMsgGCToGCGetUserServerMembersResponse::default_instance_->InitAsDefaultInstance();
  CMsgLookupMultipleAccountNames::default_instance_->InitAsDefaultInstance();
  CMsgLookupMultipleAccountNamesResponse::default_instance_->InitAsDefaultInstance();
  CMsgLookupMultipleAccountNamesResponse_Account::default_instance_->InitAsDefaultInstance();
  CMsgGCToGCGetUserPCBangNo::default_instance_->InitAsDefaultInstance();
  CMsgGCToGCGetUserPCBangNoResponse::default_instance_->InitAsDefaultInstance();
  CMsgRequestCrateItems::default_instance_->InitAsDefaultInstance();
  CMsgRequestCrateItemsResponse::default_instance_->InitAsDefaultInstance();
  CMsgGCToGCCanUseDropRateBonus::default_instance_->InitAsDefaultInstance();
  CMsgSQLAddDropRateBonus::default_instance_->InitAsDefaultInstance();
  CMsgGCToGCRefreshSOCache::default_instance_->InitAsDefaultInstance();
  CMsgGCToGCCheckAccountTradeStatus::default_instance_->InitAsDefaultInstance();
  CMsgGCToGCCheckAccountTradeStatusResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_econ_5fgcmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_econ_5fgcmessages_2eproto {
  StaticDescriptorInitializer_econ_5fgcmessages_2eproto() {
    protobuf_AddDesc_econ_5fgcmessages_2eproto();
  }
} static_descriptor_initializer_econ_5fgcmessages_2eproto_;

const ::google::protobuf::EnumDescriptor* EGCItemMsg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGCItemMsg_descriptor_;
}
bool EGCItemMsg_IsValid(int value) {
  switch(value) {
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
    case 1015:
    case 1016:
    case 1017:
    case 1018:
    case 1019:
    case 1020:
    case 1021:
    case 1022:
    case 1023:
    case 1024:
    case 1025:
    case 1026:
    case 1027:
    case 1030:
    case 1031:
    case 1032:
    case 1033:
    case 1034:
    case 1035:
    case 1036:
    case 1037:
    case 1038:
    case 1039:
    case 1040:
    case 1041:
    case 1042:
    case 1043:
    case 1044:
    case 1045:
    case 1046:
    case 1049:
    case 1051:
    case 1052:
    case 1053:
    case 1054:
    case 1055:
    case 1056:
    case 1057:
    case 1058:
    case 1059:
    case 1061:
    case 1062:
    case 1063:
    case 1064:
    case 1065:
    case 1066:
    case 1067:
    case 1068:
    case 1069:
    case 1070:
    case 1071:
    case 1072:
    case 1073:
    case 1075:
    case 1076:
    case 1077:
    case 1078:
    case 1079:
    case 1080:
    case 1081:
    case 1082:
    case 1083:
    case 1084:
    case 1085:
    case 1086:
    case 1087:
    case 1088:
    case 1089:
    case 1090:
    case 1091:
    case 1092:
    case 1093:
    case 1500:
    case 1501:
    case 1502:
    case 1503:
    case 1509:
    case 1514:
    case 1601:
    case 1602:
    case 1700:
    case 1701:
    case 1702:
    case 1703:
    case 1704:
    case 1705:
    case 1706:
    case 1707:
    case 2001:
    case 2002:
    case 2500:
    case 2501:
    case 2504:
    case 2505:
    case 2506:
    case 2507:
    case 2510:
    case 2511:
    case 2512:
    case 2513:
    case 2514:
    case 2515:
    case 2516:
    case 2517:
    case 2518:
    case 2521:
    case 2522:
    case 2523:
    case 2524:
    case 2525:
    case 2526:
    case 2528:
    case 2531:
    case 2532:
    case 2533:
    case 2534:
    case 2535:
    case 2536:
    case 2537:
    case 2538:
    case 2539:
    case 2540:
    case 2541:
    case 2542:
    case 2543:
    case 2544:
    case 2545:
    case 2546:
    case 2547:
    case 2548:
    case 2549:
    case 2552:
    case 2553:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGCMsgResponse_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGCMsgResponse_descriptor_;
}
bool EGCMsgResponse_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EUnlockStyle_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EUnlockStyle_descriptor_;
}
bool EUnlockStyle_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EItemPurgatoryResponse_Finalize_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EItemPurgatoryResponse_Finalize_descriptor_;
}
bool EItemPurgatoryResponse_Finalize_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EItemPurgatoryResponse_Refund_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EItemPurgatoryResponse_Refund_descriptor_;
}
bool EItemPurgatoryResponse_Refund_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgApplyAutograph::kAutographItemIdFieldNumber;
const int CMsgApplyAutograph::kItemItemIdFieldNumber;
#endif  // !_MSC_VER

CMsgApplyAutograph::CMsgApplyAutograph()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgApplyAutograph::InitAsDefaultInstance() {
}

CMsgApplyAutograph::CMsgApplyAutograph(const CMsgApplyAutograph& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgApplyAutograph::SharedCtor() {
  _cached_size_ = 0;
  autograph_item_id_ = GOOGLE_ULONGLONG(0);
  item_item_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgApplyAutograph::~CMsgApplyAutograph() {
  SharedDtor();
}

void CMsgApplyAutograph::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgApplyAutograph::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgApplyAutograph::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgApplyAutograph_descriptor_;
}

const CMsgApplyAutograph& CMsgApplyAutograph::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgApplyAutograph* CMsgApplyAutograph::default_instance_ = NULL;

CMsgApplyAutograph* CMsgApplyAutograph::New() const {
  return new CMsgApplyAutograph;
}

void CMsgApplyAutograph::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    autograph_item_id_ = GOOGLE_ULONGLONG(0);
    item_item_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgApplyAutograph::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 autograph_item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &autograph_item_id_)));
          set_has_autograph_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_item_id;
        break;
      }
      
      // optional uint64 item_item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_item_id_)));
          set_has_item_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgApplyAutograph::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 autograph_item_id = 1;
  if (has_autograph_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->autograph_item_id(), output);
  }
  
  // optional uint64 item_item_id = 2;
  if (has_item_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item_item_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgApplyAutograph::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 autograph_item_id = 1;
  if (has_autograph_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->autograph_item_id(), target);
  }
  
  // optional uint64 item_item_id = 2;
  if (has_item_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item_item_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgApplyAutograph::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 autograph_item_id = 1;
    if (has_autograph_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->autograph_item_id());
    }
    
    // optional uint64 item_item_id = 2;
    if (has_item_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_item_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgApplyAutograph::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgApplyAutograph* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgApplyAutograph*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgApplyAutograph::MergeFrom(const CMsgApplyAutograph& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_autograph_item_id()) {
      set_autograph_item_id(from.autograph_item_id());
    }
    if (from.has_item_item_id()) {
      set_item_item_id(from.item_item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgApplyAutograph::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgApplyAutograph::CopyFrom(const CMsgApplyAutograph& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgApplyAutograph::IsInitialized() const {
  
  return true;
}

void CMsgApplyAutograph::Swap(CMsgApplyAutograph* other) {
  if (other != this) {
    std::swap(autograph_item_id_, other->autograph_item_id_);
    std::swap(item_item_id_, other->item_item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgApplyAutograph::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgApplyAutograph_descriptor_;
  metadata.reflection = CMsgApplyAutograph_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::kEventTypeFieldNumber;
const int CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::kItemIdFieldNumber;
const int CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::kAdjustmentFieldNumber;
#endif  // !_MSC_VER

CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::InitAsDefaultInstance() {
}

CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment(const CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::SharedCtor() {
  _cached_size_ = 0;
  event_type_ = 0u;
  item_id_ = GOOGLE_ULONGLONG(0);
  adjustment_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::~CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment() {
  SharedDtor();
}

void CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment_descriptor_;
}

const CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment& CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment* CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::default_instance_ = NULL;

CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment* CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::New() const {
  return new CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment;
}

void CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_type_ = 0u;
    item_id_ = GOOGLE_ULONGLONG(0);
    adjustment_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_type_)));
          set_has_event_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }
      
      // optional uint64 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_adjustment;
        break;
      }
      
      // optional uint32 adjustment = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adjustment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adjustment_)));
          set_has_adjustment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 event_type = 1;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_type(), output);
  }
  
  // optional uint64 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item_id(), output);
  }
  
  // optional uint32 adjustment = 3;
  if (has_adjustment()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->adjustment(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 event_type = 1;
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_type(), target);
  }
  
  // optional uint64 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item_id(), target);
  }
  
  // optional uint32 adjustment = 3;
  if (has_adjustment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->adjustment(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 event_type = 1;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_type());
    }
    
    // optional uint64 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }
    
    // optional uint32 adjustment = 3;
    if (has_adjustment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adjustment());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::MergeFrom(const CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_adjustment()) {
      set_adjustment(from.adjustment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::CopyFrom(const CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::IsInitialized() const {
  
  return true;
}

void CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::Swap(CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment* other) {
  if (other != this) {
    std::swap(event_type_, other->event_type_);
    std::swap(item_id_, other->item_id_);
    std::swap(adjustment_, other->adjustment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment_descriptor_;
  metadata.reflection = CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgEconPlayerStrangeCountAdjustment::kAccountIdFieldNumber;
const int CMsgEconPlayerStrangeCountAdjustment::kStrangeCountAdjustmentsFieldNumber;
#endif  // !_MSC_VER

CMsgEconPlayerStrangeCountAdjustment::CMsgEconPlayerStrangeCountAdjustment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgEconPlayerStrangeCountAdjustment::InitAsDefaultInstance() {
}

CMsgEconPlayerStrangeCountAdjustment::CMsgEconPlayerStrangeCountAdjustment(const CMsgEconPlayerStrangeCountAdjustment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgEconPlayerStrangeCountAdjustment::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgEconPlayerStrangeCountAdjustment::~CMsgEconPlayerStrangeCountAdjustment() {
  SharedDtor();
}

void CMsgEconPlayerStrangeCountAdjustment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgEconPlayerStrangeCountAdjustment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgEconPlayerStrangeCountAdjustment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgEconPlayerStrangeCountAdjustment_descriptor_;
}

const CMsgEconPlayerStrangeCountAdjustment& CMsgEconPlayerStrangeCountAdjustment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgEconPlayerStrangeCountAdjustment* CMsgEconPlayerStrangeCountAdjustment::default_instance_ = NULL;

CMsgEconPlayerStrangeCountAdjustment* CMsgEconPlayerStrangeCountAdjustment::New() const {
  return new CMsgEconPlayerStrangeCountAdjustment;
}

void CMsgEconPlayerStrangeCountAdjustment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
  }
  strange_count_adjustments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgEconPlayerStrangeCountAdjustment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strange_count_adjustments;
        break;
      }
      
      // repeated .CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment strange_count_adjustments = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strange_count_adjustments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_strange_count_adjustments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strange_count_adjustments;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgEconPlayerStrangeCountAdjustment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }
  
  // repeated .CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment strange_count_adjustments = 2;
  for (int i = 0; i < this->strange_count_adjustments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->strange_count_adjustments(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgEconPlayerStrangeCountAdjustment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }
  
  // repeated .CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment strange_count_adjustments = 2;
  for (int i = 0; i < this->strange_count_adjustments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->strange_count_adjustments(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgEconPlayerStrangeCountAdjustment::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
  }
  // repeated .CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment strange_count_adjustments = 2;
  total_size += 1 * this->strange_count_adjustments_size();
  for (int i = 0; i < this->strange_count_adjustments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->strange_count_adjustments(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgEconPlayerStrangeCountAdjustment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgEconPlayerStrangeCountAdjustment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgEconPlayerStrangeCountAdjustment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgEconPlayerStrangeCountAdjustment::MergeFrom(const CMsgEconPlayerStrangeCountAdjustment& from) {
  GOOGLE_CHECK_NE(&from, this);
  strange_count_adjustments_.MergeFrom(from.strange_count_adjustments_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgEconPlayerStrangeCountAdjustment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgEconPlayerStrangeCountAdjustment::CopyFrom(const CMsgEconPlayerStrangeCountAdjustment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgEconPlayerStrangeCountAdjustment::IsInitialized() const {
  
  return true;
}

void CMsgEconPlayerStrangeCountAdjustment::Swap(CMsgEconPlayerStrangeCountAdjustment* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    strange_count_adjustments_.Swap(&other->strange_count_adjustments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgEconPlayerStrangeCountAdjustment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgEconPlayerStrangeCountAdjustment_descriptor_;
  metadata.reflection = CMsgEconPlayerStrangeCountAdjustment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgRequestItemPurgatory_FinalizePurchase::kItemIdsFieldNumber;
#endif  // !_MSC_VER

CMsgRequestItemPurgatory_FinalizePurchase::CMsgRequestItemPurgatory_FinalizePurchase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgRequestItemPurgatory_FinalizePurchase::InitAsDefaultInstance() {
}

CMsgRequestItemPurgatory_FinalizePurchase::CMsgRequestItemPurgatory_FinalizePurchase(const CMsgRequestItemPurgatory_FinalizePurchase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgRequestItemPurgatory_FinalizePurchase::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgRequestItemPurgatory_FinalizePurchase::~CMsgRequestItemPurgatory_FinalizePurchase() {
  SharedDtor();
}

void CMsgRequestItemPurgatory_FinalizePurchase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgRequestItemPurgatory_FinalizePurchase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRequestItemPurgatory_FinalizePurchase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgRequestItemPurgatory_FinalizePurchase_descriptor_;
}

const CMsgRequestItemPurgatory_FinalizePurchase& CMsgRequestItemPurgatory_FinalizePurchase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgRequestItemPurgatory_FinalizePurchase* CMsgRequestItemPurgatory_FinalizePurchase::default_instance_ = NULL;

CMsgRequestItemPurgatory_FinalizePurchase* CMsgRequestItemPurgatory_FinalizePurchase::New() const {
  return new CMsgRequestItemPurgatory_FinalizePurchase;
}

void CMsgRequestItemPurgatory_FinalizePurchase::Clear() {
  item_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgRequestItemPurgatory_FinalizePurchase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 item_ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_item_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_item_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_item_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgRequestItemPurgatory_FinalizePurchase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 item_ids = 1;
  for (int i = 0; i < this->item_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->item_ids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgRequestItemPurgatory_FinalizePurchase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 item_ids = 1;
  for (int i = 0; i < this->item_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->item_ids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgRequestItemPurgatory_FinalizePurchase::ByteSize() const {
  int total_size = 0;
  
  // repeated uint64 item_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->item_ids(i));
    }
    total_size += 1 * this->item_ids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRequestItemPurgatory_FinalizePurchase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgRequestItemPurgatory_FinalizePurchase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgRequestItemPurgatory_FinalizePurchase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgRequestItemPurgatory_FinalizePurchase::MergeFrom(const CMsgRequestItemPurgatory_FinalizePurchase& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_ids_.MergeFrom(from.item_ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgRequestItemPurgatory_FinalizePurchase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRequestItemPurgatory_FinalizePurchase::CopyFrom(const CMsgRequestItemPurgatory_FinalizePurchase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRequestItemPurgatory_FinalizePurchase::IsInitialized() const {
  
  return true;
}

void CMsgRequestItemPurgatory_FinalizePurchase::Swap(CMsgRequestItemPurgatory_FinalizePurchase* other) {
  if (other != this) {
    item_ids_.Swap(&other->item_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgRequestItemPurgatory_FinalizePurchase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgRequestItemPurgatory_FinalizePurchase_descriptor_;
  metadata.reflection = CMsgRequestItemPurgatory_FinalizePurchase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgRequestItemPurgatory_FinalizePurchaseResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgRequestItemPurgatory_FinalizePurchaseResponse::CMsgRequestItemPurgatory_FinalizePurchaseResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgRequestItemPurgatory_FinalizePurchaseResponse::InitAsDefaultInstance() {
}

CMsgRequestItemPurgatory_FinalizePurchaseResponse::CMsgRequestItemPurgatory_FinalizePurchaseResponse(const CMsgRequestItemPurgatory_FinalizePurchaseResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgRequestItemPurgatory_FinalizePurchaseResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgRequestItemPurgatory_FinalizePurchaseResponse::~CMsgRequestItemPurgatory_FinalizePurchaseResponse() {
  SharedDtor();
}

void CMsgRequestItemPurgatory_FinalizePurchaseResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgRequestItemPurgatory_FinalizePurchaseResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRequestItemPurgatory_FinalizePurchaseResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgRequestItemPurgatory_FinalizePurchaseResponse_descriptor_;
}

const CMsgRequestItemPurgatory_FinalizePurchaseResponse& CMsgRequestItemPurgatory_FinalizePurchaseResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgRequestItemPurgatory_FinalizePurchaseResponse* CMsgRequestItemPurgatory_FinalizePurchaseResponse::default_instance_ = NULL;

CMsgRequestItemPurgatory_FinalizePurchaseResponse* CMsgRequestItemPurgatory_FinalizePurchaseResponse::New() const {
  return new CMsgRequestItemPurgatory_FinalizePurchaseResponse;
}

void CMsgRequestItemPurgatory_FinalizePurchaseResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgRequestItemPurgatory_FinalizePurchaseResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgRequestItemPurgatory_FinalizePurchaseResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgRequestItemPurgatory_FinalizePurchaseResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgRequestItemPurgatory_FinalizePurchaseResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRequestItemPurgatory_FinalizePurchaseResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgRequestItemPurgatory_FinalizePurchaseResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgRequestItemPurgatory_FinalizePurchaseResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgRequestItemPurgatory_FinalizePurchaseResponse::MergeFrom(const CMsgRequestItemPurgatory_FinalizePurchaseResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgRequestItemPurgatory_FinalizePurchaseResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRequestItemPurgatory_FinalizePurchaseResponse::CopyFrom(const CMsgRequestItemPurgatory_FinalizePurchaseResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRequestItemPurgatory_FinalizePurchaseResponse::IsInitialized() const {
  
  return true;
}

void CMsgRequestItemPurgatory_FinalizePurchaseResponse::Swap(CMsgRequestItemPurgatory_FinalizePurchaseResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgRequestItemPurgatory_FinalizePurchaseResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgRequestItemPurgatory_FinalizePurchaseResponse_descriptor_;
  metadata.reflection = CMsgRequestItemPurgatory_FinalizePurchaseResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgRequestItemPurgatory_RefundPurchase::kItemIdFieldNumber;
#endif  // !_MSC_VER

CMsgRequestItemPurgatory_RefundPurchase::CMsgRequestItemPurgatory_RefundPurchase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgRequestItemPurgatory_RefundPurchase::InitAsDefaultInstance() {
}

CMsgRequestItemPurgatory_RefundPurchase::CMsgRequestItemPurgatory_RefundPurchase(const CMsgRequestItemPurgatory_RefundPurchase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgRequestItemPurgatory_RefundPurchase::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgRequestItemPurgatory_RefundPurchase::~CMsgRequestItemPurgatory_RefundPurchase() {
  SharedDtor();
}

void CMsgRequestItemPurgatory_RefundPurchase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgRequestItemPurgatory_RefundPurchase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRequestItemPurgatory_RefundPurchase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgRequestItemPurgatory_RefundPurchase_descriptor_;
}

const CMsgRequestItemPurgatory_RefundPurchase& CMsgRequestItemPurgatory_RefundPurchase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgRequestItemPurgatory_RefundPurchase* CMsgRequestItemPurgatory_RefundPurchase::default_instance_ = NULL;

CMsgRequestItemPurgatory_RefundPurchase* CMsgRequestItemPurgatory_RefundPurchase::New() const {
  return new CMsgRequestItemPurgatory_RefundPurchase;
}

void CMsgRequestItemPurgatory_RefundPurchase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgRequestItemPurgatory_RefundPurchase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgRequestItemPurgatory_RefundPurchase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgRequestItemPurgatory_RefundPurchase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgRequestItemPurgatory_RefundPurchase::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRequestItemPurgatory_RefundPurchase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgRequestItemPurgatory_RefundPurchase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgRequestItemPurgatory_RefundPurchase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgRequestItemPurgatory_RefundPurchase::MergeFrom(const CMsgRequestItemPurgatory_RefundPurchase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgRequestItemPurgatory_RefundPurchase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRequestItemPurgatory_RefundPurchase::CopyFrom(const CMsgRequestItemPurgatory_RefundPurchase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRequestItemPurgatory_RefundPurchase::IsInitialized() const {
  
  return true;
}

void CMsgRequestItemPurgatory_RefundPurchase::Swap(CMsgRequestItemPurgatory_RefundPurchase* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgRequestItemPurgatory_RefundPurchase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgRequestItemPurgatory_RefundPurchase_descriptor_;
  metadata.reflection = CMsgRequestItemPurgatory_RefundPurchase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgRequestItemPurgatory_RefundPurchaseResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgRequestItemPurgatory_RefundPurchaseResponse::CMsgRequestItemPurgatory_RefundPurchaseResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgRequestItemPurgatory_RefundPurchaseResponse::InitAsDefaultInstance() {
}

CMsgRequestItemPurgatory_RefundPurchaseResponse::CMsgRequestItemPurgatory_RefundPurchaseResponse(const CMsgRequestItemPurgatory_RefundPurchaseResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgRequestItemPurgatory_RefundPurchaseResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgRequestItemPurgatory_RefundPurchaseResponse::~CMsgRequestItemPurgatory_RefundPurchaseResponse() {
  SharedDtor();
}

void CMsgRequestItemPurgatory_RefundPurchaseResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgRequestItemPurgatory_RefundPurchaseResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRequestItemPurgatory_RefundPurchaseResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgRequestItemPurgatory_RefundPurchaseResponse_descriptor_;
}

const CMsgRequestItemPurgatory_RefundPurchaseResponse& CMsgRequestItemPurgatory_RefundPurchaseResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgRequestItemPurgatory_RefundPurchaseResponse* CMsgRequestItemPurgatory_RefundPurchaseResponse::default_instance_ = NULL;

CMsgRequestItemPurgatory_RefundPurchaseResponse* CMsgRequestItemPurgatory_RefundPurchaseResponse::New() const {
  return new CMsgRequestItemPurgatory_RefundPurchaseResponse;
}

void CMsgRequestItemPurgatory_RefundPurchaseResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgRequestItemPurgatory_RefundPurchaseResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgRequestItemPurgatory_RefundPurchaseResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgRequestItemPurgatory_RefundPurchaseResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgRequestItemPurgatory_RefundPurchaseResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRequestItemPurgatory_RefundPurchaseResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgRequestItemPurgatory_RefundPurchaseResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgRequestItemPurgatory_RefundPurchaseResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgRequestItemPurgatory_RefundPurchaseResponse::MergeFrom(const CMsgRequestItemPurgatory_RefundPurchaseResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgRequestItemPurgatory_RefundPurchaseResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRequestItemPurgatory_RefundPurchaseResponse::CopyFrom(const CMsgRequestItemPurgatory_RefundPurchaseResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRequestItemPurgatory_RefundPurchaseResponse::IsInitialized() const {
  
  return true;
}

void CMsgRequestItemPurgatory_RefundPurchaseResponse::Swap(CMsgRequestItemPurgatory_RefundPurchaseResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgRequestItemPurgatory_RefundPurchaseResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgRequestItemPurgatory_RefundPurchaseResponse_descriptor_;
  metadata.reflection = CMsgRequestItemPurgatory_RefundPurchaseResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgCraftingResponse::kItemIdsFieldNumber;
#endif  // !_MSC_VER

CMsgCraftingResponse::CMsgCraftingResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgCraftingResponse::InitAsDefaultInstance() {
}

CMsgCraftingResponse::CMsgCraftingResponse(const CMsgCraftingResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgCraftingResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgCraftingResponse::~CMsgCraftingResponse() {
  SharedDtor();
}

void CMsgCraftingResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgCraftingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgCraftingResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgCraftingResponse_descriptor_;
}

const CMsgCraftingResponse& CMsgCraftingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgCraftingResponse* CMsgCraftingResponse::default_instance_ = NULL;

CMsgCraftingResponse* CMsgCraftingResponse::New() const {
  return new CMsgCraftingResponse;
}

void CMsgCraftingResponse::Clear() {
  item_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgCraftingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 item_ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_item_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_item_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_item_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgCraftingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 item_ids = 1;
  for (int i = 0; i < this->item_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->item_ids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgCraftingResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 item_ids = 1;
  for (int i = 0; i < this->item_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->item_ids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgCraftingResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated uint64 item_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->item_ids(i));
    }
    total_size += 1 * this->item_ids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCraftingResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgCraftingResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgCraftingResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgCraftingResponse::MergeFrom(const CMsgCraftingResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_ids_.MergeFrom(from.item_ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgCraftingResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCraftingResponse::CopyFrom(const CMsgCraftingResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCraftingResponse::IsInitialized() const {
  
  return true;
}

void CMsgCraftingResponse::Swap(CMsgCraftingResponse* other) {
  if (other != this) {
    item_ids_.Swap(&other->item_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgCraftingResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgCraftingResponse_descriptor_;
  metadata.reflection = CMsgCraftingResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCRequestStoreSalesData::kVersionFieldNumber;
const int CMsgGCRequestStoreSalesData::kCurrencyFieldNumber;
#endif  // !_MSC_VER

CMsgGCRequestStoreSalesData::CMsgGCRequestStoreSalesData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCRequestStoreSalesData::InitAsDefaultInstance() {
}

CMsgGCRequestStoreSalesData::CMsgGCRequestStoreSalesData(const CMsgGCRequestStoreSalesData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCRequestStoreSalesData::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  currency_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCRequestStoreSalesData::~CMsgGCRequestStoreSalesData() {
  SharedDtor();
}

void CMsgGCRequestStoreSalesData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCRequestStoreSalesData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCRequestStoreSalesData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCRequestStoreSalesData_descriptor_;
}

const CMsgGCRequestStoreSalesData& CMsgGCRequestStoreSalesData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCRequestStoreSalesData* CMsgGCRequestStoreSalesData::default_instance_ = NULL;

CMsgGCRequestStoreSalesData* CMsgGCRequestStoreSalesData::New() const {
  return new CMsgGCRequestStoreSalesData;
}

void CMsgGCRequestStoreSalesData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0u;
    currency_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCRequestStoreSalesData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_currency;
        break;
      }
      
      // optional uint32 currency = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currency_)));
          set_has_currency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCRequestStoreSalesData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }
  
  // optional uint32 currency = 2;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->currency(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCRequestStoreSalesData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }
  
  // optional uint32 currency = 2;
  if (has_currency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->currency(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCRequestStoreSalesData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }
    
    // optional uint32 currency = 2;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currency());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCRequestStoreSalesData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCRequestStoreSalesData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCRequestStoreSalesData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCRequestStoreSalesData::MergeFrom(const CMsgGCRequestStoreSalesData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_currency()) {
      set_currency(from.currency());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCRequestStoreSalesData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCRequestStoreSalesData::CopyFrom(const CMsgGCRequestStoreSalesData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCRequestStoreSalesData::IsInitialized() const {
  
  return true;
}

void CMsgGCRequestStoreSalesData::Swap(CMsgGCRequestStoreSalesData* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(currency_, other->currency_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCRequestStoreSalesData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCRequestStoreSalesData_descriptor_;
  metadata.reflection = CMsgGCRequestStoreSalesData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCRequestStoreSalesDataResponse_Price::kItemDefFieldNumber;
const int CMsgGCRequestStoreSalesDataResponse_Price::kPriceFieldNumber;
#endif  // !_MSC_VER

CMsgGCRequestStoreSalesDataResponse_Price::CMsgGCRequestStoreSalesDataResponse_Price()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCRequestStoreSalesDataResponse_Price::InitAsDefaultInstance() {
}

CMsgGCRequestStoreSalesDataResponse_Price::CMsgGCRequestStoreSalesDataResponse_Price(const CMsgGCRequestStoreSalesDataResponse_Price& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCRequestStoreSalesDataResponse_Price::SharedCtor() {
  _cached_size_ = 0;
  item_def_ = 0u;
  price_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCRequestStoreSalesDataResponse_Price::~CMsgGCRequestStoreSalesDataResponse_Price() {
  SharedDtor();
}

void CMsgGCRequestStoreSalesDataResponse_Price::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCRequestStoreSalesDataResponse_Price::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCRequestStoreSalesDataResponse_Price::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCRequestStoreSalesDataResponse_Price_descriptor_;
}

const CMsgGCRequestStoreSalesDataResponse_Price& CMsgGCRequestStoreSalesDataResponse_Price::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCRequestStoreSalesDataResponse_Price* CMsgGCRequestStoreSalesDataResponse_Price::default_instance_ = NULL;

CMsgGCRequestStoreSalesDataResponse_Price* CMsgGCRequestStoreSalesDataResponse_Price::New() const {
  return new CMsgGCRequestStoreSalesDataResponse_Price;
}

void CMsgGCRequestStoreSalesDataResponse_Price::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_def_ = 0u;
    price_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCRequestStoreSalesDataResponse_Price::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_def = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_def_)));
          set_has_item_def();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_price;
        break;
      }
      
      // optional uint32 price = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCRequestStoreSalesDataResponse_Price::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 item_def = 1;
  if (has_item_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_def(), output);
  }
  
  // optional uint32 price = 2;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->price(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCRequestStoreSalesDataResponse_Price::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 item_def = 1;
  if (has_item_def()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_def(), target);
  }
  
  // optional uint32 price = 2;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->price(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCRequestStoreSalesDataResponse_Price::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 item_def = 1;
    if (has_item_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_def());
    }
    
    // optional uint32 price = 2;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCRequestStoreSalesDataResponse_Price::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCRequestStoreSalesDataResponse_Price* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCRequestStoreSalesDataResponse_Price*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCRequestStoreSalesDataResponse_Price::MergeFrom(const CMsgGCRequestStoreSalesDataResponse_Price& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_def()) {
      set_item_def(from.item_def());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCRequestStoreSalesDataResponse_Price::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCRequestStoreSalesDataResponse_Price::CopyFrom(const CMsgGCRequestStoreSalesDataResponse_Price& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCRequestStoreSalesDataResponse_Price::IsInitialized() const {
  
  return true;
}

void CMsgGCRequestStoreSalesDataResponse_Price::Swap(CMsgGCRequestStoreSalesDataResponse_Price* other) {
  if (other != this) {
    std::swap(item_def_, other->item_def_);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCRequestStoreSalesDataResponse_Price::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCRequestStoreSalesDataResponse_Price_descriptor_;
  metadata.reflection = CMsgGCRequestStoreSalesDataResponse_Price_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgGCRequestStoreSalesDataResponse::kSalePriceFieldNumber;
const int CMsgGCRequestStoreSalesDataResponse::kVersionFieldNumber;
const int CMsgGCRequestStoreSalesDataResponse::kExpirationTimeFieldNumber;
#endif  // !_MSC_VER

CMsgGCRequestStoreSalesDataResponse::CMsgGCRequestStoreSalesDataResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCRequestStoreSalesDataResponse::InitAsDefaultInstance() {
}

CMsgGCRequestStoreSalesDataResponse::CMsgGCRequestStoreSalesDataResponse(const CMsgGCRequestStoreSalesDataResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCRequestStoreSalesDataResponse::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  expiration_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCRequestStoreSalesDataResponse::~CMsgGCRequestStoreSalesDataResponse() {
  SharedDtor();
}

void CMsgGCRequestStoreSalesDataResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCRequestStoreSalesDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCRequestStoreSalesDataResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCRequestStoreSalesDataResponse_descriptor_;
}

const CMsgGCRequestStoreSalesDataResponse& CMsgGCRequestStoreSalesDataResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCRequestStoreSalesDataResponse* CMsgGCRequestStoreSalesDataResponse::default_instance_ = NULL;

CMsgGCRequestStoreSalesDataResponse* CMsgGCRequestStoreSalesDataResponse::New() const {
  return new CMsgGCRequestStoreSalesDataResponse;
}

void CMsgGCRequestStoreSalesDataResponse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    version_ = 0u;
    expiration_time_ = 0u;
  }
  sale_price_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCRequestStoreSalesDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgGCRequestStoreSalesDataResponse.Price sale_price = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sale_price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sale_price()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_sale_price;
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }
      
      // optional uint32 version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_expiration_time;
        break;
      }
      
      // optional uint32 expiration_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expiration_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expiration_time_)));
          set_has_expiration_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCRequestStoreSalesDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgGCRequestStoreSalesDataResponse.Price sale_price = 1;
  for (int i = 0; i < this->sale_price_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sale_price(i), output);
  }
  
  // optional uint32 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }
  
  // optional uint32 expiration_time = 3;
  if (has_expiration_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->expiration_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCRequestStoreSalesDataResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgGCRequestStoreSalesDataResponse.Price sale_price = 1;
  for (int i = 0; i < this->sale_price_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sale_price(i), target);
  }
  
  // optional uint32 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version(), target);
  }
  
  // optional uint32 expiration_time = 3;
  if (has_expiration_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->expiration_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCRequestStoreSalesDataResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }
    
    // optional uint32 expiration_time = 3;
    if (has_expiration_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expiration_time());
    }
    
  }
  // repeated .CMsgGCRequestStoreSalesDataResponse.Price sale_price = 1;
  total_size += 1 * this->sale_price_size();
  for (int i = 0; i < this->sale_price_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sale_price(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCRequestStoreSalesDataResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCRequestStoreSalesDataResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCRequestStoreSalesDataResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCRequestStoreSalesDataResponse::MergeFrom(const CMsgGCRequestStoreSalesDataResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  sale_price_.MergeFrom(from.sale_price_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_expiration_time()) {
      set_expiration_time(from.expiration_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCRequestStoreSalesDataResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCRequestStoreSalesDataResponse::CopyFrom(const CMsgGCRequestStoreSalesDataResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCRequestStoreSalesDataResponse::IsInitialized() const {
  
  return true;
}

void CMsgGCRequestStoreSalesDataResponse::Swap(CMsgGCRequestStoreSalesDataResponse* other) {
  if (other != this) {
    sale_price_.Swap(&other->sale_price_);
    std::swap(version_, other->version_);
    std::swap(expiration_time_, other->expiration_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCRequestStoreSalesDataResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCRequestStoreSalesDataResponse_descriptor_;
  metadata.reflection = CMsgGCRequestStoreSalesDataResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCRequestStoreSalesDataUpToDateResponse::kVersionFieldNumber;
const int CMsgGCRequestStoreSalesDataUpToDateResponse::kExpirationTimeFieldNumber;
#endif  // !_MSC_VER

CMsgGCRequestStoreSalesDataUpToDateResponse::CMsgGCRequestStoreSalesDataUpToDateResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCRequestStoreSalesDataUpToDateResponse::InitAsDefaultInstance() {
}

CMsgGCRequestStoreSalesDataUpToDateResponse::CMsgGCRequestStoreSalesDataUpToDateResponse(const CMsgGCRequestStoreSalesDataUpToDateResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCRequestStoreSalesDataUpToDateResponse::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  expiration_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCRequestStoreSalesDataUpToDateResponse::~CMsgGCRequestStoreSalesDataUpToDateResponse() {
  SharedDtor();
}

void CMsgGCRequestStoreSalesDataUpToDateResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCRequestStoreSalesDataUpToDateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCRequestStoreSalesDataUpToDateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCRequestStoreSalesDataUpToDateResponse_descriptor_;
}

const CMsgGCRequestStoreSalesDataUpToDateResponse& CMsgGCRequestStoreSalesDataUpToDateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCRequestStoreSalesDataUpToDateResponse* CMsgGCRequestStoreSalesDataUpToDateResponse::default_instance_ = NULL;

CMsgGCRequestStoreSalesDataUpToDateResponse* CMsgGCRequestStoreSalesDataUpToDateResponse::New() const {
  return new CMsgGCRequestStoreSalesDataUpToDateResponse;
}

void CMsgGCRequestStoreSalesDataUpToDateResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0u;
    expiration_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCRequestStoreSalesDataUpToDateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_expiration_time;
        break;
      }
      
      // optional uint32 expiration_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expiration_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expiration_time_)));
          set_has_expiration_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCRequestStoreSalesDataUpToDateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }
  
  // optional uint32 expiration_time = 2;
  if (has_expiration_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->expiration_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCRequestStoreSalesDataUpToDateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }
  
  // optional uint32 expiration_time = 2;
  if (has_expiration_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->expiration_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCRequestStoreSalesDataUpToDateResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }
    
    // optional uint32 expiration_time = 2;
    if (has_expiration_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expiration_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCRequestStoreSalesDataUpToDateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCRequestStoreSalesDataUpToDateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCRequestStoreSalesDataUpToDateResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCRequestStoreSalesDataUpToDateResponse::MergeFrom(const CMsgGCRequestStoreSalesDataUpToDateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_expiration_time()) {
      set_expiration_time(from.expiration_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCRequestStoreSalesDataUpToDateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCRequestStoreSalesDataUpToDateResponse::CopyFrom(const CMsgGCRequestStoreSalesDataUpToDateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCRequestStoreSalesDataUpToDateResponse::IsInitialized() const {
  
  return true;
}

void CMsgGCRequestStoreSalesDataUpToDateResponse::Swap(CMsgGCRequestStoreSalesDataUpToDateResponse* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(expiration_time_, other->expiration_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCRequestStoreSalesDataUpToDateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCRequestStoreSalesDataUpToDateResponse_descriptor_;
  metadata.reflection = CMsgGCRequestStoreSalesDataUpToDateResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgGCToGCPingRequest::CMsgGCToGCPingRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCToGCPingRequest::InitAsDefaultInstance() {
}

CMsgGCToGCPingRequest::CMsgGCToGCPingRequest(const CMsgGCToGCPingRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCToGCPingRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToGCPingRequest::~CMsgGCToGCPingRequest() {
  SharedDtor();
}

void CMsgGCToGCPingRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToGCPingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCPingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToGCPingRequest_descriptor_;
}

const CMsgGCToGCPingRequest& CMsgGCToGCPingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCToGCPingRequest* CMsgGCToGCPingRequest::default_instance_ = NULL;

CMsgGCToGCPingRequest* CMsgGCToGCPingRequest::New() const {
  return new CMsgGCToGCPingRequest;
}

void CMsgGCToGCPingRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCToGCPingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgGCToGCPingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCToGCPingRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCToGCPingRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCPingRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCToGCPingRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCToGCPingRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToGCPingRequest::MergeFrom(const CMsgGCToGCPingRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCToGCPingRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCPingRequest::CopyFrom(const CMsgGCToGCPingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCPingRequest::IsInitialized() const {
  
  return true;
}

void CMsgGCToGCPingRequest::Swap(CMsgGCToGCPingRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCToGCPingRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToGCPingRequest_descriptor_;
  metadata.reflection = CMsgGCToGCPingRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgGCToGCPingResponse::CMsgGCToGCPingResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCToGCPingResponse::InitAsDefaultInstance() {
}

CMsgGCToGCPingResponse::CMsgGCToGCPingResponse(const CMsgGCToGCPingResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCToGCPingResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToGCPingResponse::~CMsgGCToGCPingResponse() {
  SharedDtor();
}

void CMsgGCToGCPingResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToGCPingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCPingResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToGCPingResponse_descriptor_;
}

const CMsgGCToGCPingResponse& CMsgGCToGCPingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCToGCPingResponse* CMsgGCToGCPingResponse::default_instance_ = NULL;

CMsgGCToGCPingResponse* CMsgGCToGCPingResponse::New() const {
  return new CMsgGCToGCPingResponse;
}

void CMsgGCToGCPingResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCToGCPingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgGCToGCPingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCToGCPingResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCToGCPingResponse::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCPingResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCToGCPingResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCToGCPingResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToGCPingResponse::MergeFrom(const CMsgGCToGCPingResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCToGCPingResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCPingResponse::CopyFrom(const CMsgGCToGCPingResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCPingResponse::IsInitialized() const {
  
  return true;
}

void CMsgGCToGCPingResponse::Swap(CMsgGCToGCPingResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCToGCPingResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToGCPingResponse_descriptor_;
  metadata.reflection = CMsgGCToGCPingResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCToGCGetUserSessionServer::kAccountIdFieldNumber;
#endif  // !_MSC_VER

CMsgGCToGCGetUserSessionServer::CMsgGCToGCGetUserSessionServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCToGCGetUserSessionServer::InitAsDefaultInstance() {
}

CMsgGCToGCGetUserSessionServer::CMsgGCToGCGetUserSessionServer(const CMsgGCToGCGetUserSessionServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCToGCGetUserSessionServer::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToGCGetUserSessionServer::~CMsgGCToGCGetUserSessionServer() {
  SharedDtor();
}

void CMsgGCToGCGetUserSessionServer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToGCGetUserSessionServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCGetUserSessionServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToGCGetUserSessionServer_descriptor_;
}

const CMsgGCToGCGetUserSessionServer& CMsgGCToGCGetUserSessionServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCToGCGetUserSessionServer* CMsgGCToGCGetUserSessionServer::default_instance_ = NULL;

CMsgGCToGCGetUserSessionServer* CMsgGCToGCGetUserSessionServer::New() const {
  return new CMsgGCToGCGetUserSessionServer;
}

void CMsgGCToGCGetUserSessionServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCToGCGetUserSessionServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCToGCGetUserSessionServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCToGCGetUserSessionServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCToGCGetUserSessionServer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCGetUserSessionServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCToGCGetUserSessionServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCToGCGetUserSessionServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToGCGetUserSessionServer::MergeFrom(const CMsgGCToGCGetUserSessionServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCToGCGetUserSessionServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCGetUserSessionServer::CopyFrom(const CMsgGCToGCGetUserSessionServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCGetUserSessionServer::IsInitialized() const {
  
  return true;
}

void CMsgGCToGCGetUserSessionServer::Swap(CMsgGCToGCGetUserSessionServer* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCToGCGetUserSessionServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToGCGetUserSessionServer_descriptor_;
  metadata.reflection = CMsgGCToGCGetUserSessionServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCToGCGetUserSessionServerResponse::kServerSteamIdFieldNumber;
#endif  // !_MSC_VER

CMsgGCToGCGetUserSessionServerResponse::CMsgGCToGCGetUserSessionServerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCToGCGetUserSessionServerResponse::InitAsDefaultInstance() {
}

CMsgGCToGCGetUserSessionServerResponse::CMsgGCToGCGetUserSessionServerResponse(const CMsgGCToGCGetUserSessionServerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCToGCGetUserSessionServerResponse::SharedCtor() {
  _cached_size_ = 0;
  server_steam_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToGCGetUserSessionServerResponse::~CMsgGCToGCGetUserSessionServerResponse() {
  SharedDtor();
}

void CMsgGCToGCGetUserSessionServerResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToGCGetUserSessionServerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCGetUserSessionServerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToGCGetUserSessionServerResponse_descriptor_;
}

const CMsgGCToGCGetUserSessionServerResponse& CMsgGCToGCGetUserSessionServerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCToGCGetUserSessionServerResponse* CMsgGCToGCGetUserSessionServerResponse::default_instance_ = NULL;

CMsgGCToGCGetUserSessionServerResponse* CMsgGCToGCGetUserSessionServerResponse::New() const {
  return new CMsgGCToGCGetUserSessionServerResponse;
}

void CMsgGCToGCGetUserSessionServerResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_steam_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCToGCGetUserSessionServerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 server_steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_steam_id_)));
          set_has_server_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCToGCGetUserSessionServerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 server_steam_id = 1;
  if (has_server_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->server_steam_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCToGCGetUserSessionServerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 server_steam_id = 1;
  if (has_server_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->server_steam_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCToGCGetUserSessionServerResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 server_steam_id = 1;
    if (has_server_steam_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCGetUserSessionServerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCToGCGetUserSessionServerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCToGCGetUserSessionServerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToGCGetUserSessionServerResponse::MergeFrom(const CMsgGCToGCGetUserSessionServerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_steam_id()) {
      set_server_steam_id(from.server_steam_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCToGCGetUserSessionServerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCGetUserSessionServerResponse::CopyFrom(const CMsgGCToGCGetUserSessionServerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCGetUserSessionServerResponse::IsInitialized() const {
  
  return true;
}

void CMsgGCToGCGetUserSessionServerResponse::Swap(CMsgGCToGCGetUserSessionServerResponse* other) {
  if (other != this) {
    std::swap(server_steam_id_, other->server_steam_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCToGCGetUserSessionServerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToGCGetUserSessionServerResponse_descriptor_;
  metadata.reflection = CMsgGCToGCGetUserSessionServerResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCToGCGetUserServerMembers::kAccountIdFieldNumber;
const int CMsgGCToGCGetUserServerMembers::kMaxSpectatorsFieldNumber;
#endif  // !_MSC_VER

CMsgGCToGCGetUserServerMembers::CMsgGCToGCGetUserServerMembers()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCToGCGetUserServerMembers::InitAsDefaultInstance() {
}

CMsgGCToGCGetUserServerMembers::CMsgGCToGCGetUserServerMembers(const CMsgGCToGCGetUserServerMembers& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCToGCGetUserServerMembers::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  max_spectators_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToGCGetUserServerMembers::~CMsgGCToGCGetUserServerMembers() {
  SharedDtor();
}

void CMsgGCToGCGetUserServerMembers::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToGCGetUserServerMembers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCGetUserServerMembers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToGCGetUserServerMembers_descriptor_;
}

const CMsgGCToGCGetUserServerMembers& CMsgGCToGCGetUserServerMembers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCToGCGetUserServerMembers* CMsgGCToGCGetUserServerMembers::default_instance_ = NULL;

CMsgGCToGCGetUserServerMembers* CMsgGCToGCGetUserServerMembers::New() const {
  return new CMsgGCToGCGetUserServerMembers;
}

void CMsgGCToGCGetUserServerMembers::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    max_spectators_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCToGCGetUserServerMembers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_max_spectators;
        break;
      }
      
      // optional uint32 max_spectators = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_spectators:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_spectators_)));
          set_has_max_spectators();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCToGCGetUserServerMembers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }
  
  // optional uint32 max_spectators = 2;
  if (has_max_spectators()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_spectators(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCToGCGetUserServerMembers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }
  
  // optional uint32 max_spectators = 2;
  if (has_max_spectators()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->max_spectators(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCToGCGetUserServerMembers::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
    // optional uint32 max_spectators = 2;
    if (has_max_spectators()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_spectators());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCGetUserServerMembers::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCToGCGetUserServerMembers* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCToGCGetUserServerMembers*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToGCGetUserServerMembers::MergeFrom(const CMsgGCToGCGetUserServerMembers& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_max_spectators()) {
      set_max_spectators(from.max_spectators());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCToGCGetUserServerMembers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCGetUserServerMembers::CopyFrom(const CMsgGCToGCGetUserServerMembers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCGetUserServerMembers::IsInitialized() const {
  
  return true;
}

void CMsgGCToGCGetUserServerMembers::Swap(CMsgGCToGCGetUserServerMembers* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(max_spectators_, other->max_spectators_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCToGCGetUserServerMembers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToGCGetUserServerMembers_descriptor_;
  metadata.reflection = CMsgGCToGCGetUserServerMembers_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCToGCGetUserServerMembersResponse::kMemberAccountIdFieldNumber;
#endif  // !_MSC_VER

CMsgGCToGCGetUserServerMembersResponse::CMsgGCToGCGetUserServerMembersResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCToGCGetUserServerMembersResponse::InitAsDefaultInstance() {
}

CMsgGCToGCGetUserServerMembersResponse::CMsgGCToGCGetUserServerMembersResponse(const CMsgGCToGCGetUserServerMembersResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCToGCGetUserServerMembersResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToGCGetUserServerMembersResponse::~CMsgGCToGCGetUserServerMembersResponse() {
  SharedDtor();
}

void CMsgGCToGCGetUserServerMembersResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToGCGetUserServerMembersResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCGetUserServerMembersResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToGCGetUserServerMembersResponse_descriptor_;
}

const CMsgGCToGCGetUserServerMembersResponse& CMsgGCToGCGetUserServerMembersResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCToGCGetUserServerMembersResponse* CMsgGCToGCGetUserServerMembersResponse::default_instance_ = NULL;

CMsgGCToGCGetUserServerMembersResponse* CMsgGCToGCGetUserServerMembersResponse::New() const {
  return new CMsgGCToGCGetUserServerMembersResponse;
}

void CMsgGCToGCGetUserServerMembersResponse::Clear() {
  member_account_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCToGCGetUserServerMembersResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 member_account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_member_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_member_account_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_member_account_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_member_account_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCToGCGetUserServerMembersResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 member_account_id = 1;
  for (int i = 0; i < this->member_account_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->member_account_id(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCToGCGetUserServerMembersResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 member_account_id = 1;
  for (int i = 0; i < this->member_account_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->member_account_id(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCToGCGetUserServerMembersResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 member_account_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->member_account_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->member_account_id(i));
    }
    total_size += 1 * this->member_account_id_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCGetUserServerMembersResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCToGCGetUserServerMembersResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCToGCGetUserServerMembersResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToGCGetUserServerMembersResponse::MergeFrom(const CMsgGCToGCGetUserServerMembersResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_account_id_.MergeFrom(from.member_account_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCToGCGetUserServerMembersResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCGetUserServerMembersResponse::CopyFrom(const CMsgGCToGCGetUserServerMembersResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCGetUserServerMembersResponse::IsInitialized() const {
  
  return true;
}

void CMsgGCToGCGetUserServerMembersResponse::Swap(CMsgGCToGCGetUserServerMembersResponse* other) {
  if (other != this) {
    member_account_id_.Swap(&other->member_account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCToGCGetUserServerMembersResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToGCGetUserServerMembersResponse_descriptor_;
  metadata.reflection = CMsgGCToGCGetUserServerMembersResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgLookupMultipleAccountNames::kAccountidsFieldNumber;
#endif  // !_MSC_VER

CMsgLookupMultipleAccountNames::CMsgLookupMultipleAccountNames()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgLookupMultipleAccountNames::InitAsDefaultInstance() {
}

CMsgLookupMultipleAccountNames::CMsgLookupMultipleAccountNames(const CMsgLookupMultipleAccountNames& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgLookupMultipleAccountNames::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgLookupMultipleAccountNames::~CMsgLookupMultipleAccountNames() {
  SharedDtor();
}

void CMsgLookupMultipleAccountNames::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgLookupMultipleAccountNames::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLookupMultipleAccountNames::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLookupMultipleAccountNames_descriptor_;
}

const CMsgLookupMultipleAccountNames& CMsgLookupMultipleAccountNames::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgLookupMultipleAccountNames* CMsgLookupMultipleAccountNames::default_instance_ = NULL;

CMsgLookupMultipleAccountNames* CMsgLookupMultipleAccountNames::New() const {
  return new CMsgLookupMultipleAccountNames;
}

void CMsgLookupMultipleAccountNames::Clear() {
  accountids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgLookupMultipleAccountNames::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 accountids = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_accountids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10, input, this->mutable_accountids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgLookupMultipleAccountNames::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 accountids = 1 [packed = true];
  if (this->accountids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_accountids_cached_byte_size_);
  }
  for (int i = 0; i < this->accountids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->accountids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgLookupMultipleAccountNames::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 accountids = 1 [packed = true];
  if (this->accountids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _accountids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->accountids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->accountids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgLookupMultipleAccountNames::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 accountids = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->accountids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->accountids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _accountids_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLookupMultipleAccountNames::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgLookupMultipleAccountNames* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgLookupMultipleAccountNames*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgLookupMultipleAccountNames::MergeFrom(const CMsgLookupMultipleAccountNames& from) {
  GOOGLE_CHECK_NE(&from, this);
  accountids_.MergeFrom(from.accountids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgLookupMultipleAccountNames::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLookupMultipleAccountNames::CopyFrom(const CMsgLookupMultipleAccountNames& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLookupMultipleAccountNames::IsInitialized() const {
  
  return true;
}

void CMsgLookupMultipleAccountNames::Swap(CMsgLookupMultipleAccountNames* other) {
  if (other != this) {
    accountids_.Swap(&other->accountids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgLookupMultipleAccountNames::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgLookupMultipleAccountNames_descriptor_;
  metadata.reflection = CMsgLookupMultipleAccountNames_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgLookupMultipleAccountNamesResponse_Account::kAccountidFieldNumber;
const int CMsgLookupMultipleAccountNamesResponse_Account::kPersonaFieldNumber;
#endif  // !_MSC_VER

CMsgLookupMultipleAccountNamesResponse_Account::CMsgLookupMultipleAccountNamesResponse_Account()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgLookupMultipleAccountNamesResponse_Account::InitAsDefaultInstance() {
}

CMsgLookupMultipleAccountNamesResponse_Account::CMsgLookupMultipleAccountNamesResponse_Account(const CMsgLookupMultipleAccountNamesResponse_Account& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgLookupMultipleAccountNamesResponse_Account::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  persona_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgLookupMultipleAccountNamesResponse_Account::~CMsgLookupMultipleAccountNamesResponse_Account() {
  SharedDtor();
}

void CMsgLookupMultipleAccountNamesResponse_Account::SharedDtor() {
  if (persona_ != &::google::protobuf::internal::kEmptyString) {
    delete persona_;
  }
  if (this != default_instance_) {
  }
}

void CMsgLookupMultipleAccountNamesResponse_Account::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLookupMultipleAccountNamesResponse_Account::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLookupMultipleAccountNamesResponse_Account_descriptor_;
}

const CMsgLookupMultipleAccountNamesResponse_Account& CMsgLookupMultipleAccountNamesResponse_Account::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgLookupMultipleAccountNamesResponse_Account* CMsgLookupMultipleAccountNamesResponse_Account::default_instance_ = NULL;

CMsgLookupMultipleAccountNamesResponse_Account* CMsgLookupMultipleAccountNamesResponse_Account::New() const {
  return new CMsgLookupMultipleAccountNamesResponse_Account;
}

void CMsgLookupMultipleAccountNamesResponse_Account::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
    if (has_persona()) {
      if (persona_ != &::google::protobuf::internal::kEmptyString) {
        persona_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgLookupMultipleAccountNamesResponse_Account::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_persona;
        break;
      }
      
      // optional string persona = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_persona:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->persona().data(), this->persona().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgLookupMultipleAccountNamesResponse_Account::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }
  
  // optional string persona = 2;
  if (has_persona()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->persona().data(), this->persona().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->persona(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgLookupMultipleAccountNamesResponse_Account::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }
  
  // optional string persona = 2;
  if (has_persona()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->persona().data(), this->persona().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->persona(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgLookupMultipleAccountNamesResponse_Account::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }
    
    // optional string persona = 2;
    if (has_persona()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLookupMultipleAccountNamesResponse_Account::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgLookupMultipleAccountNamesResponse_Account* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgLookupMultipleAccountNamesResponse_Account*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgLookupMultipleAccountNamesResponse_Account::MergeFrom(const CMsgLookupMultipleAccountNamesResponse_Account& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_persona()) {
      set_persona(from.persona());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgLookupMultipleAccountNamesResponse_Account::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLookupMultipleAccountNamesResponse_Account::CopyFrom(const CMsgLookupMultipleAccountNamesResponse_Account& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLookupMultipleAccountNamesResponse_Account::IsInitialized() const {
  
  return true;
}

void CMsgLookupMultipleAccountNamesResponse_Account::Swap(CMsgLookupMultipleAccountNamesResponse_Account* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(persona_, other->persona_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgLookupMultipleAccountNamesResponse_Account::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgLookupMultipleAccountNamesResponse_Account_descriptor_;
  metadata.reflection = CMsgLookupMultipleAccountNamesResponse_Account_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgLookupMultipleAccountNamesResponse::kAccountsFieldNumber;
#endif  // !_MSC_VER

CMsgLookupMultipleAccountNamesResponse::CMsgLookupMultipleAccountNamesResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgLookupMultipleAccountNamesResponse::InitAsDefaultInstance() {
}

CMsgLookupMultipleAccountNamesResponse::CMsgLookupMultipleAccountNamesResponse(const CMsgLookupMultipleAccountNamesResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgLookupMultipleAccountNamesResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgLookupMultipleAccountNamesResponse::~CMsgLookupMultipleAccountNamesResponse() {
  SharedDtor();
}

void CMsgLookupMultipleAccountNamesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgLookupMultipleAccountNamesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLookupMultipleAccountNamesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLookupMultipleAccountNamesResponse_descriptor_;
}

const CMsgLookupMultipleAccountNamesResponse& CMsgLookupMultipleAccountNamesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgLookupMultipleAccountNamesResponse* CMsgLookupMultipleAccountNamesResponse::default_instance_ = NULL;

CMsgLookupMultipleAccountNamesResponse* CMsgLookupMultipleAccountNamesResponse::New() const {
  return new CMsgLookupMultipleAccountNamesResponse;
}

void CMsgLookupMultipleAccountNamesResponse::Clear() {
  accounts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgLookupMultipleAccountNamesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgLookupMultipleAccountNamesResponse.Account accounts = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accounts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_accounts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_accounts;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgLookupMultipleAccountNamesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgLookupMultipleAccountNamesResponse.Account accounts = 1;
  for (int i = 0; i < this->accounts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->accounts(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgLookupMultipleAccountNamesResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgLookupMultipleAccountNamesResponse.Account accounts = 1;
  for (int i = 0; i < this->accounts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->accounts(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgLookupMultipleAccountNamesResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .CMsgLookupMultipleAccountNamesResponse.Account accounts = 1;
  total_size += 1 * this->accounts_size();
  for (int i = 0; i < this->accounts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->accounts(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLookupMultipleAccountNamesResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgLookupMultipleAccountNamesResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgLookupMultipleAccountNamesResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgLookupMultipleAccountNamesResponse::MergeFrom(const CMsgLookupMultipleAccountNamesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  accounts_.MergeFrom(from.accounts_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgLookupMultipleAccountNamesResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLookupMultipleAccountNamesResponse::CopyFrom(const CMsgLookupMultipleAccountNamesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLookupMultipleAccountNamesResponse::IsInitialized() const {
  
  return true;
}

void CMsgLookupMultipleAccountNamesResponse::Swap(CMsgLookupMultipleAccountNamesResponse* other) {
  if (other != this) {
    accounts_.Swap(&other->accounts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgLookupMultipleAccountNamesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgLookupMultipleAccountNamesResponse_descriptor_;
  metadata.reflection = CMsgLookupMultipleAccountNamesResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCToGCGetUserPCBangNo::kAccountIdFieldNumber;
#endif  // !_MSC_VER

CMsgGCToGCGetUserPCBangNo::CMsgGCToGCGetUserPCBangNo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCToGCGetUserPCBangNo::InitAsDefaultInstance() {
}

CMsgGCToGCGetUserPCBangNo::CMsgGCToGCGetUserPCBangNo(const CMsgGCToGCGetUserPCBangNo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCToGCGetUserPCBangNo::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToGCGetUserPCBangNo::~CMsgGCToGCGetUserPCBangNo() {
  SharedDtor();
}

void CMsgGCToGCGetUserPCBangNo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToGCGetUserPCBangNo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCGetUserPCBangNo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToGCGetUserPCBangNo_descriptor_;
}

const CMsgGCToGCGetUserPCBangNo& CMsgGCToGCGetUserPCBangNo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCToGCGetUserPCBangNo* CMsgGCToGCGetUserPCBangNo::default_instance_ = NULL;

CMsgGCToGCGetUserPCBangNo* CMsgGCToGCGetUserPCBangNo::New() const {
  return new CMsgGCToGCGetUserPCBangNo;
}

void CMsgGCToGCGetUserPCBangNo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCToGCGetUserPCBangNo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCToGCGetUserPCBangNo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCToGCGetUserPCBangNo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCToGCGetUserPCBangNo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCGetUserPCBangNo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCToGCGetUserPCBangNo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCToGCGetUserPCBangNo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToGCGetUserPCBangNo::MergeFrom(const CMsgGCToGCGetUserPCBangNo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCToGCGetUserPCBangNo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCGetUserPCBangNo::CopyFrom(const CMsgGCToGCGetUserPCBangNo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCGetUserPCBangNo::IsInitialized() const {
  
  return true;
}

void CMsgGCToGCGetUserPCBangNo::Swap(CMsgGCToGCGetUserPCBangNo* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCToGCGetUserPCBangNo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToGCGetUserPCBangNo_descriptor_;
  metadata.reflection = CMsgGCToGCGetUserPCBangNo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCToGCGetUserPCBangNoResponse::kPcBangNoFieldNumber;
#endif  // !_MSC_VER

CMsgGCToGCGetUserPCBangNoResponse::CMsgGCToGCGetUserPCBangNoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCToGCGetUserPCBangNoResponse::InitAsDefaultInstance() {
}

CMsgGCToGCGetUserPCBangNoResponse::CMsgGCToGCGetUserPCBangNoResponse(const CMsgGCToGCGetUserPCBangNoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCToGCGetUserPCBangNoResponse::SharedCtor() {
  _cached_size_ = 0;
  pc_bang_no_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToGCGetUserPCBangNoResponse::~CMsgGCToGCGetUserPCBangNoResponse() {
  SharedDtor();
}

void CMsgGCToGCGetUserPCBangNoResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToGCGetUserPCBangNoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCGetUserPCBangNoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToGCGetUserPCBangNoResponse_descriptor_;
}

const CMsgGCToGCGetUserPCBangNoResponse& CMsgGCToGCGetUserPCBangNoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCToGCGetUserPCBangNoResponse* CMsgGCToGCGetUserPCBangNoResponse::default_instance_ = NULL;

CMsgGCToGCGetUserPCBangNoResponse* CMsgGCToGCGetUserPCBangNoResponse::New() const {
  return new CMsgGCToGCGetUserPCBangNoResponse;
}

void CMsgGCToGCGetUserPCBangNoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pc_bang_no_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCToGCGetUserPCBangNoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pc_bang_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pc_bang_no_)));
          set_has_pc_bang_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCToGCGetUserPCBangNoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 pc_bang_no = 1;
  if (has_pc_bang_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pc_bang_no(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCToGCGetUserPCBangNoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 pc_bang_no = 1;
  if (has_pc_bang_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pc_bang_no(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCToGCGetUserPCBangNoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pc_bang_no = 1;
    if (has_pc_bang_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pc_bang_no());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCGetUserPCBangNoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCToGCGetUserPCBangNoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCToGCGetUserPCBangNoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToGCGetUserPCBangNoResponse::MergeFrom(const CMsgGCToGCGetUserPCBangNoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pc_bang_no()) {
      set_pc_bang_no(from.pc_bang_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCToGCGetUserPCBangNoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCGetUserPCBangNoResponse::CopyFrom(const CMsgGCToGCGetUserPCBangNoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCGetUserPCBangNoResponse::IsInitialized() const {
  
  return true;
}

void CMsgGCToGCGetUserPCBangNoResponse::Swap(CMsgGCToGCGetUserPCBangNoResponse* other) {
  if (other != this) {
    std::swap(pc_bang_no_, other->pc_bang_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCToGCGetUserPCBangNoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToGCGetUserPCBangNoResponse_descriptor_;
  metadata.reflection = CMsgGCToGCGetUserPCBangNoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgRequestCrateItems::kCrateSeriesFieldNumber;
#endif  // !_MSC_VER

CMsgRequestCrateItems::CMsgRequestCrateItems()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgRequestCrateItems::InitAsDefaultInstance() {
}

CMsgRequestCrateItems::CMsgRequestCrateItems(const CMsgRequestCrateItems& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgRequestCrateItems::SharedCtor() {
  _cached_size_ = 0;
  crate_series_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgRequestCrateItems::~CMsgRequestCrateItems() {
  SharedDtor();
}

void CMsgRequestCrateItems::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgRequestCrateItems::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRequestCrateItems::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgRequestCrateItems_descriptor_;
}

const CMsgRequestCrateItems& CMsgRequestCrateItems::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgRequestCrateItems* CMsgRequestCrateItems::default_instance_ = NULL;

CMsgRequestCrateItems* CMsgRequestCrateItems::New() const {
  return new CMsgRequestCrateItems;
}

void CMsgRequestCrateItems::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    crate_series_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgRequestCrateItems::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 crate_series = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crate_series_)));
          set_has_crate_series();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgRequestCrateItems::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 crate_series = 1;
  if (has_crate_series()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->crate_series(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgRequestCrateItems::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 crate_series = 1;
  if (has_crate_series()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->crate_series(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgRequestCrateItems::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 crate_series = 1;
    if (has_crate_series()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crate_series());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRequestCrateItems::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgRequestCrateItems* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgRequestCrateItems*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgRequestCrateItems::MergeFrom(const CMsgRequestCrateItems& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_crate_series()) {
      set_crate_series(from.crate_series());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgRequestCrateItems::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRequestCrateItems::CopyFrom(const CMsgRequestCrateItems& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRequestCrateItems::IsInitialized() const {
  
  return true;
}

void CMsgRequestCrateItems::Swap(CMsgRequestCrateItems* other) {
  if (other != this) {
    std::swap(crate_series_, other->crate_series_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgRequestCrateItems::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgRequestCrateItems_descriptor_;
  metadata.reflection = CMsgRequestCrateItems_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgRequestCrateItemsResponse::kCrateSeriesFieldNumber;
const int CMsgRequestCrateItemsResponse::kItemDefsFieldNumber;
#endif  // !_MSC_VER

CMsgRequestCrateItemsResponse::CMsgRequestCrateItemsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgRequestCrateItemsResponse::InitAsDefaultInstance() {
}

CMsgRequestCrateItemsResponse::CMsgRequestCrateItemsResponse(const CMsgRequestCrateItemsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgRequestCrateItemsResponse::SharedCtor() {
  _cached_size_ = 0;
  crate_series_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgRequestCrateItemsResponse::~CMsgRequestCrateItemsResponse() {
  SharedDtor();
}

void CMsgRequestCrateItemsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgRequestCrateItemsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRequestCrateItemsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgRequestCrateItemsResponse_descriptor_;
}

const CMsgRequestCrateItemsResponse& CMsgRequestCrateItemsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgRequestCrateItemsResponse* CMsgRequestCrateItemsResponse::default_instance_ = NULL;

CMsgRequestCrateItemsResponse* CMsgRequestCrateItemsResponse::New() const {
  return new CMsgRequestCrateItemsResponse;
}

void CMsgRequestCrateItemsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    crate_series_ = 0u;
  }
  item_defs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgRequestCrateItemsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 crate_series = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crate_series_)));
          set_has_crate_series();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_defs;
        break;
      }
      
      // repeated uint32 item_defs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_defs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_item_defs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_item_defs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_defs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgRequestCrateItemsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 crate_series = 1;
  if (has_crate_series()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->crate_series(), output);
  }
  
  // repeated uint32 item_defs = 2;
  for (int i = 0; i < this->item_defs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->item_defs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgRequestCrateItemsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 crate_series = 1;
  if (has_crate_series()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->crate_series(), target);
  }
  
  // repeated uint32 item_defs = 2;
  for (int i = 0; i < this->item_defs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->item_defs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgRequestCrateItemsResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 crate_series = 1;
    if (has_crate_series()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crate_series());
    }
    
  }
  // repeated uint32 item_defs = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_defs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->item_defs(i));
    }
    total_size += 1 * this->item_defs_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRequestCrateItemsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgRequestCrateItemsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgRequestCrateItemsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgRequestCrateItemsResponse::MergeFrom(const CMsgRequestCrateItemsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_defs_.MergeFrom(from.item_defs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_crate_series()) {
      set_crate_series(from.crate_series());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgRequestCrateItemsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRequestCrateItemsResponse::CopyFrom(const CMsgRequestCrateItemsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRequestCrateItemsResponse::IsInitialized() const {
  
  return true;
}

void CMsgRequestCrateItemsResponse::Swap(CMsgRequestCrateItemsResponse* other) {
  if (other != this) {
    std::swap(crate_series_, other->crate_series_);
    item_defs_.Swap(&other->item_defs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgRequestCrateItemsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgRequestCrateItemsResponse_descriptor_;
  metadata.reflection = CMsgRequestCrateItemsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCToGCCanUseDropRateBonus::kAccountIdFieldNumber;
const int CMsgGCToGCCanUseDropRateBonus::kDropRateBonusFieldNumber;
const int CMsgGCToGCCanUseDropRateBonus::kBoosterTypeFieldNumber;
#endif  // !_MSC_VER

CMsgGCToGCCanUseDropRateBonus::CMsgGCToGCCanUseDropRateBonus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCToGCCanUseDropRateBonus::InitAsDefaultInstance() {
}

CMsgGCToGCCanUseDropRateBonus::CMsgGCToGCCanUseDropRateBonus(const CMsgGCToGCCanUseDropRateBonus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCToGCCanUseDropRateBonus::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  drop_rate_bonus_ = 0;
  booster_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToGCCanUseDropRateBonus::~CMsgGCToGCCanUseDropRateBonus() {
  SharedDtor();
}

void CMsgGCToGCCanUseDropRateBonus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToGCCanUseDropRateBonus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCCanUseDropRateBonus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToGCCanUseDropRateBonus_descriptor_;
}

const CMsgGCToGCCanUseDropRateBonus& CMsgGCToGCCanUseDropRateBonus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCToGCCanUseDropRateBonus* CMsgGCToGCCanUseDropRateBonus::default_instance_ = NULL;

CMsgGCToGCCanUseDropRateBonus* CMsgGCToGCCanUseDropRateBonus::New() const {
  return new CMsgGCToGCCanUseDropRateBonus;
}

void CMsgGCToGCCanUseDropRateBonus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    drop_rate_bonus_ = 0;
    booster_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCToGCCanUseDropRateBonus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_drop_rate_bonus;
        break;
      }
      
      // optional float drop_rate_bonus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_drop_rate_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &drop_rate_bonus_)));
          set_has_drop_rate_bonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_booster_type;
        break;
      }
      
      // optional uint32 booster_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_booster_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &booster_type_)));
          set_has_booster_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCToGCCanUseDropRateBonus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }
  
  // optional float drop_rate_bonus = 2;
  if (has_drop_rate_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->drop_rate_bonus(), output);
  }
  
  // optional uint32 booster_type = 3;
  if (has_booster_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->booster_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCToGCCanUseDropRateBonus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }
  
  // optional float drop_rate_bonus = 2;
  if (has_drop_rate_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->drop_rate_bonus(), target);
  }
  
  // optional uint32 booster_type = 3;
  if (has_booster_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->booster_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCToGCCanUseDropRateBonus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
    // optional float drop_rate_bonus = 2;
    if (has_drop_rate_bonus()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 booster_type = 3;
    if (has_booster_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->booster_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCCanUseDropRateBonus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCToGCCanUseDropRateBonus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCToGCCanUseDropRateBonus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToGCCanUseDropRateBonus::MergeFrom(const CMsgGCToGCCanUseDropRateBonus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_drop_rate_bonus()) {
      set_drop_rate_bonus(from.drop_rate_bonus());
    }
    if (from.has_booster_type()) {
      set_booster_type(from.booster_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCToGCCanUseDropRateBonus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCCanUseDropRateBonus::CopyFrom(const CMsgGCToGCCanUseDropRateBonus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCCanUseDropRateBonus::IsInitialized() const {
  
  return true;
}

void CMsgGCToGCCanUseDropRateBonus::Swap(CMsgGCToGCCanUseDropRateBonus* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(drop_rate_bonus_, other->drop_rate_bonus_);
    std::swap(booster_type_, other->booster_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCToGCCanUseDropRateBonus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToGCCanUseDropRateBonus_descriptor_;
  metadata.reflection = CMsgGCToGCCanUseDropRateBonus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSQLAddDropRateBonus::kAccountIdFieldNumber;
const int CMsgSQLAddDropRateBonus::kItemIdFieldNumber;
const int CMsgSQLAddDropRateBonus::kItemDefFieldNumber;
const int CMsgSQLAddDropRateBonus::kDropRateBonusFieldNumber;
const int CMsgSQLAddDropRateBonus::kBoosterTypeFieldNumber;
const int CMsgSQLAddDropRateBonus::kSecondsDurationFieldNumber;
const int CMsgSQLAddDropRateBonus::kEndTimeStampFieldNumber;
#endif  // !_MSC_VER

CMsgSQLAddDropRateBonus::CMsgSQLAddDropRateBonus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSQLAddDropRateBonus::InitAsDefaultInstance() {
}

CMsgSQLAddDropRateBonus::CMsgSQLAddDropRateBonus(const CMsgSQLAddDropRateBonus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSQLAddDropRateBonus::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  item_id_ = GOOGLE_ULONGLONG(0);
  item_def_ = 0u;
  drop_rate_bonus_ = 0;
  booster_type_ = 0u;
  seconds_duration_ = 0u;
  end_time_stamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSQLAddDropRateBonus::~CMsgSQLAddDropRateBonus() {
  SharedDtor();
}

void CMsgSQLAddDropRateBonus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSQLAddDropRateBonus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSQLAddDropRateBonus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSQLAddDropRateBonus_descriptor_;
}

const CMsgSQLAddDropRateBonus& CMsgSQLAddDropRateBonus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgSQLAddDropRateBonus* CMsgSQLAddDropRateBonus::default_instance_ = NULL;

CMsgSQLAddDropRateBonus* CMsgSQLAddDropRateBonus::New() const {
  return new CMsgSQLAddDropRateBonus;
}

void CMsgSQLAddDropRateBonus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    item_id_ = GOOGLE_ULONGLONG(0);
    item_def_ = 0u;
    drop_rate_bonus_ = 0;
    booster_type_ = 0u;
    seconds_duration_ = 0u;
    end_time_stamp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSQLAddDropRateBonus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }
      
      // optional uint64 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_def;
        break;
      }
      
      // optional uint32 item_def = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_def:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_def_)));
          set_has_item_def();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_drop_rate_bonus;
        break;
      }
      
      // optional float drop_rate_bonus = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_drop_rate_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &drop_rate_bonus_)));
          set_has_drop_rate_bonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_booster_type;
        break;
      }
      
      // optional uint32 booster_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_booster_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &booster_type_)));
          set_has_booster_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_seconds_duration;
        break;
      }
      
      // optional uint32 seconds_duration = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seconds_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_duration_)));
          set_has_seconds_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_end_time_stamp;
        break;
      }
      
      // optional uint32 end_time_stamp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_stamp_)));
          set_has_end_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSQLAddDropRateBonus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }
  
  // optional uint64 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item_id(), output);
  }
  
  // optional uint32 item_def = 3;
  if (has_item_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_def(), output);
  }
  
  // optional float drop_rate_bonus = 4;
  if (has_drop_rate_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->drop_rate_bonus(), output);
  }
  
  // optional uint32 booster_type = 5;
  if (has_booster_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->booster_type(), output);
  }
  
  // optional uint32 seconds_duration = 6;
  if (has_seconds_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->seconds_duration(), output);
  }
  
  // optional uint32 end_time_stamp = 7;
  if (has_end_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->end_time_stamp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSQLAddDropRateBonus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }
  
  // optional uint64 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item_id(), target);
  }
  
  // optional uint32 item_def = 3;
  if (has_item_def()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_def(), target);
  }
  
  // optional float drop_rate_bonus = 4;
  if (has_drop_rate_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->drop_rate_bonus(), target);
  }
  
  // optional uint32 booster_type = 5;
  if (has_booster_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->booster_type(), target);
  }
  
  // optional uint32 seconds_duration = 6;
  if (has_seconds_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->seconds_duration(), target);
  }
  
  // optional uint32 end_time_stamp = 7;
  if (has_end_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->end_time_stamp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSQLAddDropRateBonus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
    // optional uint64 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }
    
    // optional uint32 item_def = 3;
    if (has_item_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_def());
    }
    
    // optional float drop_rate_bonus = 4;
    if (has_drop_rate_bonus()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 booster_type = 5;
    if (has_booster_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->booster_type());
    }
    
    // optional uint32 seconds_duration = 6;
    if (has_seconds_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds_duration());
    }
    
    // optional uint32 end_time_stamp = 7;
    if (has_end_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_time_stamp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSQLAddDropRateBonus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSQLAddDropRateBonus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSQLAddDropRateBonus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSQLAddDropRateBonus::MergeFrom(const CMsgSQLAddDropRateBonus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_def()) {
      set_item_def(from.item_def());
    }
    if (from.has_drop_rate_bonus()) {
      set_drop_rate_bonus(from.drop_rate_bonus());
    }
    if (from.has_booster_type()) {
      set_booster_type(from.booster_type());
    }
    if (from.has_seconds_duration()) {
      set_seconds_duration(from.seconds_duration());
    }
    if (from.has_end_time_stamp()) {
      set_end_time_stamp(from.end_time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSQLAddDropRateBonus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSQLAddDropRateBonus::CopyFrom(const CMsgSQLAddDropRateBonus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSQLAddDropRateBonus::IsInitialized() const {
  
  return true;
}

void CMsgSQLAddDropRateBonus::Swap(CMsgSQLAddDropRateBonus* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_def_, other->item_def_);
    std::swap(drop_rate_bonus_, other->drop_rate_bonus_);
    std::swap(booster_type_, other->booster_type_);
    std::swap(seconds_duration_, other->seconds_duration_);
    std::swap(end_time_stamp_, other->end_time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSQLAddDropRateBonus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSQLAddDropRateBonus_descriptor_;
  metadata.reflection = CMsgSQLAddDropRateBonus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCToGCRefreshSOCache::kAccountIdFieldNumber;
const int CMsgGCToGCRefreshSOCache::kReloadFieldNumber;
#endif  // !_MSC_VER

CMsgGCToGCRefreshSOCache::CMsgGCToGCRefreshSOCache()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCToGCRefreshSOCache::InitAsDefaultInstance() {
}

CMsgGCToGCRefreshSOCache::CMsgGCToGCRefreshSOCache(const CMsgGCToGCRefreshSOCache& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCToGCRefreshSOCache::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  reload_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToGCRefreshSOCache::~CMsgGCToGCRefreshSOCache() {
  SharedDtor();
}

void CMsgGCToGCRefreshSOCache::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToGCRefreshSOCache::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCRefreshSOCache::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToGCRefreshSOCache_descriptor_;
}

const CMsgGCToGCRefreshSOCache& CMsgGCToGCRefreshSOCache::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCToGCRefreshSOCache* CMsgGCToGCRefreshSOCache::default_instance_ = NULL;

CMsgGCToGCRefreshSOCache* CMsgGCToGCRefreshSOCache::New() const {
  return new CMsgGCToGCRefreshSOCache;
}

void CMsgGCToGCRefreshSOCache::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    reload_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCToGCRefreshSOCache::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reload;
        break;
      }
      
      // optional bool reload = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reload:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reload_)));
          set_has_reload();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCToGCRefreshSOCache::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }
  
  // optional bool reload = 2;
  if (has_reload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->reload(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCToGCRefreshSOCache::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }
  
  // optional bool reload = 2;
  if (has_reload()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->reload(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCToGCRefreshSOCache::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
    // optional bool reload = 2;
    if (has_reload()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCRefreshSOCache::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCToGCRefreshSOCache* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCToGCRefreshSOCache*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToGCRefreshSOCache::MergeFrom(const CMsgGCToGCRefreshSOCache& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_reload()) {
      set_reload(from.reload());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCToGCRefreshSOCache::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCRefreshSOCache::CopyFrom(const CMsgGCToGCRefreshSOCache& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCRefreshSOCache::IsInitialized() const {
  
  return true;
}

void CMsgGCToGCRefreshSOCache::Swap(CMsgGCToGCRefreshSOCache* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(reload_, other->reload_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCToGCRefreshSOCache::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToGCRefreshSOCache_descriptor_;
  metadata.reflection = CMsgGCToGCRefreshSOCache_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCToGCCheckAccountTradeStatus::kAccountIdFieldNumber;
const int CMsgGCToGCCheckAccountTradeStatus::kInitiatorFieldNumber;
#endif  // !_MSC_VER

CMsgGCToGCCheckAccountTradeStatus::CMsgGCToGCCheckAccountTradeStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCToGCCheckAccountTradeStatus::InitAsDefaultInstance() {
}

CMsgGCToGCCheckAccountTradeStatus::CMsgGCToGCCheckAccountTradeStatus(const CMsgGCToGCCheckAccountTradeStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCToGCCheckAccountTradeStatus::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  initiator_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToGCCheckAccountTradeStatus::~CMsgGCToGCCheckAccountTradeStatus() {
  SharedDtor();
}

void CMsgGCToGCCheckAccountTradeStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToGCCheckAccountTradeStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCCheckAccountTradeStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToGCCheckAccountTradeStatus_descriptor_;
}

const CMsgGCToGCCheckAccountTradeStatus& CMsgGCToGCCheckAccountTradeStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCToGCCheckAccountTradeStatus* CMsgGCToGCCheckAccountTradeStatus::default_instance_ = NULL;

CMsgGCToGCCheckAccountTradeStatus* CMsgGCToGCCheckAccountTradeStatus::New() const {
  return new CMsgGCToGCCheckAccountTradeStatus;
}

void CMsgGCToGCCheckAccountTradeStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    initiator_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCToGCCheckAccountTradeStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_initiator;
        break;
      }
      
      // optional bool initiator = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_initiator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &initiator_)));
          set_has_initiator();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCToGCCheckAccountTradeStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }
  
  // optional bool initiator = 2;
  if (has_initiator()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->initiator(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCToGCCheckAccountTradeStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }
  
  // optional bool initiator = 2;
  if (has_initiator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->initiator(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCToGCCheckAccountTradeStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
    // optional bool initiator = 2;
    if (has_initiator()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCCheckAccountTradeStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCToGCCheckAccountTradeStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCToGCCheckAccountTradeStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToGCCheckAccountTradeStatus::MergeFrom(const CMsgGCToGCCheckAccountTradeStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_initiator()) {
      set_initiator(from.initiator());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCToGCCheckAccountTradeStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCCheckAccountTradeStatus::CopyFrom(const CMsgGCToGCCheckAccountTradeStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCCheckAccountTradeStatus::IsInitialized() const {
  
  return true;
}

void CMsgGCToGCCheckAccountTradeStatus::Swap(CMsgGCToGCCheckAccountTradeStatus* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(initiator_, other->initiator_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCToGCCheckAccountTradeStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToGCCheckAccountTradeStatus_descriptor_;
  metadata.reflection = CMsgGCToGCCheckAccountTradeStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCToGCCheckAccountTradeStatusResponse::kCanTradeFieldNumber;
const int CMsgGCToGCCheckAccountTradeStatusResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

CMsgGCToGCCheckAccountTradeStatusResponse::CMsgGCToGCCheckAccountTradeStatusResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCToGCCheckAccountTradeStatusResponse::InitAsDefaultInstance() {
}

CMsgGCToGCCheckAccountTradeStatusResponse::CMsgGCToGCCheckAccountTradeStatusResponse(const CMsgGCToGCCheckAccountTradeStatusResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCToGCCheckAccountTradeStatusResponse::SharedCtor() {
  _cached_size_ = 0;
  can_trade_ = false;
  error_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToGCCheckAccountTradeStatusResponse::~CMsgGCToGCCheckAccountTradeStatusResponse() {
  SharedDtor();
}

void CMsgGCToGCCheckAccountTradeStatusResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToGCCheckAccountTradeStatusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCCheckAccountTradeStatusResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToGCCheckAccountTradeStatusResponse_descriptor_;
}

const CMsgGCToGCCheckAccountTradeStatusResponse& CMsgGCToGCCheckAccountTradeStatusResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCToGCCheckAccountTradeStatusResponse* CMsgGCToGCCheckAccountTradeStatusResponse::default_instance_ = NULL;

CMsgGCToGCCheckAccountTradeStatusResponse* CMsgGCToGCCheckAccountTradeStatusResponse::New() const {
  return new CMsgGCToGCCheckAccountTradeStatusResponse;
}

void CMsgGCToGCCheckAccountTradeStatusResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    can_trade_ = false;
    error_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCToGCCheckAccountTradeStatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool can_trade = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_trade_)));
          set_has_can_trade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }
      
      // optional uint32 error_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCToGCCheckAccountTradeStatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool can_trade = 1;
  if (has_can_trade()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->can_trade(), output);
  }
  
  // optional uint32 error_code = 2;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCToGCCheckAccountTradeStatusResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool can_trade = 1;
  if (has_can_trade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->can_trade(), target);
  }
  
  // optional uint32 error_code = 2;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCToGCCheckAccountTradeStatusResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool can_trade = 1;
    if (has_can_trade()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 error_code = 2;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCCheckAccountTradeStatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCToGCCheckAccountTradeStatusResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCToGCCheckAccountTradeStatusResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToGCCheckAccountTradeStatusResponse::MergeFrom(const CMsgGCToGCCheckAccountTradeStatusResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_can_trade()) {
      set_can_trade(from.can_trade());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCToGCCheckAccountTradeStatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCCheckAccountTradeStatusResponse::CopyFrom(const CMsgGCToGCCheckAccountTradeStatusResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCCheckAccountTradeStatusResponse::IsInitialized() const {
  
  return true;
}

void CMsgGCToGCCheckAccountTradeStatusResponse::Swap(CMsgGCToGCCheckAccountTradeStatusResponse* other) {
  if (other != this) {
    std::swap(can_trade_, other->can_trade_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCToGCCheckAccountTradeStatusResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToGCCheckAccountTradeStatusResponse_descriptor_;
  metadata.reflection = CMsgGCToGCCheckAccountTradeStatusResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
