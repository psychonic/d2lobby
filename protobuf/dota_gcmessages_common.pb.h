// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_common.proto

#ifndef PROTOBUF_dota_5fgcmessages_5fcommon_2eproto__INCLUDED
#define PROTOBUF_dota_5fgcmessages_5fcommon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "steammessages.pb.h"
#include "matchmaker_common.pb.h"
#include "gcsdk_gcmessages.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();

class CSODOTAGameAccountClient;
class CSODOTAPartyMember;
class CSODOTAParty;
class CSODOTAPartyInvite;
class CSODOTAPartyInvite_PartyMember;
class CMsgDOTAPartyMemberSetCoach;
class CDOTASaveGame;
class CDOTASaveGame_Player;
class CDOTASaveGame_SaveInstance;
class CDOTASaveGame_SaveInstance_PlayerPositions;
class CMsgLeaverState;
class CDOTALobbyMember;
class CDOTALobbyMember_CDOTALobbyMemberXPBonus;
class CDOTALobbyMemberPrivate;
class CLobbyTeamDetails;
class CLobbyTimedRewardDetails;
class CLobbyBroadcastChannelInfo;
class CSODOTALobby;
class CSODOTALobby_CExtraMsg;
class CSODOTALobbyInternal;
class CMsgDOTAGenericResult;
class CMsgDOTABroadcastNotification;
class CMsgDOTAPCBangTimedReward;
class CAttribute_String;
class CAttribute_ItemDynamicRecipeComponent;
class CProtoItemSocket;
class CProtoItemSocket_Empty;
class CProtoItemSocket_Effect;
class CProtoItemSocket_Color;
class CProtoItemSocket_Strange;
class CProtoItemSocket_Spectator;
class CProtoItemSocket_AnimModifier;
class CProtoItemSocket_Autograph;
class CProtoItemSocket_AbilityEffect;
class CProtoItemSocket_StaticVisuals;
class CMatchPlayerAbilityUpgrade;
class CMatchAdditionalUnitInventory;
class CMatchHeroSelectEvent;
class CMsgDOTAProcessFantasyScheduledEvent;
class CSODOTAMapLocationState;
class CMsgNexonPartnerUpdate;
class CMsgMakeOffering;
class CMsgRequestOfferings;
class CMsgRequestOfferingsResponse;
class CMsgRequestOfferingsResponse_NewYearsOffering;
class CMsgLeagueAdminList;
class CMsgPerfectWorldUserLookupRequest;
class CMsgPerfectWorldUserLookupResponse;

enum CSODOTAParty_State {
  CSODOTAParty_State_UI = 0,
  CSODOTAParty_State_FINDING_MATCH = 1,
  CSODOTAParty_State_IN_MATCH = 2
};
bool CSODOTAParty_State_IsValid(int value);
const CSODOTAParty_State CSODOTAParty_State_State_MIN = CSODOTAParty_State_UI;
const CSODOTAParty_State CSODOTAParty_State_State_MAX = CSODOTAParty_State_IN_MATCH;
const int CSODOTAParty_State_State_ARRAYSIZE = CSODOTAParty_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* CSODOTAParty_State_descriptor();
inline const ::std::string& CSODOTAParty_State_Name(CSODOTAParty_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    CSODOTAParty_State_descriptor(), value);
}
inline bool CSODOTAParty_State_Parse(
    const ::std::string& name, CSODOTAParty_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CSODOTAParty_State>(
    CSODOTAParty_State_descriptor(), name, value);
}
enum CSODOTALobby_State {
  CSODOTALobby_State_UI = 0,
  CSODOTALobby_State_READYUP = 4,
  CSODOTALobby_State_SERVERSETUP = 1,
  CSODOTALobby_State_RUN = 2,
  CSODOTALobby_State_POSTGAME = 3,
  CSODOTALobby_State_NOTREADY = 5,
  CSODOTALobby_State_SERVERASSIGN = 6
};
bool CSODOTALobby_State_IsValid(int value);
const CSODOTALobby_State CSODOTALobby_State_State_MIN = CSODOTALobby_State_UI;
const CSODOTALobby_State CSODOTALobby_State_State_MAX = CSODOTALobby_State_SERVERASSIGN;
const int CSODOTALobby_State_State_ARRAYSIZE = CSODOTALobby_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* CSODOTALobby_State_descriptor();
inline const ::std::string& CSODOTALobby_State_Name(CSODOTALobby_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    CSODOTALobby_State_descriptor(), value);
}
inline bool CSODOTALobby_State_Parse(
    const ::std::string& name, CSODOTALobby_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CSODOTALobby_State>(
    CSODOTALobby_State_descriptor(), name, value);
}
enum CSODOTALobby_LobbyType {
  CSODOTALobby_LobbyType_INVALID = -1,
  CSODOTALobby_LobbyType_CASUAL_MATCH = 0,
  CSODOTALobby_LobbyType_PRACTICE = 1,
  CSODOTALobby_LobbyType_TOURNAMENT = 2,
  CSODOTALobby_LobbyType_COOP_BOT_MATCH = 4,
  CSODOTALobby_LobbyType_TEAM_MATCH = 5,
  CSODOTALobby_LobbyType_SOLO_QUEUE_MATCH = 6,
  CSODOTALobby_LobbyType_COMPETITIVE_MATCH = 7
};
bool CSODOTALobby_LobbyType_IsValid(int value);
const CSODOTALobby_LobbyType CSODOTALobby_LobbyType_LobbyType_MIN = CSODOTALobby_LobbyType_INVALID;
const CSODOTALobby_LobbyType CSODOTALobby_LobbyType_LobbyType_MAX = CSODOTALobby_LobbyType_COMPETITIVE_MATCH;
const int CSODOTALobby_LobbyType_LobbyType_ARRAYSIZE = CSODOTALobby_LobbyType_LobbyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CSODOTALobby_LobbyType_descriptor();
inline const ::std::string& CSODOTALobby_LobbyType_Name(CSODOTALobby_LobbyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CSODOTALobby_LobbyType_descriptor(), value);
}
inline bool CSODOTALobby_LobbyType_Parse(
    const ::std::string& name, CSODOTALobby_LobbyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CSODOTALobby_LobbyType>(
    CSODOTALobby_LobbyType_descriptor(), name, value);
}
enum CMsgPerfectWorldUserLookupResponse_EResultCode {
  CMsgPerfectWorldUserLookupResponse_EResultCode_SUCCESS_ACCOUNT_FOUND = 0,
  CMsgPerfectWorldUserLookupResponse_EResultCode_ERROR_UNKNOWN = 1,
  CMsgPerfectWorldUserLookupResponse_EResultCode_ERROR_USER_NAME_WRONG_FORMAT = 2,
  CMsgPerfectWorldUserLookupResponse_EResultCode_ERROR_NO_PERFECT_WORLD_ACCOUNT_FOUND = 3,
  CMsgPerfectWorldUserLookupResponse_EResultCode_ERROR_NO_LINKED_STEAM_ACCOUNT_FOUND = 4
};
bool CMsgPerfectWorldUserLookupResponse_EResultCode_IsValid(int value);
const CMsgPerfectWorldUserLookupResponse_EResultCode CMsgPerfectWorldUserLookupResponse_EResultCode_EResultCode_MIN = CMsgPerfectWorldUserLookupResponse_EResultCode_SUCCESS_ACCOUNT_FOUND;
const CMsgPerfectWorldUserLookupResponse_EResultCode CMsgPerfectWorldUserLookupResponse_EResultCode_EResultCode_MAX = CMsgPerfectWorldUserLookupResponse_EResultCode_ERROR_NO_LINKED_STEAM_ACCOUNT_FOUND;
const int CMsgPerfectWorldUserLookupResponse_EResultCode_EResultCode_ARRAYSIZE = CMsgPerfectWorldUserLookupResponse_EResultCode_EResultCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgPerfectWorldUserLookupResponse_EResultCode_descriptor();
inline const ::std::string& CMsgPerfectWorldUserLookupResponse_EResultCode_Name(CMsgPerfectWorldUserLookupResponse_EResultCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgPerfectWorldUserLookupResponse_EResultCode_descriptor(), value);
}
inline bool CMsgPerfectWorldUserLookupResponse_EResultCode_Parse(
    const ::std::string& name, CMsgPerfectWorldUserLookupResponse_EResultCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgPerfectWorldUserLookupResponse_EResultCode>(
    CMsgPerfectWorldUserLookupResponse_EResultCode_descriptor(), name, value);
}
enum EDOTAGCMsg {
  k_EMsgGCDOTABase = 7000,
  k_EMsgGCGeneralResponse = 7001,
  k_EMsgGCGameMatchSignOut = 7004,
  k_EMsgGCGameMatchSignOutResponse = 7005,
  k_EMsgGCJoinChatChannel = 7009,
  k_EMsgGCJoinChatChannelResponse = 7010,
  k_EMsgGCOtherJoinedChannel = 7013,
  k_EMsgGCOtherLeftChannel = 7014,
  k_EMsgGCMatchHistoryList = 7017,
  k_EMsgGCStatus = 7026,
  k_EMsgGCGetRecentMatches = 7027,
  k_EMsgGCRecentMatchesResponse = 7028,
  k_EMsgGCFindSourceTVGames = 7031,
  k_EMsgGCSourceTVGamesResponse = 7032,
  k_EMsgGCStartFindingMatch = 7033,
  k_EMsgGCConnectedPlayers = 7034,
  k_EMsgGCAbandonCurrentGame = 7035,
  k_EMsgGCStopFindingMatch = 7036,
  k_EMsgGCPracticeLobbyCreate = 7038,
  k_EMsgGCPracticeLobbyLeave = 7040,
  k_EMsgGCPracticeLobbyLaunch = 7041,
  k_EMsgGCPracticeLobbyList = 7042,
  k_EMsgGCPracticeLobbyListResponse = 7043,
  k_EMsgGCPracticeLobbyJoin = 7044,
  k_EMsgGCPracticeLobbySetDetails = 7046,
  k_EMsgGCPracticeLobbySetTeamSlot = 7047,
  k_EMsgGCInitialQuestionnaireResponse = 7049,
  k_EMsgGCTournamentRequest = 7051,
  k_EMsgGCTournamentResponse = 7052,
  k_EMsgGCPracticeLobbyResponse = 7055,
  k_EMsgGCBroadcastNotification = 7056,
  k_EMsgGCLiveScoreboardUpdate = 7057,
  k_EMsgGCRequestChatChannelList = 7060,
  k_EMsgGCRequestChatChannelListResponse = 7061,
  k_EMsgGCRequestMatches = 7064,
  k_EMsgGCRequestMatchesResponse = 7065,
  k_EMsgGCRequestPlayerResources = 7068,
  k_EMsgGCRequestPlayerResourcesResponse = 7069,
  k_EMsgGCReadyUp = 7070,
  k_EMsgGCKickedFromMatchmakingQueue = 7071,
  k_EMsgGCLeaverDetected = 7072,
  k_EMsgGCSpectateFriendGame = 7073,
  k_EMsgGCSpectateFriendGameResponse = 7074,
  k_EMsgGCPlayerReports = 7075,
  k_EMsgGCReportsRemainingRequest = 7076,
  k_EMsgGCReportsRemainingResponse = 7077,
  k_EMsgGCSubmitPlayerReport = 7078,
  k_EMsgGCSubmitPlayerReportResponse = 7079,
  k_EMsgGCGameChatLog = 7080,
  k_EMsgGCPracticeLobbyKick = 7081,
  k_EMsgGCReportCountsRequest = 7082,
  k_EMsgGCReportCountsResponse = 7083,
  k_EMsgGCRequestSaveGames = 7084,
  k_EMsgGCRequestSaveGamesServer = 7085,
  k_EMsgGCRequestSaveGamesResponse = 7086,
  k_EMsgGCLeaverDetectedResponse = 7087,
  k_EMsgGCPlayerFailedToConnect = 7088,
  k_EMsgGCGCToRelayConnect = 7089,
  k_EMsgGCGCToRelayConnectresponse = 7090,
  k_EMsgGCWatchGame = 7091,
  k_EMsgGCWatchGameResponse = 7092,
  k_EMsgGCBanStatusRequest = 7093,
  k_EMsgGCBanStatusResponse = 7094,
  k_EMsgGCMatchDetailsRequest = 7095,
  k_EMsgGCMatchDetailsResponse = 7096,
  k_EMsgGCCancelWatchGame = 7097,
  k_EMsgGCProfileRequest = 7098,
  k_EMsgGCProfileResponse = 7099,
  k_EMsgGCPopup = 7102,
  k_EMsgGCDOTAClearNotifySuccessfulReport = 7104,
  k_EMsgGCGenericResult = 7108,
  k_EMsgGCFriendPracticeLobbyListRequest = 7111,
  k_EMsgGCFriendPracticeLobbyListResponse = 7112,
  k_EMsgGCPracticeLobbyJoinResponse = 7113,
  k_EMsgClientEconNotification_Job = 7114,
  k_EMsgGCCreateTeam = 7115,
  k_EMsgGCCreateTeamResponse = 7116,
  k_EMsgGCDisbandTeam = 7117,
  k_EMsgGCDisbandTeamResponse = 7118,
  k_EMsgGCRequestTeamData = 7119,
  k_EMsgGCRequestTeamDataResponse = 7120,
  k_EMsgGCTeamData = 7121,
  k_EMsgGCTeamInvite_InviterToGC = 7122,
  k_EMsgGCTeamInvite_GCImmediateResponseToInviter = 7123,
  k_EMsgGCTeamInvite_GCRequestToInvitee = 7124,
  k_EMsgGCTeamInvite_InviteeResponseToGC = 7125,
  k_EMsgGCTeamInvite_GCResponseToInviter = 7126,
  k_EMsgGCTeamInvite_GCResponseToInvitee = 7127,
  k_EMsgGCKickTeamMember = 7128,
  k_EMsgGCKickTeamMemberResponse = 7129,
  k_EMsgGCLeaveTeam = 7130,
  k_EMsgGCLeaveTeamResponse = 7131,
  k_EMsgGCSuggestTeamMatchmaking = 7132,
  k_EMsgGCPlayerHeroesFavoritesAdd = 7133,
  k_EMsgGCPlayerHeroesFavoritesRemove = 7134,
  k_EMsgGCEditTeamLogo = 7139,
  k_EMsgGCEditTeamLogoResponse = 7140,
  k_EMsgGCSetShowcaseHero = 7141,
  k_EMsgGCApplyTeamToPracticeLobby = 7142,
  k_EMsgGCRequestInternatinalTicketEmail = 7143,
  k_EMsgGCTransferTeamAdmin = 7144,
  k_EMsgGCClearTournamentGame = 7145,
  k_EMsgRequestLeagueInfo = 7147,
  k_EMsgResponseLeagueInfo = 7148,
  k_EMsgGCPracticeLobbyJoinBroadcastChannel = 7149,
  k_EMsgGC_TournamentItemEvent = 7150,
  k_EMsgGC_TournamentItemEventResponse = 7151,
  k_EMsgCastMatchVote = 7152,
  k_EMsgCastMatchVoteResponse = 7153,
  k_EMsgRetrieveMatchVote = 7154,
  k_EMsgRetrieveMatchVoteResponse = 7155,
  k_EMsgTeamFanfare = 7156,
  k_EMsgResponseTeamFanfare = 7157,
  k_EMsgGC_GameServerUploadSaveGame = 7158,
  k_EMsgGC_GameServerSaveGameResult = 7159,
  k_EMsgGC_GameServerGetLoadGame = 7160,
  k_EMsgGC_GameServerGetLoadGameResult = 7161,
  k_EMsgGCTeamProfileRequest = 7164,
  k_EMsgGCTeamProfileResponse = 7165,
  k_EMsgGCEditTeamDetails = 7166,
  k_EMsgGCEditTeamDetailsResponse = 7167,
  k_EMsgGCProTeamListRequest = 7168,
  k_EMsgGCProTeamListResponse = 7169,
  k_EMsgGCReadyUpStatus = 7170,
  k_EMsgGCHallOfFame = 7171,
  k_EMsgGCHallOfFameRequest = 7172,
  k_EMsgGCHallOfFameResponse = 7173,
  k_EMsgGCGenerateDiretidePrizeList = 7174,
  k_EMsgGCRewardDiretidePrizes = 7176,
  k_EMsgGCDiretidePrizesRewardedResponse = 7177,
  k_EMsgGCHalloweenHighScoreRequest = 7178,
  k_EMsgGCHalloweenHighScoreResponse = 7179,
  k_EMsgGCGenerateDiretidePrizeListResponse = 7180,
  k_EMsgGCStorePromoPagesRequest = 7182,
  k_EMsgGCStorePromoPagesResponse = 7183,
  k_EMsgGCSpawnLootGreevil = 7184,
  k_EMsgGCDismissLootGreevil = 7185,
  k_EMsgGCToGCMatchCompleted = 7186,
  k_EMsgGCDismissLootGreevilResponse = 7187,
  k_EMsgGCBalancedShuffleLobby = 7188,
  k_EMsgGCToGCCheckLeaguePermission = 7189,
  k_EMsgGCToGCCheckLeaguePermissionResponse = 7190,
  k_EMsgGCLeagueScheduleRequest = 7191,
  k_EMsgGCLeagueScheduleResponse = 7192,
  k_EMsgGCLeagueScheduleEdit = 7193,
  k_EMsgGCLeagueScheduleEditResponse = 7194,
  k_EMsgGCLeaguesInMonthRequest = 7195,
  k_EMsgGCLeaguesInMonthResponse = 7196,
  k_EMsgGCMatchmakingStatsRequest = 7197,
  k_EMsgGCMatchmakingStatsResponse = 7198,
  k_EMsgGCBotGameCreate = 7199,
  k_EMsgGCSetMatchHistoryAccess = 7200,
  k_EMsgGCSetMatchHistoryAccessResponse = 7201,
  k_EMsgUpgradeLeagueItem = 7203,
  k_EMsgUpgradeLeagueItemResponse = 7204,
  k_EMsgGCTeamMemberProfileRequest = 7205,
  k_EMsgGCWatchDownloadedReplay = 7206,
  k_EMsgGCSetMapLocationState = 7207,
  k_EMsgGCSetMapLocationStateResponse = 7208,
  k_EMsgGCResetMapLocations = 7209,
  k_EMsgGCResetMapLocationsResponse = 7210,
  k_EMsgGCTeamOnProfile = 7211,
  k_EMsgGCSetFeaturedItems = 7212,
  k_EMsgGCFeaturedItems = 7215,
  k_EMsgRefreshPartnerAccountLink = 7216,
  k_EMsgClientsRejoinChatChannels = 7217,
  k_EMsgGCToGCGetUserChatInfo = 7218,
  k_EMsgGCToGCGetUserChatInfoResponse = 7219,
  k_EMsgGCToGCLeaveAllChatChannels = 7220,
  k_EMsgGCToGCUpdateAccountChatBan = 7221,
  k_EMsgGCGuildCreateRequest = 7222,
  k_EMsgGCGuildCreateResponse = 7223,
  k_EMsgGCGuildSetAccountRoleRequest = 7224,
  k_EMsgGCGuildSetAccountRoleResponse = 7225,
  k_EMsgGCRequestGuildData = 7226,
  k_EMsgGCGuildData = 7227,
  k_EMsgGCGuildInviteAccountRequest = 7228,
  k_EMsgGCGuildInviteAccountResponse = 7229,
  k_EMsgGCGuildCancelInviteRequest = 7230,
  k_EMsgGCGuildCancelInviteResponse = 7231,
  k_EMsgGCGuildUpdateDetailsRequest = 7232,
  k_EMsgGCGuildUpdateDetailsResponse = 7233,
  k_EMsgGCToGCCanInviteUser = 7234,
  k_EMsgGCToGCCanInviteUserResponse = 7235,
  k_EMsgGCToGCGetUserRank = 7236,
  k_EMsgGCToGCGetUserRankResponse = 7237,
  k_EMsgGCToGCGetTeamRankChange = 7238,
  k_EMsgGCToGCGetTeamRankChangeResponse = 7239,
  k_EMsgGCToGCUpdateTeamStats = 7240,
  k_EMsgGCToGCGetTeamRank = 7241,
  k_EMsgGCToGCGetTeamRankResponse = 7242,
  k_EMsgGCTeamIDByNameRequest = 7245,
  k_EMsgGCTeamIDByNameResponse = 7246,
  k_EMsgGCEditTeam = 7247,
  k_EMsgGCPassportDataRequest = 7248,
  k_EMsgGCPassportDataResponse = 7249,
  k_EMsgGCNotInGuildData = 7251,
  k_EMsgGCPassportVote = 7253,
  k_EMsgGCGuildInviteData = 7254,
  k_EMsgGCToGCGetLeagueAdmin = 7255,
  k_EMsgGCToGCGetLeagueAdminResponse = 7256,
  k_EMsgGCPassportVoteSelection = 7257,
  k_EMsgGCRequestLeaguePrizePool = 7258,
  k_EMsgGCRequestLeaguePrizePoolResponse = 7259,
  k_EMsgGCToGCUpdateOpenGuildPartyRequest = 7261,
  k_EMsgGCToGCUpdateOpenGuildPartyResponse = 7262,
  k_EMsgGCToGCDestroyOpenGuildPartyRequest = 7263,
  k_EMsgGCToGCDestroyOpenGuildPartyResponse = 7264,
  k_EMsgGCGuildUpdateMessage = 7265,
  k_EMsgGCPartySetOpenGuildRequest = 7266,
  k_EMsgGCPartySetOpenGuildResponse = 7267,
  k_EMsgGCGuildOpenPartyRefresh = 7268,
  k_EMsgGCJoinOpenGuildPartyRequest = 7269,
  k_EMsgGCJoinOpenGuildPartyResponse = 7270,
  k_EMsgGCLeaveChatChannel = 7272,
  k_EMsgGCChatMessage = 7273,
  k_EMsgGCGetHeroStandings = 7274,
  k_EMsgGCGetHeroStandingsResponse = 7275,
  k_EMsgGCGuildEditLogoRequest = 7279,
  k_EMsgGCGuildEditLogoResponse = 7280,
  k_EMsgGCGuildmatePracticeLobbyListRequest = 7281,
  k_EMsgGCGuildmatePracticeLobbyListResponse = 7282,
  k_EMsgGCItemEditorReservationsRequest = 7283,
  k_EMsgGCItemEditorReservationsResponse = 7284,
  k_EMsgGCItemEditorReserveItemDef = 7285,
  k_EMsgGCItemEditorReserveItemDefResponse = 7286,
  k_EMsgGCItemEditorReleaseReservation = 7287,
  k_EMsgGCItemEditorReleaseReservationResponse = 7288,
  k_EMsgGCRewardTutorialPrizes = 7289,
  k_EMsgGCLastHitChallengeHighScorePost = 7290,
  k_EMsgGCLastHitChallengeHighScoreRequest = 7291,
  k_EMsgGCLastHitChallengeHighScoreResponse = 7292,
  k_EMsgGCCreateFantasyLeagueRequest = 7293,
  k_EMsgGCCreateFantasyLeagueResponse = 7294,
  k_EMsgGCFantasyLeagueInfoRequest = 7297,
  k_EMsgGCFantasyLeagueInfoResponse = 7298,
  k_EMsgGCFantasyLeagueInfo = 7299,
  k_EMsgGCCreateFantasyTeamRequest = 7300,
  k_EMsgGCCreateFantasyTeamResponse = 7301,
  k_EMsgGCEditFantasyTeamRequest = 7302,
  k_EMsgGCEditFantasyTeamResponse = 7303,
  k_EMsgGCFantasyTeamInfoRequestByFantasyLeagueID = 7304,
  k_EMsgGCFantasyTeamInfoRequestByOwnerAccountID = 7305,
  k_EMsgGCFantasyTeamInfoResponse = 7306,
  k_EMsgGCFantasyTeamInfo = 7307,
  k_EMsgGCFantasyLivePlayerStats = 7308,
  k_EMsgGCFantasyFinalPlayerStats = 7309,
  k_EMsgGCFantasyMatchFinished = 7310,
  k_EMsgGCToGCReloadVersions = 7311,
  k_EMsgGCFantasyTeamScoreRequest = 7312,
  k_EMsgGCFantasyTeamScoreResponse = 7313,
  k_EMsgGCFantasyTeamStandingsRequest = 7314,
  k_EMsgGCFantasyTeamStandingsResponse = 7315,
  k_EMsgGCFantasyPlayerScoreRequest = 7316,
  k_EMsgGCFantasyPlayerScoreResponse = 7317,
  k_EMsgGCFantasyPlayerStandingsRequest = 7318,
  k_EMsgGCFantasyPlayerStandingsResponse = 7319,
  k_EMsgGCFlipLobbyTeams = 7320,
  k_EMsgGCCustomGameCreate = 7321,
  k_EMsgGCFantasyPlayerInfoRequest = 7322,
  k_EMsgGCFantasyPlayerInfoResponse = 7323,
  k_EMsgGCToGCProcessPlayerReportForTarget = 7324,
  k_EMsgGCToGCProcessReportSuccess = 7325,
  k_EMsgGCNotifyAccountFlagsChange = 7326,
  k_EMsgGCSetProfilePrivacy = 7327,
  k_EMsgGCSetProfilePrivacyResponse = 7328,
  k_EMsgGCSteamProfileRequest = 7329,
  k_EMsgGCSteamProfileRequestResponse = 7330,
  k_EMsgGCFantasyLeagueCreateInfoRequest = 7331,
  k_EMsgGCFantasyLeagueCreateInfoResponse = 7332,
  k_EMsgGCFantasyLeagueJoinInfoRequest = 7333,
  k_EMsgGCFantasyLeagueJoinInfoResponse = 7334,
  k_EMsgGCClientIgnoredUser = 7335,
  k_EMsgGCFantasyLeagueCreateRequest = 7336,
  k_EMsgGCFantasyLeagueCreateResponse = 7337,
  k_EMsgGCFantasyTeamCreateRequest = 7338,
  k_EMsgGCFantasyTeamCreateResponse = 7339,
  k_EMsgGCFantasyLeagueFriendJoinListRequest = 7340,
  k_EMsgGCFantasyLeagueFriendJoinListResponse = 7341,
  k_EMsgGCClientSuspended = 7342,
  k_EMsgGCPartyMemberSetCoach = 7343,
  k_EMsgGCFantasyLeagueEditInvitesRequest = 7344,
  k_EMsgGCFantasyLeagueEditInvitesResponse = 7345,
  k_EMsgGCPracticeLobbySetCoach = 7346,
  k_EMsgGCFantasyLeagueEditInfoRequest = 7347,
  k_EMsgGCFantasyLeagueEditInfoResponse = 7348,
  k_EMsgGCFantasyLeagueDraftStatusRequest = 7349,
  k_EMsgGCFantasyLeagueDraftStatus = 7350,
  k_EMsgGCFantasyLeagueDraftPlayerRequest = 7351,
  k_EMsgGCFantasyLeagueDraftPlayerResponse = 7352,
  k_EMsgGCFantasyLeagueMatchupsRequest = 7353,
  k_EMsgGCFantasyLeagueMatchupsResponse = 7354,
  k_EMsgGCFantasyTeamRosterSwapRequest = 7355,
  k_EMsgGCFantasyTeamRosterSwapResponse = 7356,
  k_EMsgGCFantasyTeamRosterRequest = 7357,
  k_EMsgGCFantasyTeamRosterResponse = 7358,
  k_EMsgGCNexonPartnerUpdate = 7359,
  k_EMsgGCToGCProcessPCBangRewardPoints = 7360,
  k_EMsgGCFantasyTeamRosterAddDropRequest = 7361,
  k_EMsgGCFantasyTeamRosterAddDropResponse = 7362,
  k_EMsgPresentedClientTerminateDlg = 7363,
  k_EMsgGCFantasyPlayerHisoricalStatsRequest = 7364,
  k_EMsgGCFantasyPlayerHisoricalStatsResponse = 7365,
  k_EMsgGCPCBangTimedRewardMessage = 7366,
  k_EMsgGCLobbyUpdateBroadcastChannelInfo = 7367,
  k_EMsgGCFantasyTeamTradesRequest = 7368,
  k_EMsgGCFantasyTeamTradesResponse = 7369,
  k_EMsgGCFantasyTeamTradeCancelRequest = 7370,
  k_EMsgGCFantasyTeamTradeCancelResponse = 7371,
  k_EMsgGCToGCGrantTournamentItem = 7372,
  k_EMsgGCProcessFantasyScheduledEvent = 7373,
  k_EMsgGCToGCGrantPCBangRewardItem = 7374,
  k_EMsgGCToGCUpgradeTwitchViewerItems = 7375,
  k_EMsgGCToGCGetLiveMatchAffiliates = 7376,
  k_EMsgGCToGCGetLiveMatchAffiliatesResponse = 7377,
  k_EMsgGCToGCUpdatePlayerPennantCounts = 7378,
  k_EMsgGCToGCGetPlayerPennantCounts = 7379,
  k_EMsgGCToGCGetPlayerPennantCountsResponse = 7380,
  k_EMsgGCGameMatchSignOutPermissionRequest = 7381,
  k_EMsgGCGameMatchSignOutPermissionResponse = 7382,
  k_EMsgDOTAChatChannelMemberUpdate = 7383,
  k_EMsgDOTAAwardEventPoints = 7384,
  k_EMsgDOTARedeemEventPrize = 7385,
  k_EMsgDOTARedeemEventPrizeResponse = 7386,
  k_EMsgDOTAGetEventPoints = 7387,
  k_EMsgDOTAGetEventPointsResponse = 7388,
  k_EMsgGCToGCGrantEventReward = 7389,
  k_EMsgGCToGCSignoutAwardEventPoints = 7390,
  k_EMsgDOTASendFriendRecruits = 7393,
  k_EMsgDOTAFriendRecruitsRequest = 7394,
  k_EMsgDOTAFriendRecruitsResponse = 7395,
  k_EMsgDOTAFriendRecruitInviteAcceptDecline = 7396,
  k_EMsgGCPartyLeaderWatchGamePrompt = 7397,
  k_EMsgDOTAFrostivusTimeElapsed = 7398,
  k_EMsgGCToGCGrantEarnedLicense = 7399,
  k_EMsgDOTAExchangeEventPoints = 7400,
  k_EMsgDOTAExchangeEventPointsResponse = 7401,
  k_EMsgDOTALiveLeagueGameUpdate = 7402,
  k_EMsgDOTAChatGetUserList = 7403,
  k_EMsgDOTAChatGetUserListResponse = 7404,
  k_EMsgGCCompendiumSetSelection = 7405,
  k_EMsgGCCompendiumDataRequest = 7406,
  k_EMsgGCCompendiumDataResponse = 7407,
  k_EMsgDOTAGetPlayerMatchHistory = 7408,
  k_EMsgDOTAGetPlayerMatchHistoryResponse = 7409,
  k_EMsgGCToGCMatchmakingAddParty = 7410,
  k_EMsgGCToGCMatchmakingRemoveParty = 7411,
  k_EMsgGCToGCMatchmakingRemoveAllParties = 7412,
  k_EMsgGCToGCMatchmakingMatchFound = 7413,
  k_EMsgGCToGCUpdateMatchManagementStats = 7414,
  k_EMsgGCToGCUpdateMatchmakingStats = 7415,
  k_EMsgGCToServerPingRequest = 7416,
  k_EMsgGCToServerPingResponse = 7417,
  k_EMsgGCToServerConsoleCommand = 7418,
  k_EMsgGCToGCUpdateLiveLeagueGameInfo = 7420,
  k_EMsgGCNewBloomModeState = 7421,
  k_EMsgGCNewBloomModeStateResponse = 7422,
  k_EMsgGCMakeOffering = 7423,
  k_EMsgGCRequestOfferings = 7424,
  k_EMsgGCRequestOfferingsResponse = 7425,
  k_EMsgGCToGCProcessMatchLeaver = 7426,
  k_EMsgGCNotificationsRequest = 7427,
  k_EMsgGCNotificationsResponse = 7428,
  k_EMsgGCToGCModifyNotification = 7429,
  k_EMsgGCToGCSetNewNotifications = 7430,
  k_EMsgGCToGCSetIsLeagueAdmin = 7431,
  k_EMsgGCLeagueAdminState = 7432,
  k_EMsgGCToGCSendLeagueAdminState = 7433,
  k_EMsgGCLeagueAdminList = 7434,
  k_EMsgGCNotificationsDismissRequest = 7435,
  k_EMsgGCFantasyMessageAdd = 7436,
  k_EMsgGCFantasyMessagesRequest = 7437,
  k_EMsgGCFantasyMessagesResponse = 7438,
  k_EMsgGCFantasyScheduledMatchesRequest = 7439,
  k_EMsgGCFantasyScheduledMatchesResponse = 7440,
  k_EMsgGCToGCGrantLeagueAccess = 7441,
  k_EMsgGCToGCGrantFantasyAccess = 7442,
  k_EMsgGCEventGameCreate = 7443,
  k_EMsgGCPerfectWorldUserLookupRequest = 7444,
  k_EMsgGCPerfectWorldUserLookupResponse = 7445,
  k_EMsgGCToGCIncrementRecruitmentSDO = 7446,
  k_EMsgGCToGCIncrementRecruitmentLevel = 7447,
  k_EMsgGCFantasyRemoveOwner = 7448,
  k_EMsgGCFantasyRemoveOwnerResponse = 7449,
  k_EMsgGCRequestBatchPlayerResources = 7450,
  k_EMsgGCRequestBatchPlayerResourcesResponse = 7451,
  k_EMsgGCToGCSendUpdateLeagues = 7452,
  k_EMsgGCCompendiumSetSelectionResponse = 7453,
  k_EMsgGCPlayerInfoRequest = 7454,
  k_EMsgGCPlayerInfo = 7455,
  k_EMsgGCPlayerInfoSubmit = 7456,
  k_EMsgGCPlayerInfoSubmitResponse = 7457,
  k_EMsgGCToGCGetAccountLevel = 7458,
  k_EMsgGCToGCGetAccountLevelResponse = 7459,
  k_EMsgGCToGCGetAccountPartner = 7460,
  k_EMsgGCToGCGetAccountPartnerResponse = 7461,
  k_EMsgGCToGCGetAccountProfile = 7462,
  k_EMsgGCToGCGetAccountProfileResponse = 7463,
  k_EMsgGCDev_GrantWarKill = 8001
};
bool EDOTAGCMsg_IsValid(int value);
const EDOTAGCMsg EDOTAGCMsg_MIN = k_EMsgGCDOTABase;
const EDOTAGCMsg EDOTAGCMsg_MAX = k_EMsgGCDev_GrantWarKill;
const int EDOTAGCMsg_ARRAYSIZE = EDOTAGCMsg_MAX + 1;

const ::google::protobuf::EnumDescriptor* EDOTAGCMsg_descriptor();
inline const ::std::string& EDOTAGCMsg_Name(EDOTAGCMsg value) {
  return ::google::protobuf::internal::NameOfEnum(
    EDOTAGCMsg_descriptor(), value);
}
inline bool EDOTAGCMsg_Parse(
    const ::std::string& name, EDOTAGCMsg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EDOTAGCMsg>(
    EDOTAGCMsg_descriptor(), name, value);
}
enum DOTA_GameMode {
  DOTA_GAMEMODE_NONE = 0,
  DOTA_GAMEMODE_AP = 1,
  DOTA_GAMEMODE_CM = 2,
  DOTA_GAMEMODE_RD = 3,
  DOTA_GAMEMODE_SD = 4,
  DOTA_GAMEMODE_AR = 5,
  DOTA_GAMEMODE_INTRO = 6,
  DOTA_GAMEMODE_HW = 7,
  DOTA_GAMEMODE_REVERSE_CM = 8,
  DOTA_GAMEMODE_XMAS = 9,
  DOTA_GAMEMODE_TUTORIAL = 10,
  DOTA_GAMEMODE_MO = 11,
  DOTA_GAMEMODE_LP = 12,
  DOTA_GAMEMODE_POOL1 = 13,
  DOTA_GAMEMODE_FH = 14,
  DOTA_GAMEMODE_CUSTOM = 15,
  DOTA_GAMEMODE_CD = 16,
  DOTA_GAMEMODE_BD = 17,
  DOTA_GAMEMODE_ABILITY_DRAFT = 18,
  DOTA_GAMEMODE_EVENT = 19
};
bool DOTA_GameMode_IsValid(int value);
const DOTA_GameMode DOTA_GameMode_MIN = DOTA_GAMEMODE_NONE;
const DOTA_GameMode DOTA_GameMode_MAX = DOTA_GAMEMODE_EVENT;
const int DOTA_GameMode_ARRAYSIZE = DOTA_GameMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTA_GameMode_descriptor();
inline const ::std::string& DOTA_GameMode_Name(DOTA_GameMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTA_GameMode_descriptor(), value);
}
inline bool DOTA_GameMode_Parse(
    const ::std::string& name, DOTA_GameMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTA_GameMode>(
    DOTA_GameMode_descriptor(), name, value);
}
enum DOTA_GameState {
  DOTA_GAMERULES_STATE_INIT = 0,
  DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD = 1,
  DOTA_GAMERULES_STATE_HERO_SELECTION = 2,
  DOTA_GAMERULES_STATE_STRATEGY_TIME = 3,
  DOTA_GAMERULES_STATE_PRE_GAME = 4,
  DOTA_GAMERULES_STATE_GAME_IN_PROGRESS = 5,
  DOTA_GAMERULES_STATE_POST_GAME = 6,
  DOTA_GAMERULES_STATE_DISCONNECT = 7,
  DOTA_GAMERULES_STATE_LAST = 8
};
bool DOTA_GameState_IsValid(int value);
const DOTA_GameState DOTA_GameState_MIN = DOTA_GAMERULES_STATE_INIT;
const DOTA_GameState DOTA_GameState_MAX = DOTA_GAMERULES_STATE_LAST;
const int DOTA_GameState_ARRAYSIZE = DOTA_GameState_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTA_GameState_descriptor();
inline const ::std::string& DOTA_GameState_Name(DOTA_GameState value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTA_GameState_descriptor(), value);
}
inline bool DOTA_GameState_Parse(
    const ::std::string& name, DOTA_GameState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTA_GameState>(
    DOTA_GameState_descriptor(), name, value);
}
enum DOTA_GC_TEAM {
  DOTA_GC_TEAM_GOOD_GUYS = 0,
  DOTA_GC_TEAM_BAD_GUYS = 1,
  DOTA_GC_TEAM_BROADCASTER = 2,
  DOTA_GC_TEAM_SPECTATOR = 3,
  DOTA_GC_TEAM_PLAYER_POOL = 4,
  DOTA_GC_TEAM_NOTEAM = 5
};
bool DOTA_GC_TEAM_IsValid(int value);
const DOTA_GC_TEAM DOTA_GC_TEAM_MIN = DOTA_GC_TEAM_GOOD_GUYS;
const DOTA_GC_TEAM DOTA_GC_TEAM_MAX = DOTA_GC_TEAM_NOTEAM;
const int DOTA_GC_TEAM_ARRAYSIZE = DOTA_GC_TEAM_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTA_GC_TEAM_descriptor();
inline const ::std::string& DOTA_GC_TEAM_Name(DOTA_GC_TEAM value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTA_GC_TEAM_descriptor(), value);
}
inline bool DOTA_GC_TEAM_Parse(
    const ::std::string& name, DOTA_GC_TEAM* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTA_GC_TEAM>(
    DOTA_GC_TEAM_descriptor(), name, value);
}
enum DOTA_CM_PICK {
  DOTA_CM_RANDOM = 0,
  DOTA_CM_GOOD_GUYS = 1,
  DOTA_CM_BAD_GUYS = 2
};
bool DOTA_CM_PICK_IsValid(int value);
const DOTA_CM_PICK DOTA_CM_PICK_MIN = DOTA_CM_RANDOM;
const DOTA_CM_PICK DOTA_CM_PICK_MAX = DOTA_CM_BAD_GUYS;
const int DOTA_CM_PICK_ARRAYSIZE = DOTA_CM_PICK_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTA_CM_PICK_descriptor();
inline const ::std::string& DOTA_CM_PICK_Name(DOTA_CM_PICK value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTA_CM_PICK_descriptor(), value);
}
inline bool DOTA_CM_PICK_Parse(
    const ::std::string& name, DOTA_CM_PICK* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTA_CM_PICK>(
    DOTA_CM_PICK_descriptor(), name, value);
}
enum DOTAConnectionState_t {
  DOTA_CONNECTION_STATE_UNKNOWN = 0,
  DOTA_CONNECTION_STATE_NOT_YET_CONNECTED = 1,
  DOTA_CONNECTION_STATE_CONNECTED = 2,
  DOTA_CONNECTION_STATE_DISCONNECTED = 3,
  DOTA_CONNECTION_STATE_ABANDONED = 4,
  DOTA_CONNECTION_STATE_LOADING = 5,
  DOTA_CONNECTION_STATE_FAILED = 6
};
bool DOTAConnectionState_t_IsValid(int value);
const DOTAConnectionState_t DOTAConnectionState_t_MIN = DOTA_CONNECTION_STATE_UNKNOWN;
const DOTAConnectionState_t DOTAConnectionState_t_MAX = DOTA_CONNECTION_STATE_FAILED;
const int DOTAConnectionState_t_ARRAYSIZE = DOTAConnectionState_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTAConnectionState_t_descriptor();
inline const ::std::string& DOTAConnectionState_t_Name(DOTAConnectionState_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTAConnectionState_t_descriptor(), value);
}
inline bool DOTAConnectionState_t_Parse(
    const ::std::string& name, DOTAConnectionState_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTAConnectionState_t>(
    DOTAConnectionState_t_descriptor(), name, value);
}
enum DOTALeaverStatus_t {
  DOTA_LEAVER_NONE = 0,
  DOTA_LEAVER_DISCONNECTED = 1,
  DOTA_LEAVER_DISCONNECTED_TOO_LONG = 2,
  DOTA_LEAVER_ABANDONED = 3,
  DOTA_LEAVER_AFK = 4,
  DOTA_LEAVER_NEVER_CONNECTED = 5,
  DOTA_LEAVER_NEVER_CONNECTED_TOO_LONG = 6,
  DOTA_LEAVER_FAILED_TO_READY_UP = 7,
  DOTA_LEAVER_DECLINED = 8
};
bool DOTALeaverStatus_t_IsValid(int value);
const DOTALeaverStatus_t DOTALeaverStatus_t_MIN = DOTA_LEAVER_NONE;
const DOTALeaverStatus_t DOTALeaverStatus_t_MAX = DOTA_LEAVER_DECLINED;
const int DOTALeaverStatus_t_ARRAYSIZE = DOTALeaverStatus_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTALeaverStatus_t_descriptor();
inline const ::std::string& DOTALeaverStatus_t_Name(DOTALeaverStatus_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTALeaverStatus_t_descriptor(), value);
}
inline bool DOTALeaverStatus_t_Parse(
    const ::std::string& name, DOTALeaverStatus_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTALeaverStatus_t>(
    DOTALeaverStatus_t_descriptor(), name, value);
}
enum DOTALowPriorityBanType {
  DOTA_LOW_PRIORITY_BAN_ABANDON = 0,
  DOTA_LOW_PRIORITY_BAN_REPORTS = 1,
  DOTA_LOW_PRIORITY_BAN_SECONDARY_ABANDON = 2
};
bool DOTALowPriorityBanType_IsValid(int value);
const DOTALowPriorityBanType DOTALowPriorityBanType_MIN = DOTA_LOW_PRIORITY_BAN_ABANDON;
const DOTALowPriorityBanType DOTALowPriorityBanType_MAX = DOTA_LOW_PRIORITY_BAN_SECONDARY_ABANDON;
const int DOTALowPriorityBanType_ARRAYSIZE = DOTALowPriorityBanType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTALowPriorityBanType_descriptor();
inline const ::std::string& DOTALowPriorityBanType_Name(DOTALowPriorityBanType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTALowPriorityBanType_descriptor(), value);
}
inline bool DOTALowPriorityBanType_Parse(
    const ::std::string& name, DOTALowPriorityBanType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTALowPriorityBanType>(
    DOTALowPriorityBanType_descriptor(), name, value);
}
enum DOTALobbyReadyState {
  DOTALobbyReadyState_UNDECLARED = 0,
  DOTALobbyReadyState_ACCEPTED = 1,
  DOTALobbyReadyState_DECLINED = 2
};
bool DOTALobbyReadyState_IsValid(int value);
const DOTALobbyReadyState DOTALobbyReadyState_MIN = DOTALobbyReadyState_UNDECLARED;
const DOTALobbyReadyState DOTALobbyReadyState_MAX = DOTALobbyReadyState_DECLINED;
const int DOTALobbyReadyState_ARRAYSIZE = DOTALobbyReadyState_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTALobbyReadyState_descriptor();
inline const ::std::string& DOTALobbyReadyState_Name(DOTALobbyReadyState value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTALobbyReadyState_descriptor(), value);
}
inline bool DOTALobbyReadyState_Parse(
    const ::std::string& name, DOTALobbyReadyState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTALobbyReadyState>(
    DOTALobbyReadyState_descriptor(), name, value);
}
enum DOTAGameVersion {
  GAME_VERSION_CURRENT = 0,
  GAME_VERSION_STABLE = 1
};
bool DOTAGameVersion_IsValid(int value);
const DOTAGameVersion DOTAGameVersion_MIN = GAME_VERSION_CURRENT;
const DOTAGameVersion DOTAGameVersion_MAX = GAME_VERSION_STABLE;
const int DOTAGameVersion_ARRAYSIZE = DOTAGameVersion_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTAGameVersion_descriptor();
inline const ::std::string& DOTAGameVersion_Name(DOTAGameVersion value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTAGameVersion_descriptor(), value);
}
inline bool DOTAGameVersion_Parse(
    const ::std::string& name, DOTAGameVersion* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTAGameVersion>(
    DOTAGameVersion_descriptor(), name, value);
}
enum DOTAJoinLobbyResult {
  DOTA_JOIN_RESULT_SUCCESS = 0,
  DOTA_JOIN_RESULT_ALREADY_IN_GAME = 1,
  DOTA_JOIN_RESULT_INVALID_LOBBY = 2,
  DOTA_JOIN_RESULT_INCORRECT_PASSWORD = 3,
  DOTA_JOIN_RESULT_ACCESS_DENIED = 4,
  DOTA_JOIN_RESULT_GENERIC_ERROR = 5,
  DOTA_JOIN_RESULT_INCORRECT_VERSION = 6,
  DOTA_JOIN_RESULT_IN_TEAM_PARTY = 7
};
bool DOTAJoinLobbyResult_IsValid(int value);
const DOTAJoinLobbyResult DOTAJoinLobbyResult_MIN = DOTA_JOIN_RESULT_SUCCESS;
const DOTAJoinLobbyResult DOTAJoinLobbyResult_MAX = DOTA_JOIN_RESULT_IN_TEAM_PARTY;
const int DOTAJoinLobbyResult_ARRAYSIZE = DOTAJoinLobbyResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTAJoinLobbyResult_descriptor();
inline const ::std::string& DOTAJoinLobbyResult_Name(DOTAJoinLobbyResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTAJoinLobbyResult_descriptor(), value);
}
inline bool DOTAJoinLobbyResult_Parse(
    const ::std::string& name, DOTAJoinLobbyResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTAJoinLobbyResult>(
    DOTAJoinLobbyResult_descriptor(), name, value);
}
enum DOTAMatchVote {
  DOTAMatchVote_INVALID = 0,
  DOTAMatchVote_POSITIVE = 1,
  DOTAMatchVote_NEGATIVE = 2
};
bool DOTAMatchVote_IsValid(int value);
const DOTAMatchVote DOTAMatchVote_MIN = DOTAMatchVote_INVALID;
const DOTAMatchVote DOTAMatchVote_MAX = DOTAMatchVote_NEGATIVE;
const int DOTAMatchVote_ARRAYSIZE = DOTAMatchVote_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTAMatchVote_descriptor();
inline const ::std::string& DOTAMatchVote_Name(DOTAMatchVote value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTAMatchVote_descriptor(), value);
}
inline bool DOTAMatchVote_Parse(
    const ::std::string& name, DOTAMatchVote* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTAMatchVote>(
    DOTAMatchVote_descriptor(), name, value);
}
enum DOTA_LobbyMemberXPBonus {
  DOTA_LobbyMemberXPBonus_DEFAULT = 0,
  DOTA_LobbyMemberXPBonus_BATTLE_BOOSTER = 1,
  DOTA_LobbyMemberXPBonus_SHARE_BONUS = 2,
  DOTA_LobbyMemberXPBonus_PARTY = 3,
  DOTA_LobbyMemberXPBonus_RECRUITMENT = 4,
  DOTA_LobbyMemberXPBonus_PCBANG = 5
};
bool DOTA_LobbyMemberXPBonus_IsValid(int value);
const DOTA_LobbyMemberXPBonus DOTA_LobbyMemberXPBonus_MIN = DOTA_LobbyMemberXPBonus_DEFAULT;
const DOTA_LobbyMemberXPBonus DOTA_LobbyMemberXPBonus_MAX = DOTA_LobbyMemberXPBonus_PCBANG;
const int DOTA_LobbyMemberXPBonus_ARRAYSIZE = DOTA_LobbyMemberXPBonus_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTA_LobbyMemberXPBonus_descriptor();
inline const ::std::string& DOTA_LobbyMemberXPBonus_Name(DOTA_LobbyMemberXPBonus value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTA_LobbyMemberXPBonus_descriptor(), value);
}
inline bool DOTA_LobbyMemberXPBonus_Parse(
    const ::std::string& name, DOTA_LobbyMemberXPBonus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTA_LobbyMemberXPBonus>(
    DOTA_LobbyMemberXPBonus_descriptor(), name, value);
}
enum LobbyDotaTVDelay {
  LobbyDotaTV_10 = 0,
  LobbyDotaTV_120 = 1,
  LobbyDotaTV_300 = 2
};
bool LobbyDotaTVDelay_IsValid(int value);
const LobbyDotaTVDelay LobbyDotaTVDelay_MIN = LobbyDotaTV_10;
const LobbyDotaTVDelay LobbyDotaTVDelay_MAX = LobbyDotaTV_300;
const int LobbyDotaTVDelay_ARRAYSIZE = LobbyDotaTVDelay_MAX + 1;

const ::google::protobuf::EnumDescriptor* LobbyDotaTVDelay_descriptor();
inline const ::std::string& LobbyDotaTVDelay_Name(LobbyDotaTVDelay value) {
  return ::google::protobuf::internal::NameOfEnum(
    LobbyDotaTVDelay_descriptor(), value);
}
inline bool LobbyDotaTVDelay_Parse(
    const ::std::string& name, LobbyDotaTVDelay* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LobbyDotaTVDelay>(
    LobbyDotaTVDelay_descriptor(), name, value);
}
enum EDOTAGCSessionNeed {
  k_EDOTAGCSessionNeed_Unknown = 0,
  k_EDOTAGCSessionNeed_UserNoSessionNeeded = 100,
  k_EDOTAGCSessionNeed_UserInOnlineGame = 101,
  k_EDOTAGCSessionNeed_UserInLocalGame = 102,
  k_EDOTAGCSessionNeed_UserInUIWasConnected = 103,
  k_EDOTAGCSessionNeed_UserInUINeverConnected = 104,
  k_EDOTAGCSessionNeed_UserTutorials = 105,
  k_EDOTAGCSessionNeed_GameServerOnline = 200,
  k_EDOTAGCSessionNeed_GameServerLocal = 201,
  k_EDOTAGCSessionNeed_GameServerIdle = 202,
  k_EDOTAGCSessionNeed_GameServerRelay = 203
};
bool EDOTAGCSessionNeed_IsValid(int value);
const EDOTAGCSessionNeed EDOTAGCSessionNeed_MIN = k_EDOTAGCSessionNeed_Unknown;
const EDOTAGCSessionNeed EDOTAGCSessionNeed_MAX = k_EDOTAGCSessionNeed_GameServerRelay;
const int EDOTAGCSessionNeed_ARRAYSIZE = EDOTAGCSessionNeed_MAX + 1;

const ::google::protobuf::EnumDescriptor* EDOTAGCSessionNeed_descriptor();
inline const ::std::string& EDOTAGCSessionNeed_Name(EDOTAGCSessionNeed value) {
  return ::google::protobuf::internal::NameOfEnum(
    EDOTAGCSessionNeed_descriptor(), value);
}
inline bool EDOTAGCSessionNeed_Parse(
    const ::std::string& name, EDOTAGCSessionNeed* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EDOTAGCSessionNeed>(
    EDOTAGCSessionNeed_descriptor(), name, value);
}
enum Fantasy_Roles {
  FANTASY_ROLE_UNDEFINED = 0,
  FANTASY_ROLE_CORE = 1,
  FANTASY_ROLE_SUPPORT = 2
};
bool Fantasy_Roles_IsValid(int value);
const Fantasy_Roles Fantasy_Roles_MIN = FANTASY_ROLE_UNDEFINED;
const Fantasy_Roles Fantasy_Roles_MAX = FANTASY_ROLE_SUPPORT;
const int Fantasy_Roles_ARRAYSIZE = Fantasy_Roles_MAX + 1;

const ::google::protobuf::EnumDescriptor* Fantasy_Roles_descriptor();
inline const ::std::string& Fantasy_Roles_Name(Fantasy_Roles value) {
  return ::google::protobuf::internal::NameOfEnum(
    Fantasy_Roles_descriptor(), value);
}
inline bool Fantasy_Roles_Parse(
    const ::std::string& name, Fantasy_Roles* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Fantasy_Roles>(
    Fantasy_Roles_descriptor(), name, value);
}
enum Fantasy_Team_Slots {
  FANTASY_SLOT_NONE = 0,
  FANTASY_SLOT_CORE = 1,
  FANTASY_SLOT_SUPPORT = 2,
  FANTASY_SLOT_ANY = 3,
  FANTASY_SLOT_BENCH = 4
};
bool Fantasy_Team_Slots_IsValid(int value);
const Fantasy_Team_Slots Fantasy_Team_Slots_MIN = FANTASY_SLOT_NONE;
const Fantasy_Team_Slots Fantasy_Team_Slots_MAX = FANTASY_SLOT_BENCH;
const int Fantasy_Team_Slots_ARRAYSIZE = Fantasy_Team_Slots_MAX + 1;

const ::google::protobuf::EnumDescriptor* Fantasy_Team_Slots_descriptor();
inline const ::std::string& Fantasy_Team_Slots_Name(Fantasy_Team_Slots value) {
  return ::google::protobuf::internal::NameOfEnum(
    Fantasy_Team_Slots_descriptor(), value);
}
inline bool Fantasy_Team_Slots_Parse(
    const ::std::string& name, Fantasy_Team_Slots* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Fantasy_Team_Slots>(
    Fantasy_Team_Slots_descriptor(), name, value);
}
enum Fantasy_Selection_Mode {
  FANTASY_SELECTION_INVALID = 0,
  FANTASY_SELECTION_LOCKED = 1,
  FANTASY_SELECTION_SHUFFLE = 2,
  FANTASY_SELECTION_FREE_PICK = 3,
  FANTASY_SELECTION_ENDED = 4,
  FANTASY_SELECTION_PRE_SEASON = 5,
  FANTASY_SELECTION_PRE_DRAFT = 6,
  FANTASY_SELECTION_DRAFTING = 7,
  FANTASY_SELECTION_REGULAR_SEASON = 8
};
bool Fantasy_Selection_Mode_IsValid(int value);
const Fantasy_Selection_Mode Fantasy_Selection_Mode_MIN = FANTASY_SELECTION_INVALID;
const Fantasy_Selection_Mode Fantasy_Selection_Mode_MAX = FANTASY_SELECTION_REGULAR_SEASON;
const int Fantasy_Selection_Mode_ARRAYSIZE = Fantasy_Selection_Mode_MAX + 1;

const ::google::protobuf::EnumDescriptor* Fantasy_Selection_Mode_descriptor();
inline const ::std::string& Fantasy_Selection_Mode_Name(Fantasy_Selection_Mode value) {
  return ::google::protobuf::internal::NameOfEnum(
    Fantasy_Selection_Mode_descriptor(), value);
}
inline bool Fantasy_Selection_Mode_Parse(
    const ::std::string& name, Fantasy_Selection_Mode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Fantasy_Selection_Mode>(
    Fantasy_Selection_Mode_descriptor(), name, value);
}
enum Fantasy_Matchup_Interval {
  FANTASY_INTERVAL_DAILY = 1,
  FANTASY_INTERVAL_WEEKLY = 2
};
bool Fantasy_Matchup_Interval_IsValid(int value);
const Fantasy_Matchup_Interval Fantasy_Matchup_Interval_MIN = FANTASY_INTERVAL_DAILY;
const Fantasy_Matchup_Interval Fantasy_Matchup_Interval_MAX = FANTASY_INTERVAL_WEEKLY;
const int Fantasy_Matchup_Interval_ARRAYSIZE = Fantasy_Matchup_Interval_MAX + 1;

const ::google::protobuf::EnumDescriptor* Fantasy_Matchup_Interval_descriptor();
inline const ::std::string& Fantasy_Matchup_Interval_Name(Fantasy_Matchup_Interval value) {
  return ::google::protobuf::internal::NameOfEnum(
    Fantasy_Matchup_Interval_descriptor(), value);
}
inline bool Fantasy_Matchup_Interval_Parse(
    const ::std::string& name, Fantasy_Matchup_Interval* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Fantasy_Matchup_Interval>(
    Fantasy_Matchup_Interval_descriptor(), name, value);
}
enum DOTA_TournamentEvents {
  TE_FIRST_BLOOD = 0,
  TE_GAME_END = 1,
  TE_MULTI_KILL = 2,
  TE_HERO_DENY = 3,
  TE_AEGIS_DENY = 4,
  TE_AEGIS_STOLEN = 5,
  TE_GODLIKE = 6,
  TE_COURIER_KILL = 7,
  TE_ECHOSLAM = 8,
  TE_RAPIER = 9,
  TE_EARLY_ROSHAN = 10
};
bool DOTA_TournamentEvents_IsValid(int value);
const DOTA_TournamentEvents DOTA_TournamentEvents_MIN = TE_FIRST_BLOOD;
const DOTA_TournamentEvents DOTA_TournamentEvents_MAX = TE_EARLY_ROSHAN;
const int DOTA_TournamentEvents_ARRAYSIZE = DOTA_TournamentEvents_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTA_TournamentEvents_descriptor();
inline const ::std::string& DOTA_TournamentEvents_Name(DOTA_TournamentEvents value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTA_TournamentEvents_descriptor(), value);
}
inline bool DOTA_TournamentEvents_Parse(
    const ::std::string& name, DOTA_TournamentEvents* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTA_TournamentEvents>(
    DOTA_TournamentEvents_descriptor(), name, value);
}
// ===================================================================

class CSODOTAGameAccountClient : public ::google::protobuf::Message {
 public:
  CSODOTAGameAccountClient();
  virtual ~CSODOTAGameAccountClient();
  
  CSODOTAGameAccountClient(const CSODOTAGameAccountClient& from);
  
  inline CSODOTAGameAccountClient& operator=(const CSODOTAGameAccountClient& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSODOTAGameAccountClient& default_instance();
  
  void Swap(CSODOTAGameAccountClient* other);
  
  // implements Message ----------------------------------------------
  
  CSODOTAGameAccountClient* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSODOTAGameAccountClient& from);
  void MergeFrom(const CSODOTAGameAccountClient& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);
  
  // optional uint32 wins = 3;
  inline bool has_wins() const;
  inline void clear_wins();
  static const int kWinsFieldNumber = 3;
  inline ::google::protobuf::uint32 wins() const;
  inline void set_wins(::google::protobuf::uint32 value);
  
  // optional uint32 losses = 4;
  inline bool has_losses() const;
  inline void clear_losses();
  static const int kLossesFieldNumber = 4;
  inline ::google::protobuf::uint32 losses() const;
  inline void set_losses(::google::protobuf::uint32 value);
  
  // optional uint32 xp = 12;
  inline bool has_xp() const;
  inline void clear_xp();
  static const int kXpFieldNumber = 12;
  inline ::google::protobuf::uint32 xp() const;
  inline void set_xp(::google::protobuf::uint32 value);
  
  // optional uint32 level = 13;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 13;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);
  
  // optional uint32 initial_skill = 14;
  inline bool has_initial_skill() const;
  inline void clear_initial_skill();
  static const int kInitialSkillFieldNumber = 14;
  inline ::google::protobuf::uint32 initial_skill() const;
  inline void set_initial_skill(::google::protobuf::uint32 value);
  
  // optional uint32 leaver_count = 15;
  inline bool has_leaver_count() const;
  inline void clear_leaver_count();
  static const int kLeaverCountFieldNumber = 15;
  inline ::google::protobuf::uint32 leaver_count() const;
  inline void set_leaver_count(::google::protobuf::uint32 value);
  
  // optional uint32 secondary_leaver_count = 58;
  inline bool has_secondary_leaver_count() const;
  inline void clear_secondary_leaver_count();
  static const int kSecondaryLeaverCountFieldNumber = 58;
  inline ::google::protobuf::uint32 secondary_leaver_count() const;
  inline void set_secondary_leaver_count(::google::protobuf::uint32 value);
  
  // optional uint32 low_priority_until_date = 18;
  inline bool has_low_priority_until_date() const;
  inline void clear_low_priority_until_date();
  static const int kLowPriorityUntilDateFieldNumber = 18;
  inline ::google::protobuf::uint32 low_priority_until_date() const;
  inline void set_low_priority_until_date(::google::protobuf::uint32 value);
  
  // optional uint32 prevent_text_chat_until_date = 20;
  inline bool has_prevent_text_chat_until_date() const;
  inline void clear_prevent_text_chat_until_date();
  static const int kPreventTextChatUntilDateFieldNumber = 20;
  inline ::google::protobuf::uint32 prevent_text_chat_until_date() const;
  inline void set_prevent_text_chat_until_date(::google::protobuf::uint32 value);
  
  // optional uint32 prevent_voice_until_date = 21;
  inline bool has_prevent_voice_until_date() const;
  inline void clear_prevent_voice_until_date();
  static const int kPreventVoiceUntilDateFieldNumber = 21;
  inline ::google::protobuf::uint32 prevent_voice_until_date() const;
  inline void set_prevent_voice_until_date(::google::protobuf::uint32 value);
  
  // optional uint32 last_abandoned_game_date = 22;
  inline bool has_last_abandoned_game_date() const;
  inline void clear_last_abandoned_game_date();
  static const int kLastAbandonedGameDateFieldNumber = 22;
  inline ::google::protobuf::uint32 last_abandoned_game_date() const;
  inline void set_last_abandoned_game_date(::google::protobuf::uint32 value);
  
  // optional uint32 last_secondary_abandoned_game_date = 59;
  inline bool has_last_secondary_abandoned_game_date() const;
  inline void clear_last_secondary_abandoned_game_date();
  static const int kLastSecondaryAbandonedGameDateFieldNumber = 59;
  inline ::google::protobuf::uint32 last_secondary_abandoned_game_date() const;
  inline void set_last_secondary_abandoned_game_date(::google::protobuf::uint32 value);
  
  // optional uint32 leaver_penalty_count = 23;
  inline bool has_leaver_penalty_count() const;
  inline void clear_leaver_penalty_count();
  static const int kLeaverPenaltyCountFieldNumber = 23;
  inline ::google::protobuf::uint32 leaver_penalty_count() const;
  inline void set_leaver_penalty_count(::google::protobuf::uint32 value);
  
  // optional uint32 completed_game_streak = 24;
  inline bool has_completed_game_streak() const;
  inline void clear_completed_game_streak();
  static const int kCompletedGameStreakFieldNumber = 24;
  inline ::google::protobuf::uint32 completed_game_streak() const;
  inline void set_completed_game_streak(::google::protobuf::uint32 value);
  
  // optional uint32 teaching = 28;
  inline bool has_teaching() const;
  inline void clear_teaching();
  static const int kTeachingFieldNumber = 28;
  inline ::google::protobuf::uint32 teaching() const;
  inline void set_teaching(::google::protobuf::uint32 value);
  
  // optional uint32 leadership = 29;
  inline bool has_leadership() const;
  inline void clear_leadership();
  static const int kLeadershipFieldNumber = 29;
  inline ::google::protobuf::uint32 leadership() const;
  inline void set_leadership(::google::protobuf::uint32 value);
  
  // optional uint32 friendly = 30;
  inline bool has_friendly() const;
  inline void clear_friendly();
  static const int kFriendlyFieldNumber = 30;
  inline ::google::protobuf::uint32 friendly() const;
  inline void set_friendly(::google::protobuf::uint32 value);
  
  // optional uint32 forgiving = 31;
  inline bool has_forgiving() const;
  inline void clear_forgiving();
  static const int kForgivingFieldNumber = 31;
  inline ::google::protobuf::uint32 forgiving() const;
  inline void set_forgiving(::google::protobuf::uint32 value);
  
  // optional uint32 account_disabled_until_date = 38;
  inline bool has_account_disabled_until_date() const;
  inline void clear_account_disabled_until_date();
  static const int kAccountDisabledUntilDateFieldNumber = 38;
  inline ::google::protobuf::uint32 account_disabled_until_date() const;
  inline void set_account_disabled_until_date(::google::protobuf::uint32 value);
  
  // optional uint32 account_disabled_count = 39;
  inline bool has_account_disabled_count() const;
  inline void clear_account_disabled_count();
  static const int kAccountDisabledCountFieldNumber = 39;
  inline ::google::protobuf::uint32 account_disabled_count() const;
  inline void set_account_disabled_count(::google::protobuf::uint32 value);
  
  // optional uint32 showcase_hero_id = 40;
  inline bool has_showcase_hero_id() const;
  inline void clear_showcase_hero_id();
  static const int kShowcaseHeroIdFieldNumber = 40;
  inline ::google::protobuf::uint32 showcase_hero_id() const;
  inline void set_showcase_hero_id(::google::protobuf::uint32 value);
  
  // optional uint32 match_disabled_until_date = 41;
  inline bool has_match_disabled_until_date() const;
  inline void clear_match_disabled_until_date();
  static const int kMatchDisabledUntilDateFieldNumber = 41;
  inline ::google::protobuf::uint32 match_disabled_until_date() const;
  inline void set_match_disabled_until_date(::google::protobuf::uint32 value);
  
  // optional uint32 match_disabled_count = 42;
  inline bool has_match_disabled_count() const;
  inline void clear_match_disabled_count();
  static const int kMatchDisabledCountFieldNumber = 42;
  inline ::google::protobuf::uint32 match_disabled_count() const;
  inline void set_match_disabled_count(::google::protobuf::uint32 value);
  
  // optional .PartnerAccountType partner_account_type = 44 [default = PARTNER_NONE];
  inline bool has_partner_account_type() const;
  inline void clear_partner_account_type();
  static const int kPartnerAccountTypeFieldNumber = 44;
  inline PartnerAccountType partner_account_type() const;
  inline void set_partner_account_type(PartnerAccountType value);
  
  // optional uint32 partner_account_state = 45;
  inline bool has_partner_account_state() const;
  inline void clear_partner_account_state();
  static const int kPartnerAccountStateFieldNumber = 45;
  inline ::google::protobuf::uint32 partner_account_state() const;
  inline void set_partner_account_state(::google::protobuf::uint32 value);
  
  // optional uint32 shutdownlawterminatetimestamp = 47;
  inline bool has_shutdownlawterminatetimestamp() const;
  inline void clear_shutdownlawterminatetimestamp();
  static const int kShutdownlawterminatetimestampFieldNumber = 47;
  inline ::google::protobuf::uint32 shutdownlawterminatetimestamp() const;
  inline void set_shutdownlawterminatetimestamp(::google::protobuf::uint32 value);
  
  // optional uint32 low_priority_games_remaining = 48;
  inline bool has_low_priority_games_remaining() const;
  inline void clear_low_priority_games_remaining();
  static const int kLowPriorityGamesRemainingFieldNumber = 48;
  inline ::google::protobuf::uint32 low_priority_games_remaining() const;
  inline void set_low_priority_games_remaining(::google::protobuf::uint32 value);
  
  // optional uint32 competitive_rank = 49;
  inline bool has_competitive_rank() const;
  inline void clear_competitive_rank();
  static const int kCompetitiveRankFieldNumber = 49;
  inline ::google::protobuf::uint32 competitive_rank() const;
  inline void set_competitive_rank(::google::protobuf::uint32 value);
  
  // optional uint32 calibration_games_remaining = 51;
  inline bool has_calibration_games_remaining() const;
  inline void clear_calibration_games_remaining();
  static const int kCalibrationGamesRemainingFieldNumber = 51;
  inline ::google::protobuf::uint32 calibration_games_remaining() const;
  inline void set_calibration_games_remaining(::google::protobuf::uint32 value);
  
  // optional uint32 solo_competitive_rank = 52;
  inline bool has_solo_competitive_rank() const;
  inline void clear_solo_competitive_rank();
  static const int kSoloCompetitiveRankFieldNumber = 52;
  inline ::google::protobuf::uint32 solo_competitive_rank() const;
  inline void set_solo_competitive_rank(::google::protobuf::uint32 value);
  
  // optional uint32 solo_calibration_games_remaining = 54;
  inline bool has_solo_calibration_games_remaining() const;
  inline void clear_solo_calibration_games_remaining();
  static const int kSoloCalibrationGamesRemainingFieldNumber = 54;
  inline ::google::protobuf::uint32 solo_calibration_games_remaining() const;
  inline void set_solo_calibration_games_remaining(::google::protobuf::uint32 value);
  
  // optional uint32 recruitment_level = 55;
  inline bool has_recruitment_level() const;
  inline void clear_recruitment_level();
  static const int kRecruitmentLevelFieldNumber = 55;
  inline ::google::protobuf::uint32 recruitment_level() const;
  inline void set_recruitment_level(::google::protobuf::uint32 value);
  
  // optional bool has_new_notifications = 56;
  inline bool has_has_new_notifications() const;
  inline void clear_has_new_notifications();
  static const int kHasNewNotificationsFieldNumber = 56;
  inline bool has_new_notifications() const;
  inline void set_has_new_notifications(bool value);
  
  // optional bool is_league_admin = 57;
  inline bool has_is_league_admin() const;
  inline void clear_is_league_admin();
  static const int kIsLeagueAdminFieldNumber = 57;
  inline bool is_league_admin() const;
  inline void set_is_league_admin(bool value);
  
  // optional uint32 casual_games_played = 60;
  inline bool has_casual_games_played() const;
  inline void clear_casual_games_played();
  static const int kCasualGamesPlayedFieldNumber = 60;
  inline ::google::protobuf::uint32 casual_games_played() const;
  inline void set_casual_games_played(::google::protobuf::uint32 value);
  
  // optional uint32 solo_competitive_games_played = 61;
  inline bool has_solo_competitive_games_played() const;
  inline void clear_solo_competitive_games_played();
  static const int kSoloCompetitiveGamesPlayedFieldNumber = 61;
  inline ::google::protobuf::uint32 solo_competitive_games_played() const;
  inline void set_solo_competitive_games_played(::google::protobuf::uint32 value);
  
  // optional uint32 party_competitive_games_played = 62;
  inline bool has_party_competitive_games_played() const;
  inline void clear_party_competitive_games_played();
  static const int kPartyCompetitiveGamesPlayedFieldNumber = 62;
  inline ::google::protobuf::uint32 party_competitive_games_played() const;
  inline void set_party_competitive_games_played(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CSODOTAGameAccountClient)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_wins();
  inline void clear_has_wins();
  inline void set_has_losses();
  inline void clear_has_losses();
  inline void set_has_xp();
  inline void clear_has_xp();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_initial_skill();
  inline void clear_has_initial_skill();
  inline void set_has_leaver_count();
  inline void clear_has_leaver_count();
  inline void set_has_secondary_leaver_count();
  inline void clear_has_secondary_leaver_count();
  inline void set_has_low_priority_until_date();
  inline void clear_has_low_priority_until_date();
  inline void set_has_prevent_text_chat_until_date();
  inline void clear_has_prevent_text_chat_until_date();
  inline void set_has_prevent_voice_until_date();
  inline void clear_has_prevent_voice_until_date();
  inline void set_has_last_abandoned_game_date();
  inline void clear_has_last_abandoned_game_date();
  inline void set_has_last_secondary_abandoned_game_date();
  inline void clear_has_last_secondary_abandoned_game_date();
  inline void set_has_leaver_penalty_count();
  inline void clear_has_leaver_penalty_count();
  inline void set_has_completed_game_streak();
  inline void clear_has_completed_game_streak();
  inline void set_has_teaching();
  inline void clear_has_teaching();
  inline void set_has_leadership();
  inline void clear_has_leadership();
  inline void set_has_friendly();
  inline void clear_has_friendly();
  inline void set_has_forgiving();
  inline void clear_has_forgiving();
  inline void set_has_account_disabled_until_date();
  inline void clear_has_account_disabled_until_date();
  inline void set_has_account_disabled_count();
  inline void clear_has_account_disabled_count();
  inline void set_has_showcase_hero_id();
  inline void clear_has_showcase_hero_id();
  inline void set_has_match_disabled_until_date();
  inline void clear_has_match_disabled_until_date();
  inline void set_has_match_disabled_count();
  inline void clear_has_match_disabled_count();
  inline void set_has_partner_account_type();
  inline void clear_has_partner_account_type();
  inline void set_has_partner_account_state();
  inline void clear_has_partner_account_state();
  inline void set_has_shutdownlawterminatetimestamp();
  inline void clear_has_shutdownlawterminatetimestamp();
  inline void set_has_low_priority_games_remaining();
  inline void clear_has_low_priority_games_remaining();
  inline void set_has_competitive_rank();
  inline void clear_has_competitive_rank();
  inline void set_has_calibration_games_remaining();
  inline void clear_has_calibration_games_remaining();
  inline void set_has_solo_competitive_rank();
  inline void clear_has_solo_competitive_rank();
  inline void set_has_solo_calibration_games_remaining();
  inline void clear_has_solo_calibration_games_remaining();
  inline void set_has_recruitment_level();
  inline void clear_has_recruitment_level();
  inline void set_has_has_new_notifications();
  inline void clear_has_has_new_notifications();
  inline void set_has_is_league_admin();
  inline void clear_has_is_league_admin();
  inline void set_has_casual_games_played();
  inline void clear_has_casual_games_played();
  inline void set_has_solo_competitive_games_played();
  inline void clear_has_solo_competitive_games_played();
  inline void set_has_party_competitive_games_played();
  inline void clear_has_party_competitive_games_played();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 wins_;
  ::google::protobuf::uint32 losses_;
  ::google::protobuf::uint32 xp_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 initial_skill_;
  ::google::protobuf::uint32 leaver_count_;
  ::google::protobuf::uint32 secondary_leaver_count_;
  ::google::protobuf::uint32 low_priority_until_date_;
  ::google::protobuf::uint32 prevent_text_chat_until_date_;
  ::google::protobuf::uint32 prevent_voice_until_date_;
  ::google::protobuf::uint32 last_abandoned_game_date_;
  ::google::protobuf::uint32 last_secondary_abandoned_game_date_;
  ::google::protobuf::uint32 leaver_penalty_count_;
  ::google::protobuf::uint32 completed_game_streak_;
  ::google::protobuf::uint32 teaching_;
  ::google::protobuf::uint32 leadership_;
  ::google::protobuf::uint32 friendly_;
  ::google::protobuf::uint32 forgiving_;
  ::google::protobuf::uint32 account_disabled_until_date_;
  ::google::protobuf::uint32 account_disabled_count_;
  ::google::protobuf::uint32 showcase_hero_id_;
  ::google::protobuf::uint32 match_disabled_until_date_;
  ::google::protobuf::uint32 match_disabled_count_;
  int partner_account_type_;
  ::google::protobuf::uint32 partner_account_state_;
  ::google::protobuf::uint32 shutdownlawterminatetimestamp_;
  ::google::protobuf::uint32 low_priority_games_remaining_;
  ::google::protobuf::uint32 competitive_rank_;
  ::google::protobuf::uint32 calibration_games_remaining_;
  ::google::protobuf::uint32 solo_competitive_rank_;
  ::google::protobuf::uint32 solo_calibration_games_remaining_;
  ::google::protobuf::uint32 recruitment_level_;
  bool has_new_notifications_;
  bool is_league_admin_;
  ::google::protobuf::uint32 casual_games_played_;
  ::google::protobuf::uint32 solo_competitive_games_played_;
  ::google::protobuf::uint32 party_competitive_games_played_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(38 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CSODOTAGameAccountClient* default_instance_;
};
// -------------------------------------------------------------------

class CSODOTAPartyMember : public ::google::protobuf::Message {
 public:
  CSODOTAPartyMember();
  virtual ~CSODOTAPartyMember();
  
  CSODOTAPartyMember(const CSODOTAPartyMember& from);
  
  inline CSODOTAPartyMember& operator=(const CSODOTAPartyMember& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSODOTAPartyMember& default_instance();
  
  void Swap(CSODOTAPartyMember* other);
  
  // implements Message ----------------------------------------------
  
  CSODOTAPartyMember* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSODOTAPartyMember& from);
  void MergeFrom(const CSODOTAPartyMember& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .PartnerAccountType partner_type = 1 [default = PARTNER_NONE];
  inline bool has_partner_type() const;
  inline void clear_partner_type();
  static const int kPartnerTypeFieldNumber = 1;
  inline PartnerAccountType partner_type() const;
  inline void set_partner_type(PartnerAccountType value);
  
  // optional bool is_coach = 2;
  inline bool has_is_coach() const;
  inline void clear_is_coach();
  static const int kIsCoachFieldNumber = 2;
  inline bool is_coach() const;
  inline void set_is_coach(bool value);
  
  // @@protoc_insertion_point(class_scope:CSODOTAPartyMember)
 private:
  inline void set_has_partner_type();
  inline void clear_has_partner_type();
  inline void set_has_is_coach();
  inline void clear_has_is_coach();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int partner_type_;
  bool is_coach_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CSODOTAPartyMember* default_instance_;
};
// -------------------------------------------------------------------

class CSODOTAParty : public ::google::protobuf::Message {
 public:
  CSODOTAParty();
  virtual ~CSODOTAParty();
  
  CSODOTAParty(const CSODOTAParty& from);
  
  inline CSODOTAParty& operator=(const CSODOTAParty& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSODOTAParty& default_instance();
  
  void Swap(CSODOTAParty* other);
  
  // implements Message ----------------------------------------------
  
  CSODOTAParty* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSODOTAParty& from);
  void MergeFrom(const CSODOTAParty& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CSODOTAParty_State State;
  static const State UI = CSODOTAParty_State_UI;
  static const State FINDING_MATCH = CSODOTAParty_State_FINDING_MATCH;
  static const State IN_MATCH = CSODOTAParty_State_IN_MATCH;
  static inline bool State_IsValid(int value) {
    return CSODOTAParty_State_IsValid(value);
  }
  static const State State_MIN =
    CSODOTAParty_State_State_MIN;
  static const State State_MAX =
    CSODOTAParty_State_State_MAX;
  static const int State_ARRAYSIZE =
    CSODOTAParty_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return CSODOTAParty_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return CSODOTAParty_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return CSODOTAParty_State_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional uint64 party_id = 1;
  inline bool has_party_id() const;
  inline void clear_party_id();
  static const int kPartyIdFieldNumber = 1;
  inline ::google::protobuf::uint64 party_id() const;
  inline void set_party_id(::google::protobuf::uint64 value);
  
  // optional fixed64 leader_id = 2;
  inline bool has_leader_id() const;
  inline void clear_leader_id();
  static const int kLeaderIdFieldNumber = 2;
  inline ::google::protobuf::uint64 leader_id() const;
  inline void set_leader_id(::google::protobuf::uint64 value);
  
  // repeated fixed64 member_ids = 3;
  inline int member_ids_size() const;
  inline void clear_member_ids();
  static const int kMemberIdsFieldNumber = 3;
  inline ::google::protobuf::uint64 member_ids(int index) const;
  inline void set_member_ids(int index, ::google::protobuf::uint64 value);
  inline void add_member_ids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      member_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_member_ids();
  
  // optional uint32 game_modes = 4;
  inline bool has_game_modes() const;
  inline void clear_game_modes();
  static const int kGameModesFieldNumber = 4;
  inline ::google::protobuf::uint32 game_modes() const;
  inline void set_game_modes(::google::protobuf::uint32 value);
  
  // repeated fixed64 pending_invites = 5;
  inline int pending_invites_size() const;
  inline void clear_pending_invites();
  static const int kPendingInvitesFieldNumber = 5;
  inline ::google::protobuf::uint64 pending_invites(int index) const;
  inline void set_pending_invites(int index, ::google::protobuf::uint64 value);
  inline void add_pending_invites(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      pending_invites() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_pending_invites();
  
  // optional .CSODOTAParty.State state = 6 [default = UI];
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 6;
  inline ::CSODOTAParty_State state() const;
  inline void set_state(::CSODOTAParty_State value);
  
  // optional uint32 effective_started_matchmaking_time = 7;
  inline bool has_effective_started_matchmaking_time() const;
  inline void clear_effective_started_matchmaking_time();
  static const int kEffectiveStartedMatchmakingTimeFieldNumber = 7;
  inline ::google::protobuf::uint32 effective_started_matchmaking_time() const;
  inline void set_effective_started_matchmaking_time(::google::protobuf::uint32 value);
  
  // optional uint32 raw_started_matchmaking_time = 32;
  inline bool has_raw_started_matchmaking_time() const;
  inline void clear_raw_started_matchmaking_time();
  static const int kRawStartedMatchmakingTimeFieldNumber = 32;
  inline ::google::protobuf::uint32 raw_started_matchmaking_time() const;
  inline void set_raw_started_matchmaking_time(::google::protobuf::uint32 value);
  
  // optional uint32 attempt_start_time = 33;
  inline bool has_attempt_start_time() const;
  inline void clear_attempt_start_time();
  static const int kAttemptStartTimeFieldNumber = 33;
  inline ::google::protobuf::uint32 attempt_start_time() const;
  inline void set_attempt_start_time(::google::protobuf::uint32 value);
  
  // optional uint32 attempt_num = 34;
  inline bool has_attempt_num() const;
  inline void clear_attempt_num();
  static const int kAttemptNumFieldNumber = 34;
  inline ::google::protobuf::uint32 attempt_num() const;
  inline void set_attempt_num(::google::protobuf::uint32 value);
  
  // optional uint32 matchgroups = 11;
  inline bool has_matchgroups() const;
  inline void clear_matchgroups();
  static const int kMatchgroupsFieldNumber = 11;
  inline ::google::protobuf::uint32 matchgroups() const;
  inline void set_matchgroups(::google::protobuf::uint32 value);
  
  // optional uint32 low_priority_account_id = 19;
  inline bool has_low_priority_account_id() const;
  inline void clear_low_priority_account_id();
  static const int kLowPriorityAccountIdFieldNumber = 19;
  inline ::google::protobuf::uint32 low_priority_account_id() const;
  inline void set_low_priority_account_id(::google::protobuf::uint32 value);
  
  // optional .MatchType match_type = 21 [default = MATCH_TYPE_CASUAL];
  inline bool has_match_type() const;
  inline void clear_match_type();
  static const int kMatchTypeFieldNumber = 21;
  inline MatchType match_type() const;
  inline void set_match_type(MatchType value);
  
  // optional .DOTABotDifficulty bot_difficulty = 22 [default = BOT_DIFFICULTY_PASSIVE];
  inline bool has_bot_difficulty() const;
  inline void clear_bot_difficulty();
  static const int kBotDifficultyFieldNumber = 22;
  inline DOTABotDifficulty bot_difficulty() const;
  inline void set_bot_difficulty(DOTABotDifficulty value);
  
  // optional uint32 team_id = 23;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 23;
  inline ::google::protobuf::uint32 team_id() const;
  inline void set_team_id(::google::protobuf::uint32 value);
  
  // optional uint32 match_disabled_until_date = 24;
  inline bool has_match_disabled_until_date() const;
  inline void clear_match_disabled_until_date();
  static const int kMatchDisabledUntilDateFieldNumber = 24;
  inline ::google::protobuf::uint32 match_disabled_until_date() const;
  inline void set_match_disabled_until_date(::google::protobuf::uint32 value);
  
  // optional uint32 match_disabled_account_id = 25;
  inline bool has_match_disabled_account_id() const;
  inline void clear_match_disabled_account_id();
  static const int kMatchDisabledAccountIdFieldNumber = 25;
  inline ::google::protobuf::uint32 match_disabled_account_id() const;
  inline void set_match_disabled_account_id(::google::protobuf::uint32 value);
  
  // optional uint32 matchmaking_max_range_minutes = 26;
  inline bool has_matchmaking_max_range_minutes() const;
  inline void clear_matchmaking_max_range_minutes();
  static const int kMatchmakingMaxRangeMinutesFieldNumber = 26;
  inline ::google::protobuf::uint32 matchmaking_max_range_minutes() const;
  inline void set_matchmaking_max_range_minutes(::google::protobuf::uint32 value);
  
  // optional uint32 matchlanguages = 27;
  inline bool has_matchlanguages() const;
  inline void clear_matchlanguages();
  static const int kMatchlanguagesFieldNumber = 27;
  inline ::google::protobuf::uint32 matchlanguages() const;
  inline void set_matchlanguages(::google::protobuf::uint32 value);
  
  // optional uint32 map_preference = 38;
  inline bool has_map_preference() const;
  inline void clear_map_preference();
  static const int kMapPreferenceFieldNumber = 38;
  inline ::google::protobuf::uint32 map_preference() const;
  inline void set_map_preference(::google::protobuf::uint32 value);
  
  // repeated .CSODOTAPartyMember members = 29;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 29;
  inline const ::CSODOTAPartyMember& members(int index) const;
  inline ::CSODOTAPartyMember* mutable_members(int index);
  inline ::CSODOTAPartyMember* add_members();
  inline const ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyMember >&
      members() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyMember >*
      mutable_members();
  
  // optional uint32 open_guild_id = 30;
  inline bool has_open_guild_id() const;
  inline void clear_open_guild_id();
  static const int kOpenGuildIdFieldNumber = 30;
  inline ::google::protobuf::uint32 open_guild_id() const;
  inline void set_open_guild_id(::google::protobuf::uint32 value);
  
  // repeated uint32 common_guilds = 31;
  inline int common_guilds_size() const;
  inline void clear_common_guilds();
  static const int kCommonGuildsFieldNumber = 31;
  inline ::google::protobuf::uint32 common_guilds(int index) const;
  inline void set_common_guilds(int index, ::google::protobuf::uint32 value);
  inline void add_common_guilds(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      common_guilds() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_common_guilds();
  
  // optional uint32 low_priority_games_remaining = 35;
  inline bool has_low_priority_games_remaining() const;
  inline void clear_low_priority_games_remaining();
  static const int kLowPriorityGamesRemainingFieldNumber = 35;
  inline ::google::protobuf::uint32 low_priority_games_remaining() const;
  inline void set_low_priority_games_remaining(::google::protobuf::uint32 value);
  
  // optional uint32 min_level = 36;
  inline bool has_min_level() const;
  inline void clear_min_level();
  static const int kMinLevelFieldNumber = 36;
  inline ::google::protobuf::uint32 min_level() const;
  inline void set_min_level(::google::protobuf::uint32 value);
  
  // optional uint32 max_level = 37;
  inline bool has_max_level() const;
  inline void clear_max_level();
  static const int kMaxLevelFieldNumber = 37;
  inline ::google::protobuf::uint32 max_level() const;
  inline void set_max_level(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CSODOTAParty)
 private:
  inline void set_has_party_id();
  inline void clear_has_party_id();
  inline void set_has_leader_id();
  inline void clear_has_leader_id();
  inline void set_has_game_modes();
  inline void clear_has_game_modes();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_effective_started_matchmaking_time();
  inline void clear_has_effective_started_matchmaking_time();
  inline void set_has_raw_started_matchmaking_time();
  inline void clear_has_raw_started_matchmaking_time();
  inline void set_has_attempt_start_time();
  inline void clear_has_attempt_start_time();
  inline void set_has_attempt_num();
  inline void clear_has_attempt_num();
  inline void set_has_matchgroups();
  inline void clear_has_matchgroups();
  inline void set_has_low_priority_account_id();
  inline void clear_has_low_priority_account_id();
  inline void set_has_match_type();
  inline void clear_has_match_type();
  inline void set_has_bot_difficulty();
  inline void clear_has_bot_difficulty();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_match_disabled_until_date();
  inline void clear_has_match_disabled_until_date();
  inline void set_has_match_disabled_account_id();
  inline void clear_has_match_disabled_account_id();
  inline void set_has_matchmaking_max_range_minutes();
  inline void clear_has_matchmaking_max_range_minutes();
  inline void set_has_matchlanguages();
  inline void clear_has_matchlanguages();
  inline void set_has_map_preference();
  inline void clear_has_map_preference();
  inline void set_has_open_guild_id();
  inline void clear_has_open_guild_id();
  inline void set_has_low_priority_games_remaining();
  inline void clear_has_low_priority_games_remaining();
  inline void set_has_min_level();
  inline void clear_has_min_level();
  inline void set_has_max_level();
  inline void clear_has_max_level();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 party_id_;
  ::google::protobuf::uint64 leader_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > member_ids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > pending_invites_;
  ::google::protobuf::uint32 game_modes_;
  int state_;
  ::google::protobuf::uint32 effective_started_matchmaking_time_;
  ::google::protobuf::uint32 raw_started_matchmaking_time_;
  ::google::protobuf::uint32 attempt_start_time_;
  ::google::protobuf::uint32 attempt_num_;
  ::google::protobuf::uint32 matchgroups_;
  ::google::protobuf::uint32 low_priority_account_id_;
  int match_type_;
  int bot_difficulty_;
  ::google::protobuf::uint32 team_id_;
  ::google::protobuf::uint32 match_disabled_until_date_;
  ::google::protobuf::uint32 match_disabled_account_id_;
  ::google::protobuf::uint32 matchmaking_max_range_minutes_;
  ::google::protobuf::uint32 matchlanguages_;
  ::google::protobuf::uint32 map_preference_;
  ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyMember > members_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > common_guilds_;
  ::google::protobuf::uint32 open_guild_id_;
  ::google::protobuf::uint32 low_priority_games_remaining_;
  ::google::protobuf::uint32 min_level_;
  ::google::protobuf::uint32 max_level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(26 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CSODOTAParty* default_instance_;
};
// -------------------------------------------------------------------

class CSODOTAPartyInvite_PartyMember : public ::google::protobuf::Message {
 public:
  CSODOTAPartyInvite_PartyMember();
  virtual ~CSODOTAPartyInvite_PartyMember();
  
  CSODOTAPartyInvite_PartyMember(const CSODOTAPartyInvite_PartyMember& from);
  
  inline CSODOTAPartyInvite_PartyMember& operator=(const CSODOTAPartyInvite_PartyMember& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSODOTAPartyInvite_PartyMember& default_instance();
  
  void Swap(CSODOTAPartyInvite_PartyMember* other);
  
  // implements Message ----------------------------------------------
  
  CSODOTAPartyInvite_PartyMember* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSODOTAPartyInvite_PartyMember& from);
  void MergeFrom(const CSODOTAPartyInvite_PartyMember& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional fixed64 steam_id = 2;
  inline bool has_steam_id() const;
  inline void clear_steam_id();
  static const int kSteamIdFieldNumber = 2;
  inline ::google::protobuf::uint64 steam_id() const;
  inline void set_steam_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:CSODOTAPartyInvite.PartyMember)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_steam_id();
  inline void clear_has_steam_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::uint64 steam_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CSODOTAPartyInvite_PartyMember* default_instance_;
};
// -------------------------------------------------------------------

class CSODOTAPartyInvite : public ::google::protobuf::Message {
 public:
  CSODOTAPartyInvite();
  virtual ~CSODOTAPartyInvite();
  
  CSODOTAPartyInvite(const CSODOTAPartyInvite& from);
  
  inline CSODOTAPartyInvite& operator=(const CSODOTAPartyInvite& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSODOTAPartyInvite& default_instance();
  
  void Swap(CSODOTAPartyInvite* other);
  
  // implements Message ----------------------------------------------
  
  CSODOTAPartyInvite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSODOTAPartyInvite& from);
  void MergeFrom(const CSODOTAPartyInvite& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CSODOTAPartyInvite_PartyMember PartyMember;
  
  // accessors -------------------------------------------------------
  
  // optional uint64 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::uint64 group_id() const;
  inline void set_group_id(::google::protobuf::uint64 value);
  
  // optional fixed64 sender_id = 2;
  inline bool has_sender_id() const;
  inline void clear_sender_id();
  static const int kSenderIdFieldNumber = 2;
  inline ::google::protobuf::uint64 sender_id() const;
  inline void set_sender_id(::google::protobuf::uint64 value);
  
  // optional string sender_name = 3;
  inline bool has_sender_name() const;
  inline void clear_sender_name();
  static const int kSenderNameFieldNumber = 3;
  inline const ::std::string& sender_name() const;
  inline void set_sender_name(const ::std::string& value);
  inline void set_sender_name(const char* value);
  inline void set_sender_name(const char* value, size_t size);
  inline ::std::string* mutable_sender_name();
  inline ::std::string* release_sender_name();
  
  // repeated .CSODOTAPartyInvite.PartyMember members = 4;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 4;
  inline const ::CSODOTAPartyInvite_PartyMember& members(int index) const;
  inline ::CSODOTAPartyInvite_PartyMember* mutable_members(int index);
  inline ::CSODOTAPartyInvite_PartyMember* add_members();
  inline const ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyInvite_PartyMember >&
      members() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyInvite_PartyMember >*
      mutable_members();
  
  // optional uint32 team_id = 5;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 5;
  inline ::google::protobuf::uint32 team_id() const;
  inline void set_team_id(::google::protobuf::uint32 value);
  
  // optional bool low_priority_status = 6;
  inline bool has_low_priority_status() const;
  inline void clear_low_priority_status();
  static const int kLowPriorityStatusFieldNumber = 6;
  inline bool low_priority_status() const;
  inline void set_low_priority_status(bool value);
  
  // optional bool as_coach = 7;
  inline bool has_as_coach() const;
  inline void clear_as_coach();
  static const int kAsCoachFieldNumber = 7;
  inline bool as_coach() const;
  inline void set_as_coach(bool value);
  
  // @@protoc_insertion_point(class_scope:CSODOTAPartyInvite)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_sender_id();
  inline void clear_has_sender_id();
  inline void set_has_sender_name();
  inline void clear_has_sender_name();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_low_priority_status();
  inline void clear_has_low_priority_status();
  inline void set_has_as_coach();
  inline void clear_has_as_coach();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 group_id_;
  ::google::protobuf::uint64 sender_id_;
  ::std::string* sender_name_;
  ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyInvite_PartyMember > members_;
  ::google::protobuf::uint32 team_id_;
  bool low_priority_status_;
  bool as_coach_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CSODOTAPartyInvite* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAPartyMemberSetCoach : public ::google::protobuf::Message {
 public:
  CMsgDOTAPartyMemberSetCoach();
  virtual ~CMsgDOTAPartyMemberSetCoach();
  
  CMsgDOTAPartyMemberSetCoach(const CMsgDOTAPartyMemberSetCoach& from);
  
  inline CMsgDOTAPartyMemberSetCoach& operator=(const CMsgDOTAPartyMemberSetCoach& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAPartyMemberSetCoach& default_instance();
  
  void Swap(CMsgDOTAPartyMemberSetCoach* other);
  
  // implements Message ----------------------------------------------
  
  CMsgDOTAPartyMemberSetCoach* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAPartyMemberSetCoach& from);
  void MergeFrom(const CMsgDOTAPartyMemberSetCoach& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool wants_coach = 1;
  inline bool has_wants_coach() const;
  inline void clear_wants_coach();
  static const int kWantsCoachFieldNumber = 1;
  inline bool wants_coach() const;
  inline void set_wants_coach(bool value);
  
  // @@protoc_insertion_point(class_scope:CMsgDOTAPartyMemberSetCoach)
 private:
  inline void set_has_wants_coach();
  inline void clear_has_wants_coach();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool wants_coach_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgDOTAPartyMemberSetCoach* default_instance_;
};
// -------------------------------------------------------------------

class CDOTASaveGame_Player : public ::google::protobuf::Message {
 public:
  CDOTASaveGame_Player();
  virtual ~CDOTASaveGame_Player();
  
  CDOTASaveGame_Player(const CDOTASaveGame_Player& from);
  
  inline CDOTASaveGame_Player& operator=(const CDOTASaveGame_Player& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTASaveGame_Player& default_instance();
  
  void Swap(CDOTASaveGame_Player* other);
  
  // implements Message ----------------------------------------------
  
  CDOTASaveGame_Player* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTASaveGame_Player& from);
  void MergeFrom(const CDOTASaveGame_Player& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
  inline bool has_team() const;
  inline void clear_team();
  static const int kTeamFieldNumber = 1;
  inline DOTA_GC_TEAM team() const;
  inline void set_team(DOTA_GC_TEAM value);
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string hero = 3;
  inline bool has_hero() const;
  inline void clear_hero();
  static const int kHeroFieldNumber = 3;
  inline const ::std::string& hero() const;
  inline void set_hero(const ::std::string& value);
  inline void set_hero(const char* value);
  inline void set_hero(const char* value, size_t size);
  inline ::std::string* mutable_hero();
  inline ::std::string* release_hero();
  
  // @@protoc_insertion_point(class_scope:CDOTASaveGame.Player)
 private:
  inline void set_has_team();
  inline void clear_has_team();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_hero();
  inline void clear_has_hero();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* hero_;
  int team_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTASaveGame_Player* default_instance_;
};
// -------------------------------------------------------------------

class CDOTASaveGame_SaveInstance_PlayerPositions : public ::google::protobuf::Message {
 public:
  CDOTASaveGame_SaveInstance_PlayerPositions();
  virtual ~CDOTASaveGame_SaveInstance_PlayerPositions();
  
  CDOTASaveGame_SaveInstance_PlayerPositions(const CDOTASaveGame_SaveInstance_PlayerPositions& from);
  
  inline CDOTASaveGame_SaveInstance_PlayerPositions& operator=(const CDOTASaveGame_SaveInstance_PlayerPositions& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTASaveGame_SaveInstance_PlayerPositions& default_instance();
  
  void Swap(CDOTASaveGame_SaveInstance_PlayerPositions* other);
  
  // implements Message ----------------------------------------------
  
  CDOTASaveGame_SaveInstance_PlayerPositions* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTASaveGame_SaveInstance_PlayerPositions& from);
  void MergeFrom(const CDOTASaveGame_SaveInstance_PlayerPositions& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);
  
  // optional float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);
  
  // @@protoc_insertion_point(class_scope:CDOTASaveGame.SaveInstance.PlayerPositions)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float x_;
  float y_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTASaveGame_SaveInstance_PlayerPositions* default_instance_;
};
// -------------------------------------------------------------------

class CDOTASaveGame_SaveInstance : public ::google::protobuf::Message {
 public:
  CDOTASaveGame_SaveInstance();
  virtual ~CDOTASaveGame_SaveInstance();
  
  CDOTASaveGame_SaveInstance(const CDOTASaveGame_SaveInstance& from);
  
  inline CDOTASaveGame_SaveInstance& operator=(const CDOTASaveGame_SaveInstance& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTASaveGame_SaveInstance& default_instance();
  
  void Swap(CDOTASaveGame_SaveInstance* other);
  
  // implements Message ----------------------------------------------
  
  CDOTASaveGame_SaveInstance* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTASaveGame_SaveInstance& from);
  void MergeFrom(const CDOTASaveGame_SaveInstance& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CDOTASaveGame_SaveInstance_PlayerPositions PlayerPositions;
  
  // accessors -------------------------------------------------------
  
  // optional uint32 game_time = 2;
  inline bool has_game_time() const;
  inline void clear_game_time();
  static const int kGameTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 game_time() const;
  inline void set_game_time(::google::protobuf::uint32 value);
  
  // optional uint32 team1_score = 3;
  inline bool has_team1_score() const;
  inline void clear_team1_score();
  static const int kTeam1ScoreFieldNumber = 3;
  inline ::google::protobuf::uint32 team1_score() const;
  inline void set_team1_score(::google::protobuf::uint32 value);
  
  // optional uint32 team2_score = 4;
  inline bool has_team2_score() const;
  inline void clear_team2_score();
  static const int kTeam2ScoreFieldNumber = 4;
  inline ::google::protobuf::uint32 team2_score() const;
  inline void set_team2_score(::google::protobuf::uint32 value);
  
  // repeated .CDOTASaveGame.SaveInstance.PlayerPositions player_positions = 5;
  inline int player_positions_size() const;
  inline void clear_player_positions();
  static const int kPlayerPositionsFieldNumber = 5;
  inline const ::CDOTASaveGame_SaveInstance_PlayerPositions& player_positions(int index) const;
  inline ::CDOTASaveGame_SaveInstance_PlayerPositions* mutable_player_positions(int index);
  inline ::CDOTASaveGame_SaveInstance_PlayerPositions* add_player_positions();
  inline const ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_SaveInstance_PlayerPositions >&
      player_positions() const;
  inline ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_SaveInstance_PlayerPositions >*
      mutable_player_positions();
  
  // optional uint32 save_id = 6;
  inline bool has_save_id() const;
  inline void clear_save_id();
  static const int kSaveIdFieldNumber = 6;
  inline ::google::protobuf::uint32 save_id() const;
  inline void set_save_id(::google::protobuf::uint32 value);
  
  // optional uint32 save_time = 7;
  inline bool has_save_time() const;
  inline void clear_save_time();
  static const int kSaveTimeFieldNumber = 7;
  inline ::google::protobuf::uint32 save_time() const;
  inline void set_save_time(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CDOTASaveGame.SaveInstance)
 private:
  inline void set_has_game_time();
  inline void clear_has_game_time();
  inline void set_has_team1_score();
  inline void clear_has_team1_score();
  inline void set_has_team2_score();
  inline void clear_has_team2_score();
  inline void set_has_save_id();
  inline void clear_has_save_id();
  inline void set_has_save_time();
  inline void clear_has_save_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 game_time_;
  ::google::protobuf::uint32 team1_score_;
  ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_SaveInstance_PlayerPositions > player_positions_;
  ::google::protobuf::uint32 team2_score_;
  ::google::protobuf::uint32 save_id_;
  ::google::protobuf::uint32 save_time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTASaveGame_SaveInstance* default_instance_;
};
// -------------------------------------------------------------------

class CDOTASaveGame : public ::google::protobuf::Message {
 public:
  CDOTASaveGame();
  virtual ~CDOTASaveGame();
  
  CDOTASaveGame(const CDOTASaveGame& from);
  
  inline CDOTASaveGame& operator=(const CDOTASaveGame& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTASaveGame& default_instance();
  
  void Swap(CDOTASaveGame* other);
  
  // implements Message ----------------------------------------------
  
  CDOTASaveGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTASaveGame& from);
  void MergeFrom(const CDOTASaveGame& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CDOTASaveGame_Player Player;
  typedef CDOTASaveGame_SaveInstance SaveInstance;
  
  // accessors -------------------------------------------------------
  
  // optional uint32 match_id = 5;
  inline bool has_match_id() const;
  inline void clear_match_id();
  static const int kMatchIdFieldNumber = 5;
  inline ::google::protobuf::uint32 match_id() const;
  inline void set_match_id(::google::protobuf::uint32 value);
  
  // optional uint32 save_time = 2;
  inline bool has_save_time() const;
  inline void clear_save_time();
  static const int kSaveTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 save_time() const;
  inline void set_save_time(::google::protobuf::uint32 value);
  
  // repeated .CDOTASaveGame.Player players = 3;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 3;
  inline const ::CDOTASaveGame_Player& players(int index) const;
  inline ::CDOTASaveGame_Player* mutable_players(int index);
  inline ::CDOTASaveGame_Player* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_Player >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_Player >*
      mutable_players();
  
  // repeated .CDOTASaveGame.SaveInstance save_instances = 4;
  inline int save_instances_size() const;
  inline void clear_save_instances();
  static const int kSaveInstancesFieldNumber = 4;
  inline const ::CDOTASaveGame_SaveInstance& save_instances(int index) const;
  inline ::CDOTASaveGame_SaveInstance* mutable_save_instances(int index);
  inline ::CDOTASaveGame_SaveInstance* add_save_instances();
  inline const ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_SaveInstance >&
      save_instances() const;
  inline ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_SaveInstance >*
      mutable_save_instances();
  
  // @@protoc_insertion_point(class_scope:CDOTASaveGame)
 private:
  inline void set_has_match_id();
  inline void clear_has_match_id();
  inline void set_has_save_time();
  inline void clear_has_save_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 match_id_;
  ::google::protobuf::uint32 save_time_;
  ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_Player > players_;
  ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_SaveInstance > save_instances_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTASaveGame* default_instance_;
};
// -------------------------------------------------------------------

class CMsgLeaverState : public ::google::protobuf::Message {
 public:
  CMsgLeaverState();
  virtual ~CMsgLeaverState();
  
  CMsgLeaverState(const CMsgLeaverState& from);
  
  inline CMsgLeaverState& operator=(const CMsgLeaverState& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgLeaverState& default_instance();
  
  void Swap(CMsgLeaverState* other);
  
  // implements Message ----------------------------------------------
  
  CMsgLeaverState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgLeaverState& from);
  void MergeFrom(const CMsgLeaverState& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 lobby_state = 1;
  inline bool has_lobby_state() const;
  inline void clear_lobby_state();
  static const int kLobbyStateFieldNumber = 1;
  inline ::google::protobuf::uint32 lobby_state() const;
  inline void set_lobby_state(::google::protobuf::uint32 value);
  
  // optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
  inline bool has_game_state() const;
  inline void clear_game_state();
  static const int kGameStateFieldNumber = 2;
  inline DOTA_GameState game_state() const;
  inline void set_game_state(DOTA_GameState value);
  
  // optional bool leaver_detected = 3;
  inline bool has_leaver_detected() const;
  inline void clear_leaver_detected();
  static const int kLeaverDetectedFieldNumber = 3;
  inline bool leaver_detected() const;
  inline void set_leaver_detected(bool value);
  
  // optional bool first_blood_happened = 4;
  inline bool has_first_blood_happened() const;
  inline void clear_first_blood_happened();
  static const int kFirstBloodHappenedFieldNumber = 4;
  inline bool first_blood_happened() const;
  inline void set_first_blood_happened(bool value);
  
  // optional bool discard_match_results = 5;
  inline bool has_discard_match_results() const;
  inline void clear_discard_match_results();
  static const int kDiscardMatchResultsFieldNumber = 5;
  inline bool discard_match_results() const;
  inline void set_discard_match_results(bool value);
  
  // optional bool mass_disconnect = 6;
  inline bool has_mass_disconnect() const;
  inline void clear_mass_disconnect();
  static const int kMassDisconnectFieldNumber = 6;
  inline bool mass_disconnect() const;
  inline void set_mass_disconnect(bool value);
  
  // @@protoc_insertion_point(class_scope:CMsgLeaverState)
 private:
  inline void set_has_lobby_state();
  inline void clear_has_lobby_state();
  inline void set_has_game_state();
  inline void clear_has_game_state();
  inline void set_has_leaver_detected();
  inline void clear_has_leaver_detected();
  inline void set_has_first_blood_happened();
  inline void clear_has_first_blood_happened();
  inline void set_has_discard_match_results();
  inline void clear_has_discard_match_results();
  inline void set_has_mass_disconnect();
  inline void clear_has_mass_disconnect();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 lobby_state_;
  int game_state_;
  bool leaver_detected_;
  bool first_blood_happened_;
  bool discard_match_results_;
  bool mass_disconnect_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgLeaverState* default_instance_;
};
// -------------------------------------------------------------------

class CDOTALobbyMember_CDOTALobbyMemberXPBonus : public ::google::protobuf::Message {
 public:
  CDOTALobbyMember_CDOTALobbyMemberXPBonus();
  virtual ~CDOTALobbyMember_CDOTALobbyMemberXPBonus();
  
  CDOTALobbyMember_CDOTALobbyMemberXPBonus(const CDOTALobbyMember_CDOTALobbyMemberXPBonus& from);
  
  inline CDOTALobbyMember_CDOTALobbyMemberXPBonus& operator=(const CDOTALobbyMember_CDOTALobbyMemberXPBonus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTALobbyMember_CDOTALobbyMemberXPBonus& default_instance();
  
  void Swap(CDOTALobbyMember_CDOTALobbyMemberXPBonus* other);
  
  // implements Message ----------------------------------------------
  
  CDOTALobbyMember_CDOTALobbyMemberXPBonus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTALobbyMember_CDOTALobbyMemberXPBonus& from);
  void MergeFrom(const CDOTALobbyMember_CDOTALobbyMemberXPBonus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // optional float xp_bonus = 2;
  inline bool has_xp_bonus() const;
  inline void clear_xp_bonus();
  static const int kXpBonusFieldNumber = 2;
  inline float xp_bonus() const;
  inline void set_xp_bonus(float value);
  
  // @@protoc_insertion_point(class_scope:CDOTALobbyMember.CDOTALobbyMemberXPBonus)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_xp_bonus();
  inline void clear_has_xp_bonus();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 type_;
  float xp_bonus_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTALobbyMember_CDOTALobbyMemberXPBonus* default_instance_;
};
// -------------------------------------------------------------------

class CDOTALobbyMember : public ::google::protobuf::Message {
 public:
  CDOTALobbyMember();
  virtual ~CDOTALobbyMember();
  
  CDOTALobbyMember(const CDOTALobbyMember& from);
  
  inline CDOTALobbyMember& operator=(const CDOTALobbyMember& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTALobbyMember& default_instance();
  
  void Swap(CDOTALobbyMember* other);
  
  // implements Message ----------------------------------------------
  
  CDOTALobbyMember* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTALobbyMember& from);
  void MergeFrom(const CDOTALobbyMember& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CDOTALobbyMember_CDOTALobbyMemberXPBonus CDOTALobbyMemberXPBonus;
  
  // accessors -------------------------------------------------------
  
  // optional fixed64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);
  
  // optional uint32 hero_id = 2;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);
  
  // optional .DOTA_GC_TEAM team = 3 [default = DOTA_GC_TEAM_GOOD_GUYS];
  inline bool has_team() const;
  inline void clear_team();
  static const int kTeamFieldNumber = 3;
  inline DOTA_GC_TEAM team() const;
  inline void set_team(DOTA_GC_TEAM value);
  
  // optional string name = 6;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 6;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional uint32 slot = 7;
  inline bool has_slot() const;
  inline void clear_slot();
  static const int kSlotFieldNumber = 7;
  inline ::google::protobuf::uint32 slot() const;
  inline void set_slot(::google::protobuf::uint32 value);
  
  // optional uint64 party_id = 12;
  inline bool has_party_id() const;
  inline void clear_party_id();
  static const int kPartyIdFieldNumber = 12;
  inline ::google::protobuf::uint64 party_id() const;
  inline void set_party_id(::google::protobuf::uint64 value);
  
  // optional uint32 meta_level = 13;
  inline bool has_meta_level() const;
  inline void clear_meta_level();
  static const int kMetaLevelFieldNumber = 13;
  inline ::google::protobuf::uint32 meta_level() const;
  inline void set_meta_level(::google::protobuf::uint32 value);
  
  // optional uint32 meta_xp = 14;
  inline bool has_meta_xp() const;
  inline void clear_meta_xp();
  static const int kMetaXpFieldNumber = 14;
  inline ::google::protobuf::uint32 meta_xp() const;
  inline void set_meta_xp(::google::protobuf::uint32 value);
  
  // optional uint32 meta_xp_awarded = 15;
  inline bool has_meta_xp_awarded() const;
  inline void clear_meta_xp_awarded();
  static const int kMetaXpAwardedFieldNumber = 15;
  inline ::google::protobuf::uint32 meta_xp_awarded() const;
  inline void set_meta_xp_awarded(::google::protobuf::uint32 value);
  
  // optional .DOTALeaverStatus_t leaver_status = 16 [default = DOTA_LEAVER_NONE];
  inline bool has_leaver_status() const;
  inline void clear_leaver_status();
  static const int kLeaverStatusFieldNumber = 16;
  inline DOTALeaverStatus_t leaver_status() const;
  inline void set_leaver_status(DOTALeaverStatus_t value);
  
  // optional uint32 leaver_actions = 28;
  inline bool has_leaver_actions() const;
  inline void clear_leaver_actions();
  static const int kLeaverActionsFieldNumber = 28;
  inline ::google::protobuf::uint32 leaver_actions() const;
  inline void set_leaver_actions(::google::protobuf::uint32 value);
  
  // optional uint32 channel = 17;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 17;
  inline ::google::protobuf::uint32 channel() const;
  inline void set_channel(::google::protobuf::uint32 value);
  
  // optional uint32 prize_def_index = 18;
  inline bool has_prize_def_index() const;
  inline void clear_prize_def_index();
  static const int kPrizeDefIndexFieldNumber = 18;
  inline ::google::protobuf::uint32 prize_def_index() const;
  inline void set_prize_def_index(::google::protobuf::uint32 value);
  
  // repeated uint32 disabled_hero_id = 20;
  inline int disabled_hero_id_size() const;
  inline void clear_disabled_hero_id();
  static const int kDisabledHeroIdFieldNumber = 20;
  inline ::google::protobuf::uint32 disabled_hero_id(int index) const;
  inline void set_disabled_hero_id(int index, ::google::protobuf::uint32 value);
  inline void add_disabled_hero_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      disabled_hero_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_disabled_hero_id();
  
  // optional .PartnerAccountType partner_account_type = 21 [default = PARTNER_NONE];
  inline bool has_partner_account_type() const;
  inline void clear_partner_account_type();
  static const int kPartnerAccountTypeFieldNumber = 21;
  inline PartnerAccountType partner_account_type() const;
  inline void set_partner_account_type(PartnerAccountType value);
  
  // repeated uint32 enabled_hero_id = 22;
  inline int enabled_hero_id_size() const;
  inline void clear_enabled_hero_id();
  static const int kEnabledHeroIdFieldNumber = 22;
  inline ::google::protobuf::uint32 enabled_hero_id(int index) const;
  inline void set_enabled_hero_id(int index, ::google::protobuf::uint32 value);
  inline void add_enabled_hero_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      enabled_hero_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_enabled_hero_id();
  
  // optional .DOTA_GC_TEAM coach_team = 23 [default = DOTA_GC_TEAM_GOOD_GUYS];
  inline bool has_coach_team() const;
  inline void clear_coach_team();
  static const int kCoachTeamFieldNumber = 23;
  inline DOTA_GC_TEAM coach_team() const;
  inline void set_coach_team(DOTA_GC_TEAM value);
  
  // optional uint32 nexon_pc_bang_no = 24;
  inline bool has_nexon_pc_bang_no() const;
  inline void clear_nexon_pc_bang_no();
  static const int kNexonPcBangNoFieldNumber = 24;
  inline ::google::protobuf::uint32 nexon_pc_bang_no() const;
  inline void set_nexon_pc_bang_no(::google::protobuf::uint32 value);
  
  // optional string nexon_pc_bang_name = 25;
  inline bool has_nexon_pc_bang_name() const;
  inline void clear_nexon_pc_bang_name();
  static const int kNexonPcBangNameFieldNumber = 25;
  inline const ::std::string& nexon_pc_bang_name() const;
  inline void set_nexon_pc_bang_name(const ::std::string& value);
  inline void set_nexon_pc_bang_name(const char* value);
  inline void set_nexon_pc_bang_name(const char* value, size_t size);
  inline ::std::string* mutable_nexon_pc_bang_name();
  inline ::std::string* release_nexon_pc_bang_name();
  
  // repeated .CDOTALobbyMember.CDOTALobbyMemberXPBonus xp_bonuses = 27;
  inline int xp_bonuses_size() const;
  inline void clear_xp_bonuses();
  static const int kXpBonusesFieldNumber = 27;
  inline const ::CDOTALobbyMember_CDOTALobbyMemberXPBonus& xp_bonuses(int index) const;
  inline ::CDOTALobbyMember_CDOTALobbyMemberXPBonus* mutable_xp_bonuses(int index);
  inline ::CDOTALobbyMember_CDOTALobbyMemberXPBonus* add_xp_bonuses();
  inline const ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember_CDOTALobbyMemberXPBonus >&
      xp_bonuses() const;
  inline ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember_CDOTALobbyMemberXPBonus >*
      mutable_xp_bonuses();
  
  // @@protoc_insertion_point(class_scope:CDOTALobbyMember)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_team();
  inline void clear_has_team();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_slot();
  inline void clear_has_slot();
  inline void set_has_party_id();
  inline void clear_has_party_id();
  inline void set_has_meta_level();
  inline void clear_has_meta_level();
  inline void set_has_meta_xp();
  inline void clear_has_meta_xp();
  inline void set_has_meta_xp_awarded();
  inline void clear_has_meta_xp_awarded();
  inline void set_has_leaver_status();
  inline void clear_has_leaver_status();
  inline void set_has_leaver_actions();
  inline void clear_has_leaver_actions();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_prize_def_index();
  inline void clear_has_prize_def_index();
  inline void set_has_partner_account_type();
  inline void clear_has_partner_account_type();
  inline void set_has_coach_team();
  inline void clear_has_coach_team();
  inline void set_has_nexon_pc_bang_no();
  inline void clear_has_nexon_pc_bang_no();
  inline void set_has_nexon_pc_bang_name();
  inline void clear_has_nexon_pc_bang_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 hero_id_;
  int team_;
  ::std::string* name_;
  ::google::protobuf::uint64 party_id_;
  ::google::protobuf::uint32 slot_;
  ::google::protobuf::uint32 meta_level_;
  ::google::protobuf::uint32 meta_xp_;
  ::google::protobuf::uint32 meta_xp_awarded_;
  int leaver_status_;
  ::google::protobuf::uint32 leaver_actions_;
  ::google::protobuf::uint32 channel_;
  ::google::protobuf::uint32 prize_def_index_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > disabled_hero_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > enabled_hero_id_;
  int partner_account_type_;
  int coach_team_;
  ::std::string* nexon_pc_bang_name_;
  ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember_CDOTALobbyMemberXPBonus > xp_bonuses_;
  ::google::protobuf::uint32 nexon_pc_bang_no_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(20 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTALobbyMember* default_instance_;
};
// -------------------------------------------------------------------

class CDOTALobbyMemberPrivate : public ::google::protobuf::Message {
 public:
  CDOTALobbyMemberPrivate();
  virtual ~CDOTALobbyMemberPrivate();
  
  CDOTALobbyMemberPrivate(const CDOTALobbyMemberPrivate& from);
  
  inline CDOTALobbyMemberPrivate& operator=(const CDOTALobbyMemberPrivate& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTALobbyMemberPrivate& default_instance();
  
  void Swap(CDOTALobbyMemberPrivate* other);
  
  // implements Message ----------------------------------------------
  
  CDOTALobbyMemberPrivate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTALobbyMemberPrivate& from);
  void MergeFrom(const CDOTALobbyMemberPrivate& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline ::google::protobuf::uint32 ip() const;
  inline void set_ip(::google::protobuf::uint32 value);
  
  // optional .DOTALobbyReadyState ready_state = 2 [default = DOTALobbyReadyState_UNDECLARED];
  inline bool has_ready_state() const;
  inline void clear_ready_state();
  static const int kReadyStateFieldNumber = 2;
  inline DOTALobbyReadyState ready_state() const;
  inline void set_ready_state(DOTALobbyReadyState value);
  
  // optional .CMsgLeaverState leaver_state = 3;
  inline bool has_leaver_state() const;
  inline void clear_leaver_state();
  static const int kLeaverStateFieldNumber = 3;
  inline const ::CMsgLeaverState& leaver_state() const;
  inline ::CMsgLeaverState* mutable_leaver_state();
  inline ::CMsgLeaverState* release_leaver_state();
  
  // @@protoc_insertion_point(class_scope:CDOTALobbyMemberPrivate)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_ready_state();
  inline void clear_has_ready_state();
  inline void set_has_leaver_state();
  inline void clear_has_leaver_state();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 ip_;
  int ready_state_;
  ::CMsgLeaverState* leaver_state_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CDOTALobbyMemberPrivate* default_instance_;
};
// -------------------------------------------------------------------

class CLobbyTeamDetails : public ::google::protobuf::Message {
 public:
  CLobbyTeamDetails();
  virtual ~CLobbyTeamDetails();
  
  CLobbyTeamDetails(const CLobbyTeamDetails& from);
  
  inline CLobbyTeamDetails& operator=(const CLobbyTeamDetails& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CLobbyTeamDetails& default_instance();
  
  void Swap(CLobbyTeamDetails* other);
  
  // implements Message ----------------------------------------------
  
  CLobbyTeamDetails* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CLobbyTeamDetails& from);
  void MergeFrom(const CLobbyTeamDetails& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string team_name = 1;
  inline bool has_team_name() const;
  inline void clear_team_name();
  static const int kTeamNameFieldNumber = 1;
  inline const ::std::string& team_name() const;
  inline void set_team_name(const ::std::string& value);
  inline void set_team_name(const char* value);
  inline void set_team_name(const char* value, size_t size);
  inline ::std::string* mutable_team_name();
  inline ::std::string* release_team_name();
  
  // optional string team_tag = 3;
  inline bool has_team_tag() const;
  inline void clear_team_tag();
  static const int kTeamTagFieldNumber = 3;
  inline const ::std::string& team_tag() const;
  inline void set_team_tag(const ::std::string& value);
  inline void set_team_tag(const char* value);
  inline void set_team_tag(const char* value, size_t size);
  inline ::std::string* mutable_team_tag();
  inline ::std::string* release_team_tag();
  
  // optional uint32 team_id = 4;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 4;
  inline ::google::protobuf::uint32 team_id() const;
  inline void set_team_id(::google::protobuf::uint32 value);
  
  // optional uint64 team_logo = 5;
  inline bool has_team_logo() const;
  inline void clear_team_logo();
  static const int kTeamLogoFieldNumber = 5;
  inline ::google::protobuf::uint64 team_logo() const;
  inline void set_team_logo(::google::protobuf::uint64 value);
  
  // optional uint64 team_base_logo = 6;
  inline bool has_team_base_logo() const;
  inline void clear_team_base_logo();
  static const int kTeamBaseLogoFieldNumber = 6;
  inline ::google::protobuf::uint64 team_base_logo() const;
  inline void set_team_base_logo(::google::protobuf::uint64 value);
  
  // optional uint64 team_banner_logo = 7;
  inline bool has_team_banner_logo() const;
  inline void clear_team_banner_logo();
  static const int kTeamBannerLogoFieldNumber = 7;
  inline ::google::protobuf::uint64 team_banner_logo() const;
  inline void set_team_banner_logo(::google::protobuf::uint64 value);
  
  // optional bool team_complete = 8;
  inline bool has_team_complete() const;
  inline void clear_team_complete();
  static const int kTeamCompleteFieldNumber = 8;
  inline bool team_complete() const;
  inline void set_team_complete(bool value);
  
  // optional string guild_name = 9;
  inline bool has_guild_name() const;
  inline void clear_guild_name();
  static const int kGuildNameFieldNumber = 9;
  inline const ::std::string& guild_name() const;
  inline void set_guild_name(const ::std::string& value);
  inline void set_guild_name(const char* value);
  inline void set_guild_name(const char* value, size_t size);
  inline ::std::string* mutable_guild_name();
  inline ::std::string* release_guild_name();
  
  // optional string guild_tag = 10;
  inline bool has_guild_tag() const;
  inline void clear_guild_tag();
  static const int kGuildTagFieldNumber = 10;
  inline const ::std::string& guild_tag() const;
  inline void set_guild_tag(const ::std::string& value);
  inline void set_guild_tag(const char* value);
  inline void set_guild_tag(const char* value, size_t size);
  inline ::std::string* mutable_guild_tag();
  inline ::std::string* release_guild_tag();
  
  // optional uint32 guild_id = 11;
  inline bool has_guild_id() const;
  inline void clear_guild_id();
  static const int kGuildIdFieldNumber = 11;
  inline ::google::protobuf::uint32 guild_id() const;
  inline void set_guild_id(::google::protobuf::uint32 value);
  
  // optional uint64 guild_logo = 12;
  inline bool has_guild_logo() const;
  inline void clear_guild_logo();
  static const int kGuildLogoFieldNumber = 12;
  inline ::google::protobuf::uint64 guild_logo() const;
  inline void set_guild_logo(::google::protobuf::uint64 value);
  
  // optional uint64 guild_base_logo = 13;
  inline bool has_guild_base_logo() const;
  inline void clear_guild_base_logo();
  static const int kGuildBaseLogoFieldNumber = 13;
  inline ::google::protobuf::uint64 guild_base_logo() const;
  inline void set_guild_base_logo(::google::protobuf::uint64 value);
  
  // optional uint64 guild_banner_logo = 14;
  inline bool has_guild_banner_logo() const;
  inline void clear_guild_banner_logo();
  static const int kGuildBannerLogoFieldNumber = 14;
  inline ::google::protobuf::uint64 guild_banner_logo() const;
  inline void set_guild_banner_logo(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:CLobbyTeamDetails)
 private:
  inline void set_has_team_name();
  inline void clear_has_team_name();
  inline void set_has_team_tag();
  inline void clear_has_team_tag();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_team_logo();
  inline void clear_has_team_logo();
  inline void set_has_team_base_logo();
  inline void clear_has_team_base_logo();
  inline void set_has_team_banner_logo();
  inline void clear_has_team_banner_logo();
  inline void set_has_team_complete();
  inline void clear_has_team_complete();
  inline void set_has_guild_name();
  inline void clear_has_guild_name();
  inline void set_has_guild_tag();
  inline void clear_has_guild_tag();
  inline void set_has_guild_id();
  inline void clear_has_guild_id();
  inline void set_has_guild_logo();
  inline void clear_has_guild_logo();
  inline void set_has_guild_base_logo();
  inline void clear_has_guild_base_logo();
  inline void set_has_guild_banner_logo();
  inline void clear_has_guild_banner_logo();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* team_name_;
  ::std::string* team_tag_;
  ::google::protobuf::uint64 team_logo_;
  ::google::protobuf::uint64 team_base_logo_;
  ::google::protobuf::uint32 team_id_;
  bool team_complete_;
  ::google::protobuf::uint64 team_banner_logo_;
  ::std::string* guild_name_;
  ::std::string* guild_tag_;
  ::google::protobuf::uint64 guild_logo_;
  ::google::protobuf::uint64 guild_base_logo_;
  ::google::protobuf::uint64 guild_banner_logo_;
  ::google::protobuf::uint32 guild_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CLobbyTeamDetails* default_instance_;
};
// -------------------------------------------------------------------

class CLobbyTimedRewardDetails : public ::google::protobuf::Message {
 public:
  CLobbyTimedRewardDetails();
  virtual ~CLobbyTimedRewardDetails();
  
  CLobbyTimedRewardDetails(const CLobbyTimedRewardDetails& from);
  
  inline CLobbyTimedRewardDetails& operator=(const CLobbyTimedRewardDetails& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CLobbyTimedRewardDetails& default_instance();
  
  void Swap(CLobbyTimedRewardDetails* other);
  
  // implements Message ----------------------------------------------
  
  CLobbyTimedRewardDetails* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CLobbyTimedRewardDetails& from);
  void MergeFrom(const CLobbyTimedRewardDetails& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::uint64 item_id() const;
  inline void set_item_id(::google::protobuf::uint64 value);
  
  // optional uint32 item_def_index = 2;
  inline bool has_item_def_index() const;
  inline void clear_item_def_index();
  static const int kItemDefIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 item_def_index() const;
  inline void set_item_def_index(::google::protobuf::uint32 value);
  
  // optional bool is_supply_crate = 3;
  inline bool has_is_supply_crate() const;
  inline void clear_is_supply_crate();
  static const int kIsSupplyCrateFieldNumber = 3;
  inline bool is_supply_crate() const;
  inline void set_is_supply_crate(bool value);
  
  // optional bool is_timed_drop = 4;
  inline bool has_is_timed_drop() const;
  inline void clear_is_timed_drop();
  static const int kIsTimedDropFieldNumber = 4;
  inline bool is_timed_drop() const;
  inline void set_is_timed_drop(bool value);
  
  // optional uint32 account_id = 5;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 5;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CLobbyTimedRewardDetails)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_def_index();
  inline void clear_has_item_def_index();
  inline void set_has_is_supply_crate();
  inline void clear_has_is_supply_crate();
  inline void set_has_is_timed_drop();
  inline void clear_has_is_timed_drop();
  inline void set_has_account_id();
  inline void clear_has_account_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 item_id_;
  ::google::protobuf::uint32 item_def_index_;
  bool is_supply_crate_;
  bool is_timed_drop_;
  ::google::protobuf::uint32 account_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CLobbyTimedRewardDetails* default_instance_;
};
// -------------------------------------------------------------------

class CLobbyBroadcastChannelInfo : public ::google::protobuf::Message {
 public:
  CLobbyBroadcastChannelInfo();
  virtual ~CLobbyBroadcastChannelInfo();
  
  CLobbyBroadcastChannelInfo(const CLobbyBroadcastChannelInfo& from);
  
  inline CLobbyBroadcastChannelInfo& operator=(const CLobbyBroadcastChannelInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CLobbyBroadcastChannelInfo& default_instance();
  
  void Swap(CLobbyBroadcastChannelInfo* other);
  
  // implements Message ----------------------------------------------
  
  CLobbyBroadcastChannelInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CLobbyBroadcastChannelInfo& from);
  void MergeFrom(const CLobbyBroadcastChannelInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 channel_id = 1;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 1;
  inline ::google::protobuf::uint32 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint32 value);
  
  // optional string country_code = 2;
  inline bool has_country_code() const;
  inline void clear_country_code();
  static const int kCountryCodeFieldNumber = 2;
  inline const ::std::string& country_code() const;
  inline void set_country_code(const ::std::string& value);
  inline void set_country_code(const char* value);
  inline void set_country_code(const char* value, size_t size);
  inline ::std::string* mutable_country_code();
  inline ::std::string* release_country_code();
  
  // optional string description = 3;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 3;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  
  // @@protoc_insertion_point(class_scope:CLobbyBroadcastChannelInfo)
 private:
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_country_code();
  inline void clear_has_country_code();
  inline void set_has_description();
  inline void clear_has_description();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* country_code_;
  ::std::string* description_;
  ::google::protobuf::uint32 channel_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CLobbyBroadcastChannelInfo* default_instance_;
};
// -------------------------------------------------------------------

class CSODOTALobby_CExtraMsg : public ::google::protobuf::Message {
 public:
  CSODOTALobby_CExtraMsg();
  virtual ~CSODOTALobby_CExtraMsg();
  
  CSODOTALobby_CExtraMsg(const CSODOTALobby_CExtraMsg& from);
  
  inline CSODOTALobby_CExtraMsg& operator=(const CSODOTALobby_CExtraMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSODOTALobby_CExtraMsg& default_instance();
  
  void Swap(CSODOTALobby_CExtraMsg* other);
  
  // implements Message ----------------------------------------------
  
  CSODOTALobby_CExtraMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSODOTALobby_CExtraMsg& from);
  void MergeFrom(const CSODOTALobby_CExtraMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // optional bytes contents = 2;
  inline bool has_contents() const;
  inline void clear_contents();
  static const int kContentsFieldNumber = 2;
  inline const ::std::string& contents() const;
  inline void set_contents(const ::std::string& value);
  inline void set_contents(const char* value);
  inline void set_contents(const void* value, size_t size);
  inline ::std::string* mutable_contents();
  inline ::std::string* release_contents();
  
  // @@protoc_insertion_point(class_scope:CSODOTALobby.CExtraMsg)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_contents();
  inline void clear_has_contents();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* contents_;
  ::google::protobuf::uint32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CSODOTALobby_CExtraMsg* default_instance_;
};
// -------------------------------------------------------------------

class CSODOTALobby : public ::google::protobuf::Message {
 public:
  CSODOTALobby();
  virtual ~CSODOTALobby();
  
  CSODOTALobby(const CSODOTALobby& from);
  
  inline CSODOTALobby& operator=(const CSODOTALobby& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSODOTALobby& default_instance();
  
  void Swap(CSODOTALobby* other);
  
  // implements Message ----------------------------------------------
  
  CSODOTALobby* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSODOTALobby& from);
  void MergeFrom(const CSODOTALobby& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CSODOTALobby_CExtraMsg CExtraMsg;
  
  typedef CSODOTALobby_State State;
  static const State UI = CSODOTALobby_State_UI;
  static const State READYUP = CSODOTALobby_State_READYUP;
  static const State SERVERSETUP = CSODOTALobby_State_SERVERSETUP;
  static const State RUN = CSODOTALobby_State_RUN;
  static const State POSTGAME = CSODOTALobby_State_POSTGAME;
  static const State NOTREADY = CSODOTALobby_State_NOTREADY;
  static const State SERVERASSIGN = CSODOTALobby_State_SERVERASSIGN;
  static inline bool State_IsValid(int value) {
    return CSODOTALobby_State_IsValid(value);
  }
  static const State State_MIN =
    CSODOTALobby_State_State_MIN;
  static const State State_MAX =
    CSODOTALobby_State_State_MAX;
  static const int State_ARRAYSIZE =
    CSODOTALobby_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return CSODOTALobby_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return CSODOTALobby_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return CSODOTALobby_State_Parse(name, value);
  }
  
  typedef CSODOTALobby_LobbyType LobbyType;
  static const LobbyType INVALID = CSODOTALobby_LobbyType_INVALID;
  static const LobbyType CASUAL_MATCH = CSODOTALobby_LobbyType_CASUAL_MATCH;
  static const LobbyType PRACTICE = CSODOTALobby_LobbyType_PRACTICE;
  static const LobbyType TOURNAMENT = CSODOTALobby_LobbyType_TOURNAMENT;
  static const LobbyType COOP_BOT_MATCH = CSODOTALobby_LobbyType_COOP_BOT_MATCH;
  static const LobbyType TEAM_MATCH = CSODOTALobby_LobbyType_TEAM_MATCH;
  static const LobbyType SOLO_QUEUE_MATCH = CSODOTALobby_LobbyType_SOLO_QUEUE_MATCH;
  static const LobbyType COMPETITIVE_MATCH = CSODOTALobby_LobbyType_COMPETITIVE_MATCH;
  static inline bool LobbyType_IsValid(int value) {
    return CSODOTALobby_LobbyType_IsValid(value);
  }
  static const LobbyType LobbyType_MIN =
    CSODOTALobby_LobbyType_LobbyType_MIN;
  static const LobbyType LobbyType_MAX =
    CSODOTALobby_LobbyType_LobbyType_MAX;
  static const int LobbyType_ARRAYSIZE =
    CSODOTALobby_LobbyType_LobbyType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LobbyType_descriptor() {
    return CSODOTALobby_LobbyType_descriptor();
  }
  static inline const ::std::string& LobbyType_Name(LobbyType value) {
    return CSODOTALobby_LobbyType_Name(value);
  }
  static inline bool LobbyType_Parse(const ::std::string& name,
      LobbyType* value) {
    return CSODOTALobby_LobbyType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional uint64 lobby_id = 1;
  inline bool has_lobby_id() const;
  inline void clear_lobby_id();
  static const int kLobbyIdFieldNumber = 1;
  inline ::google::protobuf::uint64 lobby_id() const;
  inline void set_lobby_id(::google::protobuf::uint64 value);
  
  // repeated .CDOTALobbyMember members = 2;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 2;
  inline const ::CDOTALobbyMember& members(int index) const;
  inline ::CDOTALobbyMember* mutable_members(int index);
  inline ::CDOTALobbyMember* add_members();
  inline const ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember >&
      members() const;
  inline ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember >*
      mutable_members();
  
  // repeated .CDOTALobbyMember left_members = 7;
  inline int left_members_size() const;
  inline void clear_left_members();
  static const int kLeftMembersFieldNumber = 7;
  inline const ::CDOTALobbyMember& left_members(int index) const;
  inline ::CDOTALobbyMember* mutable_left_members(int index);
  inline ::CDOTALobbyMember* add_left_members();
  inline const ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember >&
      left_members() const;
  inline ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember >*
      mutable_left_members();
  
  // optional fixed64 leader_id = 11;
  inline bool has_leader_id() const;
  inline void clear_leader_id();
  static const int kLeaderIdFieldNumber = 11;
  inline ::google::protobuf::uint64 leader_id() const;
  inline void set_leader_id(::google::protobuf::uint64 value);
  
  // optional fixed64 server_id = 6 [default = 0];
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 6;
  inline ::google::protobuf::uint64 server_id() const;
  inline void set_server_id(::google::protobuf::uint64 value);
  
  // optional uint32 game_mode = 3;
  inline bool has_game_mode() const;
  inline void clear_game_mode();
  static const int kGameModeFieldNumber = 3;
  inline ::google::protobuf::uint32 game_mode() const;
  inline void set_game_mode(::google::protobuf::uint32 value);
  
  // repeated fixed64 pending_invites = 10;
  inline int pending_invites_size() const;
  inline void clear_pending_invites();
  static const int kPendingInvitesFieldNumber = 10;
  inline ::google::protobuf::uint64 pending_invites(int index) const;
  inline void set_pending_invites(int index, ::google::protobuf::uint64 value);
  inline void add_pending_invites(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      pending_invites() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_pending_invites();
  
  // optional .CSODOTALobby.State state = 4 [default = UI];
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 4;
  inline ::CSODOTALobby_State state() const;
  inline void set_state(::CSODOTALobby_State value);
  
  // optional string connect = 5;
  inline bool has_connect() const;
  inline void clear_connect();
  static const int kConnectFieldNumber = 5;
  inline const ::std::string& connect() const;
  inline void set_connect(const ::std::string& value);
  inline void set_connect(const char* value);
  inline void set_connect(const char* value, size_t size);
  inline ::std::string* mutable_connect();
  inline ::std::string* release_connect();
  
  // optional .CSODOTALobby.LobbyType lobby_type = 12 [default = INVALID];
  inline bool has_lobby_type() const;
  inline void clear_lobby_type();
  static const int kLobbyTypeFieldNumber = 12;
  inline ::CSODOTALobby_LobbyType lobby_type() const;
  inline void set_lobby_type(::CSODOTALobby_LobbyType value);
  
  // optional bool allow_cheats = 13;
  inline bool has_allow_cheats() const;
  inline void clear_allow_cheats();
  static const int kAllowCheatsFieldNumber = 13;
  inline bool allow_cheats() const;
  inline void set_allow_cheats(bool value);
  
  // optional bool fill_with_bots = 14;
  inline bool has_fill_with_bots() const;
  inline void clear_fill_with_bots();
  static const int kFillWithBotsFieldNumber = 14;
  inline bool fill_with_bots() const;
  inline void set_fill_with_bots(bool value);
  
  // optional bool intro_mode = 15;
  inline bool has_intro_mode() const;
  inline void clear_intro_mode();
  static const int kIntroModeFieldNumber = 15;
  inline bool intro_mode() const;
  inline void set_intro_mode(bool value);
  
  // optional string game_name = 16;
  inline bool has_game_name() const;
  inline void clear_game_name();
  static const int kGameNameFieldNumber = 16;
  inline const ::std::string& game_name() const;
  inline void set_game_name(const ::std::string& value);
  inline void set_game_name(const char* value);
  inline void set_game_name(const char* value, size_t size);
  inline ::std::string* mutable_game_name();
  inline ::std::string* release_game_name();
  
  // repeated .CLobbyTeamDetails team_details = 17;
  inline int team_details_size() const;
  inline void clear_team_details();
  static const int kTeamDetailsFieldNumber = 17;
  inline const ::CLobbyTeamDetails& team_details(int index) const;
  inline ::CLobbyTeamDetails* mutable_team_details(int index);
  inline ::CLobbyTeamDetails* add_team_details();
  inline const ::google::protobuf::RepeatedPtrField< ::CLobbyTeamDetails >&
      team_details() const;
  inline ::google::protobuf::RepeatedPtrField< ::CLobbyTeamDetails >*
      mutable_team_details();
  
  // optional uint32 tutorial_lesson = 18;
  inline bool has_tutorial_lesson() const;
  inline void clear_tutorial_lesson();
  static const int kTutorialLessonFieldNumber = 18;
  inline ::google::protobuf::uint32 tutorial_lesson() const;
  inline void set_tutorial_lesson(::google::protobuf::uint32 value);
  
  // optional uint32 tournament_id = 19;
  inline bool has_tournament_id() const;
  inline void clear_tournament_id();
  static const int kTournamentIdFieldNumber = 19;
  inline ::google::protobuf::uint32 tournament_id() const;
  inline void set_tournament_id(::google::protobuf::uint32 value);
  
  // optional uint32 tournament_game_id = 20;
  inline bool has_tournament_game_id() const;
  inline void clear_tournament_game_id();
  static const int kTournamentGameIdFieldNumber = 20;
  inline ::google::protobuf::uint32 tournament_game_id() const;
  inline void set_tournament_game_id(::google::protobuf::uint32 value);
  
  // optional uint32 server_region = 21 [default = 0];
  inline bool has_server_region() const;
  inline void clear_server_region();
  static const int kServerRegionFieldNumber = 21;
  inline ::google::protobuf::uint32 server_region() const;
  inline void set_server_region(::google::protobuf::uint32 value);
  
  // optional .DOTA_GameState game_state = 22 [default = DOTA_GAMERULES_STATE_INIT];
  inline bool has_game_state() const;
  inline void clear_game_state();
  static const int kGameStateFieldNumber = 22;
  inline DOTA_GameState game_state() const;
  inline void set_game_state(DOTA_GameState value);
  
  // optional uint32 num_spectators = 23;
  inline bool has_num_spectators() const;
  inline void clear_num_spectators();
  static const int kNumSpectatorsFieldNumber = 23;
  inline ::google::protobuf::uint32 num_spectators() const;
  inline void set_num_spectators(::google::protobuf::uint32 value);
  
  // optional uint32 tower_state = 24;
  inline bool has_tower_state() const;
  inline void clear_tower_state();
  static const int kTowerStateFieldNumber = 24;
  inline ::google::protobuf::uint32 tower_state() const;
  inline void set_tower_state(::google::protobuf::uint32 value);
  
  // optional uint32 matchgroup = 25;
  inline bool has_matchgroup() const;
  inline void clear_matchgroup();
  static const int kMatchgroupFieldNumber = 25;
  inline ::google::protobuf::uint32 matchgroup() const;
  inline void set_matchgroup(::google::protobuf::uint32 value);
  
  // optional .DOTA_CM_PICK cm_pick = 28 [default = DOTA_CM_RANDOM];
  inline bool has_cm_pick() const;
  inline void clear_cm_pick();
  static const int kCmPickFieldNumber = 28;
  inline DOTA_CM_PICK cm_pick() const;
  inline void set_cm_pick(DOTA_CM_PICK value);
  
  // optional uint32 match_id = 30;
  inline bool has_match_id() const;
  inline void clear_match_id();
  static const int kMatchIdFieldNumber = 30;
  inline ::google::protobuf::uint32 match_id() const;
  inline void set_match_id(::google::protobuf::uint32 value);
  
  // optional bool allow_spectating = 31 [default = true];
  inline bool has_allow_spectating() const;
  inline void clear_allow_spectating();
  static const int kAllowSpectatingFieldNumber = 31;
  inline bool allow_spectating() const;
  inline void set_allow_spectating(bool value);
  
  // optional .DOTABotDifficulty bot_difficulty = 36 [default = BOT_DIFFICULTY_HARD];
  inline bool has_bot_difficulty() const;
  inline void clear_bot_difficulty();
  static const int kBotDifficultyFieldNumber = 36;
  inline DOTABotDifficulty bot_difficulty() const;
  inline void set_bot_difficulty(DOTABotDifficulty value);
  
  // optional .DOTAGameVersion game_version = 37 [default = GAME_VERSION_CURRENT];
  inline bool has_game_version() const;
  inline void clear_game_version();
  static const int kGameVersionFieldNumber = 37;
  inline DOTAGameVersion game_version() const;
  inline void set_game_version(DOTAGameVersion value);
  
  // repeated .CLobbyTimedRewardDetails timed_reward_details = 38;
  inline int timed_reward_details_size() const;
  inline void clear_timed_reward_details();
  static const int kTimedRewardDetailsFieldNumber = 38;
  inline const ::CLobbyTimedRewardDetails& timed_reward_details(int index) const;
  inline ::CLobbyTimedRewardDetails* mutable_timed_reward_details(int index);
  inline ::CLobbyTimedRewardDetails* add_timed_reward_details();
  inline const ::google::protobuf::RepeatedPtrField< ::CLobbyTimedRewardDetails >&
      timed_reward_details() const;
  inline ::google::protobuf::RepeatedPtrField< ::CLobbyTimedRewardDetails >*
      mutable_timed_reward_details();
  
  // optional string pass_key = 39;
  inline bool has_pass_key() const;
  inline void clear_pass_key();
  static const int kPassKeyFieldNumber = 39;
  inline const ::std::string& pass_key() const;
  inline void set_pass_key(const ::std::string& value);
  inline void set_pass_key(const char* value);
  inline void set_pass_key(const char* value, size_t size);
  inline ::std::string* mutable_pass_key();
  inline ::std::string* release_pass_key();
  
  // repeated .DOTABotDifficulty bot_slot_difficulty = 41;
  inline int bot_slot_difficulty_size() const;
  inline void clear_bot_slot_difficulty();
  static const int kBotSlotDifficultyFieldNumber = 41;
  inline DOTABotDifficulty bot_slot_difficulty(int index) const;
  inline void set_bot_slot_difficulty(int index, DOTABotDifficulty value);
  inline void add_bot_slot_difficulty(DOTABotDifficulty value);
  inline const ::google::protobuf::RepeatedField<int>& bot_slot_difficulty() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_bot_slot_difficulty();
  
  // optional uint32 leagueid = 42;
  inline bool has_leagueid() const;
  inline void clear_leagueid();
  static const int kLeagueidFieldNumber = 42;
  inline ::google::protobuf::uint32 leagueid() const;
  inline void set_leagueid(::google::protobuf::uint32 value);
  
  // optional uint32 penalty_level_radiant = 43 [default = 0];
  inline bool has_penalty_level_radiant() const;
  inline void clear_penalty_level_radiant();
  static const int kPenaltyLevelRadiantFieldNumber = 43;
  inline ::google::protobuf::uint32 penalty_level_radiant() const;
  inline void set_penalty_level_radiant(::google::protobuf::uint32 value);
  
  // optional uint32 penalty_level_dire = 44 [default = 0];
  inline bool has_penalty_level_dire() const;
  inline void clear_penalty_level_dire();
  static const int kPenaltyLevelDireFieldNumber = 44;
  inline ::google::protobuf::uint32 penalty_level_dire() const;
  inline void set_penalty_level_dire(::google::protobuf::uint32 value);
  
  // optional uint32 load_game_id = 45;
  inline bool has_load_game_id() const;
  inline void clear_load_game_id();
  static const int kLoadGameIdFieldNumber = 45;
  inline ::google::protobuf::uint32 load_game_id() const;
  inline void set_load_game_id(::google::protobuf::uint32 value);
  
  // optional uint32 series_type = 46;
  inline bool has_series_type() const;
  inline void clear_series_type();
  static const int kSeriesTypeFieldNumber = 46;
  inline ::google::protobuf::uint32 series_type() const;
  inline void set_series_type(::google::protobuf::uint32 value);
  
  // optional uint32 radiant_series_wins = 47;
  inline bool has_radiant_series_wins() const;
  inline void clear_radiant_series_wins();
  static const int kRadiantSeriesWinsFieldNumber = 47;
  inline ::google::protobuf::uint32 radiant_series_wins() const;
  inline void set_radiant_series_wins(::google::protobuf::uint32 value);
  
  // optional uint32 dire_series_wins = 48;
  inline bool has_dire_series_wins() const;
  inline void clear_dire_series_wins();
  static const int kDireSeriesWinsFieldNumber = 48;
  inline ::google::protobuf::uint32 dire_series_wins() const;
  inline void set_dire_series_wins(::google::protobuf::uint32 value);
  
  // optional uint32 loot_generated = 49;
  inline bool has_loot_generated() const;
  inline void clear_loot_generated();
  static const int kLootGeneratedFieldNumber = 49;
  inline ::google::protobuf::uint32 loot_generated() const;
  inline void set_loot_generated(::google::protobuf::uint32 value);
  
  // optional uint32 loot_awarded = 50;
  inline bool has_loot_awarded() const;
  inline void clear_loot_awarded();
  static const int kLootAwardedFieldNumber = 50;
  inline ::google::protobuf::uint32 loot_awarded() const;
  inline void set_loot_awarded(::google::protobuf::uint32 value);
  
  // optional bool allchat = 51 [default = false];
  inline bool has_allchat() const;
  inline void clear_allchat();
  static const int kAllchatFieldNumber = 51;
  inline bool allchat() const;
  inline void set_allchat(bool value);
  
  // optional uint32 rank_change = 52;
  inline bool has_rank_change() const;
  inline void clear_rank_change();
  static const int kRankChangeFieldNumber = 52;
  inline ::google::protobuf::uint32 rank_change() const;
  inline void set_rank_change(::google::protobuf::uint32 value);
  
  // optional .LobbyDotaTVDelay dota_tv_delay = 53 [default = LobbyDotaTV_10];
  inline bool has_dota_tv_delay() const;
  inline void clear_dota_tv_delay();
  static const int kDotaTvDelayFieldNumber = 53;
  inline LobbyDotaTVDelay dota_tv_delay() const;
  inline void set_dota_tv_delay(LobbyDotaTVDelay value);
  
  // optional string custom_game_mode = 54;
  inline bool has_custom_game_mode() const;
  inline void clear_custom_game_mode();
  static const int kCustomGameModeFieldNumber = 54;
  inline const ::std::string& custom_game_mode() const;
  inline void set_custom_game_mode(const ::std::string& value);
  inline void set_custom_game_mode(const char* value);
  inline void set_custom_game_mode(const char* value, size_t size);
  inline ::std::string* mutable_custom_game_mode();
  inline ::std::string* release_custom_game_mode();
  
  // optional string custom_map_name = 55;
  inline bool has_custom_map_name() const;
  inline void clear_custom_map_name();
  static const int kCustomMapNameFieldNumber = 55;
  inline const ::std::string& custom_map_name() const;
  inline void set_custom_map_name(const ::std::string& value);
  inline void set_custom_map_name(const char* value);
  inline void set_custom_map_name(const char* value, size_t size);
  inline ::std::string* mutable_custom_map_name();
  inline ::std::string* release_custom_map_name();
  
  // optional uint32 custom_difficulty = 56;
  inline bool has_custom_difficulty() const;
  inline void clear_custom_difficulty();
  static const int kCustomDifficultyFieldNumber = 56;
  inline ::google::protobuf::uint32 custom_difficulty() const;
  inline void set_custom_difficulty(::google::protobuf::uint32 value);
  
  // optional bool lan = 57;
  inline bool has_lan() const;
  inline void clear_lan();
  static const int kLanFieldNumber = 57;
  inline bool lan() const;
  inline void set_lan(bool value);
  
  // repeated .CLobbyBroadcastChannelInfo broadcast_channel_info = 58;
  inline int broadcast_channel_info_size() const;
  inline void clear_broadcast_channel_info();
  static const int kBroadcastChannelInfoFieldNumber = 58;
  inline const ::CLobbyBroadcastChannelInfo& broadcast_channel_info(int index) const;
  inline ::CLobbyBroadcastChannelInfo* mutable_broadcast_channel_info(int index);
  inline ::CLobbyBroadcastChannelInfo* add_broadcast_channel_info();
  inline const ::google::protobuf::RepeatedPtrField< ::CLobbyBroadcastChannelInfo >&
      broadcast_channel_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::CLobbyBroadcastChannelInfo >*
      mutable_broadcast_channel_info();
  
  // optional uint32 first_leaver_accountid = 59;
  inline bool has_first_leaver_accountid() const;
  inline void clear_first_leaver_accountid();
  static const int kFirstLeaverAccountidFieldNumber = 59;
  inline ::google::protobuf::uint32 first_leaver_accountid() const;
  inline void set_first_leaver_accountid(::google::protobuf::uint32 value);
  
  // optional uint32 series_id = 60;
  inline bool has_series_id() const;
  inline void clear_series_id();
  static const int kSeriesIdFieldNumber = 60;
  inline ::google::protobuf::uint32 series_id() const;
  inline void set_series_id(::google::protobuf::uint32 value);
  
  // optional bool low_priority = 61;
  inline bool has_low_priority() const;
  inline void clear_low_priority();
  static const int kLowPriorityFieldNumber = 61;
  inline bool low_priority() const;
  inline void set_low_priority(bool value);
  
  // repeated .CSODOTALobby.CExtraMsg extra_messages = 62;
  inline int extra_messages_size() const;
  inline void clear_extra_messages();
  static const int kExtraMessagesFieldNumber = 62;
  inline const ::CSODOTALobby_CExtraMsg& extra_messages(int index) const;
  inline ::CSODOTALobby_CExtraMsg* mutable_extra_messages(int index);
  inline ::CSODOTALobby_CExtraMsg* add_extra_messages();
  inline const ::google::protobuf::RepeatedPtrField< ::CSODOTALobby_CExtraMsg >&
      extra_messages() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSODOTALobby_CExtraMsg >*
      mutable_extra_messages();
  
  // optional .CDOTASaveGame save_game = 63;
  inline bool has_save_game() const;
  inline void clear_save_game();
  static const int kSaveGameFieldNumber = 63;
  inline const ::CDOTASaveGame& save_game() const;
  inline ::CDOTASaveGame* mutable_save_game();
  inline ::CDOTASaveGame* release_save_game();
  
  // optional uint32 custom_game_id = 64;
  inline bool has_custom_game_id() const;
  inline void clear_custom_game_id();
  static const int kCustomGameIdFieldNumber = 64;
  inline ::google::protobuf::uint32 custom_game_id() const;
  inline void set_custom_game_id(::google::protobuf::uint32 value);
  
  // optional bool first_blood_happened = 65;
  inline bool has_first_blood_happened() const;
  inline void clear_first_blood_happened();
  static const int kFirstBloodHappenedFieldNumber = 65;
  inline bool first_blood_happened() const;
  inline void set_first_blood_happened(bool value);
  
  // optional bool discard_match_results = 66;
  inline bool has_discard_match_results() const;
  inline void clear_discard_match_results();
  static const int kDiscardMatchResultsFieldNumber = 66;
  inline bool discard_match_results() const;
  inline void set_discard_match_results(bool value);
  
  // optional bool mass_disconnect = 67;
  inline bool has_mass_disconnect() const;
  inline void clear_mass_disconnect();
  static const int kMassDisconnectFieldNumber = 67;
  inline bool mass_disconnect() const;
  inline void set_mass_disconnect(bool value);
  
  // @@protoc_insertion_point(class_scope:CSODOTALobby)
 private:
  inline void set_has_lobby_id();
  inline void clear_has_lobby_id();
  inline void set_has_leader_id();
  inline void clear_has_leader_id();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_game_mode();
  inline void clear_has_game_mode();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_connect();
  inline void clear_has_connect();
  inline void set_has_lobby_type();
  inline void clear_has_lobby_type();
  inline void set_has_allow_cheats();
  inline void clear_has_allow_cheats();
  inline void set_has_fill_with_bots();
  inline void clear_has_fill_with_bots();
  inline void set_has_intro_mode();
  inline void clear_has_intro_mode();
  inline void set_has_game_name();
  inline void clear_has_game_name();
  inline void set_has_tutorial_lesson();
  inline void clear_has_tutorial_lesson();
  inline void set_has_tournament_id();
  inline void clear_has_tournament_id();
  inline void set_has_tournament_game_id();
  inline void clear_has_tournament_game_id();
  inline void set_has_server_region();
  inline void clear_has_server_region();
  inline void set_has_game_state();
  inline void clear_has_game_state();
  inline void set_has_num_spectators();
  inline void clear_has_num_spectators();
  inline void set_has_tower_state();
  inline void clear_has_tower_state();
  inline void set_has_matchgroup();
  inline void clear_has_matchgroup();
  inline void set_has_cm_pick();
  inline void clear_has_cm_pick();
  inline void set_has_match_id();
  inline void clear_has_match_id();
  inline void set_has_allow_spectating();
  inline void clear_has_allow_spectating();
  inline void set_has_bot_difficulty();
  inline void clear_has_bot_difficulty();
  inline void set_has_game_version();
  inline void clear_has_game_version();
  inline void set_has_pass_key();
  inline void clear_has_pass_key();
  inline void set_has_leagueid();
  inline void clear_has_leagueid();
  inline void set_has_penalty_level_radiant();
  inline void clear_has_penalty_level_radiant();
  inline void set_has_penalty_level_dire();
  inline void clear_has_penalty_level_dire();
  inline void set_has_load_game_id();
  inline void clear_has_load_game_id();
  inline void set_has_series_type();
  inline void clear_has_series_type();
  inline void set_has_radiant_series_wins();
  inline void clear_has_radiant_series_wins();
  inline void set_has_dire_series_wins();
  inline void clear_has_dire_series_wins();
  inline void set_has_loot_generated();
  inline void clear_has_loot_generated();
  inline void set_has_loot_awarded();
  inline void clear_has_loot_awarded();
  inline void set_has_allchat();
  inline void clear_has_allchat();
  inline void set_has_rank_change();
  inline void clear_has_rank_change();
  inline void set_has_dota_tv_delay();
  inline void clear_has_dota_tv_delay();
  inline void set_has_custom_game_mode();
  inline void clear_has_custom_game_mode();
  inline void set_has_custom_map_name();
  inline void clear_has_custom_map_name();
  inline void set_has_custom_difficulty();
  inline void clear_has_custom_difficulty();
  inline void set_has_lan();
  inline void clear_has_lan();
  inline void set_has_first_leaver_accountid();
  inline void clear_has_first_leaver_accountid();
  inline void set_has_series_id();
  inline void clear_has_series_id();
  inline void set_has_low_priority();
  inline void clear_has_low_priority();
  inline void set_has_save_game();
  inline void clear_has_save_game();
  inline void set_has_custom_game_id();
  inline void clear_has_custom_game_id();
  inline void set_has_first_blood_happened();
  inline void clear_has_first_blood_happened();
  inline void set_has_discard_match_results();
  inline void clear_has_discard_match_results();
  inline void set_has_mass_disconnect();
  inline void clear_has_mass_disconnect();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 lobby_id_;
  ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember > members_;
  ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember > left_members_;
  ::google::protobuf::uint64 leader_id_;
  ::google::protobuf::uint64 server_id_;
  ::google::protobuf::uint32 game_mode_;
  int state_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > pending_invites_;
  ::std::string* connect_;
  ::std::string* game_name_;
  int lobby_type_;
  bool allow_cheats_;
  bool fill_with_bots_;
  bool intro_mode_;
  bool allow_spectating_;
  ::google::protobuf::RepeatedPtrField< ::CLobbyTeamDetails > team_details_;
  ::google::protobuf::uint32 tutorial_lesson_;
  ::google::protobuf::uint32 tournament_id_;
  ::google::protobuf::uint32 tournament_game_id_;
  ::google::protobuf::uint32 server_region_;
  int game_state_;
  ::google::protobuf::uint32 num_spectators_;
  ::google::protobuf::uint32 tower_state_;
  ::google::protobuf::uint32 matchgroup_;
  int cm_pick_;
  ::google::protobuf::uint32 match_id_;
  int bot_difficulty_;
  int game_version_;
  ::google::protobuf::RepeatedPtrField< ::CLobbyTimedRewardDetails > timed_reward_details_;
  ::std::string* pass_key_;
  ::google::protobuf::RepeatedField<int> bot_slot_difficulty_;
  ::google::protobuf::uint32 leagueid_;
  ::google::protobuf::uint32 penalty_level_radiant_;
  ::google::protobuf::uint32 penalty_level_dire_;
  ::google::protobuf::uint32 load_game_id_;
  ::google::protobuf::uint32 series_type_;
  ::google::protobuf::uint32 radiant_series_wins_;
  ::google::protobuf::uint32 dire_series_wins_;
  ::google::protobuf::uint32 loot_generated_;
  ::google::protobuf::uint32 loot_awarded_;
  ::google::protobuf::uint32 rank_change_;
  ::std::string* custom_game_mode_;
  int dota_tv_delay_;
  ::google::protobuf::uint32 custom_difficulty_;
  ::std::string* custom_map_name_;
  ::google::protobuf::RepeatedPtrField< ::CLobbyBroadcastChannelInfo > broadcast_channel_info_;
  bool allchat_;
  bool lan_;
  bool low_priority_;
  bool first_blood_happened_;
  ::google::protobuf::uint32 first_leaver_accountid_;
  ::google::protobuf::RepeatedPtrField< ::CSODOTALobby_CExtraMsg > extra_messages_;
  ::google::protobuf::uint32 series_id_;
  ::google::protobuf::uint32 custom_game_id_;
  ::CDOTASaveGame* save_game_;
  bool discard_match_results_;
  bool mass_disconnect_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(57 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CSODOTALobby* default_instance_;
};
// -------------------------------------------------------------------

class CSODOTALobbyInternal : public ::google::protobuf::Message {
 public:
  CSODOTALobbyInternal();
  virtual ~CSODOTALobbyInternal();
  
  CSODOTALobbyInternal(const CSODOTALobbyInternal& from);
  
  inline CSODOTALobbyInternal& operator=(const CSODOTALobbyInternal& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSODOTALobbyInternal& default_instance();
  
  void Swap(CSODOTALobbyInternal* other);
  
  // implements Message ----------------------------------------------
  
  CSODOTALobbyInternal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSODOTALobbyInternal& from);
  void MergeFrom(const CSODOTALobbyInternal& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string search_key = 1;
  inline bool has_search_key() const;
  inline void clear_search_key();
  static const int kSearchKeyFieldNumber = 1;
  inline const ::std::string& search_key() const;
  inline void set_search_key(const ::std::string& value);
  inline void set_search_key(const char* value);
  inline void set_search_key(const char* value, size_t size);
  inline ::std::string* mutable_search_key();
  inline ::std::string* release_search_key();
  
  // optional uint32 average_rank = 3;
  inline bool has_average_rank() const;
  inline void clear_average_rank();
  static const int kAverageRankFieldNumber = 3;
  inline ::google::protobuf::uint32 average_rank() const;
  inline void set_average_rank(::google::protobuf::uint32 value);
  
  // optional fixed32 replay_salt = 4;
  inline bool has_replay_salt() const;
  inline void clear_replay_salt();
  static const int kReplaySaltFieldNumber = 4;
  inline ::google::protobuf::uint32 replay_salt() const;
  inline void set_replay_salt(::google::protobuf::uint32 value);
  
  // optional bool disable_radiant_automatic_team_detection = 5;
  inline bool has_disable_radiant_automatic_team_detection() const;
  inline void clear_disable_radiant_automatic_team_detection();
  static const int kDisableRadiantAutomaticTeamDetectionFieldNumber = 5;
  inline bool disable_radiant_automatic_team_detection() const;
  inline void set_disable_radiant_automatic_team_detection(bool value);
  
  // optional bool disable_dire_automatic_team_detection = 6;
  inline bool has_disable_dire_automatic_team_detection() const;
  inline void clear_disable_dire_automatic_team_detection();
  static const int kDisableDireAutomaticTeamDetectionFieldNumber = 6;
  inline bool disable_dire_automatic_team_detection() const;
  inline void set_disable_dire_automatic_team_detection(bool value);
  
  // optional bool submitted_match_history = 8;
  inline bool has_submitted_match_history() const;
  inline void clear_submitted_match_history();
  static const int kSubmittedMatchHistoryFieldNumber = 8;
  inline bool submitted_match_history() const;
  inline void set_submitted_match_history(bool value);
  
  // repeated .CDOTALobbyMemberPrivate members = 9;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 9;
  inline const ::CDOTALobbyMemberPrivate& members(int index) const;
  inline ::CDOTALobbyMemberPrivate* mutable_members(int index);
  inline ::CDOTALobbyMemberPrivate* add_members();
  inline const ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMemberPrivate >&
      members() const;
  inline ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMemberPrivate >*
      mutable_members();
  
  // repeated .CDOTALobbyMemberPrivate left_members = 10;
  inline int left_members_size() const;
  inline void clear_left_members();
  static const int kLeftMembersFieldNumber = 10;
  inline const ::CDOTALobbyMemberPrivate& left_members(int index) const;
  inline ::CDOTALobbyMemberPrivate* mutable_left_members(int index);
  inline ::CDOTALobbyMemberPrivate* add_left_members();
  inline const ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMemberPrivate >&
      left_members() const;
  inline ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMemberPrivate >*
      mutable_left_members();
  
  // optional bytes save_game_data = 11;
  inline bool has_save_game_data() const;
  inline void clear_save_game_data();
  static const int kSaveGameDataFieldNumber = 11;
  inline const ::std::string& save_game_data() const;
  inline void set_save_game_data(const ::std::string& value);
  inline void set_save_game_data(const char* value);
  inline void set_save_game_data(const void* value, size_t size);
  inline ::std::string* mutable_save_game_data();
  inline ::std::string* release_save_game_data();
  
  // optional uint32 server_run_time = 12;
  inline bool has_server_run_time() const;
  inline void clear_server_run_time();
  static const int kServerRunTimeFieldNumber = 12;
  inline ::google::protobuf::uint32 server_run_time() const;
  inline void set_server_run_time(::google::protobuf::uint32 value);
  
  // optional uint32 last_state_change_time = 13;
  inline bool has_last_state_change_time() const;
  inline void clear_last_state_change_time();
  static const int kLastStateChangeTimeFieldNumber = 13;
  inline ::google::protobuf::uint32 last_state_change_time() const;
  inline void set_last_state_change_time(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CSODOTALobbyInternal)
 private:
  inline void set_has_search_key();
  inline void clear_has_search_key();
  inline void set_has_average_rank();
  inline void clear_has_average_rank();
  inline void set_has_replay_salt();
  inline void clear_has_replay_salt();
  inline void set_has_disable_radiant_automatic_team_detection();
  inline void clear_has_disable_radiant_automatic_team_detection();
  inline void set_has_disable_dire_automatic_team_detection();
  inline void clear_has_disable_dire_automatic_team_detection();
  inline void set_has_submitted_match_history();
  inline void clear_has_submitted_match_history();
  inline void set_has_save_game_data();
  inline void clear_has_save_game_data();
  inline void set_has_server_run_time();
  inline void clear_has_server_run_time();
  inline void set_has_last_state_change_time();
  inline void clear_has_last_state_change_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* search_key_;
  ::google::protobuf::uint32 average_rank_;
  ::google::protobuf::uint32 replay_salt_;
  bool disable_radiant_automatic_team_detection_;
  bool disable_dire_automatic_team_detection_;
  bool submitted_match_history_;
  ::google::protobuf::uint32 server_run_time_;
  ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMemberPrivate > members_;
  ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMemberPrivate > left_members_;
  ::std::string* save_game_data_;
  ::google::protobuf::uint32 last_state_change_time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CSODOTALobbyInternal* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAGenericResult : public ::google::protobuf::Message {
 public:
  CMsgDOTAGenericResult();
  virtual ~CMsgDOTAGenericResult();
  
  CMsgDOTAGenericResult(const CMsgDOTAGenericResult& from);
  
  inline CMsgDOTAGenericResult& operator=(const CMsgDOTAGenericResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAGenericResult& default_instance();
  
  void Swap(CMsgDOTAGenericResult* other);
  
  // implements Message ----------------------------------------------
  
  CMsgDOTAGenericResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAGenericResult& from);
  void MergeFrom(const CMsgDOTAGenericResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 eresult = 1 [default = 2];
  inline bool has_eresult() const;
  inline void clear_eresult();
  static const int kEresultFieldNumber = 1;
  inline ::google::protobuf::uint32 eresult() const;
  inline void set_eresult(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CMsgDOTAGenericResult)
 private:
  inline void set_has_eresult();
  inline void clear_has_eresult();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 eresult_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgDOTAGenericResult* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTABroadcastNotification : public ::google::protobuf::Message {
 public:
  CMsgDOTABroadcastNotification();
  virtual ~CMsgDOTABroadcastNotification();
  
  CMsgDOTABroadcastNotification(const CMsgDOTABroadcastNotification& from);
  
  inline CMsgDOTABroadcastNotification& operator=(const CMsgDOTABroadcastNotification& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTABroadcastNotification& default_instance();
  
  void Swap(CMsgDOTABroadcastNotification* other);
  
  // implements Message ----------------------------------------------
  
  CMsgDOTABroadcastNotification* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTABroadcastNotification& from);
  void MergeFrom(const CMsgDOTABroadcastNotification& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string message = 1;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 1;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  
  // @@protoc_insertion_point(class_scope:CMsgDOTABroadcastNotification)
 private:
  inline void set_has_message();
  inline void clear_has_message();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* message_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgDOTABroadcastNotification* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAPCBangTimedReward : public ::google::protobuf::Message {
 public:
  CMsgDOTAPCBangTimedReward();
  virtual ~CMsgDOTAPCBangTimedReward();
  
  CMsgDOTAPCBangTimedReward(const CMsgDOTAPCBangTimedReward& from);
  
  inline CMsgDOTAPCBangTimedReward& operator=(const CMsgDOTAPCBangTimedReward& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAPCBangTimedReward& default_instance();
  
  void Swap(CMsgDOTAPCBangTimedReward* other);
  
  // implements Message ----------------------------------------------
  
  CMsgDOTAPCBangTimedReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAPCBangTimedReward& from);
  void MergeFrom(const CMsgDOTAPCBangTimedReward& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string persona = 1;
  inline bool has_persona() const;
  inline void clear_persona();
  static const int kPersonaFieldNumber = 1;
  inline const ::std::string& persona() const;
  inline void set_persona(const ::std::string& value);
  inline void set_persona(const char* value);
  inline void set_persona(const char* value, size_t size);
  inline ::std::string* mutable_persona();
  inline ::std::string* release_persona();
  
  // optional uint32 itemdef = 2;
  inline bool has_itemdef() const;
  inline void clear_itemdef();
  static const int kItemdefFieldNumber = 2;
  inline ::google::protobuf::uint32 itemdef() const;
  inline void set_itemdef(::google::protobuf::uint32 value);
  
  // optional string pcbangname = 3;
  inline bool has_pcbangname() const;
  inline void clear_pcbangname();
  static const int kPcbangnameFieldNumber = 3;
  inline const ::std::string& pcbangname() const;
  inline void set_pcbangname(const ::std::string& value);
  inline void set_pcbangname(const char* value);
  inline void set_pcbangname(const char* value, size_t size);
  inline ::std::string* mutable_pcbangname();
  inline ::std::string* release_pcbangname();
  
  // @@protoc_insertion_point(class_scope:CMsgDOTAPCBangTimedReward)
 private:
  inline void set_has_persona();
  inline void clear_has_persona();
  inline void set_has_itemdef();
  inline void clear_has_itemdef();
  inline void set_has_pcbangname();
  inline void clear_has_pcbangname();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* persona_;
  ::std::string* pcbangname_;
  ::google::protobuf::uint32 itemdef_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgDOTAPCBangTimedReward* default_instance_;
};
// -------------------------------------------------------------------

class CAttribute_String : public ::google::protobuf::Message {
 public:
  CAttribute_String();
  virtual ~CAttribute_String();
  
  CAttribute_String(const CAttribute_String& from);
  
  inline CAttribute_String& operator=(const CAttribute_String& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CAttribute_String& default_instance();
  
  void Swap(CAttribute_String* other);
  
  // implements Message ----------------------------------------------
  
  CAttribute_String* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CAttribute_String& from);
  void MergeFrom(const CAttribute_String& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  
  // @@protoc_insertion_point(class_scope:CAttribute_String)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CAttribute_String* default_instance_;
};
// -------------------------------------------------------------------

class CAttribute_ItemDynamicRecipeComponent : public ::google::protobuf::Message {
 public:
  CAttribute_ItemDynamicRecipeComponent();
  virtual ~CAttribute_ItemDynamicRecipeComponent();
  
  CAttribute_ItemDynamicRecipeComponent(const CAttribute_ItemDynamicRecipeComponent& from);
  
  inline CAttribute_ItemDynamicRecipeComponent& operator=(const CAttribute_ItemDynamicRecipeComponent& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CAttribute_ItemDynamicRecipeComponent& default_instance();
  
  void Swap(CAttribute_ItemDynamicRecipeComponent* other);
  
  // implements Message ----------------------------------------------
  
  CAttribute_ItemDynamicRecipeComponent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CAttribute_ItemDynamicRecipeComponent& from);
  void MergeFrom(const CAttribute_ItemDynamicRecipeComponent& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 item_def = 1;
  inline bool has_item_def() const;
  inline void clear_item_def();
  static const int kItemDefFieldNumber = 1;
  inline ::google::protobuf::uint32 item_def() const;
  inline void set_item_def(::google::protobuf::uint32 value);
  
  // optional uint32 item_quality = 2;
  inline bool has_item_quality() const;
  inline void clear_item_quality();
  static const int kItemQualityFieldNumber = 2;
  inline ::google::protobuf::uint32 item_quality() const;
  inline void set_item_quality(::google::protobuf::uint32 value);
  
  // optional uint32 item_flags = 3;
  inline bool has_item_flags() const;
  inline void clear_item_flags();
  static const int kItemFlagsFieldNumber = 3;
  inline ::google::protobuf::uint32 item_flags() const;
  inline void set_item_flags(::google::protobuf::uint32 value);
  
  // optional string attributes_string = 4;
  inline bool has_attributes_string() const;
  inline void clear_attributes_string();
  static const int kAttributesStringFieldNumber = 4;
  inline const ::std::string& attributes_string() const;
  inline void set_attributes_string(const ::std::string& value);
  inline void set_attributes_string(const char* value);
  inline void set_attributes_string(const char* value, size_t size);
  inline ::std::string* mutable_attributes_string();
  inline ::std::string* release_attributes_string();
  
  // optional uint32 item_count = 5;
  inline bool has_item_count() const;
  inline void clear_item_count();
  static const int kItemCountFieldNumber = 5;
  inline ::google::protobuf::uint32 item_count() const;
  inline void set_item_count(::google::protobuf::uint32 value);
  
  // optional uint32 items_fulfilled = 6;
  inline bool has_items_fulfilled() const;
  inline void clear_items_fulfilled();
  static const int kItemsFulfilledFieldNumber = 6;
  inline ::google::protobuf::uint32 items_fulfilled() const;
  inline void set_items_fulfilled(::google::protobuf::uint32 value);
  
  // optional uint32 item_rarity = 7;
  inline bool has_item_rarity() const;
  inline void clear_item_rarity();
  static const int kItemRarityFieldNumber = 7;
  inline ::google::protobuf::uint32 item_rarity() const;
  inline void set_item_rarity(::google::protobuf::uint32 value);
  
  // optional string lootlist = 8;
  inline bool has_lootlist() const;
  inline void clear_lootlist();
  static const int kLootlistFieldNumber = 8;
  inline const ::std::string& lootlist() const;
  inline void set_lootlist(const ::std::string& value);
  inline void set_lootlist(const char* value);
  inline void set_lootlist(const char* value, size_t size);
  inline ::std::string* mutable_lootlist();
  inline ::std::string* release_lootlist();
  
  // optional uint64 fulfilled_item_id = 9;
  inline bool has_fulfilled_item_id() const;
  inline void clear_fulfilled_item_id();
  static const int kFulfilledItemIdFieldNumber = 9;
  inline ::google::protobuf::uint64 fulfilled_item_id() const;
  inline void set_fulfilled_item_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:CAttribute_ItemDynamicRecipeComponent)
 private:
  inline void set_has_item_def();
  inline void clear_has_item_def();
  inline void set_has_item_quality();
  inline void clear_has_item_quality();
  inline void set_has_item_flags();
  inline void clear_has_item_flags();
  inline void set_has_attributes_string();
  inline void clear_has_attributes_string();
  inline void set_has_item_count();
  inline void clear_has_item_count();
  inline void set_has_items_fulfilled();
  inline void clear_has_items_fulfilled();
  inline void set_has_item_rarity();
  inline void clear_has_item_rarity();
  inline void set_has_lootlist();
  inline void clear_has_lootlist();
  inline void set_has_fulfilled_item_id();
  inline void clear_has_fulfilled_item_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 item_def_;
  ::google::protobuf::uint32 item_quality_;
  ::std::string* attributes_string_;
  ::google::protobuf::uint32 item_flags_;
  ::google::protobuf::uint32 item_count_;
  ::google::protobuf::uint32 items_fulfilled_;
  ::google::protobuf::uint32 item_rarity_;
  ::std::string* lootlist_;
  ::google::protobuf::uint64 fulfilled_item_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CAttribute_ItemDynamicRecipeComponent* default_instance_;
};
// -------------------------------------------------------------------

class CProtoItemSocket : public ::google::protobuf::Message {
 public:
  CProtoItemSocket();
  virtual ~CProtoItemSocket();
  
  CProtoItemSocket(const CProtoItemSocket& from);
  
  inline CProtoItemSocket& operator=(const CProtoItemSocket& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CProtoItemSocket& default_instance();
  
  void Swap(CProtoItemSocket* other);
  
  // implements Message ----------------------------------------------
  
  CProtoItemSocket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProtoItemSocket& from);
  void MergeFrom(const CProtoItemSocket& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::uint64 item_id() const;
  inline void set_item_id(::google::protobuf::uint64 value);
  
  // optional uint32 attr_def_index = 2;
  inline bool has_attr_def_index() const;
  inline void clear_attr_def_index();
  static const int kAttrDefIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 attr_def_index() const;
  inline void set_attr_def_index(::google::protobuf::uint32 value);
  
  // optional uint32 required_type = 3;
  inline bool has_required_type() const;
  inline void clear_required_type();
  static const int kRequiredTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 required_type() const;
  inline void set_required_type(::google::protobuf::uint32 value);
  
  // optional string required_hero = 4;
  inline bool has_required_hero() const;
  inline void clear_required_hero();
  static const int kRequiredHeroFieldNumber = 4;
  inline const ::std::string& required_hero() const;
  inline void set_required_hero(const ::std::string& value);
  inline void set_required_hero(const char* value);
  inline void set_required_hero(const char* value, size_t size);
  inline ::std::string* mutable_required_hero();
  inline ::std::string* release_required_hero();
  
  // optional uint32 gem_def_index = 5;
  inline bool has_gem_def_index() const;
  inline void clear_gem_def_index();
  static const int kGemDefIndexFieldNumber = 5;
  inline ::google::protobuf::uint32 gem_def_index() const;
  inline void set_gem_def_index(::google::protobuf::uint32 value);
  
  // optional bool not_tradable = 6;
  inline bool has_not_tradable() const;
  inline void clear_not_tradable();
  static const int kNotTradableFieldNumber = 6;
  inline bool not_tradable() const;
  inline void set_not_tradable(bool value);
  
  // optional string required_item_slot = 7;
  inline bool has_required_item_slot() const;
  inline void clear_required_item_slot();
  static const int kRequiredItemSlotFieldNumber = 7;
  inline const ::std::string& required_item_slot() const;
  inline void set_required_item_slot(const ::std::string& value);
  inline void set_required_item_slot(const char* value);
  inline void set_required_item_slot(const char* value, size_t size);
  inline ::std::string* mutable_required_item_slot();
  inline ::std::string* release_required_item_slot();
  
  // @@protoc_insertion_point(class_scope:CProtoItemSocket)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_attr_def_index();
  inline void clear_has_attr_def_index();
  inline void set_has_required_type();
  inline void clear_has_required_type();
  inline void set_has_required_hero();
  inline void clear_has_required_hero();
  inline void set_has_gem_def_index();
  inline void clear_has_gem_def_index();
  inline void set_has_not_tradable();
  inline void clear_has_not_tradable();
  inline void set_has_required_item_slot();
  inline void clear_has_required_item_slot();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 item_id_;
  ::google::protobuf::uint32 attr_def_index_;
  ::google::protobuf::uint32 required_type_;
  ::std::string* required_hero_;
  ::google::protobuf::uint32 gem_def_index_;
  bool not_tradable_;
  ::std::string* required_item_slot_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CProtoItemSocket* default_instance_;
};
// -------------------------------------------------------------------

class CProtoItemSocket_Empty : public ::google::protobuf::Message {
 public:
  CProtoItemSocket_Empty();
  virtual ~CProtoItemSocket_Empty();
  
  CProtoItemSocket_Empty(const CProtoItemSocket_Empty& from);
  
  inline CProtoItemSocket_Empty& operator=(const CProtoItemSocket_Empty& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CProtoItemSocket_Empty& default_instance();
  
  void Swap(CProtoItemSocket_Empty* other);
  
  // implements Message ----------------------------------------------
  
  CProtoItemSocket_Empty* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProtoItemSocket_Empty& from);
  void MergeFrom(const CProtoItemSocket_Empty& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .CProtoItemSocket socket = 1;
  inline bool has_socket() const;
  inline void clear_socket();
  static const int kSocketFieldNumber = 1;
  inline const ::CProtoItemSocket& socket() const;
  inline ::CProtoItemSocket* mutable_socket();
  inline ::CProtoItemSocket* release_socket();
  
  // @@protoc_insertion_point(class_scope:CProtoItemSocket_Empty)
 private:
  inline void set_has_socket();
  inline void clear_has_socket();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::CProtoItemSocket* socket_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CProtoItemSocket_Empty* default_instance_;
};
// -------------------------------------------------------------------

class CProtoItemSocket_Effect : public ::google::protobuf::Message {
 public:
  CProtoItemSocket_Effect();
  virtual ~CProtoItemSocket_Effect();
  
  CProtoItemSocket_Effect(const CProtoItemSocket_Effect& from);
  
  inline CProtoItemSocket_Effect& operator=(const CProtoItemSocket_Effect& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CProtoItemSocket_Effect& default_instance();
  
  void Swap(CProtoItemSocket_Effect* other);
  
  // implements Message ----------------------------------------------
  
  CProtoItemSocket_Effect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProtoItemSocket_Effect& from);
  void MergeFrom(const CProtoItemSocket_Effect& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .CProtoItemSocket socket = 1;
  inline bool has_socket() const;
  inline void clear_socket();
  static const int kSocketFieldNumber = 1;
  inline const ::CProtoItemSocket& socket() const;
  inline ::CProtoItemSocket* mutable_socket();
  inline ::CProtoItemSocket* release_socket();
  
  // optional uint32 effect = 2;
  inline bool has_effect() const;
  inline void clear_effect();
  static const int kEffectFieldNumber = 2;
  inline ::google::protobuf::uint32 effect() const;
  inline void set_effect(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CProtoItemSocket_Effect)
 private:
  inline void set_has_socket();
  inline void clear_has_socket();
  inline void set_has_effect();
  inline void clear_has_effect();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::CProtoItemSocket* socket_;
  ::google::protobuf::uint32 effect_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CProtoItemSocket_Effect* default_instance_;
};
// -------------------------------------------------------------------

class CProtoItemSocket_Color : public ::google::protobuf::Message {
 public:
  CProtoItemSocket_Color();
  virtual ~CProtoItemSocket_Color();
  
  CProtoItemSocket_Color(const CProtoItemSocket_Color& from);
  
  inline CProtoItemSocket_Color& operator=(const CProtoItemSocket_Color& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CProtoItemSocket_Color& default_instance();
  
  void Swap(CProtoItemSocket_Color* other);
  
  // implements Message ----------------------------------------------
  
  CProtoItemSocket_Color* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProtoItemSocket_Color& from);
  void MergeFrom(const CProtoItemSocket_Color& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .CProtoItemSocket socket = 1;
  inline bool has_socket() const;
  inline void clear_socket();
  static const int kSocketFieldNumber = 1;
  inline const ::CProtoItemSocket& socket() const;
  inline ::CProtoItemSocket* mutable_socket();
  inline ::CProtoItemSocket* release_socket();
  
  // optional uint32 red = 2;
  inline bool has_red() const;
  inline void clear_red();
  static const int kRedFieldNumber = 2;
  inline ::google::protobuf::uint32 red() const;
  inline void set_red(::google::protobuf::uint32 value);
  
  // optional uint32 green = 3;
  inline bool has_green() const;
  inline void clear_green();
  static const int kGreenFieldNumber = 3;
  inline ::google::protobuf::uint32 green() const;
  inline void set_green(::google::protobuf::uint32 value);
  
  // optional uint32 blue = 4;
  inline bool has_blue() const;
  inline void clear_blue();
  static const int kBlueFieldNumber = 4;
  inline ::google::protobuf::uint32 blue() const;
  inline void set_blue(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CProtoItemSocket_Color)
 private:
  inline void set_has_socket();
  inline void clear_has_socket();
  inline void set_has_red();
  inline void clear_has_red();
  inline void set_has_green();
  inline void clear_has_green();
  inline void set_has_blue();
  inline void clear_has_blue();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::CProtoItemSocket* socket_;
  ::google::protobuf::uint32 red_;
  ::google::protobuf::uint32 green_;
  ::google::protobuf::uint32 blue_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CProtoItemSocket_Color* default_instance_;
};
// -------------------------------------------------------------------

class CProtoItemSocket_Strange : public ::google::protobuf::Message {
 public:
  CProtoItemSocket_Strange();
  virtual ~CProtoItemSocket_Strange();
  
  CProtoItemSocket_Strange(const CProtoItemSocket_Strange& from);
  
  inline CProtoItemSocket_Strange& operator=(const CProtoItemSocket_Strange& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CProtoItemSocket_Strange& default_instance();
  
  void Swap(CProtoItemSocket_Strange* other);
  
  // implements Message ----------------------------------------------
  
  CProtoItemSocket_Strange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProtoItemSocket_Strange& from);
  void MergeFrom(const CProtoItemSocket_Strange& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .CProtoItemSocket socket = 1;
  inline bool has_socket() const;
  inline void clear_socket();
  static const int kSocketFieldNumber = 1;
  inline const ::CProtoItemSocket& socket() const;
  inline ::CProtoItemSocket* mutable_socket();
  inline ::CProtoItemSocket* release_socket();
  
  // optional uint32 strange_type = 2;
  inline bool has_strange_type() const;
  inline void clear_strange_type();
  static const int kStrangeTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 strange_type() const;
  inline void set_strange_type(::google::protobuf::uint32 value);
  
  // optional uint32 strange_value = 3;
  inline bool has_strange_value() const;
  inline void clear_strange_value();
  static const int kStrangeValueFieldNumber = 3;
  inline ::google::protobuf::uint32 strange_value() const;
  inline void set_strange_value(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CProtoItemSocket_Strange)
 private:
  inline void set_has_socket();
  inline void clear_has_socket();
  inline void set_has_strange_type();
  inline void clear_has_strange_type();
  inline void set_has_strange_value();
  inline void clear_has_strange_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::CProtoItemSocket* socket_;
  ::google::protobuf::uint32 strange_type_;
  ::google::protobuf::uint32 strange_value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CProtoItemSocket_Strange* default_instance_;
};
// -------------------------------------------------------------------

class CProtoItemSocket_Spectator : public ::google::protobuf::Message {
 public:
  CProtoItemSocket_Spectator();
  virtual ~CProtoItemSocket_Spectator();
  
  CProtoItemSocket_Spectator(const CProtoItemSocket_Spectator& from);
  
  inline CProtoItemSocket_Spectator& operator=(const CProtoItemSocket_Spectator& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CProtoItemSocket_Spectator& default_instance();
  
  void Swap(CProtoItemSocket_Spectator* other);
  
  // implements Message ----------------------------------------------
  
  CProtoItemSocket_Spectator* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProtoItemSocket_Spectator& from);
  void MergeFrom(const CProtoItemSocket_Spectator& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .CProtoItemSocket socket = 1;
  inline bool has_socket() const;
  inline void clear_socket();
  static const int kSocketFieldNumber = 1;
  inline const ::CProtoItemSocket& socket() const;
  inline ::CProtoItemSocket* mutable_socket();
  inline ::CProtoItemSocket* release_socket();
  
  // optional uint32 games_viewed = 2;
  inline bool has_games_viewed() const;
  inline void clear_games_viewed();
  static const int kGamesViewedFieldNumber = 2;
  inline ::google::protobuf::uint32 games_viewed() const;
  inline void set_games_viewed(::google::protobuf::uint32 value);
  
  // optional uint32 corporation_id = 3;
  inline bool has_corporation_id() const;
  inline void clear_corporation_id();
  static const int kCorporationIdFieldNumber = 3;
  inline ::google::protobuf::uint32 corporation_id() const;
  inline void set_corporation_id(::google::protobuf::uint32 value);
  
  // optional uint32 league_id = 4;
  inline bool has_league_id() const;
  inline void clear_league_id();
  static const int kLeagueIdFieldNumber = 4;
  inline ::google::protobuf::uint32 league_id() const;
  inline void set_league_id(::google::protobuf::uint32 value);
  
  // optional uint32 team_id = 5;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 5;
  inline ::google::protobuf::uint32 team_id() const;
  inline void set_team_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CProtoItemSocket_Spectator)
 private:
  inline void set_has_socket();
  inline void clear_has_socket();
  inline void set_has_games_viewed();
  inline void clear_has_games_viewed();
  inline void set_has_corporation_id();
  inline void clear_has_corporation_id();
  inline void set_has_league_id();
  inline void clear_has_league_id();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::CProtoItemSocket* socket_;
  ::google::protobuf::uint32 games_viewed_;
  ::google::protobuf::uint32 corporation_id_;
  ::google::protobuf::uint32 league_id_;
  ::google::protobuf::uint32 team_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CProtoItemSocket_Spectator* default_instance_;
};
// -------------------------------------------------------------------

class CProtoItemSocket_AnimModifier : public ::google::protobuf::Message {
 public:
  CProtoItemSocket_AnimModifier();
  virtual ~CProtoItemSocket_AnimModifier();
  
  CProtoItemSocket_AnimModifier(const CProtoItemSocket_AnimModifier& from);
  
  inline CProtoItemSocket_AnimModifier& operator=(const CProtoItemSocket_AnimModifier& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CProtoItemSocket_AnimModifier& default_instance();
  
  void Swap(CProtoItemSocket_AnimModifier* other);
  
  // implements Message ----------------------------------------------
  
  CProtoItemSocket_AnimModifier* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProtoItemSocket_AnimModifier& from);
  void MergeFrom(const CProtoItemSocket_AnimModifier& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .CProtoItemSocket socket = 1;
  inline bool has_socket() const;
  inline void clear_socket();
  static const int kSocketFieldNumber = 1;
  inline const ::CProtoItemSocket& socket() const;
  inline ::CProtoItemSocket* mutable_socket();
  inline ::CProtoItemSocket* release_socket();
  
  // optional uint32 anim_modifier = 2;
  inline bool has_anim_modifier() const;
  inline void clear_anim_modifier();
  static const int kAnimModifierFieldNumber = 2;
  inline ::google::protobuf::uint32 anim_modifier() const;
  inline void set_anim_modifier(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CProtoItemSocket_AnimModifier)
 private:
  inline void set_has_socket();
  inline void clear_has_socket();
  inline void set_has_anim_modifier();
  inline void clear_has_anim_modifier();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::CProtoItemSocket* socket_;
  ::google::protobuf::uint32 anim_modifier_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CProtoItemSocket_AnimModifier* default_instance_;
};
// -------------------------------------------------------------------

class CProtoItemSocket_Autograph : public ::google::protobuf::Message {
 public:
  CProtoItemSocket_Autograph();
  virtual ~CProtoItemSocket_Autograph();
  
  CProtoItemSocket_Autograph(const CProtoItemSocket_Autograph& from);
  
  inline CProtoItemSocket_Autograph& operator=(const CProtoItemSocket_Autograph& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CProtoItemSocket_Autograph& default_instance();
  
  void Swap(CProtoItemSocket_Autograph* other);
  
  // implements Message ----------------------------------------------
  
  CProtoItemSocket_Autograph* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProtoItemSocket_Autograph& from);
  void MergeFrom(const CProtoItemSocket_Autograph& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .CProtoItemSocket socket = 1;
  inline bool has_socket() const;
  inline void clear_socket();
  static const int kSocketFieldNumber = 1;
  inline const ::CProtoItemSocket& socket() const;
  inline ::CProtoItemSocket* mutable_socket();
  inline ::CProtoItemSocket* release_socket();
  
  // optional string autograph = 2;
  inline bool has_autograph() const;
  inline void clear_autograph();
  static const int kAutographFieldNumber = 2;
  inline const ::std::string& autograph() const;
  inline void set_autograph(const ::std::string& value);
  inline void set_autograph(const char* value);
  inline void set_autograph(const char* value, size_t size);
  inline ::std::string* mutable_autograph();
  inline ::std::string* release_autograph();
  
  // @@protoc_insertion_point(class_scope:CProtoItemSocket_Autograph)
 private:
  inline void set_has_socket();
  inline void clear_has_socket();
  inline void set_has_autograph();
  inline void clear_has_autograph();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::CProtoItemSocket* socket_;
  ::std::string* autograph_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CProtoItemSocket_Autograph* default_instance_;
};
// -------------------------------------------------------------------

class CProtoItemSocket_AbilityEffect : public ::google::protobuf::Message {
 public:
  CProtoItemSocket_AbilityEffect();
  virtual ~CProtoItemSocket_AbilityEffect();
  
  CProtoItemSocket_AbilityEffect(const CProtoItemSocket_AbilityEffect& from);
  
  inline CProtoItemSocket_AbilityEffect& operator=(const CProtoItemSocket_AbilityEffect& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CProtoItemSocket_AbilityEffect& default_instance();
  
  void Swap(CProtoItemSocket_AbilityEffect* other);
  
  // implements Message ----------------------------------------------
  
  CProtoItemSocket_AbilityEffect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProtoItemSocket_AbilityEffect& from);
  void MergeFrom(const CProtoItemSocket_AbilityEffect& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .CProtoItemSocket socket = 1;
  inline bool has_socket() const;
  inline void clear_socket();
  static const int kSocketFieldNumber = 1;
  inline const ::CProtoItemSocket& socket() const;
  inline ::CProtoItemSocket* mutable_socket();
  inline ::CProtoItemSocket* release_socket();
  
  // optional uint32 ability_effect = 2;
  inline bool has_ability_effect() const;
  inline void clear_ability_effect();
  static const int kAbilityEffectFieldNumber = 2;
  inline ::google::protobuf::uint32 ability_effect() const;
  inline void set_ability_effect(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CProtoItemSocket_AbilityEffect)
 private:
  inline void set_has_socket();
  inline void clear_has_socket();
  inline void set_has_ability_effect();
  inline void clear_has_ability_effect();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::CProtoItemSocket* socket_;
  ::google::protobuf::uint32 ability_effect_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CProtoItemSocket_AbilityEffect* default_instance_;
};
// -------------------------------------------------------------------

class CProtoItemSocket_StaticVisuals : public ::google::protobuf::Message {
 public:
  CProtoItemSocket_StaticVisuals();
  virtual ~CProtoItemSocket_StaticVisuals();
  
  CProtoItemSocket_StaticVisuals(const CProtoItemSocket_StaticVisuals& from);
  
  inline CProtoItemSocket_StaticVisuals& operator=(const CProtoItemSocket_StaticVisuals& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CProtoItemSocket_StaticVisuals& default_instance();
  
  void Swap(CProtoItemSocket_StaticVisuals* other);
  
  // implements Message ----------------------------------------------
  
  CProtoItemSocket_StaticVisuals* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProtoItemSocket_StaticVisuals& from);
  void MergeFrom(const CProtoItemSocket_StaticVisuals& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .CProtoItemSocket socket = 1;
  inline bool has_socket() const;
  inline void clear_socket();
  static const int kSocketFieldNumber = 1;
  inline const ::CProtoItemSocket& socket() const;
  inline ::CProtoItemSocket* mutable_socket();
  inline ::CProtoItemSocket* release_socket();
  
  // @@protoc_insertion_point(class_scope:CProtoItemSocket_StaticVisuals)
 private:
  inline void set_has_socket();
  inline void clear_has_socket();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::CProtoItemSocket* socket_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CProtoItemSocket_StaticVisuals* default_instance_;
};
// -------------------------------------------------------------------

class CMatchPlayerAbilityUpgrade : public ::google::protobuf::Message {
 public:
  CMatchPlayerAbilityUpgrade();
  virtual ~CMatchPlayerAbilityUpgrade();
  
  CMatchPlayerAbilityUpgrade(const CMatchPlayerAbilityUpgrade& from);
  
  inline CMatchPlayerAbilityUpgrade& operator=(const CMatchPlayerAbilityUpgrade& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMatchPlayerAbilityUpgrade& default_instance();
  
  void Swap(CMatchPlayerAbilityUpgrade* other);
  
  // implements Message ----------------------------------------------
  
  CMatchPlayerAbilityUpgrade* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMatchPlayerAbilityUpgrade& from);
  void MergeFrom(const CMatchPlayerAbilityUpgrade& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 ability = 1;
  inline bool has_ability() const;
  inline void clear_ability();
  static const int kAbilityFieldNumber = 1;
  inline ::google::protobuf::uint32 ability() const;
  inline void set_ability(::google::protobuf::uint32 value);
  
  // optional uint32 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CMatchPlayerAbilityUpgrade)
 private:
  inline void set_has_ability();
  inline void clear_has_ability();
  inline void set_has_time();
  inline void clear_has_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 ability_;
  ::google::protobuf::uint32 time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CMatchPlayerAbilityUpgrade* default_instance_;
};
// -------------------------------------------------------------------

class CMatchAdditionalUnitInventory : public ::google::protobuf::Message {
 public:
  CMatchAdditionalUnitInventory();
  virtual ~CMatchAdditionalUnitInventory();
  
  CMatchAdditionalUnitInventory(const CMatchAdditionalUnitInventory& from);
  
  inline CMatchAdditionalUnitInventory& operator=(const CMatchAdditionalUnitInventory& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMatchAdditionalUnitInventory& default_instance();
  
  void Swap(CMatchAdditionalUnitInventory* other);
  
  // implements Message ----------------------------------------------
  
  CMatchAdditionalUnitInventory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMatchAdditionalUnitInventory& from);
  void MergeFrom(const CMatchAdditionalUnitInventory& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string unit_name = 1;
  inline bool has_unit_name() const;
  inline void clear_unit_name();
  static const int kUnitNameFieldNumber = 1;
  inline const ::std::string& unit_name() const;
  inline void set_unit_name(const ::std::string& value);
  inline void set_unit_name(const char* value);
  inline void set_unit_name(const char* value, size_t size);
  inline ::std::string* mutable_unit_name();
  inline ::std::string* release_unit_name();
  
  // repeated uint32 items = 2;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 2;
  inline ::google::protobuf::uint32 items(int index) const;
  inline void set_items(int index, ::google::protobuf::uint32 value);
  inline void add_items(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      items() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_items();
  
  // @@protoc_insertion_point(class_scope:CMatchAdditionalUnitInventory)
 private:
  inline void set_has_unit_name();
  inline void clear_has_unit_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* unit_name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > items_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CMatchAdditionalUnitInventory* default_instance_;
};
// -------------------------------------------------------------------

class CMatchHeroSelectEvent : public ::google::protobuf::Message {
 public:
  CMatchHeroSelectEvent();
  virtual ~CMatchHeroSelectEvent();
  
  CMatchHeroSelectEvent(const CMatchHeroSelectEvent& from);
  
  inline CMatchHeroSelectEvent& operator=(const CMatchHeroSelectEvent& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMatchHeroSelectEvent& default_instance();
  
  void Swap(CMatchHeroSelectEvent* other);
  
  // implements Message ----------------------------------------------
  
  CMatchHeroSelectEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMatchHeroSelectEvent& from);
  void MergeFrom(const CMatchHeroSelectEvent& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool is_pick = 1;
  inline bool has_is_pick() const;
  inline void clear_is_pick();
  static const int kIsPickFieldNumber = 1;
  inline bool is_pick() const;
  inline void set_is_pick(bool value);
  
  // optional uint32 team = 2;
  inline bool has_team() const;
  inline void clear_team();
  static const int kTeamFieldNumber = 2;
  inline ::google::protobuf::uint32 team() const;
  inline void set_team(::google::protobuf::uint32 value);
  
  // optional uint32 hero_id = 3;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 3;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CMatchHeroSelectEvent)
 private:
  inline void set_has_is_pick();
  inline void clear_has_is_pick();
  inline void set_has_team();
  inline void clear_has_team();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool is_pick_;
  ::google::protobuf::uint32 team_;
  ::google::protobuf::uint32 hero_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CMatchHeroSelectEvent* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAProcessFantasyScheduledEvent : public ::google::protobuf::Message {
 public:
  CMsgDOTAProcessFantasyScheduledEvent();
  virtual ~CMsgDOTAProcessFantasyScheduledEvent();
  
  CMsgDOTAProcessFantasyScheduledEvent(const CMsgDOTAProcessFantasyScheduledEvent& from);
  
  inline CMsgDOTAProcessFantasyScheduledEvent& operator=(const CMsgDOTAProcessFantasyScheduledEvent& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAProcessFantasyScheduledEvent& default_instance();
  
  void Swap(CMsgDOTAProcessFantasyScheduledEvent* other);
  
  // implements Message ----------------------------------------------
  
  CMsgDOTAProcessFantasyScheduledEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAProcessFantasyScheduledEvent& from);
  void MergeFrom(const CMsgDOTAProcessFantasyScheduledEvent& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 event = 1;
  inline bool has_event() const;
  inline void clear_event();
  static const int kEventFieldNumber = 1;
  inline ::google::protobuf::uint32 event() const;
  inline void set_event(::google::protobuf::uint32 value);
  
  // optional uint32 timestamp = 2;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  inline ::google::protobuf::uint32 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint32 value);
  
  // optional uint32 fantasy_league_id = 3;
  inline bool has_fantasy_league_id() const;
  inline void clear_fantasy_league_id();
  static const int kFantasyLeagueIdFieldNumber = 3;
  inline ::google::protobuf::uint32 fantasy_league_id() const;
  inline void set_fantasy_league_id(::google::protobuf::uint32 value);
  
  // optional uint32 reference_data = 4;
  inline bool has_reference_data() const;
  inline void clear_reference_data();
  static const int kReferenceDataFieldNumber = 4;
  inline ::google::protobuf::uint32 reference_data() const;
  inline void set_reference_data(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CMsgDOTAProcessFantasyScheduledEvent)
 private:
  inline void set_has_event();
  inline void clear_has_event();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_fantasy_league_id();
  inline void clear_has_fantasy_league_id();
  inline void set_has_reference_data();
  inline void clear_has_reference_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 event_;
  ::google::protobuf::uint32 timestamp_;
  ::google::protobuf::uint32 fantasy_league_id_;
  ::google::protobuf::uint32 reference_data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgDOTAProcessFantasyScheduledEvent* default_instance_;
};
// -------------------------------------------------------------------

class CSODOTAMapLocationState : public ::google::protobuf::Message {
 public:
  CSODOTAMapLocationState();
  virtual ~CSODOTAMapLocationState();
  
  CSODOTAMapLocationState(const CSODOTAMapLocationState& from);
  
  inline CSODOTAMapLocationState& operator=(const CSODOTAMapLocationState& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSODOTAMapLocationState& default_instance();
  
  void Swap(CSODOTAMapLocationState* other);
  
  // implements Message ----------------------------------------------
  
  CSODOTAMapLocationState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSODOTAMapLocationState& from);
  void MergeFrom(const CSODOTAMapLocationState& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);
  
  // optional int32 location_id = 2;
  inline bool has_location_id() const;
  inline void clear_location_id();
  static const int kLocationIdFieldNumber = 2;
  inline ::google::protobuf::int32 location_id() const;
  inline void set_location_id(::google::protobuf::int32 value);
  
  // optional bool completed = 3;
  inline bool has_completed() const;
  inline void clear_completed();
  static const int kCompletedFieldNumber = 3;
  inline bool completed() const;
  inline void set_completed(bool value);
  
  // @@protoc_insertion_point(class_scope:CSODOTAMapLocationState)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_location_id();
  inline void clear_has_location_id();
  inline void set_has_completed();
  inline void clear_has_completed();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::int32 location_id_;
  bool completed_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CSODOTAMapLocationState* default_instance_;
};
// -------------------------------------------------------------------

class CMsgNexonPartnerUpdate : public ::google::protobuf::Message {
 public:
  CMsgNexonPartnerUpdate();
  virtual ~CMsgNexonPartnerUpdate();
  
  CMsgNexonPartnerUpdate(const CMsgNexonPartnerUpdate& from);
  
  inline CMsgNexonPartnerUpdate& operator=(const CMsgNexonPartnerUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgNexonPartnerUpdate& default_instance();
  
  void Swap(CMsgNexonPartnerUpdate* other);
  
  // implements Message ----------------------------------------------
  
  CMsgNexonPartnerUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgNexonPartnerUpdate& from);
  void MergeFrom(const CMsgNexonPartnerUpdate& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 messagetype = 1;
  inline bool has_messagetype() const;
  inline void clear_messagetype();
  static const int kMessagetypeFieldNumber = 1;
  inline ::google::protobuf::uint32 messagetype() const;
  inline void set_messagetype(::google::protobuf::uint32 value);
  
  // optional uint32 timeremaining = 2;
  inline bool has_timeremaining() const;
  inline void clear_timeremaining();
  static const int kTimeremainingFieldNumber = 2;
  inline ::google::protobuf::uint32 timeremaining() const;
  inline void set_timeremaining(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CMsgNexonPartnerUpdate)
 private:
  inline void set_has_messagetype();
  inline void clear_has_messagetype();
  inline void set_has_timeremaining();
  inline void clear_has_timeremaining();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 messagetype_;
  ::google::protobuf::uint32 timeremaining_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgNexonPartnerUpdate* default_instance_;
};
// -------------------------------------------------------------------

class CMsgMakeOffering : public ::google::protobuf::Message {
 public:
  CMsgMakeOffering();
  virtual ~CMsgMakeOffering();
  
  CMsgMakeOffering(const CMsgMakeOffering& from);
  
  inline CMsgMakeOffering& operator=(const CMsgMakeOffering& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgMakeOffering& default_instance();
  
  void Swap(CMsgMakeOffering* other);
  
  // implements Message ----------------------------------------------
  
  CMsgMakeOffering* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgMakeOffering& from);
  void MergeFrom(const CMsgMakeOffering& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::uint64 item_id() const;
  inline void set_item_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:CMsgMakeOffering)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 item_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgMakeOffering* default_instance_;
};
// -------------------------------------------------------------------

class CMsgRequestOfferings : public ::google::protobuf::Message {
 public:
  CMsgRequestOfferings();
  virtual ~CMsgRequestOfferings();
  
  CMsgRequestOfferings(const CMsgRequestOfferings& from);
  
  inline CMsgRequestOfferings& operator=(const CMsgRequestOfferings& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgRequestOfferings& default_instance();
  
  void Swap(CMsgRequestOfferings* other);
  
  // implements Message ----------------------------------------------
  
  CMsgRequestOfferings* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgRequestOfferings& from);
  void MergeFrom(const CMsgRequestOfferings& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:CMsgRequestOfferings)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgRequestOfferings* default_instance_;
};
// -------------------------------------------------------------------

class CMsgRequestOfferingsResponse_NewYearsOffering : public ::google::protobuf::Message {
 public:
  CMsgRequestOfferingsResponse_NewYearsOffering();
  virtual ~CMsgRequestOfferingsResponse_NewYearsOffering();
  
  CMsgRequestOfferingsResponse_NewYearsOffering(const CMsgRequestOfferingsResponse_NewYearsOffering& from);
  
  inline CMsgRequestOfferingsResponse_NewYearsOffering& operator=(const CMsgRequestOfferingsResponse_NewYearsOffering& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgRequestOfferingsResponse_NewYearsOffering& default_instance();
  
  void Swap(CMsgRequestOfferingsResponse_NewYearsOffering* other);
  
  // implements Message ----------------------------------------------
  
  CMsgRequestOfferingsResponse_NewYearsOffering* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgRequestOfferingsResponse_NewYearsOffering& from);
  void MergeFrom(const CMsgRequestOfferingsResponse_NewYearsOffering& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 def_index = 1;
  inline bool has_def_index() const;
  inline void clear_def_index();
  static const int kDefIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 def_index() const;
  inline void set_def_index(::google::protobuf::uint32 value);
  
  // optional uint64 item_id = 2;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::uint64 item_id() const;
  inline void set_item_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:CMsgRequestOfferingsResponse.NewYearsOffering)
 private:
  inline void set_has_def_index();
  inline void clear_has_def_index();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 item_id_;
  ::google::protobuf::uint32 def_index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgRequestOfferingsResponse_NewYearsOffering* default_instance_;
};
// -------------------------------------------------------------------

class CMsgRequestOfferingsResponse : public ::google::protobuf::Message {
 public:
  CMsgRequestOfferingsResponse();
  virtual ~CMsgRequestOfferingsResponse();
  
  CMsgRequestOfferingsResponse(const CMsgRequestOfferingsResponse& from);
  
  inline CMsgRequestOfferingsResponse& operator=(const CMsgRequestOfferingsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgRequestOfferingsResponse& default_instance();
  
  void Swap(CMsgRequestOfferingsResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMsgRequestOfferingsResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgRequestOfferingsResponse& from);
  void MergeFrom(const CMsgRequestOfferingsResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CMsgRequestOfferingsResponse_NewYearsOffering NewYearsOffering;
  
  // accessors -------------------------------------------------------
  
  // repeated .CMsgRequestOfferingsResponse.NewYearsOffering offerings = 1;
  inline int offerings_size() const;
  inline void clear_offerings();
  static const int kOfferingsFieldNumber = 1;
  inline const ::CMsgRequestOfferingsResponse_NewYearsOffering& offerings(int index) const;
  inline ::CMsgRequestOfferingsResponse_NewYearsOffering* mutable_offerings(int index);
  inline ::CMsgRequestOfferingsResponse_NewYearsOffering* add_offerings();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgRequestOfferingsResponse_NewYearsOffering >&
      offerings() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgRequestOfferingsResponse_NewYearsOffering >*
      mutable_offerings();
  
  // optional bool completed = 2;
  inline bool has_completed() const;
  inline void clear_completed();
  static const int kCompletedFieldNumber = 2;
  inline bool completed() const;
  inline void set_completed(bool value);
  
  // @@protoc_insertion_point(class_scope:CMsgRequestOfferingsResponse)
 private:
  inline void set_has_completed();
  inline void clear_has_completed();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::CMsgRequestOfferingsResponse_NewYearsOffering > offerings_;
  bool completed_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgRequestOfferingsResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgLeagueAdminList : public ::google::protobuf::Message {
 public:
  CMsgLeagueAdminList();
  virtual ~CMsgLeagueAdminList();
  
  CMsgLeagueAdminList(const CMsgLeagueAdminList& from);
  
  inline CMsgLeagueAdminList& operator=(const CMsgLeagueAdminList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgLeagueAdminList& default_instance();
  
  void Swap(CMsgLeagueAdminList* other);
  
  // implements Message ----------------------------------------------
  
  CMsgLeagueAdminList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgLeagueAdminList& from);
  void MergeFrom(const CMsgLeagueAdminList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated uint32 account_ids = 1;
  inline int account_ids_size() const;
  inline void clear_account_ids();
  static const int kAccountIdsFieldNumber = 1;
  inline ::google::protobuf::uint32 account_ids(int index) const;
  inline void set_account_ids(int index, ::google::protobuf::uint32 value);
  inline void add_account_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      account_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_account_ids();
  
  // @@protoc_insertion_point(class_scope:CMsgLeagueAdminList)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > account_ids_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgLeagueAdminList* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPerfectWorldUserLookupRequest : public ::google::protobuf::Message {
 public:
  CMsgPerfectWorldUserLookupRequest();
  virtual ~CMsgPerfectWorldUserLookupRequest();
  
  CMsgPerfectWorldUserLookupRequest(const CMsgPerfectWorldUserLookupRequest& from);
  
  inline CMsgPerfectWorldUserLookupRequest& operator=(const CMsgPerfectWorldUserLookupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPerfectWorldUserLookupRequest& default_instance();
  
  void Swap(CMsgPerfectWorldUserLookupRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMsgPerfectWorldUserLookupRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPerfectWorldUserLookupRequest& from);
  void MergeFrom(const CMsgPerfectWorldUserLookupRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string user_name = 1;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  
  // @@protoc_insertion_point(class_scope:CMsgPerfectWorldUserLookupRequest)
 private:
  inline void set_has_user_name();
  inline void clear_has_user_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* user_name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgPerfectWorldUserLookupRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPerfectWorldUserLookupResponse : public ::google::protobuf::Message {
 public:
  CMsgPerfectWorldUserLookupResponse();
  virtual ~CMsgPerfectWorldUserLookupResponse();
  
  CMsgPerfectWorldUserLookupResponse(const CMsgPerfectWorldUserLookupResponse& from);
  
  inline CMsgPerfectWorldUserLookupResponse& operator=(const CMsgPerfectWorldUserLookupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPerfectWorldUserLookupResponse& default_instance();
  
  void Swap(CMsgPerfectWorldUserLookupResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMsgPerfectWorldUserLookupResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPerfectWorldUserLookupResponse& from);
  void MergeFrom(const CMsgPerfectWorldUserLookupResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CMsgPerfectWorldUserLookupResponse_EResultCode EResultCode;
  static const EResultCode SUCCESS_ACCOUNT_FOUND = CMsgPerfectWorldUserLookupResponse_EResultCode_SUCCESS_ACCOUNT_FOUND;
  static const EResultCode ERROR_UNKNOWN = CMsgPerfectWorldUserLookupResponse_EResultCode_ERROR_UNKNOWN;
  static const EResultCode ERROR_USER_NAME_WRONG_FORMAT = CMsgPerfectWorldUserLookupResponse_EResultCode_ERROR_USER_NAME_WRONG_FORMAT;
  static const EResultCode ERROR_NO_PERFECT_WORLD_ACCOUNT_FOUND = CMsgPerfectWorldUserLookupResponse_EResultCode_ERROR_NO_PERFECT_WORLD_ACCOUNT_FOUND;
  static const EResultCode ERROR_NO_LINKED_STEAM_ACCOUNT_FOUND = CMsgPerfectWorldUserLookupResponse_EResultCode_ERROR_NO_LINKED_STEAM_ACCOUNT_FOUND;
  static inline bool EResultCode_IsValid(int value) {
    return CMsgPerfectWorldUserLookupResponse_EResultCode_IsValid(value);
  }
  static const EResultCode EResultCode_MIN =
    CMsgPerfectWorldUserLookupResponse_EResultCode_EResultCode_MIN;
  static const EResultCode EResultCode_MAX =
    CMsgPerfectWorldUserLookupResponse_EResultCode_EResultCode_MAX;
  static const int EResultCode_ARRAYSIZE =
    CMsgPerfectWorldUserLookupResponse_EResultCode_EResultCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EResultCode_descriptor() {
    return CMsgPerfectWorldUserLookupResponse_EResultCode_descriptor();
  }
  static inline const ::std::string& EResultCode_Name(EResultCode value) {
    return CMsgPerfectWorldUserLookupResponse_EResultCode_Name(value);
  }
  static inline bool EResultCode_Parse(const ::std::string& name,
      EResultCode* value) {
    return CMsgPerfectWorldUserLookupResponse_EResultCode_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .CMsgPerfectWorldUserLookupResponse.EResultCode result_code = 1 [default = SUCCESS_ACCOUNT_FOUND];
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 1;
  inline ::CMsgPerfectWorldUserLookupResponse_EResultCode result_code() const;
  inline void set_result_code(::CMsgPerfectWorldUserLookupResponse_EResultCode value);
  
  // optional uint32 account_id = 2;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 2;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CMsgPerfectWorldUserLookupResponse)
 private:
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_account_id();
  inline void clear_has_account_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int result_code_;
  ::google::protobuf::uint32 account_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgPerfectWorldUserLookupResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// CSODOTAGameAccountClient

// optional uint32 account_id = 1;
inline bool CSODOTAGameAccountClient::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSODOTAGameAccountClient::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSODOTAGameAccountClient::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::account_id() const {
  return account_id_;
}
inline void CSODOTAGameAccountClient::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
}

// optional uint32 wins = 3;
inline bool CSODOTAGameAccountClient::has_wins() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_wins() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSODOTAGameAccountClient::clear_has_wins() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSODOTAGameAccountClient::clear_wins() {
  wins_ = 0u;
  clear_has_wins();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::wins() const {
  return wins_;
}
inline void CSODOTAGameAccountClient::set_wins(::google::protobuf::uint32 value) {
  set_has_wins();
  wins_ = value;
}

// optional uint32 losses = 4;
inline bool CSODOTAGameAccountClient::has_losses() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_losses() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSODOTAGameAccountClient::clear_has_losses() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSODOTAGameAccountClient::clear_losses() {
  losses_ = 0u;
  clear_has_losses();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::losses() const {
  return losses_;
}
inline void CSODOTAGameAccountClient::set_losses(::google::protobuf::uint32 value) {
  set_has_losses();
  losses_ = value;
}

// optional uint32 xp = 12;
inline bool CSODOTAGameAccountClient::has_xp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_xp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSODOTAGameAccountClient::clear_has_xp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSODOTAGameAccountClient::clear_xp() {
  xp_ = 0u;
  clear_has_xp();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::xp() const {
  return xp_;
}
inline void CSODOTAGameAccountClient::set_xp(::google::protobuf::uint32 value) {
  set_has_xp();
  xp_ = value;
}

// optional uint32 level = 13;
inline bool CSODOTAGameAccountClient::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSODOTAGameAccountClient::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSODOTAGameAccountClient::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::level() const {
  return level_;
}
inline void CSODOTAGameAccountClient::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 initial_skill = 14;
inline bool CSODOTAGameAccountClient::has_initial_skill() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_initial_skill() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSODOTAGameAccountClient::clear_has_initial_skill() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSODOTAGameAccountClient::clear_initial_skill() {
  initial_skill_ = 0u;
  clear_has_initial_skill();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::initial_skill() const {
  return initial_skill_;
}
inline void CSODOTAGameAccountClient::set_initial_skill(::google::protobuf::uint32 value) {
  set_has_initial_skill();
  initial_skill_ = value;
}

// optional uint32 leaver_count = 15;
inline bool CSODOTAGameAccountClient::has_leaver_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_leaver_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSODOTAGameAccountClient::clear_has_leaver_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSODOTAGameAccountClient::clear_leaver_count() {
  leaver_count_ = 0u;
  clear_has_leaver_count();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::leaver_count() const {
  return leaver_count_;
}
inline void CSODOTAGameAccountClient::set_leaver_count(::google::protobuf::uint32 value) {
  set_has_leaver_count();
  leaver_count_ = value;
}

// optional uint32 secondary_leaver_count = 58;
inline bool CSODOTAGameAccountClient::has_secondary_leaver_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_secondary_leaver_count() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CSODOTAGameAccountClient::clear_has_secondary_leaver_count() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CSODOTAGameAccountClient::clear_secondary_leaver_count() {
  secondary_leaver_count_ = 0u;
  clear_has_secondary_leaver_count();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::secondary_leaver_count() const {
  return secondary_leaver_count_;
}
inline void CSODOTAGameAccountClient::set_secondary_leaver_count(::google::protobuf::uint32 value) {
  set_has_secondary_leaver_count();
  secondary_leaver_count_ = value;
}

// optional uint32 low_priority_until_date = 18;
inline bool CSODOTAGameAccountClient::has_low_priority_until_date() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_low_priority_until_date() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CSODOTAGameAccountClient::clear_has_low_priority_until_date() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CSODOTAGameAccountClient::clear_low_priority_until_date() {
  low_priority_until_date_ = 0u;
  clear_has_low_priority_until_date();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::low_priority_until_date() const {
  return low_priority_until_date_;
}
inline void CSODOTAGameAccountClient::set_low_priority_until_date(::google::protobuf::uint32 value) {
  set_has_low_priority_until_date();
  low_priority_until_date_ = value;
}

// optional uint32 prevent_text_chat_until_date = 20;
inline bool CSODOTAGameAccountClient::has_prevent_text_chat_until_date() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_prevent_text_chat_until_date() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CSODOTAGameAccountClient::clear_has_prevent_text_chat_until_date() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CSODOTAGameAccountClient::clear_prevent_text_chat_until_date() {
  prevent_text_chat_until_date_ = 0u;
  clear_has_prevent_text_chat_until_date();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::prevent_text_chat_until_date() const {
  return prevent_text_chat_until_date_;
}
inline void CSODOTAGameAccountClient::set_prevent_text_chat_until_date(::google::protobuf::uint32 value) {
  set_has_prevent_text_chat_until_date();
  prevent_text_chat_until_date_ = value;
}

// optional uint32 prevent_voice_until_date = 21;
inline bool CSODOTAGameAccountClient::has_prevent_voice_until_date() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_prevent_voice_until_date() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CSODOTAGameAccountClient::clear_has_prevent_voice_until_date() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CSODOTAGameAccountClient::clear_prevent_voice_until_date() {
  prevent_voice_until_date_ = 0u;
  clear_has_prevent_voice_until_date();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::prevent_voice_until_date() const {
  return prevent_voice_until_date_;
}
inline void CSODOTAGameAccountClient::set_prevent_voice_until_date(::google::protobuf::uint32 value) {
  set_has_prevent_voice_until_date();
  prevent_voice_until_date_ = value;
}

// optional uint32 last_abandoned_game_date = 22;
inline bool CSODOTAGameAccountClient::has_last_abandoned_game_date() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_last_abandoned_game_date() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CSODOTAGameAccountClient::clear_has_last_abandoned_game_date() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CSODOTAGameAccountClient::clear_last_abandoned_game_date() {
  last_abandoned_game_date_ = 0u;
  clear_has_last_abandoned_game_date();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::last_abandoned_game_date() const {
  return last_abandoned_game_date_;
}
inline void CSODOTAGameAccountClient::set_last_abandoned_game_date(::google::protobuf::uint32 value) {
  set_has_last_abandoned_game_date();
  last_abandoned_game_date_ = value;
}

// optional uint32 last_secondary_abandoned_game_date = 59;
inline bool CSODOTAGameAccountClient::has_last_secondary_abandoned_game_date() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_last_secondary_abandoned_game_date() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CSODOTAGameAccountClient::clear_has_last_secondary_abandoned_game_date() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CSODOTAGameAccountClient::clear_last_secondary_abandoned_game_date() {
  last_secondary_abandoned_game_date_ = 0u;
  clear_has_last_secondary_abandoned_game_date();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::last_secondary_abandoned_game_date() const {
  return last_secondary_abandoned_game_date_;
}
inline void CSODOTAGameAccountClient::set_last_secondary_abandoned_game_date(::google::protobuf::uint32 value) {
  set_has_last_secondary_abandoned_game_date();
  last_secondary_abandoned_game_date_ = value;
}

// optional uint32 leaver_penalty_count = 23;
inline bool CSODOTAGameAccountClient::has_leaver_penalty_count() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_leaver_penalty_count() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CSODOTAGameAccountClient::clear_has_leaver_penalty_count() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CSODOTAGameAccountClient::clear_leaver_penalty_count() {
  leaver_penalty_count_ = 0u;
  clear_has_leaver_penalty_count();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::leaver_penalty_count() const {
  return leaver_penalty_count_;
}
inline void CSODOTAGameAccountClient::set_leaver_penalty_count(::google::protobuf::uint32 value) {
  set_has_leaver_penalty_count();
  leaver_penalty_count_ = value;
}

// optional uint32 completed_game_streak = 24;
inline bool CSODOTAGameAccountClient::has_completed_game_streak() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_completed_game_streak() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CSODOTAGameAccountClient::clear_has_completed_game_streak() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CSODOTAGameAccountClient::clear_completed_game_streak() {
  completed_game_streak_ = 0u;
  clear_has_completed_game_streak();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::completed_game_streak() const {
  return completed_game_streak_;
}
inline void CSODOTAGameAccountClient::set_completed_game_streak(::google::protobuf::uint32 value) {
  set_has_completed_game_streak();
  completed_game_streak_ = value;
}

// optional uint32 teaching = 28;
inline bool CSODOTAGameAccountClient::has_teaching() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_teaching() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CSODOTAGameAccountClient::clear_has_teaching() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CSODOTAGameAccountClient::clear_teaching() {
  teaching_ = 0u;
  clear_has_teaching();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::teaching() const {
  return teaching_;
}
inline void CSODOTAGameAccountClient::set_teaching(::google::protobuf::uint32 value) {
  set_has_teaching();
  teaching_ = value;
}

// optional uint32 leadership = 29;
inline bool CSODOTAGameAccountClient::has_leadership() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_leadership() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CSODOTAGameAccountClient::clear_has_leadership() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CSODOTAGameAccountClient::clear_leadership() {
  leadership_ = 0u;
  clear_has_leadership();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::leadership() const {
  return leadership_;
}
inline void CSODOTAGameAccountClient::set_leadership(::google::protobuf::uint32 value) {
  set_has_leadership();
  leadership_ = value;
}

// optional uint32 friendly = 30;
inline bool CSODOTAGameAccountClient::has_friendly() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_friendly() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CSODOTAGameAccountClient::clear_has_friendly() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CSODOTAGameAccountClient::clear_friendly() {
  friendly_ = 0u;
  clear_has_friendly();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::friendly() const {
  return friendly_;
}
inline void CSODOTAGameAccountClient::set_friendly(::google::protobuf::uint32 value) {
  set_has_friendly();
  friendly_ = value;
}

// optional uint32 forgiving = 31;
inline bool CSODOTAGameAccountClient::has_forgiving() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_forgiving() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CSODOTAGameAccountClient::clear_has_forgiving() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CSODOTAGameAccountClient::clear_forgiving() {
  forgiving_ = 0u;
  clear_has_forgiving();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::forgiving() const {
  return forgiving_;
}
inline void CSODOTAGameAccountClient::set_forgiving(::google::protobuf::uint32 value) {
  set_has_forgiving();
  forgiving_ = value;
}

// optional uint32 account_disabled_until_date = 38;
inline bool CSODOTAGameAccountClient::has_account_disabled_until_date() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_account_disabled_until_date() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CSODOTAGameAccountClient::clear_has_account_disabled_until_date() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CSODOTAGameAccountClient::clear_account_disabled_until_date() {
  account_disabled_until_date_ = 0u;
  clear_has_account_disabled_until_date();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::account_disabled_until_date() const {
  return account_disabled_until_date_;
}
inline void CSODOTAGameAccountClient::set_account_disabled_until_date(::google::protobuf::uint32 value) {
  set_has_account_disabled_until_date();
  account_disabled_until_date_ = value;
}

// optional uint32 account_disabled_count = 39;
inline bool CSODOTAGameAccountClient::has_account_disabled_count() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_account_disabled_count() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CSODOTAGameAccountClient::clear_has_account_disabled_count() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CSODOTAGameAccountClient::clear_account_disabled_count() {
  account_disabled_count_ = 0u;
  clear_has_account_disabled_count();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::account_disabled_count() const {
  return account_disabled_count_;
}
inline void CSODOTAGameAccountClient::set_account_disabled_count(::google::protobuf::uint32 value) {
  set_has_account_disabled_count();
  account_disabled_count_ = value;
}

// optional uint32 showcase_hero_id = 40;
inline bool CSODOTAGameAccountClient::has_showcase_hero_id() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_showcase_hero_id() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CSODOTAGameAccountClient::clear_has_showcase_hero_id() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CSODOTAGameAccountClient::clear_showcase_hero_id() {
  showcase_hero_id_ = 0u;
  clear_has_showcase_hero_id();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::showcase_hero_id() const {
  return showcase_hero_id_;
}
inline void CSODOTAGameAccountClient::set_showcase_hero_id(::google::protobuf::uint32 value) {
  set_has_showcase_hero_id();
  showcase_hero_id_ = value;
}

// optional uint32 match_disabled_until_date = 41;
inline bool CSODOTAGameAccountClient::has_match_disabled_until_date() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_match_disabled_until_date() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CSODOTAGameAccountClient::clear_has_match_disabled_until_date() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CSODOTAGameAccountClient::clear_match_disabled_until_date() {
  match_disabled_until_date_ = 0u;
  clear_has_match_disabled_until_date();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::match_disabled_until_date() const {
  return match_disabled_until_date_;
}
inline void CSODOTAGameAccountClient::set_match_disabled_until_date(::google::protobuf::uint32 value) {
  set_has_match_disabled_until_date();
  match_disabled_until_date_ = value;
}

// optional uint32 match_disabled_count = 42;
inline bool CSODOTAGameAccountClient::has_match_disabled_count() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_match_disabled_count() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CSODOTAGameAccountClient::clear_has_match_disabled_count() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CSODOTAGameAccountClient::clear_match_disabled_count() {
  match_disabled_count_ = 0u;
  clear_has_match_disabled_count();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::match_disabled_count() const {
  return match_disabled_count_;
}
inline void CSODOTAGameAccountClient::set_match_disabled_count(::google::protobuf::uint32 value) {
  set_has_match_disabled_count();
  match_disabled_count_ = value;
}

// optional .PartnerAccountType partner_account_type = 44 [default = PARTNER_NONE];
inline bool CSODOTAGameAccountClient::has_partner_account_type() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_partner_account_type() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CSODOTAGameAccountClient::clear_has_partner_account_type() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CSODOTAGameAccountClient::clear_partner_account_type() {
  partner_account_type_ = 0;
  clear_has_partner_account_type();
}
inline PartnerAccountType CSODOTAGameAccountClient::partner_account_type() const {
  return static_cast< PartnerAccountType >(partner_account_type_);
}
inline void CSODOTAGameAccountClient::set_partner_account_type(PartnerAccountType value) {
  GOOGLE_DCHECK(PartnerAccountType_IsValid(value));
  set_has_partner_account_type();
  partner_account_type_ = value;
}

// optional uint32 partner_account_state = 45;
inline bool CSODOTAGameAccountClient::has_partner_account_state() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_partner_account_state() {
  _has_bits_[0] |= 0x02000000u;
}
inline void CSODOTAGameAccountClient::clear_has_partner_account_state() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void CSODOTAGameAccountClient::clear_partner_account_state() {
  partner_account_state_ = 0u;
  clear_has_partner_account_state();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::partner_account_state() const {
  return partner_account_state_;
}
inline void CSODOTAGameAccountClient::set_partner_account_state(::google::protobuf::uint32 value) {
  set_has_partner_account_state();
  partner_account_state_ = value;
}

// optional uint32 shutdownlawterminatetimestamp = 47;
inline bool CSODOTAGameAccountClient::has_shutdownlawterminatetimestamp() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_shutdownlawterminatetimestamp() {
  _has_bits_[0] |= 0x04000000u;
}
inline void CSODOTAGameAccountClient::clear_has_shutdownlawterminatetimestamp() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void CSODOTAGameAccountClient::clear_shutdownlawterminatetimestamp() {
  shutdownlawterminatetimestamp_ = 0u;
  clear_has_shutdownlawterminatetimestamp();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::shutdownlawterminatetimestamp() const {
  return shutdownlawterminatetimestamp_;
}
inline void CSODOTAGameAccountClient::set_shutdownlawterminatetimestamp(::google::protobuf::uint32 value) {
  set_has_shutdownlawterminatetimestamp();
  shutdownlawterminatetimestamp_ = value;
}

// optional uint32 low_priority_games_remaining = 48;
inline bool CSODOTAGameAccountClient::has_low_priority_games_remaining() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_low_priority_games_remaining() {
  _has_bits_[0] |= 0x08000000u;
}
inline void CSODOTAGameAccountClient::clear_has_low_priority_games_remaining() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void CSODOTAGameAccountClient::clear_low_priority_games_remaining() {
  low_priority_games_remaining_ = 0u;
  clear_has_low_priority_games_remaining();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::low_priority_games_remaining() const {
  return low_priority_games_remaining_;
}
inline void CSODOTAGameAccountClient::set_low_priority_games_remaining(::google::protobuf::uint32 value) {
  set_has_low_priority_games_remaining();
  low_priority_games_remaining_ = value;
}

// optional uint32 competitive_rank = 49;
inline bool CSODOTAGameAccountClient::has_competitive_rank() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_competitive_rank() {
  _has_bits_[0] |= 0x10000000u;
}
inline void CSODOTAGameAccountClient::clear_has_competitive_rank() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void CSODOTAGameAccountClient::clear_competitive_rank() {
  competitive_rank_ = 0u;
  clear_has_competitive_rank();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::competitive_rank() const {
  return competitive_rank_;
}
inline void CSODOTAGameAccountClient::set_competitive_rank(::google::protobuf::uint32 value) {
  set_has_competitive_rank();
  competitive_rank_ = value;
}

// optional uint32 calibration_games_remaining = 51;
inline bool CSODOTAGameAccountClient::has_calibration_games_remaining() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_calibration_games_remaining() {
  _has_bits_[0] |= 0x20000000u;
}
inline void CSODOTAGameAccountClient::clear_has_calibration_games_remaining() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void CSODOTAGameAccountClient::clear_calibration_games_remaining() {
  calibration_games_remaining_ = 0u;
  clear_has_calibration_games_remaining();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::calibration_games_remaining() const {
  return calibration_games_remaining_;
}
inline void CSODOTAGameAccountClient::set_calibration_games_remaining(::google::protobuf::uint32 value) {
  set_has_calibration_games_remaining();
  calibration_games_remaining_ = value;
}

// optional uint32 solo_competitive_rank = 52;
inline bool CSODOTAGameAccountClient::has_solo_competitive_rank() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_solo_competitive_rank() {
  _has_bits_[0] |= 0x40000000u;
}
inline void CSODOTAGameAccountClient::clear_has_solo_competitive_rank() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void CSODOTAGameAccountClient::clear_solo_competitive_rank() {
  solo_competitive_rank_ = 0u;
  clear_has_solo_competitive_rank();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::solo_competitive_rank() const {
  return solo_competitive_rank_;
}
inline void CSODOTAGameAccountClient::set_solo_competitive_rank(::google::protobuf::uint32 value) {
  set_has_solo_competitive_rank();
  solo_competitive_rank_ = value;
}

// optional uint32 solo_calibration_games_remaining = 54;
inline bool CSODOTAGameAccountClient::has_solo_calibration_games_remaining() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_solo_calibration_games_remaining() {
  _has_bits_[0] |= 0x80000000u;
}
inline void CSODOTAGameAccountClient::clear_has_solo_calibration_games_remaining() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void CSODOTAGameAccountClient::clear_solo_calibration_games_remaining() {
  solo_calibration_games_remaining_ = 0u;
  clear_has_solo_calibration_games_remaining();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::solo_calibration_games_remaining() const {
  return solo_calibration_games_remaining_;
}
inline void CSODOTAGameAccountClient::set_solo_calibration_games_remaining(::google::protobuf::uint32 value) {
  set_has_solo_calibration_games_remaining();
  solo_calibration_games_remaining_ = value;
}

// optional uint32 recruitment_level = 55;
inline bool CSODOTAGameAccountClient::has_recruitment_level() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_recruitment_level() {
  _has_bits_[1] |= 0x00000001u;
}
inline void CSODOTAGameAccountClient::clear_has_recruitment_level() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void CSODOTAGameAccountClient::clear_recruitment_level() {
  recruitment_level_ = 0u;
  clear_has_recruitment_level();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::recruitment_level() const {
  return recruitment_level_;
}
inline void CSODOTAGameAccountClient::set_recruitment_level(::google::protobuf::uint32 value) {
  set_has_recruitment_level();
  recruitment_level_ = value;
}

// optional bool has_new_notifications = 56;
inline bool CSODOTAGameAccountClient::has_has_new_notifications() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_has_new_notifications() {
  _has_bits_[1] |= 0x00000002u;
}
inline void CSODOTAGameAccountClient::clear_has_has_new_notifications() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void CSODOTAGameAccountClient::clear_has_new_notifications() {
  has_new_notifications_ = false;
  clear_has_has_new_notifications();
}
inline bool CSODOTAGameAccountClient::has_new_notifications() const {
  return has_new_notifications_;
}
inline void CSODOTAGameAccountClient::set_has_new_notifications(bool value) {
  set_has_has_new_notifications();
  has_new_notifications_ = value;
}

// optional bool is_league_admin = 57;
inline bool CSODOTAGameAccountClient::has_is_league_admin() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_is_league_admin() {
  _has_bits_[1] |= 0x00000004u;
}
inline void CSODOTAGameAccountClient::clear_has_is_league_admin() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void CSODOTAGameAccountClient::clear_is_league_admin() {
  is_league_admin_ = false;
  clear_has_is_league_admin();
}
inline bool CSODOTAGameAccountClient::is_league_admin() const {
  return is_league_admin_;
}
inline void CSODOTAGameAccountClient::set_is_league_admin(bool value) {
  set_has_is_league_admin();
  is_league_admin_ = value;
}

// optional uint32 casual_games_played = 60;
inline bool CSODOTAGameAccountClient::has_casual_games_played() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_casual_games_played() {
  _has_bits_[1] |= 0x00000008u;
}
inline void CSODOTAGameAccountClient::clear_has_casual_games_played() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void CSODOTAGameAccountClient::clear_casual_games_played() {
  casual_games_played_ = 0u;
  clear_has_casual_games_played();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::casual_games_played() const {
  return casual_games_played_;
}
inline void CSODOTAGameAccountClient::set_casual_games_played(::google::protobuf::uint32 value) {
  set_has_casual_games_played();
  casual_games_played_ = value;
}

// optional uint32 solo_competitive_games_played = 61;
inline bool CSODOTAGameAccountClient::has_solo_competitive_games_played() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_solo_competitive_games_played() {
  _has_bits_[1] |= 0x00000010u;
}
inline void CSODOTAGameAccountClient::clear_has_solo_competitive_games_played() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void CSODOTAGameAccountClient::clear_solo_competitive_games_played() {
  solo_competitive_games_played_ = 0u;
  clear_has_solo_competitive_games_played();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::solo_competitive_games_played() const {
  return solo_competitive_games_played_;
}
inline void CSODOTAGameAccountClient::set_solo_competitive_games_played(::google::protobuf::uint32 value) {
  set_has_solo_competitive_games_played();
  solo_competitive_games_played_ = value;
}

// optional uint32 party_competitive_games_played = 62;
inline bool CSODOTAGameAccountClient::has_party_competitive_games_played() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void CSODOTAGameAccountClient::set_has_party_competitive_games_played() {
  _has_bits_[1] |= 0x00000020u;
}
inline void CSODOTAGameAccountClient::clear_has_party_competitive_games_played() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void CSODOTAGameAccountClient::clear_party_competitive_games_played() {
  party_competitive_games_played_ = 0u;
  clear_has_party_competitive_games_played();
}
inline ::google::protobuf::uint32 CSODOTAGameAccountClient::party_competitive_games_played() const {
  return party_competitive_games_played_;
}
inline void CSODOTAGameAccountClient::set_party_competitive_games_played(::google::protobuf::uint32 value) {
  set_has_party_competitive_games_played();
  party_competitive_games_played_ = value;
}

// -------------------------------------------------------------------

// CSODOTAPartyMember

// optional .PartnerAccountType partner_type = 1 [default = PARTNER_NONE];
inline bool CSODOTAPartyMember::has_partner_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTAPartyMember::set_has_partner_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSODOTAPartyMember::clear_has_partner_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSODOTAPartyMember::clear_partner_type() {
  partner_type_ = 0;
  clear_has_partner_type();
}
inline PartnerAccountType CSODOTAPartyMember::partner_type() const {
  return static_cast< PartnerAccountType >(partner_type_);
}
inline void CSODOTAPartyMember::set_partner_type(PartnerAccountType value) {
  GOOGLE_DCHECK(PartnerAccountType_IsValid(value));
  set_has_partner_type();
  partner_type_ = value;
}

// optional bool is_coach = 2;
inline bool CSODOTAPartyMember::has_is_coach() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTAPartyMember::set_has_is_coach() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSODOTAPartyMember::clear_has_is_coach() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSODOTAPartyMember::clear_is_coach() {
  is_coach_ = false;
  clear_has_is_coach();
}
inline bool CSODOTAPartyMember::is_coach() const {
  return is_coach_;
}
inline void CSODOTAPartyMember::set_is_coach(bool value) {
  set_has_is_coach();
  is_coach_ = value;
}

// -------------------------------------------------------------------

// CSODOTAParty

// optional uint64 party_id = 1;
inline bool CSODOTAParty::has_party_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTAParty::set_has_party_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSODOTAParty::clear_has_party_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSODOTAParty::clear_party_id() {
  party_id_ = GOOGLE_ULONGLONG(0);
  clear_has_party_id();
}
inline ::google::protobuf::uint64 CSODOTAParty::party_id() const {
  return party_id_;
}
inline void CSODOTAParty::set_party_id(::google::protobuf::uint64 value) {
  set_has_party_id();
  party_id_ = value;
}

// optional fixed64 leader_id = 2;
inline bool CSODOTAParty::has_leader_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTAParty::set_has_leader_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSODOTAParty::clear_has_leader_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSODOTAParty::clear_leader_id() {
  leader_id_ = GOOGLE_ULONGLONG(0);
  clear_has_leader_id();
}
inline ::google::protobuf::uint64 CSODOTAParty::leader_id() const {
  return leader_id_;
}
inline void CSODOTAParty::set_leader_id(::google::protobuf::uint64 value) {
  set_has_leader_id();
  leader_id_ = value;
}

// repeated fixed64 member_ids = 3;
inline int CSODOTAParty::member_ids_size() const {
  return member_ids_.size();
}
inline void CSODOTAParty::clear_member_ids() {
  member_ids_.Clear();
}
inline ::google::protobuf::uint64 CSODOTAParty::member_ids(int index) const {
  return member_ids_.Get(index);
}
inline void CSODOTAParty::set_member_ids(int index, ::google::protobuf::uint64 value) {
  member_ids_.Set(index, value);
}
inline void CSODOTAParty::add_member_ids(::google::protobuf::uint64 value) {
  member_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CSODOTAParty::member_ids() const {
  return member_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CSODOTAParty::mutable_member_ids() {
  return &member_ids_;
}

// optional uint32 game_modes = 4;
inline bool CSODOTAParty::has_game_modes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSODOTAParty::set_has_game_modes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSODOTAParty::clear_has_game_modes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSODOTAParty::clear_game_modes() {
  game_modes_ = 0u;
  clear_has_game_modes();
}
inline ::google::protobuf::uint32 CSODOTAParty::game_modes() const {
  return game_modes_;
}
inline void CSODOTAParty::set_game_modes(::google::protobuf::uint32 value) {
  set_has_game_modes();
  game_modes_ = value;
}

// repeated fixed64 pending_invites = 5;
inline int CSODOTAParty::pending_invites_size() const {
  return pending_invites_.size();
}
inline void CSODOTAParty::clear_pending_invites() {
  pending_invites_.Clear();
}
inline ::google::protobuf::uint64 CSODOTAParty::pending_invites(int index) const {
  return pending_invites_.Get(index);
}
inline void CSODOTAParty::set_pending_invites(int index, ::google::protobuf::uint64 value) {
  pending_invites_.Set(index, value);
}
inline void CSODOTAParty::add_pending_invites(::google::protobuf::uint64 value) {
  pending_invites_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CSODOTAParty::pending_invites() const {
  return pending_invites_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CSODOTAParty::mutable_pending_invites() {
  return &pending_invites_;
}

// optional .CSODOTAParty.State state = 6 [default = UI];
inline bool CSODOTAParty::has_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSODOTAParty::set_has_state() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSODOTAParty::clear_has_state() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSODOTAParty::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::CSODOTAParty_State CSODOTAParty::state() const {
  return static_cast< ::CSODOTAParty_State >(state_);
}
inline void CSODOTAParty::set_state(::CSODOTAParty_State value) {
  GOOGLE_DCHECK(::CSODOTAParty_State_IsValid(value));
  set_has_state();
  state_ = value;
}

// optional uint32 effective_started_matchmaking_time = 7;
inline bool CSODOTAParty::has_effective_started_matchmaking_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSODOTAParty::set_has_effective_started_matchmaking_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSODOTAParty::clear_has_effective_started_matchmaking_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSODOTAParty::clear_effective_started_matchmaking_time() {
  effective_started_matchmaking_time_ = 0u;
  clear_has_effective_started_matchmaking_time();
}
inline ::google::protobuf::uint32 CSODOTAParty::effective_started_matchmaking_time() const {
  return effective_started_matchmaking_time_;
}
inline void CSODOTAParty::set_effective_started_matchmaking_time(::google::protobuf::uint32 value) {
  set_has_effective_started_matchmaking_time();
  effective_started_matchmaking_time_ = value;
}

// optional uint32 raw_started_matchmaking_time = 32;
inline bool CSODOTAParty::has_raw_started_matchmaking_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSODOTAParty::set_has_raw_started_matchmaking_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CSODOTAParty::clear_has_raw_started_matchmaking_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CSODOTAParty::clear_raw_started_matchmaking_time() {
  raw_started_matchmaking_time_ = 0u;
  clear_has_raw_started_matchmaking_time();
}
inline ::google::protobuf::uint32 CSODOTAParty::raw_started_matchmaking_time() const {
  return raw_started_matchmaking_time_;
}
inline void CSODOTAParty::set_raw_started_matchmaking_time(::google::protobuf::uint32 value) {
  set_has_raw_started_matchmaking_time();
  raw_started_matchmaking_time_ = value;
}

// optional uint32 attempt_start_time = 33;
inline bool CSODOTAParty::has_attempt_start_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CSODOTAParty::set_has_attempt_start_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CSODOTAParty::clear_has_attempt_start_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CSODOTAParty::clear_attempt_start_time() {
  attempt_start_time_ = 0u;
  clear_has_attempt_start_time();
}
inline ::google::protobuf::uint32 CSODOTAParty::attempt_start_time() const {
  return attempt_start_time_;
}
inline void CSODOTAParty::set_attempt_start_time(::google::protobuf::uint32 value) {
  set_has_attempt_start_time();
  attempt_start_time_ = value;
}

// optional uint32 attempt_num = 34;
inline bool CSODOTAParty::has_attempt_num() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CSODOTAParty::set_has_attempt_num() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CSODOTAParty::clear_has_attempt_num() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CSODOTAParty::clear_attempt_num() {
  attempt_num_ = 0u;
  clear_has_attempt_num();
}
inline ::google::protobuf::uint32 CSODOTAParty::attempt_num() const {
  return attempt_num_;
}
inline void CSODOTAParty::set_attempt_num(::google::protobuf::uint32 value) {
  set_has_attempt_num();
  attempt_num_ = value;
}

// optional uint32 matchgroups = 11;
inline bool CSODOTAParty::has_matchgroups() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CSODOTAParty::set_has_matchgroups() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CSODOTAParty::clear_has_matchgroups() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CSODOTAParty::clear_matchgroups() {
  matchgroups_ = 0u;
  clear_has_matchgroups();
}
inline ::google::protobuf::uint32 CSODOTAParty::matchgroups() const {
  return matchgroups_;
}
inline void CSODOTAParty::set_matchgroups(::google::protobuf::uint32 value) {
  set_has_matchgroups();
  matchgroups_ = value;
}

// optional uint32 low_priority_account_id = 19;
inline bool CSODOTAParty::has_low_priority_account_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CSODOTAParty::set_has_low_priority_account_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CSODOTAParty::clear_has_low_priority_account_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CSODOTAParty::clear_low_priority_account_id() {
  low_priority_account_id_ = 0u;
  clear_has_low_priority_account_id();
}
inline ::google::protobuf::uint32 CSODOTAParty::low_priority_account_id() const {
  return low_priority_account_id_;
}
inline void CSODOTAParty::set_low_priority_account_id(::google::protobuf::uint32 value) {
  set_has_low_priority_account_id();
  low_priority_account_id_ = value;
}

// optional .MatchType match_type = 21 [default = MATCH_TYPE_CASUAL];
inline bool CSODOTAParty::has_match_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CSODOTAParty::set_has_match_type() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CSODOTAParty::clear_has_match_type() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CSODOTAParty::clear_match_type() {
  match_type_ = 0;
  clear_has_match_type();
}
inline MatchType CSODOTAParty::match_type() const {
  return static_cast< MatchType >(match_type_);
}
inline void CSODOTAParty::set_match_type(MatchType value) {
  GOOGLE_DCHECK(MatchType_IsValid(value));
  set_has_match_type();
  match_type_ = value;
}

// optional .DOTABotDifficulty bot_difficulty = 22 [default = BOT_DIFFICULTY_PASSIVE];
inline bool CSODOTAParty::has_bot_difficulty() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CSODOTAParty::set_has_bot_difficulty() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CSODOTAParty::clear_has_bot_difficulty() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CSODOTAParty::clear_bot_difficulty() {
  bot_difficulty_ = 0;
  clear_has_bot_difficulty();
}
inline DOTABotDifficulty CSODOTAParty::bot_difficulty() const {
  return static_cast< DOTABotDifficulty >(bot_difficulty_);
}
inline void CSODOTAParty::set_bot_difficulty(DOTABotDifficulty value) {
  GOOGLE_DCHECK(DOTABotDifficulty_IsValid(value));
  set_has_bot_difficulty();
  bot_difficulty_ = value;
}

// optional uint32 team_id = 23;
inline bool CSODOTAParty::has_team_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CSODOTAParty::set_has_team_id() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CSODOTAParty::clear_has_team_id() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CSODOTAParty::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CSODOTAParty::team_id() const {
  return team_id_;
}
inline void CSODOTAParty::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
}

// optional uint32 match_disabled_until_date = 24;
inline bool CSODOTAParty::has_match_disabled_until_date() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CSODOTAParty::set_has_match_disabled_until_date() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CSODOTAParty::clear_has_match_disabled_until_date() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CSODOTAParty::clear_match_disabled_until_date() {
  match_disabled_until_date_ = 0u;
  clear_has_match_disabled_until_date();
}
inline ::google::protobuf::uint32 CSODOTAParty::match_disabled_until_date() const {
  return match_disabled_until_date_;
}
inline void CSODOTAParty::set_match_disabled_until_date(::google::protobuf::uint32 value) {
  set_has_match_disabled_until_date();
  match_disabled_until_date_ = value;
}

// optional uint32 match_disabled_account_id = 25;
inline bool CSODOTAParty::has_match_disabled_account_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CSODOTAParty::set_has_match_disabled_account_id() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CSODOTAParty::clear_has_match_disabled_account_id() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CSODOTAParty::clear_match_disabled_account_id() {
  match_disabled_account_id_ = 0u;
  clear_has_match_disabled_account_id();
}
inline ::google::protobuf::uint32 CSODOTAParty::match_disabled_account_id() const {
  return match_disabled_account_id_;
}
inline void CSODOTAParty::set_match_disabled_account_id(::google::protobuf::uint32 value) {
  set_has_match_disabled_account_id();
  match_disabled_account_id_ = value;
}

// optional uint32 matchmaking_max_range_minutes = 26;
inline bool CSODOTAParty::has_matchmaking_max_range_minutes() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CSODOTAParty::set_has_matchmaking_max_range_minutes() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CSODOTAParty::clear_has_matchmaking_max_range_minutes() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CSODOTAParty::clear_matchmaking_max_range_minutes() {
  matchmaking_max_range_minutes_ = 0u;
  clear_has_matchmaking_max_range_minutes();
}
inline ::google::protobuf::uint32 CSODOTAParty::matchmaking_max_range_minutes() const {
  return matchmaking_max_range_minutes_;
}
inline void CSODOTAParty::set_matchmaking_max_range_minutes(::google::protobuf::uint32 value) {
  set_has_matchmaking_max_range_minutes();
  matchmaking_max_range_minutes_ = value;
}

// optional uint32 matchlanguages = 27;
inline bool CSODOTAParty::has_matchlanguages() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CSODOTAParty::set_has_matchlanguages() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CSODOTAParty::clear_has_matchlanguages() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CSODOTAParty::clear_matchlanguages() {
  matchlanguages_ = 0u;
  clear_has_matchlanguages();
}
inline ::google::protobuf::uint32 CSODOTAParty::matchlanguages() const {
  return matchlanguages_;
}
inline void CSODOTAParty::set_matchlanguages(::google::protobuf::uint32 value) {
  set_has_matchlanguages();
  matchlanguages_ = value;
}

// optional uint32 map_preference = 38;
inline bool CSODOTAParty::has_map_preference() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CSODOTAParty::set_has_map_preference() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CSODOTAParty::clear_has_map_preference() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CSODOTAParty::clear_map_preference() {
  map_preference_ = 0u;
  clear_has_map_preference();
}
inline ::google::protobuf::uint32 CSODOTAParty::map_preference() const {
  return map_preference_;
}
inline void CSODOTAParty::set_map_preference(::google::protobuf::uint32 value) {
  set_has_map_preference();
  map_preference_ = value;
}

// repeated .CSODOTAPartyMember members = 29;
inline int CSODOTAParty::members_size() const {
  return members_.size();
}
inline void CSODOTAParty::clear_members() {
  members_.Clear();
}
inline const ::CSODOTAPartyMember& CSODOTAParty::members(int index) const {
  return members_.Get(index);
}
inline ::CSODOTAPartyMember* CSODOTAParty::mutable_members(int index) {
  return members_.Mutable(index);
}
inline ::CSODOTAPartyMember* CSODOTAParty::add_members() {
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyMember >&
CSODOTAParty::members() const {
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyMember >*
CSODOTAParty::mutable_members() {
  return &members_;
}

// optional uint32 open_guild_id = 30;
inline bool CSODOTAParty::has_open_guild_id() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CSODOTAParty::set_has_open_guild_id() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CSODOTAParty::clear_has_open_guild_id() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CSODOTAParty::clear_open_guild_id() {
  open_guild_id_ = 0u;
  clear_has_open_guild_id();
}
inline ::google::protobuf::uint32 CSODOTAParty::open_guild_id() const {
  return open_guild_id_;
}
inline void CSODOTAParty::set_open_guild_id(::google::protobuf::uint32 value) {
  set_has_open_guild_id();
  open_guild_id_ = value;
}

// repeated uint32 common_guilds = 31;
inline int CSODOTAParty::common_guilds_size() const {
  return common_guilds_.size();
}
inline void CSODOTAParty::clear_common_guilds() {
  common_guilds_.Clear();
}
inline ::google::protobuf::uint32 CSODOTAParty::common_guilds(int index) const {
  return common_guilds_.Get(index);
}
inline void CSODOTAParty::set_common_guilds(int index, ::google::protobuf::uint32 value) {
  common_guilds_.Set(index, value);
}
inline void CSODOTAParty::add_common_guilds(::google::protobuf::uint32 value) {
  common_guilds_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CSODOTAParty::common_guilds() const {
  return common_guilds_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CSODOTAParty::mutable_common_guilds() {
  return &common_guilds_;
}

// optional uint32 low_priority_games_remaining = 35;
inline bool CSODOTAParty::has_low_priority_games_remaining() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CSODOTAParty::set_has_low_priority_games_remaining() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CSODOTAParty::clear_has_low_priority_games_remaining() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CSODOTAParty::clear_low_priority_games_remaining() {
  low_priority_games_remaining_ = 0u;
  clear_has_low_priority_games_remaining();
}
inline ::google::protobuf::uint32 CSODOTAParty::low_priority_games_remaining() const {
  return low_priority_games_remaining_;
}
inline void CSODOTAParty::set_low_priority_games_remaining(::google::protobuf::uint32 value) {
  set_has_low_priority_games_remaining();
  low_priority_games_remaining_ = value;
}

// optional uint32 min_level = 36;
inline bool CSODOTAParty::has_min_level() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CSODOTAParty::set_has_min_level() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CSODOTAParty::clear_has_min_level() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CSODOTAParty::clear_min_level() {
  min_level_ = 0u;
  clear_has_min_level();
}
inline ::google::protobuf::uint32 CSODOTAParty::min_level() const {
  return min_level_;
}
inline void CSODOTAParty::set_min_level(::google::protobuf::uint32 value) {
  set_has_min_level();
  min_level_ = value;
}

// optional uint32 max_level = 37;
inline bool CSODOTAParty::has_max_level() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CSODOTAParty::set_has_max_level() {
  _has_bits_[0] |= 0x02000000u;
}
inline void CSODOTAParty::clear_has_max_level() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void CSODOTAParty::clear_max_level() {
  max_level_ = 0u;
  clear_has_max_level();
}
inline ::google::protobuf::uint32 CSODOTAParty::max_level() const {
  return max_level_;
}
inline void CSODOTAParty::set_max_level(::google::protobuf::uint32 value) {
  set_has_max_level();
  max_level_ = value;
}

// -------------------------------------------------------------------

// CSODOTAPartyInvite_PartyMember

// optional string name = 1;
inline bool CSODOTAPartyInvite_PartyMember::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTAPartyInvite_PartyMember::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSODOTAPartyInvite_PartyMember::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSODOTAPartyInvite_PartyMember::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CSODOTAPartyInvite_PartyMember::name() const {
  return *name_;
}
inline void CSODOTAPartyInvite_PartyMember::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CSODOTAPartyInvite_PartyMember::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CSODOTAPartyInvite_PartyMember::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSODOTAPartyInvite_PartyMember::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CSODOTAPartyInvite_PartyMember::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional fixed64 steam_id = 2;
inline bool CSODOTAPartyInvite_PartyMember::has_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTAPartyInvite_PartyMember::set_has_steam_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSODOTAPartyInvite_PartyMember::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSODOTAPartyInvite_PartyMember::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
inline ::google::protobuf::uint64 CSODOTAPartyInvite_PartyMember::steam_id() const {
  return steam_id_;
}
inline void CSODOTAPartyInvite_PartyMember::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
}

// -------------------------------------------------------------------

// CSODOTAPartyInvite

// optional uint64 group_id = 1;
inline bool CSODOTAPartyInvite::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTAPartyInvite::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSODOTAPartyInvite::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSODOTAPartyInvite::clear_group_id() {
  group_id_ = GOOGLE_ULONGLONG(0);
  clear_has_group_id();
}
inline ::google::protobuf::uint64 CSODOTAPartyInvite::group_id() const {
  return group_id_;
}
inline void CSODOTAPartyInvite::set_group_id(::google::protobuf::uint64 value) {
  set_has_group_id();
  group_id_ = value;
}

// optional fixed64 sender_id = 2;
inline bool CSODOTAPartyInvite::has_sender_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTAPartyInvite::set_has_sender_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSODOTAPartyInvite::clear_has_sender_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSODOTAPartyInvite::clear_sender_id() {
  sender_id_ = GOOGLE_ULONGLONG(0);
  clear_has_sender_id();
}
inline ::google::protobuf::uint64 CSODOTAPartyInvite::sender_id() const {
  return sender_id_;
}
inline void CSODOTAPartyInvite::set_sender_id(::google::protobuf::uint64 value) {
  set_has_sender_id();
  sender_id_ = value;
}

// optional string sender_name = 3;
inline bool CSODOTAPartyInvite::has_sender_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSODOTAPartyInvite::set_has_sender_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSODOTAPartyInvite::clear_has_sender_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSODOTAPartyInvite::clear_sender_name() {
  if (sender_name_ != &::google::protobuf::internal::kEmptyString) {
    sender_name_->clear();
  }
  clear_has_sender_name();
}
inline const ::std::string& CSODOTAPartyInvite::sender_name() const {
  return *sender_name_;
}
inline void CSODOTAPartyInvite::set_sender_name(const ::std::string& value) {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::kEmptyString) {
    sender_name_ = new ::std::string;
  }
  sender_name_->assign(value);
}
inline void CSODOTAPartyInvite::set_sender_name(const char* value) {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::kEmptyString) {
    sender_name_ = new ::std::string;
  }
  sender_name_->assign(value);
}
inline void CSODOTAPartyInvite::set_sender_name(const char* value, size_t size) {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::kEmptyString) {
    sender_name_ = new ::std::string;
  }
  sender_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSODOTAPartyInvite::mutable_sender_name() {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::kEmptyString) {
    sender_name_ = new ::std::string;
  }
  return sender_name_;
}
inline ::std::string* CSODOTAPartyInvite::release_sender_name() {
  clear_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sender_name_;
    sender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .CSODOTAPartyInvite.PartyMember members = 4;
inline int CSODOTAPartyInvite::members_size() const {
  return members_.size();
}
inline void CSODOTAPartyInvite::clear_members() {
  members_.Clear();
}
inline const ::CSODOTAPartyInvite_PartyMember& CSODOTAPartyInvite::members(int index) const {
  return members_.Get(index);
}
inline ::CSODOTAPartyInvite_PartyMember* CSODOTAPartyInvite::mutable_members(int index) {
  return members_.Mutable(index);
}
inline ::CSODOTAPartyInvite_PartyMember* CSODOTAPartyInvite::add_members() {
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyInvite_PartyMember >&
CSODOTAPartyInvite::members() const {
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSODOTAPartyInvite_PartyMember >*
CSODOTAPartyInvite::mutable_members() {
  return &members_;
}

// optional uint32 team_id = 5;
inline bool CSODOTAPartyInvite::has_team_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSODOTAPartyInvite::set_has_team_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSODOTAPartyInvite::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSODOTAPartyInvite::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CSODOTAPartyInvite::team_id() const {
  return team_id_;
}
inline void CSODOTAPartyInvite::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
}

// optional bool low_priority_status = 6;
inline bool CSODOTAPartyInvite::has_low_priority_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSODOTAPartyInvite::set_has_low_priority_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSODOTAPartyInvite::clear_has_low_priority_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSODOTAPartyInvite::clear_low_priority_status() {
  low_priority_status_ = false;
  clear_has_low_priority_status();
}
inline bool CSODOTAPartyInvite::low_priority_status() const {
  return low_priority_status_;
}
inline void CSODOTAPartyInvite::set_low_priority_status(bool value) {
  set_has_low_priority_status();
  low_priority_status_ = value;
}

// optional bool as_coach = 7;
inline bool CSODOTAPartyInvite::has_as_coach() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSODOTAPartyInvite::set_has_as_coach() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSODOTAPartyInvite::clear_has_as_coach() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSODOTAPartyInvite::clear_as_coach() {
  as_coach_ = false;
  clear_has_as_coach();
}
inline bool CSODOTAPartyInvite::as_coach() const {
  return as_coach_;
}
inline void CSODOTAPartyInvite::set_as_coach(bool value) {
  set_has_as_coach();
  as_coach_ = value;
}

// -------------------------------------------------------------------

// CMsgDOTAPartyMemberSetCoach

// optional bool wants_coach = 1;
inline bool CMsgDOTAPartyMemberSetCoach::has_wants_coach() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAPartyMemberSetCoach::set_has_wants_coach() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAPartyMemberSetCoach::clear_has_wants_coach() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAPartyMemberSetCoach::clear_wants_coach() {
  wants_coach_ = false;
  clear_has_wants_coach();
}
inline bool CMsgDOTAPartyMemberSetCoach::wants_coach() const {
  return wants_coach_;
}
inline void CMsgDOTAPartyMemberSetCoach::set_wants_coach(bool value) {
  set_has_wants_coach();
  wants_coach_ = value;
}

// -------------------------------------------------------------------

// CDOTASaveGame_Player

// optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
inline bool CDOTASaveGame_Player::has_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTASaveGame_Player::set_has_team() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTASaveGame_Player::clear_has_team() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTASaveGame_Player::clear_team() {
  team_ = 0;
  clear_has_team();
}
inline DOTA_GC_TEAM CDOTASaveGame_Player::team() const {
  return static_cast< DOTA_GC_TEAM >(team_);
}
inline void CDOTASaveGame_Player::set_team(DOTA_GC_TEAM value) {
  GOOGLE_DCHECK(DOTA_GC_TEAM_IsValid(value));
  set_has_team();
  team_ = value;
}

// optional string name = 2;
inline bool CDOTASaveGame_Player::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTASaveGame_Player::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTASaveGame_Player::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTASaveGame_Player::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CDOTASaveGame_Player::name() const {
  return *name_;
}
inline void CDOTASaveGame_Player::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CDOTASaveGame_Player::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CDOTASaveGame_Player::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDOTASaveGame_Player::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CDOTASaveGame_Player::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string hero = 3;
inline bool CDOTASaveGame_Player::has_hero() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTASaveGame_Player::set_has_hero() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTASaveGame_Player::clear_has_hero() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTASaveGame_Player::clear_hero() {
  if (hero_ != &::google::protobuf::internal::kEmptyString) {
    hero_->clear();
  }
  clear_has_hero();
}
inline const ::std::string& CDOTASaveGame_Player::hero() const {
  return *hero_;
}
inline void CDOTASaveGame_Player::set_hero(const ::std::string& value) {
  set_has_hero();
  if (hero_ == &::google::protobuf::internal::kEmptyString) {
    hero_ = new ::std::string;
  }
  hero_->assign(value);
}
inline void CDOTASaveGame_Player::set_hero(const char* value) {
  set_has_hero();
  if (hero_ == &::google::protobuf::internal::kEmptyString) {
    hero_ = new ::std::string;
  }
  hero_->assign(value);
}
inline void CDOTASaveGame_Player::set_hero(const char* value, size_t size) {
  set_has_hero();
  if (hero_ == &::google::protobuf::internal::kEmptyString) {
    hero_ = new ::std::string;
  }
  hero_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDOTASaveGame_Player::mutable_hero() {
  set_has_hero();
  if (hero_ == &::google::protobuf::internal::kEmptyString) {
    hero_ = new ::std::string;
  }
  return hero_;
}
inline ::std::string* CDOTASaveGame_Player::release_hero() {
  clear_has_hero();
  if (hero_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hero_;
    hero_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CDOTASaveGame_SaveInstance_PlayerPositions

// optional float x = 1;
inline bool CDOTASaveGame_SaveInstance_PlayerPositions::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTASaveGame_SaveInstance_PlayerPositions::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTASaveGame_SaveInstance_PlayerPositions::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTASaveGame_SaveInstance_PlayerPositions::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float CDOTASaveGame_SaveInstance_PlayerPositions::x() const {
  return x_;
}
inline void CDOTASaveGame_SaveInstance_PlayerPositions::set_x(float value) {
  set_has_x();
  x_ = value;
}

// optional float y = 2;
inline bool CDOTASaveGame_SaveInstance_PlayerPositions::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTASaveGame_SaveInstance_PlayerPositions::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTASaveGame_SaveInstance_PlayerPositions::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTASaveGame_SaveInstance_PlayerPositions::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float CDOTASaveGame_SaveInstance_PlayerPositions::y() const {
  return y_;
}
inline void CDOTASaveGame_SaveInstance_PlayerPositions::set_y(float value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// CDOTASaveGame_SaveInstance

// optional uint32 game_time = 2;
inline bool CDOTASaveGame_SaveInstance::has_game_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTASaveGame_SaveInstance::set_has_game_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTASaveGame_SaveInstance::clear_has_game_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTASaveGame_SaveInstance::clear_game_time() {
  game_time_ = 0u;
  clear_has_game_time();
}
inline ::google::protobuf::uint32 CDOTASaveGame_SaveInstance::game_time() const {
  return game_time_;
}
inline void CDOTASaveGame_SaveInstance::set_game_time(::google::protobuf::uint32 value) {
  set_has_game_time();
  game_time_ = value;
}

// optional uint32 team1_score = 3;
inline bool CDOTASaveGame_SaveInstance::has_team1_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTASaveGame_SaveInstance::set_has_team1_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTASaveGame_SaveInstance::clear_has_team1_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTASaveGame_SaveInstance::clear_team1_score() {
  team1_score_ = 0u;
  clear_has_team1_score();
}
inline ::google::protobuf::uint32 CDOTASaveGame_SaveInstance::team1_score() const {
  return team1_score_;
}
inline void CDOTASaveGame_SaveInstance::set_team1_score(::google::protobuf::uint32 value) {
  set_has_team1_score();
  team1_score_ = value;
}

// optional uint32 team2_score = 4;
inline bool CDOTASaveGame_SaveInstance::has_team2_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTASaveGame_SaveInstance::set_has_team2_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTASaveGame_SaveInstance::clear_has_team2_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTASaveGame_SaveInstance::clear_team2_score() {
  team2_score_ = 0u;
  clear_has_team2_score();
}
inline ::google::protobuf::uint32 CDOTASaveGame_SaveInstance::team2_score() const {
  return team2_score_;
}
inline void CDOTASaveGame_SaveInstance::set_team2_score(::google::protobuf::uint32 value) {
  set_has_team2_score();
  team2_score_ = value;
}

// repeated .CDOTASaveGame.SaveInstance.PlayerPositions player_positions = 5;
inline int CDOTASaveGame_SaveInstance::player_positions_size() const {
  return player_positions_.size();
}
inline void CDOTASaveGame_SaveInstance::clear_player_positions() {
  player_positions_.Clear();
}
inline const ::CDOTASaveGame_SaveInstance_PlayerPositions& CDOTASaveGame_SaveInstance::player_positions(int index) const {
  return player_positions_.Get(index);
}
inline ::CDOTASaveGame_SaveInstance_PlayerPositions* CDOTASaveGame_SaveInstance::mutable_player_positions(int index) {
  return player_positions_.Mutable(index);
}
inline ::CDOTASaveGame_SaveInstance_PlayerPositions* CDOTASaveGame_SaveInstance::add_player_positions() {
  return player_positions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_SaveInstance_PlayerPositions >&
CDOTASaveGame_SaveInstance::player_positions() const {
  return player_positions_;
}
inline ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_SaveInstance_PlayerPositions >*
CDOTASaveGame_SaveInstance::mutable_player_positions() {
  return &player_positions_;
}

// optional uint32 save_id = 6;
inline bool CDOTASaveGame_SaveInstance::has_save_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDOTASaveGame_SaveInstance::set_has_save_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CDOTASaveGame_SaveInstance::clear_has_save_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CDOTASaveGame_SaveInstance::clear_save_id() {
  save_id_ = 0u;
  clear_has_save_id();
}
inline ::google::protobuf::uint32 CDOTASaveGame_SaveInstance::save_id() const {
  return save_id_;
}
inline void CDOTASaveGame_SaveInstance::set_save_id(::google::protobuf::uint32 value) {
  set_has_save_id();
  save_id_ = value;
}

// optional uint32 save_time = 7;
inline bool CDOTASaveGame_SaveInstance::has_save_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CDOTASaveGame_SaveInstance::set_has_save_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CDOTASaveGame_SaveInstance::clear_has_save_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CDOTASaveGame_SaveInstance::clear_save_time() {
  save_time_ = 0u;
  clear_has_save_time();
}
inline ::google::protobuf::uint32 CDOTASaveGame_SaveInstance::save_time() const {
  return save_time_;
}
inline void CDOTASaveGame_SaveInstance::set_save_time(::google::protobuf::uint32 value) {
  set_has_save_time();
  save_time_ = value;
}

// -------------------------------------------------------------------

// CDOTASaveGame

// optional uint32 match_id = 5;
inline bool CDOTASaveGame::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTASaveGame::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTASaveGame::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTASaveGame::clear_match_id() {
  match_id_ = 0u;
  clear_has_match_id();
}
inline ::google::protobuf::uint32 CDOTASaveGame::match_id() const {
  return match_id_;
}
inline void CDOTASaveGame::set_match_id(::google::protobuf::uint32 value) {
  set_has_match_id();
  match_id_ = value;
}

// optional uint32 save_time = 2;
inline bool CDOTASaveGame::has_save_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTASaveGame::set_has_save_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTASaveGame::clear_has_save_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTASaveGame::clear_save_time() {
  save_time_ = 0u;
  clear_has_save_time();
}
inline ::google::protobuf::uint32 CDOTASaveGame::save_time() const {
  return save_time_;
}
inline void CDOTASaveGame::set_save_time(::google::protobuf::uint32 value) {
  set_has_save_time();
  save_time_ = value;
}

// repeated .CDOTASaveGame.Player players = 3;
inline int CDOTASaveGame::players_size() const {
  return players_.size();
}
inline void CDOTASaveGame::clear_players() {
  players_.Clear();
}
inline const ::CDOTASaveGame_Player& CDOTASaveGame::players(int index) const {
  return players_.Get(index);
}
inline ::CDOTASaveGame_Player* CDOTASaveGame::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::CDOTASaveGame_Player* CDOTASaveGame::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_Player >&
CDOTASaveGame::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_Player >*
CDOTASaveGame::mutable_players() {
  return &players_;
}

// repeated .CDOTASaveGame.SaveInstance save_instances = 4;
inline int CDOTASaveGame::save_instances_size() const {
  return save_instances_.size();
}
inline void CDOTASaveGame::clear_save_instances() {
  save_instances_.Clear();
}
inline const ::CDOTASaveGame_SaveInstance& CDOTASaveGame::save_instances(int index) const {
  return save_instances_.Get(index);
}
inline ::CDOTASaveGame_SaveInstance* CDOTASaveGame::mutable_save_instances(int index) {
  return save_instances_.Mutable(index);
}
inline ::CDOTASaveGame_SaveInstance* CDOTASaveGame::add_save_instances() {
  return save_instances_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_SaveInstance >&
CDOTASaveGame::save_instances() const {
  return save_instances_;
}
inline ::google::protobuf::RepeatedPtrField< ::CDOTASaveGame_SaveInstance >*
CDOTASaveGame::mutable_save_instances() {
  return &save_instances_;
}

// -------------------------------------------------------------------

// CMsgLeaverState

// optional uint32 lobby_state = 1;
inline bool CMsgLeaverState::has_lobby_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgLeaverState::set_has_lobby_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgLeaverState::clear_has_lobby_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgLeaverState::clear_lobby_state() {
  lobby_state_ = 0u;
  clear_has_lobby_state();
}
inline ::google::protobuf::uint32 CMsgLeaverState::lobby_state() const {
  return lobby_state_;
}
inline void CMsgLeaverState::set_lobby_state(::google::protobuf::uint32 value) {
  set_has_lobby_state();
  lobby_state_ = value;
}

// optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
inline bool CMsgLeaverState::has_game_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgLeaverState::set_has_game_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgLeaverState::clear_has_game_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgLeaverState::clear_game_state() {
  game_state_ = 0;
  clear_has_game_state();
}
inline DOTA_GameState CMsgLeaverState::game_state() const {
  return static_cast< DOTA_GameState >(game_state_);
}
inline void CMsgLeaverState::set_game_state(DOTA_GameState value) {
  GOOGLE_DCHECK(DOTA_GameState_IsValid(value));
  set_has_game_state();
  game_state_ = value;
}

// optional bool leaver_detected = 3;
inline bool CMsgLeaverState::has_leaver_detected() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgLeaverState::set_has_leaver_detected() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgLeaverState::clear_has_leaver_detected() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgLeaverState::clear_leaver_detected() {
  leaver_detected_ = false;
  clear_has_leaver_detected();
}
inline bool CMsgLeaverState::leaver_detected() const {
  return leaver_detected_;
}
inline void CMsgLeaverState::set_leaver_detected(bool value) {
  set_has_leaver_detected();
  leaver_detected_ = value;
}

// optional bool first_blood_happened = 4;
inline bool CMsgLeaverState::has_first_blood_happened() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgLeaverState::set_has_first_blood_happened() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgLeaverState::clear_has_first_blood_happened() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgLeaverState::clear_first_blood_happened() {
  first_blood_happened_ = false;
  clear_has_first_blood_happened();
}
inline bool CMsgLeaverState::first_blood_happened() const {
  return first_blood_happened_;
}
inline void CMsgLeaverState::set_first_blood_happened(bool value) {
  set_has_first_blood_happened();
  first_blood_happened_ = value;
}

// optional bool discard_match_results = 5;
inline bool CMsgLeaverState::has_discard_match_results() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgLeaverState::set_has_discard_match_results() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgLeaverState::clear_has_discard_match_results() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgLeaverState::clear_discard_match_results() {
  discard_match_results_ = false;
  clear_has_discard_match_results();
}
inline bool CMsgLeaverState::discard_match_results() const {
  return discard_match_results_;
}
inline void CMsgLeaverState::set_discard_match_results(bool value) {
  set_has_discard_match_results();
  discard_match_results_ = value;
}

// optional bool mass_disconnect = 6;
inline bool CMsgLeaverState::has_mass_disconnect() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgLeaverState::set_has_mass_disconnect() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgLeaverState::clear_has_mass_disconnect() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgLeaverState::clear_mass_disconnect() {
  mass_disconnect_ = false;
  clear_has_mass_disconnect();
}
inline bool CMsgLeaverState::mass_disconnect() const {
  return mass_disconnect_;
}
inline void CMsgLeaverState::set_mass_disconnect(bool value) {
  set_has_mass_disconnect();
  mass_disconnect_ = value;
}

// -------------------------------------------------------------------

// CDOTALobbyMember_CDOTALobbyMemberXPBonus

// optional uint32 type = 1;
inline bool CDOTALobbyMember_CDOTALobbyMemberXPBonus::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTALobbyMember_CDOTALobbyMemberXPBonus::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTALobbyMember_CDOTALobbyMemberXPBonus::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTALobbyMember_CDOTALobbyMemberXPBonus::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 CDOTALobbyMember_CDOTALobbyMemberXPBonus::type() const {
  return type_;
}
inline void CDOTALobbyMember_CDOTALobbyMemberXPBonus::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional float xp_bonus = 2;
inline bool CDOTALobbyMember_CDOTALobbyMemberXPBonus::has_xp_bonus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTALobbyMember_CDOTALobbyMemberXPBonus::set_has_xp_bonus() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTALobbyMember_CDOTALobbyMemberXPBonus::clear_has_xp_bonus() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTALobbyMember_CDOTALobbyMemberXPBonus::clear_xp_bonus() {
  xp_bonus_ = 0;
  clear_has_xp_bonus();
}
inline float CDOTALobbyMember_CDOTALobbyMemberXPBonus::xp_bonus() const {
  return xp_bonus_;
}
inline void CDOTALobbyMember_CDOTALobbyMemberXPBonus::set_xp_bonus(float value) {
  set_has_xp_bonus();
  xp_bonus_ = value;
}

// -------------------------------------------------------------------

// CDOTALobbyMember

// optional fixed64 id = 1;
inline bool CDOTALobbyMember::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTALobbyMember::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTALobbyMember::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTALobbyMember::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 CDOTALobbyMember::id() const {
  return id_;
}
inline void CDOTALobbyMember::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 hero_id = 2;
inline bool CDOTALobbyMember::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTALobbyMember::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTALobbyMember::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTALobbyMember::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::hero_id() const {
  return hero_id_;
}
inline void CDOTALobbyMember::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// optional .DOTA_GC_TEAM team = 3 [default = DOTA_GC_TEAM_GOOD_GUYS];
inline bool CDOTALobbyMember::has_team() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTALobbyMember::set_has_team() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTALobbyMember::clear_has_team() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTALobbyMember::clear_team() {
  team_ = 0;
  clear_has_team();
}
inline DOTA_GC_TEAM CDOTALobbyMember::team() const {
  return static_cast< DOTA_GC_TEAM >(team_);
}
inline void CDOTALobbyMember::set_team(DOTA_GC_TEAM value) {
  GOOGLE_DCHECK(DOTA_GC_TEAM_IsValid(value));
  set_has_team();
  team_ = value;
}

// optional string name = 6;
inline bool CDOTALobbyMember::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTALobbyMember::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDOTALobbyMember::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDOTALobbyMember::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CDOTALobbyMember::name() const {
  return *name_;
}
inline void CDOTALobbyMember::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CDOTALobbyMember::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CDOTALobbyMember::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDOTALobbyMember::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CDOTALobbyMember::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 slot = 7;
inline bool CDOTALobbyMember::has_slot() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDOTALobbyMember::set_has_slot() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CDOTALobbyMember::clear_has_slot() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CDOTALobbyMember::clear_slot() {
  slot_ = 0u;
  clear_has_slot();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::slot() const {
  return slot_;
}
inline void CDOTALobbyMember::set_slot(::google::protobuf::uint32 value) {
  set_has_slot();
  slot_ = value;
}

// optional uint64 party_id = 12;
inline bool CDOTALobbyMember::has_party_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CDOTALobbyMember::set_has_party_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CDOTALobbyMember::clear_has_party_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CDOTALobbyMember::clear_party_id() {
  party_id_ = GOOGLE_ULONGLONG(0);
  clear_has_party_id();
}
inline ::google::protobuf::uint64 CDOTALobbyMember::party_id() const {
  return party_id_;
}
inline void CDOTALobbyMember::set_party_id(::google::protobuf::uint64 value) {
  set_has_party_id();
  party_id_ = value;
}

// optional uint32 meta_level = 13;
inline bool CDOTALobbyMember::has_meta_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CDOTALobbyMember::set_has_meta_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CDOTALobbyMember::clear_has_meta_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CDOTALobbyMember::clear_meta_level() {
  meta_level_ = 0u;
  clear_has_meta_level();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::meta_level() const {
  return meta_level_;
}
inline void CDOTALobbyMember::set_meta_level(::google::protobuf::uint32 value) {
  set_has_meta_level();
  meta_level_ = value;
}

// optional uint32 meta_xp = 14;
inline bool CDOTALobbyMember::has_meta_xp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CDOTALobbyMember::set_has_meta_xp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CDOTALobbyMember::clear_has_meta_xp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CDOTALobbyMember::clear_meta_xp() {
  meta_xp_ = 0u;
  clear_has_meta_xp();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::meta_xp() const {
  return meta_xp_;
}
inline void CDOTALobbyMember::set_meta_xp(::google::protobuf::uint32 value) {
  set_has_meta_xp();
  meta_xp_ = value;
}

// optional uint32 meta_xp_awarded = 15;
inline bool CDOTALobbyMember::has_meta_xp_awarded() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CDOTALobbyMember::set_has_meta_xp_awarded() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CDOTALobbyMember::clear_has_meta_xp_awarded() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CDOTALobbyMember::clear_meta_xp_awarded() {
  meta_xp_awarded_ = 0u;
  clear_has_meta_xp_awarded();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::meta_xp_awarded() const {
  return meta_xp_awarded_;
}
inline void CDOTALobbyMember::set_meta_xp_awarded(::google::protobuf::uint32 value) {
  set_has_meta_xp_awarded();
  meta_xp_awarded_ = value;
}

// optional .DOTALeaverStatus_t leaver_status = 16 [default = DOTA_LEAVER_NONE];
inline bool CDOTALobbyMember::has_leaver_status() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CDOTALobbyMember::set_has_leaver_status() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CDOTALobbyMember::clear_has_leaver_status() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CDOTALobbyMember::clear_leaver_status() {
  leaver_status_ = 0;
  clear_has_leaver_status();
}
inline DOTALeaverStatus_t CDOTALobbyMember::leaver_status() const {
  return static_cast< DOTALeaverStatus_t >(leaver_status_);
}
inline void CDOTALobbyMember::set_leaver_status(DOTALeaverStatus_t value) {
  GOOGLE_DCHECK(DOTALeaverStatus_t_IsValid(value));
  set_has_leaver_status();
  leaver_status_ = value;
}

// optional uint32 leaver_actions = 28;
inline bool CDOTALobbyMember::has_leaver_actions() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CDOTALobbyMember::set_has_leaver_actions() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CDOTALobbyMember::clear_has_leaver_actions() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CDOTALobbyMember::clear_leaver_actions() {
  leaver_actions_ = 0u;
  clear_has_leaver_actions();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::leaver_actions() const {
  return leaver_actions_;
}
inline void CDOTALobbyMember::set_leaver_actions(::google::protobuf::uint32 value) {
  set_has_leaver_actions();
  leaver_actions_ = value;
}

// optional uint32 channel = 17;
inline bool CDOTALobbyMember::has_channel() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CDOTALobbyMember::set_has_channel() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CDOTALobbyMember::clear_has_channel() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CDOTALobbyMember::clear_channel() {
  channel_ = 0u;
  clear_has_channel();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::channel() const {
  return channel_;
}
inline void CDOTALobbyMember::set_channel(::google::protobuf::uint32 value) {
  set_has_channel();
  channel_ = value;
}

// optional uint32 prize_def_index = 18;
inline bool CDOTALobbyMember::has_prize_def_index() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CDOTALobbyMember::set_has_prize_def_index() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CDOTALobbyMember::clear_has_prize_def_index() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CDOTALobbyMember::clear_prize_def_index() {
  prize_def_index_ = 0u;
  clear_has_prize_def_index();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::prize_def_index() const {
  return prize_def_index_;
}
inline void CDOTALobbyMember::set_prize_def_index(::google::protobuf::uint32 value) {
  set_has_prize_def_index();
  prize_def_index_ = value;
}

// repeated uint32 disabled_hero_id = 20;
inline int CDOTALobbyMember::disabled_hero_id_size() const {
  return disabled_hero_id_.size();
}
inline void CDOTALobbyMember::clear_disabled_hero_id() {
  disabled_hero_id_.Clear();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::disabled_hero_id(int index) const {
  return disabled_hero_id_.Get(index);
}
inline void CDOTALobbyMember::set_disabled_hero_id(int index, ::google::protobuf::uint32 value) {
  disabled_hero_id_.Set(index, value);
}
inline void CDOTALobbyMember::add_disabled_hero_id(::google::protobuf::uint32 value) {
  disabled_hero_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTALobbyMember::disabled_hero_id() const {
  return disabled_hero_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTALobbyMember::mutable_disabled_hero_id() {
  return &disabled_hero_id_;
}

// optional .PartnerAccountType partner_account_type = 21 [default = PARTNER_NONE];
inline bool CDOTALobbyMember::has_partner_account_type() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CDOTALobbyMember::set_has_partner_account_type() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CDOTALobbyMember::clear_has_partner_account_type() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CDOTALobbyMember::clear_partner_account_type() {
  partner_account_type_ = 0;
  clear_has_partner_account_type();
}
inline PartnerAccountType CDOTALobbyMember::partner_account_type() const {
  return static_cast< PartnerAccountType >(partner_account_type_);
}
inline void CDOTALobbyMember::set_partner_account_type(PartnerAccountType value) {
  GOOGLE_DCHECK(PartnerAccountType_IsValid(value));
  set_has_partner_account_type();
  partner_account_type_ = value;
}

// repeated uint32 enabled_hero_id = 22;
inline int CDOTALobbyMember::enabled_hero_id_size() const {
  return enabled_hero_id_.size();
}
inline void CDOTALobbyMember::clear_enabled_hero_id() {
  enabled_hero_id_.Clear();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::enabled_hero_id(int index) const {
  return enabled_hero_id_.Get(index);
}
inline void CDOTALobbyMember::set_enabled_hero_id(int index, ::google::protobuf::uint32 value) {
  enabled_hero_id_.Set(index, value);
}
inline void CDOTALobbyMember::add_enabled_hero_id(::google::protobuf::uint32 value) {
  enabled_hero_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTALobbyMember::enabled_hero_id() const {
  return enabled_hero_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTALobbyMember::mutable_enabled_hero_id() {
  return &enabled_hero_id_;
}

// optional .DOTA_GC_TEAM coach_team = 23 [default = DOTA_GC_TEAM_GOOD_GUYS];
inline bool CDOTALobbyMember::has_coach_team() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CDOTALobbyMember::set_has_coach_team() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CDOTALobbyMember::clear_has_coach_team() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CDOTALobbyMember::clear_coach_team() {
  coach_team_ = 0;
  clear_has_coach_team();
}
inline DOTA_GC_TEAM CDOTALobbyMember::coach_team() const {
  return static_cast< DOTA_GC_TEAM >(coach_team_);
}
inline void CDOTALobbyMember::set_coach_team(DOTA_GC_TEAM value) {
  GOOGLE_DCHECK(DOTA_GC_TEAM_IsValid(value));
  set_has_coach_team();
  coach_team_ = value;
}

// optional uint32 nexon_pc_bang_no = 24;
inline bool CDOTALobbyMember::has_nexon_pc_bang_no() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CDOTALobbyMember::set_has_nexon_pc_bang_no() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CDOTALobbyMember::clear_has_nexon_pc_bang_no() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CDOTALobbyMember::clear_nexon_pc_bang_no() {
  nexon_pc_bang_no_ = 0u;
  clear_has_nexon_pc_bang_no();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::nexon_pc_bang_no() const {
  return nexon_pc_bang_no_;
}
inline void CDOTALobbyMember::set_nexon_pc_bang_no(::google::protobuf::uint32 value) {
  set_has_nexon_pc_bang_no();
  nexon_pc_bang_no_ = value;
}

// optional string nexon_pc_bang_name = 25;
inline bool CDOTALobbyMember::has_nexon_pc_bang_name() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CDOTALobbyMember::set_has_nexon_pc_bang_name() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CDOTALobbyMember::clear_has_nexon_pc_bang_name() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CDOTALobbyMember::clear_nexon_pc_bang_name() {
  if (nexon_pc_bang_name_ != &::google::protobuf::internal::kEmptyString) {
    nexon_pc_bang_name_->clear();
  }
  clear_has_nexon_pc_bang_name();
}
inline const ::std::string& CDOTALobbyMember::nexon_pc_bang_name() const {
  return *nexon_pc_bang_name_;
}
inline void CDOTALobbyMember::set_nexon_pc_bang_name(const ::std::string& value) {
  set_has_nexon_pc_bang_name();
  if (nexon_pc_bang_name_ == &::google::protobuf::internal::kEmptyString) {
    nexon_pc_bang_name_ = new ::std::string;
  }
  nexon_pc_bang_name_->assign(value);
}
inline void CDOTALobbyMember::set_nexon_pc_bang_name(const char* value) {
  set_has_nexon_pc_bang_name();
  if (nexon_pc_bang_name_ == &::google::protobuf::internal::kEmptyString) {
    nexon_pc_bang_name_ = new ::std::string;
  }
  nexon_pc_bang_name_->assign(value);
}
inline void CDOTALobbyMember::set_nexon_pc_bang_name(const char* value, size_t size) {
  set_has_nexon_pc_bang_name();
  if (nexon_pc_bang_name_ == &::google::protobuf::internal::kEmptyString) {
    nexon_pc_bang_name_ = new ::std::string;
  }
  nexon_pc_bang_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDOTALobbyMember::mutable_nexon_pc_bang_name() {
  set_has_nexon_pc_bang_name();
  if (nexon_pc_bang_name_ == &::google::protobuf::internal::kEmptyString) {
    nexon_pc_bang_name_ = new ::std::string;
  }
  return nexon_pc_bang_name_;
}
inline ::std::string* CDOTALobbyMember::release_nexon_pc_bang_name() {
  clear_has_nexon_pc_bang_name();
  if (nexon_pc_bang_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nexon_pc_bang_name_;
    nexon_pc_bang_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .CDOTALobbyMember.CDOTALobbyMemberXPBonus xp_bonuses = 27;
inline int CDOTALobbyMember::xp_bonuses_size() const {
  return xp_bonuses_.size();
}
inline void CDOTALobbyMember::clear_xp_bonuses() {
  xp_bonuses_.Clear();
}
inline const ::CDOTALobbyMember_CDOTALobbyMemberXPBonus& CDOTALobbyMember::xp_bonuses(int index) const {
  return xp_bonuses_.Get(index);
}
inline ::CDOTALobbyMember_CDOTALobbyMemberXPBonus* CDOTALobbyMember::mutable_xp_bonuses(int index) {
  return xp_bonuses_.Mutable(index);
}
inline ::CDOTALobbyMember_CDOTALobbyMemberXPBonus* CDOTALobbyMember::add_xp_bonuses() {
  return xp_bonuses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember_CDOTALobbyMemberXPBonus >&
CDOTALobbyMember::xp_bonuses() const {
  return xp_bonuses_;
}
inline ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember_CDOTALobbyMemberXPBonus >*
CDOTALobbyMember::mutable_xp_bonuses() {
  return &xp_bonuses_;
}

// -------------------------------------------------------------------

// CDOTALobbyMemberPrivate

// optional uint32 ip = 1;
inline bool CDOTALobbyMemberPrivate::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTALobbyMemberPrivate::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTALobbyMemberPrivate::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTALobbyMemberPrivate::clear_ip() {
  ip_ = 0u;
  clear_has_ip();
}
inline ::google::protobuf::uint32 CDOTALobbyMemberPrivate::ip() const {
  return ip_;
}
inline void CDOTALobbyMemberPrivate::set_ip(::google::protobuf::uint32 value) {
  set_has_ip();
  ip_ = value;
}

// optional .DOTALobbyReadyState ready_state = 2 [default = DOTALobbyReadyState_UNDECLARED];
inline bool CDOTALobbyMemberPrivate::has_ready_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTALobbyMemberPrivate::set_has_ready_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTALobbyMemberPrivate::clear_has_ready_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTALobbyMemberPrivate::clear_ready_state() {
  ready_state_ = 0;
  clear_has_ready_state();
}
inline DOTALobbyReadyState CDOTALobbyMemberPrivate::ready_state() const {
  return static_cast< DOTALobbyReadyState >(ready_state_);
}
inline void CDOTALobbyMemberPrivate::set_ready_state(DOTALobbyReadyState value) {
  GOOGLE_DCHECK(DOTALobbyReadyState_IsValid(value));
  set_has_ready_state();
  ready_state_ = value;
}

// optional .CMsgLeaverState leaver_state = 3;
inline bool CDOTALobbyMemberPrivate::has_leaver_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTALobbyMemberPrivate::set_has_leaver_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTALobbyMemberPrivate::clear_has_leaver_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTALobbyMemberPrivate::clear_leaver_state() {
  if (leaver_state_ != NULL) leaver_state_->::CMsgLeaverState::Clear();
  clear_has_leaver_state();
}
inline const ::CMsgLeaverState& CDOTALobbyMemberPrivate::leaver_state() const {
  return leaver_state_ != NULL ? *leaver_state_ : *default_instance_->leaver_state_;
}
inline ::CMsgLeaverState* CDOTALobbyMemberPrivate::mutable_leaver_state() {
  set_has_leaver_state();
  if (leaver_state_ == NULL) leaver_state_ = new ::CMsgLeaverState;
  return leaver_state_;
}
inline ::CMsgLeaverState* CDOTALobbyMemberPrivate::release_leaver_state() {
  clear_has_leaver_state();
  ::CMsgLeaverState* temp = leaver_state_;
  leaver_state_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// CLobbyTeamDetails

// optional string team_name = 1;
inline bool CLobbyTeamDetails::has_team_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CLobbyTeamDetails::set_has_team_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CLobbyTeamDetails::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CLobbyTeamDetails::clear_team_name() {
  if (team_name_ != &::google::protobuf::internal::kEmptyString) {
    team_name_->clear();
  }
  clear_has_team_name();
}
inline const ::std::string& CLobbyTeamDetails::team_name() const {
  return *team_name_;
}
inline void CLobbyTeamDetails::set_team_name(const ::std::string& value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
}
inline void CLobbyTeamDetails::set_team_name(const char* value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
}
inline void CLobbyTeamDetails::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CLobbyTeamDetails::mutable_team_name() {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  return team_name_;
}
inline ::std::string* CLobbyTeamDetails::release_team_name() {
  clear_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = team_name_;
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string team_tag = 3;
inline bool CLobbyTeamDetails::has_team_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CLobbyTeamDetails::set_has_team_tag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CLobbyTeamDetails::clear_has_team_tag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CLobbyTeamDetails::clear_team_tag() {
  if (team_tag_ != &::google::protobuf::internal::kEmptyString) {
    team_tag_->clear();
  }
  clear_has_team_tag();
}
inline const ::std::string& CLobbyTeamDetails::team_tag() const {
  return *team_tag_;
}
inline void CLobbyTeamDetails::set_team_tag(const ::std::string& value) {
  set_has_team_tag();
  if (team_tag_ == &::google::protobuf::internal::kEmptyString) {
    team_tag_ = new ::std::string;
  }
  team_tag_->assign(value);
}
inline void CLobbyTeamDetails::set_team_tag(const char* value) {
  set_has_team_tag();
  if (team_tag_ == &::google::protobuf::internal::kEmptyString) {
    team_tag_ = new ::std::string;
  }
  team_tag_->assign(value);
}
inline void CLobbyTeamDetails::set_team_tag(const char* value, size_t size) {
  set_has_team_tag();
  if (team_tag_ == &::google::protobuf::internal::kEmptyString) {
    team_tag_ = new ::std::string;
  }
  team_tag_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CLobbyTeamDetails::mutable_team_tag() {
  set_has_team_tag();
  if (team_tag_ == &::google::protobuf::internal::kEmptyString) {
    team_tag_ = new ::std::string;
  }
  return team_tag_;
}
inline ::std::string* CLobbyTeamDetails::release_team_tag() {
  clear_has_team_tag();
  if (team_tag_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = team_tag_;
    team_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 team_id = 4;
inline bool CLobbyTeamDetails::has_team_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CLobbyTeamDetails::set_has_team_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CLobbyTeamDetails::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CLobbyTeamDetails::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CLobbyTeamDetails::team_id() const {
  return team_id_;
}
inline void CLobbyTeamDetails::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
}

// optional uint64 team_logo = 5;
inline bool CLobbyTeamDetails::has_team_logo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CLobbyTeamDetails::set_has_team_logo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CLobbyTeamDetails::clear_has_team_logo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CLobbyTeamDetails::clear_team_logo() {
  team_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team_logo();
}
inline ::google::protobuf::uint64 CLobbyTeamDetails::team_logo() const {
  return team_logo_;
}
inline void CLobbyTeamDetails::set_team_logo(::google::protobuf::uint64 value) {
  set_has_team_logo();
  team_logo_ = value;
}

// optional uint64 team_base_logo = 6;
inline bool CLobbyTeamDetails::has_team_base_logo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CLobbyTeamDetails::set_has_team_base_logo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CLobbyTeamDetails::clear_has_team_base_logo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CLobbyTeamDetails::clear_team_base_logo() {
  team_base_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team_base_logo();
}
inline ::google::protobuf::uint64 CLobbyTeamDetails::team_base_logo() const {
  return team_base_logo_;
}
inline void CLobbyTeamDetails::set_team_base_logo(::google::protobuf::uint64 value) {
  set_has_team_base_logo();
  team_base_logo_ = value;
}

// optional uint64 team_banner_logo = 7;
inline bool CLobbyTeamDetails::has_team_banner_logo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CLobbyTeamDetails::set_has_team_banner_logo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CLobbyTeamDetails::clear_has_team_banner_logo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CLobbyTeamDetails::clear_team_banner_logo() {
  team_banner_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team_banner_logo();
}
inline ::google::protobuf::uint64 CLobbyTeamDetails::team_banner_logo() const {
  return team_banner_logo_;
}
inline void CLobbyTeamDetails::set_team_banner_logo(::google::protobuf::uint64 value) {
  set_has_team_banner_logo();
  team_banner_logo_ = value;
}

// optional bool team_complete = 8;
inline bool CLobbyTeamDetails::has_team_complete() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CLobbyTeamDetails::set_has_team_complete() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CLobbyTeamDetails::clear_has_team_complete() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CLobbyTeamDetails::clear_team_complete() {
  team_complete_ = false;
  clear_has_team_complete();
}
inline bool CLobbyTeamDetails::team_complete() const {
  return team_complete_;
}
inline void CLobbyTeamDetails::set_team_complete(bool value) {
  set_has_team_complete();
  team_complete_ = value;
}

// optional string guild_name = 9;
inline bool CLobbyTeamDetails::has_guild_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CLobbyTeamDetails::set_has_guild_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CLobbyTeamDetails::clear_has_guild_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CLobbyTeamDetails::clear_guild_name() {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    guild_name_->clear();
  }
  clear_has_guild_name();
}
inline const ::std::string& CLobbyTeamDetails::guild_name() const {
  return *guild_name_;
}
inline void CLobbyTeamDetails::set_guild_name(const ::std::string& value) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(value);
}
inline void CLobbyTeamDetails::set_guild_name(const char* value) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(value);
}
inline void CLobbyTeamDetails::set_guild_name(const char* value, size_t size) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CLobbyTeamDetails::mutable_guild_name() {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  return guild_name_;
}
inline ::std::string* CLobbyTeamDetails::release_guild_name() {
  clear_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guild_name_;
    guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string guild_tag = 10;
inline bool CLobbyTeamDetails::has_guild_tag() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CLobbyTeamDetails::set_has_guild_tag() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CLobbyTeamDetails::clear_has_guild_tag() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CLobbyTeamDetails::clear_guild_tag() {
  if (guild_tag_ != &::google::protobuf::internal::kEmptyString) {
    guild_tag_->clear();
  }
  clear_has_guild_tag();
}
inline const ::std::string& CLobbyTeamDetails::guild_tag() const {
  return *guild_tag_;
}
inline void CLobbyTeamDetails::set_guild_tag(const ::std::string& value) {
  set_has_guild_tag();
  if (guild_tag_ == &::google::protobuf::internal::kEmptyString) {
    guild_tag_ = new ::std::string;
  }
  guild_tag_->assign(value);
}
inline void CLobbyTeamDetails::set_guild_tag(const char* value) {
  set_has_guild_tag();
  if (guild_tag_ == &::google::protobuf::internal::kEmptyString) {
    guild_tag_ = new ::std::string;
  }
  guild_tag_->assign(value);
}
inline void CLobbyTeamDetails::set_guild_tag(const char* value, size_t size) {
  set_has_guild_tag();
  if (guild_tag_ == &::google::protobuf::internal::kEmptyString) {
    guild_tag_ = new ::std::string;
  }
  guild_tag_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CLobbyTeamDetails::mutable_guild_tag() {
  set_has_guild_tag();
  if (guild_tag_ == &::google::protobuf::internal::kEmptyString) {
    guild_tag_ = new ::std::string;
  }
  return guild_tag_;
}
inline ::std::string* CLobbyTeamDetails::release_guild_tag() {
  clear_has_guild_tag();
  if (guild_tag_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guild_tag_;
    guild_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 guild_id = 11;
inline bool CLobbyTeamDetails::has_guild_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CLobbyTeamDetails::set_has_guild_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CLobbyTeamDetails::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CLobbyTeamDetails::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
inline ::google::protobuf::uint32 CLobbyTeamDetails::guild_id() const {
  return guild_id_;
}
inline void CLobbyTeamDetails::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
}

// optional uint64 guild_logo = 12;
inline bool CLobbyTeamDetails::has_guild_logo() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CLobbyTeamDetails::set_has_guild_logo() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CLobbyTeamDetails::clear_has_guild_logo() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CLobbyTeamDetails::clear_guild_logo() {
  guild_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_guild_logo();
}
inline ::google::protobuf::uint64 CLobbyTeamDetails::guild_logo() const {
  return guild_logo_;
}
inline void CLobbyTeamDetails::set_guild_logo(::google::protobuf::uint64 value) {
  set_has_guild_logo();
  guild_logo_ = value;
}

// optional uint64 guild_base_logo = 13;
inline bool CLobbyTeamDetails::has_guild_base_logo() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CLobbyTeamDetails::set_has_guild_base_logo() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CLobbyTeamDetails::clear_has_guild_base_logo() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CLobbyTeamDetails::clear_guild_base_logo() {
  guild_base_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_guild_base_logo();
}
inline ::google::protobuf::uint64 CLobbyTeamDetails::guild_base_logo() const {
  return guild_base_logo_;
}
inline void CLobbyTeamDetails::set_guild_base_logo(::google::protobuf::uint64 value) {
  set_has_guild_base_logo();
  guild_base_logo_ = value;
}

// optional uint64 guild_banner_logo = 14;
inline bool CLobbyTeamDetails::has_guild_banner_logo() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CLobbyTeamDetails::set_has_guild_banner_logo() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CLobbyTeamDetails::clear_has_guild_banner_logo() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CLobbyTeamDetails::clear_guild_banner_logo() {
  guild_banner_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_guild_banner_logo();
}
inline ::google::protobuf::uint64 CLobbyTeamDetails::guild_banner_logo() const {
  return guild_banner_logo_;
}
inline void CLobbyTeamDetails::set_guild_banner_logo(::google::protobuf::uint64 value) {
  set_has_guild_banner_logo();
  guild_banner_logo_ = value;
}

// -------------------------------------------------------------------

// CLobbyTimedRewardDetails

// optional uint64 item_id = 1;
inline bool CLobbyTimedRewardDetails::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CLobbyTimedRewardDetails::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CLobbyTimedRewardDetails::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CLobbyTimedRewardDetails::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_item_id();
}
inline ::google::protobuf::uint64 CLobbyTimedRewardDetails::item_id() const {
  return item_id_;
}
inline void CLobbyTimedRewardDetails::set_item_id(::google::protobuf::uint64 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional uint32 item_def_index = 2;
inline bool CLobbyTimedRewardDetails::has_item_def_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CLobbyTimedRewardDetails::set_has_item_def_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CLobbyTimedRewardDetails::clear_has_item_def_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CLobbyTimedRewardDetails::clear_item_def_index() {
  item_def_index_ = 0u;
  clear_has_item_def_index();
}
inline ::google::protobuf::uint32 CLobbyTimedRewardDetails::item_def_index() const {
  return item_def_index_;
}
inline void CLobbyTimedRewardDetails::set_item_def_index(::google::protobuf::uint32 value) {
  set_has_item_def_index();
  item_def_index_ = value;
}

// optional bool is_supply_crate = 3;
inline bool CLobbyTimedRewardDetails::has_is_supply_crate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CLobbyTimedRewardDetails::set_has_is_supply_crate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CLobbyTimedRewardDetails::clear_has_is_supply_crate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CLobbyTimedRewardDetails::clear_is_supply_crate() {
  is_supply_crate_ = false;
  clear_has_is_supply_crate();
}
inline bool CLobbyTimedRewardDetails::is_supply_crate() const {
  return is_supply_crate_;
}
inline void CLobbyTimedRewardDetails::set_is_supply_crate(bool value) {
  set_has_is_supply_crate();
  is_supply_crate_ = value;
}

// optional bool is_timed_drop = 4;
inline bool CLobbyTimedRewardDetails::has_is_timed_drop() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CLobbyTimedRewardDetails::set_has_is_timed_drop() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CLobbyTimedRewardDetails::clear_has_is_timed_drop() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CLobbyTimedRewardDetails::clear_is_timed_drop() {
  is_timed_drop_ = false;
  clear_has_is_timed_drop();
}
inline bool CLobbyTimedRewardDetails::is_timed_drop() const {
  return is_timed_drop_;
}
inline void CLobbyTimedRewardDetails::set_is_timed_drop(bool value) {
  set_has_is_timed_drop();
  is_timed_drop_ = value;
}

// optional uint32 account_id = 5;
inline bool CLobbyTimedRewardDetails::has_account_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CLobbyTimedRewardDetails::set_has_account_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CLobbyTimedRewardDetails::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CLobbyTimedRewardDetails::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CLobbyTimedRewardDetails::account_id() const {
  return account_id_;
}
inline void CLobbyTimedRewardDetails::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
}

// -------------------------------------------------------------------

// CLobbyBroadcastChannelInfo

// optional uint32 channel_id = 1;
inline bool CLobbyBroadcastChannelInfo::has_channel_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CLobbyBroadcastChannelInfo::set_has_channel_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CLobbyBroadcastChannelInfo::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CLobbyBroadcastChannelInfo::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 CLobbyBroadcastChannelInfo::channel_id() const {
  return channel_id_;
}
inline void CLobbyBroadcastChannelInfo::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// optional string country_code = 2;
inline bool CLobbyBroadcastChannelInfo::has_country_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CLobbyBroadcastChannelInfo::set_has_country_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CLobbyBroadcastChannelInfo::clear_has_country_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CLobbyBroadcastChannelInfo::clear_country_code() {
  if (country_code_ != &::google::protobuf::internal::kEmptyString) {
    country_code_->clear();
  }
  clear_has_country_code();
}
inline const ::std::string& CLobbyBroadcastChannelInfo::country_code() const {
  return *country_code_;
}
inline void CLobbyBroadcastChannelInfo::set_country_code(const ::std::string& value) {
  set_has_country_code();
  if (country_code_ == &::google::protobuf::internal::kEmptyString) {
    country_code_ = new ::std::string;
  }
  country_code_->assign(value);
}
inline void CLobbyBroadcastChannelInfo::set_country_code(const char* value) {
  set_has_country_code();
  if (country_code_ == &::google::protobuf::internal::kEmptyString) {
    country_code_ = new ::std::string;
  }
  country_code_->assign(value);
}
inline void CLobbyBroadcastChannelInfo::set_country_code(const char* value, size_t size) {
  set_has_country_code();
  if (country_code_ == &::google::protobuf::internal::kEmptyString) {
    country_code_ = new ::std::string;
  }
  country_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CLobbyBroadcastChannelInfo::mutable_country_code() {
  set_has_country_code();
  if (country_code_ == &::google::protobuf::internal::kEmptyString) {
    country_code_ = new ::std::string;
  }
  return country_code_;
}
inline ::std::string* CLobbyBroadcastChannelInfo::release_country_code() {
  clear_has_country_code();
  if (country_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = country_code_;
    country_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string description = 3;
inline bool CLobbyBroadcastChannelInfo::has_description() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CLobbyBroadcastChannelInfo::set_has_description() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CLobbyBroadcastChannelInfo::clear_has_description() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CLobbyBroadcastChannelInfo::clear_description() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& CLobbyBroadcastChannelInfo::description() const {
  return *description_;
}
inline void CLobbyBroadcastChannelInfo::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void CLobbyBroadcastChannelInfo::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void CLobbyBroadcastChannelInfo::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CLobbyBroadcastChannelInfo::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  return description_;
}
inline ::std::string* CLobbyBroadcastChannelInfo::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CSODOTALobby_CExtraMsg

// optional uint32 id = 1;
inline bool CSODOTALobby_CExtraMsg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTALobby_CExtraMsg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSODOTALobby_CExtraMsg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSODOTALobby_CExtraMsg::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CSODOTALobby_CExtraMsg::id() const {
  return id_;
}
inline void CSODOTALobby_CExtraMsg::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional bytes contents = 2;
inline bool CSODOTALobby_CExtraMsg::has_contents() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTALobby_CExtraMsg::set_has_contents() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSODOTALobby_CExtraMsg::clear_has_contents() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSODOTALobby_CExtraMsg::clear_contents() {
  if (contents_ != &::google::protobuf::internal::kEmptyString) {
    contents_->clear();
  }
  clear_has_contents();
}
inline const ::std::string& CSODOTALobby_CExtraMsg::contents() const {
  return *contents_;
}
inline void CSODOTALobby_CExtraMsg::set_contents(const ::std::string& value) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  contents_->assign(value);
}
inline void CSODOTALobby_CExtraMsg::set_contents(const char* value) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  contents_->assign(value);
}
inline void CSODOTALobby_CExtraMsg::set_contents(const void* value, size_t size) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  contents_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSODOTALobby_CExtraMsg::mutable_contents() {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  return contents_;
}
inline ::std::string* CSODOTALobby_CExtraMsg::release_contents() {
  clear_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = contents_;
    contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CSODOTALobby

// optional uint64 lobby_id = 1;
inline bool CSODOTALobby::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTALobby::set_has_lobby_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSODOTALobby::clear_has_lobby_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSODOTALobby::clear_lobby_id() {
  lobby_id_ = GOOGLE_ULONGLONG(0);
  clear_has_lobby_id();
}
inline ::google::protobuf::uint64 CSODOTALobby::lobby_id() const {
  return lobby_id_;
}
inline void CSODOTALobby::set_lobby_id(::google::protobuf::uint64 value) {
  set_has_lobby_id();
  lobby_id_ = value;
}

// repeated .CDOTALobbyMember members = 2;
inline int CSODOTALobby::members_size() const {
  return members_.size();
}
inline void CSODOTALobby::clear_members() {
  members_.Clear();
}
inline const ::CDOTALobbyMember& CSODOTALobby::members(int index) const {
  return members_.Get(index);
}
inline ::CDOTALobbyMember* CSODOTALobby::mutable_members(int index) {
  return members_.Mutable(index);
}
inline ::CDOTALobbyMember* CSODOTALobby::add_members() {
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember >&
CSODOTALobby::members() const {
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember >*
CSODOTALobby::mutable_members() {
  return &members_;
}

// repeated .CDOTALobbyMember left_members = 7;
inline int CSODOTALobby::left_members_size() const {
  return left_members_.size();
}
inline void CSODOTALobby::clear_left_members() {
  left_members_.Clear();
}
inline const ::CDOTALobbyMember& CSODOTALobby::left_members(int index) const {
  return left_members_.Get(index);
}
inline ::CDOTALobbyMember* CSODOTALobby::mutable_left_members(int index) {
  return left_members_.Mutable(index);
}
inline ::CDOTALobbyMember* CSODOTALobby::add_left_members() {
  return left_members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember >&
CSODOTALobby::left_members() const {
  return left_members_;
}
inline ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember >*
CSODOTALobby::mutable_left_members() {
  return &left_members_;
}

// optional fixed64 leader_id = 11;
inline bool CSODOTALobby::has_leader_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSODOTALobby::set_has_leader_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSODOTALobby::clear_has_leader_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSODOTALobby::clear_leader_id() {
  leader_id_ = GOOGLE_ULONGLONG(0);
  clear_has_leader_id();
}
inline ::google::protobuf::uint64 CSODOTALobby::leader_id() const {
  return leader_id_;
}
inline void CSODOTALobby::set_leader_id(::google::protobuf::uint64 value) {
  set_has_leader_id();
  leader_id_ = value;
}

// optional fixed64 server_id = 6 [default = 0];
inline bool CSODOTALobby::has_server_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSODOTALobby::set_has_server_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSODOTALobby::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSODOTALobby::clear_server_id() {
  server_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_id();
}
inline ::google::protobuf::uint64 CSODOTALobby::server_id() const {
  return server_id_;
}
inline void CSODOTALobby::set_server_id(::google::protobuf::uint64 value) {
  set_has_server_id();
  server_id_ = value;
}

// optional uint32 game_mode = 3;
inline bool CSODOTALobby::has_game_mode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSODOTALobby::set_has_game_mode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSODOTALobby::clear_has_game_mode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSODOTALobby::clear_game_mode() {
  game_mode_ = 0u;
  clear_has_game_mode();
}
inline ::google::protobuf::uint32 CSODOTALobby::game_mode() const {
  return game_mode_;
}
inline void CSODOTALobby::set_game_mode(::google::protobuf::uint32 value) {
  set_has_game_mode();
  game_mode_ = value;
}

// repeated fixed64 pending_invites = 10;
inline int CSODOTALobby::pending_invites_size() const {
  return pending_invites_.size();
}
inline void CSODOTALobby::clear_pending_invites() {
  pending_invites_.Clear();
}
inline ::google::protobuf::uint64 CSODOTALobby::pending_invites(int index) const {
  return pending_invites_.Get(index);
}
inline void CSODOTALobby::set_pending_invites(int index, ::google::protobuf::uint64 value) {
  pending_invites_.Set(index, value);
}
inline void CSODOTALobby::add_pending_invites(::google::protobuf::uint64 value) {
  pending_invites_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CSODOTALobby::pending_invites() const {
  return pending_invites_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CSODOTALobby::mutable_pending_invites() {
  return &pending_invites_;
}

// optional .CSODOTALobby.State state = 4 [default = UI];
inline bool CSODOTALobby::has_state() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSODOTALobby::set_has_state() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CSODOTALobby::clear_has_state() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CSODOTALobby::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::CSODOTALobby_State CSODOTALobby::state() const {
  return static_cast< ::CSODOTALobby_State >(state_);
}
inline void CSODOTALobby::set_state(::CSODOTALobby_State value) {
  GOOGLE_DCHECK(::CSODOTALobby_State_IsValid(value));
  set_has_state();
  state_ = value;
}

// optional string connect = 5;
inline bool CSODOTALobby::has_connect() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CSODOTALobby::set_has_connect() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CSODOTALobby::clear_has_connect() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CSODOTALobby::clear_connect() {
  if (connect_ != &::google::protobuf::internal::kEmptyString) {
    connect_->clear();
  }
  clear_has_connect();
}
inline const ::std::string& CSODOTALobby::connect() const {
  return *connect_;
}
inline void CSODOTALobby::set_connect(const ::std::string& value) {
  set_has_connect();
  if (connect_ == &::google::protobuf::internal::kEmptyString) {
    connect_ = new ::std::string;
  }
  connect_->assign(value);
}
inline void CSODOTALobby::set_connect(const char* value) {
  set_has_connect();
  if (connect_ == &::google::protobuf::internal::kEmptyString) {
    connect_ = new ::std::string;
  }
  connect_->assign(value);
}
inline void CSODOTALobby::set_connect(const char* value, size_t size) {
  set_has_connect();
  if (connect_ == &::google::protobuf::internal::kEmptyString) {
    connect_ = new ::std::string;
  }
  connect_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSODOTALobby::mutable_connect() {
  set_has_connect();
  if (connect_ == &::google::protobuf::internal::kEmptyString) {
    connect_ = new ::std::string;
  }
  return connect_;
}
inline ::std::string* CSODOTALobby::release_connect() {
  clear_has_connect();
  if (connect_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = connect_;
    connect_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .CSODOTALobby.LobbyType lobby_type = 12 [default = INVALID];
inline bool CSODOTALobby::has_lobby_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CSODOTALobby::set_has_lobby_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CSODOTALobby::clear_has_lobby_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CSODOTALobby::clear_lobby_type() {
  lobby_type_ = -1;
  clear_has_lobby_type();
}
inline ::CSODOTALobby_LobbyType CSODOTALobby::lobby_type() const {
  return static_cast< ::CSODOTALobby_LobbyType >(lobby_type_);
}
inline void CSODOTALobby::set_lobby_type(::CSODOTALobby_LobbyType value) {
  GOOGLE_DCHECK(::CSODOTALobby_LobbyType_IsValid(value));
  set_has_lobby_type();
  lobby_type_ = value;
}

// optional bool allow_cheats = 13;
inline bool CSODOTALobby::has_allow_cheats() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CSODOTALobby::set_has_allow_cheats() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CSODOTALobby::clear_has_allow_cheats() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CSODOTALobby::clear_allow_cheats() {
  allow_cheats_ = false;
  clear_has_allow_cheats();
}
inline bool CSODOTALobby::allow_cheats() const {
  return allow_cheats_;
}
inline void CSODOTALobby::set_allow_cheats(bool value) {
  set_has_allow_cheats();
  allow_cheats_ = value;
}

// optional bool fill_with_bots = 14;
inline bool CSODOTALobby::has_fill_with_bots() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CSODOTALobby::set_has_fill_with_bots() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CSODOTALobby::clear_has_fill_with_bots() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CSODOTALobby::clear_fill_with_bots() {
  fill_with_bots_ = false;
  clear_has_fill_with_bots();
}
inline bool CSODOTALobby::fill_with_bots() const {
  return fill_with_bots_;
}
inline void CSODOTALobby::set_fill_with_bots(bool value) {
  set_has_fill_with_bots();
  fill_with_bots_ = value;
}

// optional bool intro_mode = 15;
inline bool CSODOTALobby::has_intro_mode() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CSODOTALobby::set_has_intro_mode() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CSODOTALobby::clear_has_intro_mode() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CSODOTALobby::clear_intro_mode() {
  intro_mode_ = false;
  clear_has_intro_mode();
}
inline bool CSODOTALobby::intro_mode() const {
  return intro_mode_;
}
inline void CSODOTALobby::set_intro_mode(bool value) {
  set_has_intro_mode();
  intro_mode_ = value;
}

// optional string game_name = 16;
inline bool CSODOTALobby::has_game_name() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CSODOTALobby::set_has_game_name() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CSODOTALobby::clear_has_game_name() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CSODOTALobby::clear_game_name() {
  if (game_name_ != &::google::protobuf::internal::kEmptyString) {
    game_name_->clear();
  }
  clear_has_game_name();
}
inline const ::std::string& CSODOTALobby::game_name() const {
  return *game_name_;
}
inline void CSODOTALobby::set_game_name(const ::std::string& value) {
  set_has_game_name();
  if (game_name_ == &::google::protobuf::internal::kEmptyString) {
    game_name_ = new ::std::string;
  }
  game_name_->assign(value);
}
inline void CSODOTALobby::set_game_name(const char* value) {
  set_has_game_name();
  if (game_name_ == &::google::protobuf::internal::kEmptyString) {
    game_name_ = new ::std::string;
  }
  game_name_->assign(value);
}
inline void CSODOTALobby::set_game_name(const char* value, size_t size) {
  set_has_game_name();
  if (game_name_ == &::google::protobuf::internal::kEmptyString) {
    game_name_ = new ::std::string;
  }
  game_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSODOTALobby::mutable_game_name() {
  set_has_game_name();
  if (game_name_ == &::google::protobuf::internal::kEmptyString) {
    game_name_ = new ::std::string;
  }
  return game_name_;
}
inline ::std::string* CSODOTALobby::release_game_name() {
  clear_has_game_name();
  if (game_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = game_name_;
    game_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .CLobbyTeamDetails team_details = 17;
inline int CSODOTALobby::team_details_size() const {
  return team_details_.size();
}
inline void CSODOTALobby::clear_team_details() {
  team_details_.Clear();
}
inline const ::CLobbyTeamDetails& CSODOTALobby::team_details(int index) const {
  return team_details_.Get(index);
}
inline ::CLobbyTeamDetails* CSODOTALobby::mutable_team_details(int index) {
  return team_details_.Mutable(index);
}
inline ::CLobbyTeamDetails* CSODOTALobby::add_team_details() {
  return team_details_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CLobbyTeamDetails >&
CSODOTALobby::team_details() const {
  return team_details_;
}
inline ::google::protobuf::RepeatedPtrField< ::CLobbyTeamDetails >*
CSODOTALobby::mutable_team_details() {
  return &team_details_;
}

// optional uint32 tutorial_lesson = 18;
inline bool CSODOTALobby::has_tutorial_lesson() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CSODOTALobby::set_has_tutorial_lesson() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CSODOTALobby::clear_has_tutorial_lesson() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CSODOTALobby::clear_tutorial_lesson() {
  tutorial_lesson_ = 0u;
  clear_has_tutorial_lesson();
}
inline ::google::protobuf::uint32 CSODOTALobby::tutorial_lesson() const {
  return tutorial_lesson_;
}
inline void CSODOTALobby::set_tutorial_lesson(::google::protobuf::uint32 value) {
  set_has_tutorial_lesson();
  tutorial_lesson_ = value;
}

// optional uint32 tournament_id = 19;
inline bool CSODOTALobby::has_tournament_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CSODOTALobby::set_has_tournament_id() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CSODOTALobby::clear_has_tournament_id() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CSODOTALobby::clear_tournament_id() {
  tournament_id_ = 0u;
  clear_has_tournament_id();
}
inline ::google::protobuf::uint32 CSODOTALobby::tournament_id() const {
  return tournament_id_;
}
inline void CSODOTALobby::set_tournament_id(::google::protobuf::uint32 value) {
  set_has_tournament_id();
  tournament_id_ = value;
}

// optional uint32 tournament_game_id = 20;
inline bool CSODOTALobby::has_tournament_game_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CSODOTALobby::set_has_tournament_game_id() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CSODOTALobby::clear_has_tournament_game_id() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CSODOTALobby::clear_tournament_game_id() {
  tournament_game_id_ = 0u;
  clear_has_tournament_game_id();
}
inline ::google::protobuf::uint32 CSODOTALobby::tournament_game_id() const {
  return tournament_game_id_;
}
inline void CSODOTALobby::set_tournament_game_id(::google::protobuf::uint32 value) {
  set_has_tournament_game_id();
  tournament_game_id_ = value;
}

// optional uint32 server_region = 21 [default = 0];
inline bool CSODOTALobby::has_server_region() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CSODOTALobby::set_has_server_region() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CSODOTALobby::clear_has_server_region() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CSODOTALobby::clear_server_region() {
  server_region_ = 0u;
  clear_has_server_region();
}
inline ::google::protobuf::uint32 CSODOTALobby::server_region() const {
  return server_region_;
}
inline void CSODOTALobby::set_server_region(::google::protobuf::uint32 value) {
  set_has_server_region();
  server_region_ = value;
}

// optional .DOTA_GameState game_state = 22 [default = DOTA_GAMERULES_STATE_INIT];
inline bool CSODOTALobby::has_game_state() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CSODOTALobby::set_has_game_state() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CSODOTALobby::clear_has_game_state() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CSODOTALobby::clear_game_state() {
  game_state_ = 0;
  clear_has_game_state();
}
inline DOTA_GameState CSODOTALobby::game_state() const {
  return static_cast< DOTA_GameState >(game_state_);
}
inline void CSODOTALobby::set_game_state(DOTA_GameState value) {
  GOOGLE_DCHECK(DOTA_GameState_IsValid(value));
  set_has_game_state();
  game_state_ = value;
}

// optional uint32 num_spectators = 23;
inline bool CSODOTALobby::has_num_spectators() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CSODOTALobby::set_has_num_spectators() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CSODOTALobby::clear_has_num_spectators() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CSODOTALobby::clear_num_spectators() {
  num_spectators_ = 0u;
  clear_has_num_spectators();
}
inline ::google::protobuf::uint32 CSODOTALobby::num_spectators() const {
  return num_spectators_;
}
inline void CSODOTALobby::set_num_spectators(::google::protobuf::uint32 value) {
  set_has_num_spectators();
  num_spectators_ = value;
}

// optional uint32 tower_state = 24;
inline bool CSODOTALobby::has_tower_state() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CSODOTALobby::set_has_tower_state() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CSODOTALobby::clear_has_tower_state() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CSODOTALobby::clear_tower_state() {
  tower_state_ = 0u;
  clear_has_tower_state();
}
inline ::google::protobuf::uint32 CSODOTALobby::tower_state() const {
  return tower_state_;
}
inline void CSODOTALobby::set_tower_state(::google::protobuf::uint32 value) {
  set_has_tower_state();
  tower_state_ = value;
}

// optional uint32 matchgroup = 25;
inline bool CSODOTALobby::has_matchgroup() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CSODOTALobby::set_has_matchgroup() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CSODOTALobby::clear_has_matchgroup() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CSODOTALobby::clear_matchgroup() {
  matchgroup_ = 0u;
  clear_has_matchgroup();
}
inline ::google::protobuf::uint32 CSODOTALobby::matchgroup() const {
  return matchgroup_;
}
inline void CSODOTALobby::set_matchgroup(::google::protobuf::uint32 value) {
  set_has_matchgroup();
  matchgroup_ = value;
}

// optional .DOTA_CM_PICK cm_pick = 28 [default = DOTA_CM_RANDOM];
inline bool CSODOTALobby::has_cm_pick() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CSODOTALobby::set_has_cm_pick() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CSODOTALobby::clear_has_cm_pick() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CSODOTALobby::clear_cm_pick() {
  cm_pick_ = 0;
  clear_has_cm_pick();
}
inline DOTA_CM_PICK CSODOTALobby::cm_pick() const {
  return static_cast< DOTA_CM_PICK >(cm_pick_);
}
inline void CSODOTALobby::set_cm_pick(DOTA_CM_PICK value) {
  GOOGLE_DCHECK(DOTA_CM_PICK_IsValid(value));
  set_has_cm_pick();
  cm_pick_ = value;
}

// optional uint32 match_id = 30;
inline bool CSODOTALobby::has_match_id() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CSODOTALobby::set_has_match_id() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CSODOTALobby::clear_has_match_id() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CSODOTALobby::clear_match_id() {
  match_id_ = 0u;
  clear_has_match_id();
}
inline ::google::protobuf::uint32 CSODOTALobby::match_id() const {
  return match_id_;
}
inline void CSODOTALobby::set_match_id(::google::protobuf::uint32 value) {
  set_has_match_id();
  match_id_ = value;
}

// optional bool allow_spectating = 31 [default = true];
inline bool CSODOTALobby::has_allow_spectating() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CSODOTALobby::set_has_allow_spectating() {
  _has_bits_[0] |= 0x02000000u;
}
inline void CSODOTALobby::clear_has_allow_spectating() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void CSODOTALobby::clear_allow_spectating() {
  allow_spectating_ = true;
  clear_has_allow_spectating();
}
inline bool CSODOTALobby::allow_spectating() const {
  return allow_spectating_;
}
inline void CSODOTALobby::set_allow_spectating(bool value) {
  set_has_allow_spectating();
  allow_spectating_ = value;
}

// optional .DOTABotDifficulty bot_difficulty = 36 [default = BOT_DIFFICULTY_HARD];
inline bool CSODOTALobby::has_bot_difficulty() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CSODOTALobby::set_has_bot_difficulty() {
  _has_bits_[0] |= 0x04000000u;
}
inline void CSODOTALobby::clear_has_bot_difficulty() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void CSODOTALobby::clear_bot_difficulty() {
  bot_difficulty_ = 3;
  clear_has_bot_difficulty();
}
inline DOTABotDifficulty CSODOTALobby::bot_difficulty() const {
  return static_cast< DOTABotDifficulty >(bot_difficulty_);
}
inline void CSODOTALobby::set_bot_difficulty(DOTABotDifficulty value) {
  GOOGLE_DCHECK(DOTABotDifficulty_IsValid(value));
  set_has_bot_difficulty();
  bot_difficulty_ = value;
}

// optional .DOTAGameVersion game_version = 37 [default = GAME_VERSION_CURRENT];
inline bool CSODOTALobby::has_game_version() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void CSODOTALobby::set_has_game_version() {
  _has_bits_[0] |= 0x08000000u;
}
inline void CSODOTALobby::clear_has_game_version() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void CSODOTALobby::clear_game_version() {
  game_version_ = 0;
  clear_has_game_version();
}
inline DOTAGameVersion CSODOTALobby::game_version() const {
  return static_cast< DOTAGameVersion >(game_version_);
}
inline void CSODOTALobby::set_game_version(DOTAGameVersion value) {
  GOOGLE_DCHECK(DOTAGameVersion_IsValid(value));
  set_has_game_version();
  game_version_ = value;
}

// repeated .CLobbyTimedRewardDetails timed_reward_details = 38;
inline int CSODOTALobby::timed_reward_details_size() const {
  return timed_reward_details_.size();
}
inline void CSODOTALobby::clear_timed_reward_details() {
  timed_reward_details_.Clear();
}
inline const ::CLobbyTimedRewardDetails& CSODOTALobby::timed_reward_details(int index) const {
  return timed_reward_details_.Get(index);
}
inline ::CLobbyTimedRewardDetails* CSODOTALobby::mutable_timed_reward_details(int index) {
  return timed_reward_details_.Mutable(index);
}
inline ::CLobbyTimedRewardDetails* CSODOTALobby::add_timed_reward_details() {
  return timed_reward_details_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CLobbyTimedRewardDetails >&
CSODOTALobby::timed_reward_details() const {
  return timed_reward_details_;
}
inline ::google::protobuf::RepeatedPtrField< ::CLobbyTimedRewardDetails >*
CSODOTALobby::mutable_timed_reward_details() {
  return &timed_reward_details_;
}

// optional string pass_key = 39;
inline bool CSODOTALobby::has_pass_key() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void CSODOTALobby::set_has_pass_key() {
  _has_bits_[0] |= 0x20000000u;
}
inline void CSODOTALobby::clear_has_pass_key() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void CSODOTALobby::clear_pass_key() {
  if (pass_key_ != &::google::protobuf::internal::kEmptyString) {
    pass_key_->clear();
  }
  clear_has_pass_key();
}
inline const ::std::string& CSODOTALobby::pass_key() const {
  return *pass_key_;
}
inline void CSODOTALobby::set_pass_key(const ::std::string& value) {
  set_has_pass_key();
  if (pass_key_ == &::google::protobuf::internal::kEmptyString) {
    pass_key_ = new ::std::string;
  }
  pass_key_->assign(value);
}
inline void CSODOTALobby::set_pass_key(const char* value) {
  set_has_pass_key();
  if (pass_key_ == &::google::protobuf::internal::kEmptyString) {
    pass_key_ = new ::std::string;
  }
  pass_key_->assign(value);
}
inline void CSODOTALobby::set_pass_key(const char* value, size_t size) {
  set_has_pass_key();
  if (pass_key_ == &::google::protobuf::internal::kEmptyString) {
    pass_key_ = new ::std::string;
  }
  pass_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSODOTALobby::mutable_pass_key() {
  set_has_pass_key();
  if (pass_key_ == &::google::protobuf::internal::kEmptyString) {
    pass_key_ = new ::std::string;
  }
  return pass_key_;
}
inline ::std::string* CSODOTALobby::release_pass_key() {
  clear_has_pass_key();
  if (pass_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pass_key_;
    pass_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .DOTABotDifficulty bot_slot_difficulty = 41;
inline int CSODOTALobby::bot_slot_difficulty_size() const {
  return bot_slot_difficulty_.size();
}
inline void CSODOTALobby::clear_bot_slot_difficulty() {
  bot_slot_difficulty_.Clear();
}
inline DOTABotDifficulty CSODOTALobby::bot_slot_difficulty(int index) const {
  return static_cast< DOTABotDifficulty >(bot_slot_difficulty_.Get(index));
}
inline void CSODOTALobby::set_bot_slot_difficulty(int index, DOTABotDifficulty value) {
  GOOGLE_DCHECK(DOTABotDifficulty_IsValid(value));
  bot_slot_difficulty_.Set(index, value);
}
inline void CSODOTALobby::add_bot_slot_difficulty(DOTABotDifficulty value) {
  GOOGLE_DCHECK(DOTABotDifficulty_IsValid(value));
  bot_slot_difficulty_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
CSODOTALobby::bot_slot_difficulty() const {
  return bot_slot_difficulty_;
}
inline ::google::protobuf::RepeatedField<int>*
CSODOTALobby::mutable_bot_slot_difficulty() {
  return &bot_slot_difficulty_;
}

// optional uint32 leagueid = 42;
inline bool CSODOTALobby::has_leagueid() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void CSODOTALobby::set_has_leagueid() {
  _has_bits_[0] |= 0x80000000u;
}
inline void CSODOTALobby::clear_has_leagueid() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void CSODOTALobby::clear_leagueid() {
  leagueid_ = 0u;
  clear_has_leagueid();
}
inline ::google::protobuf::uint32 CSODOTALobby::leagueid() const {
  return leagueid_;
}
inline void CSODOTALobby::set_leagueid(::google::protobuf::uint32 value) {
  set_has_leagueid();
  leagueid_ = value;
}

// optional uint32 penalty_level_radiant = 43 [default = 0];
inline bool CSODOTALobby::has_penalty_level_radiant() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void CSODOTALobby::set_has_penalty_level_radiant() {
  _has_bits_[1] |= 0x00000001u;
}
inline void CSODOTALobby::clear_has_penalty_level_radiant() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void CSODOTALobby::clear_penalty_level_radiant() {
  penalty_level_radiant_ = 0u;
  clear_has_penalty_level_radiant();
}
inline ::google::protobuf::uint32 CSODOTALobby::penalty_level_radiant() const {
  return penalty_level_radiant_;
}
inline void CSODOTALobby::set_penalty_level_radiant(::google::protobuf::uint32 value) {
  set_has_penalty_level_radiant();
  penalty_level_radiant_ = value;
}

// optional uint32 penalty_level_dire = 44 [default = 0];
inline bool CSODOTALobby::has_penalty_level_dire() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void CSODOTALobby::set_has_penalty_level_dire() {
  _has_bits_[1] |= 0x00000002u;
}
inline void CSODOTALobby::clear_has_penalty_level_dire() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void CSODOTALobby::clear_penalty_level_dire() {
  penalty_level_dire_ = 0u;
  clear_has_penalty_level_dire();
}
inline ::google::protobuf::uint32 CSODOTALobby::penalty_level_dire() const {
  return penalty_level_dire_;
}
inline void CSODOTALobby::set_penalty_level_dire(::google::protobuf::uint32 value) {
  set_has_penalty_level_dire();
  penalty_level_dire_ = value;
}

// optional uint32 load_game_id = 45;
inline bool CSODOTALobby::has_load_game_id() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void CSODOTALobby::set_has_load_game_id() {
  _has_bits_[1] |= 0x00000004u;
}
inline void CSODOTALobby::clear_has_load_game_id() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void CSODOTALobby::clear_load_game_id() {
  load_game_id_ = 0u;
  clear_has_load_game_id();
}
inline ::google::protobuf::uint32 CSODOTALobby::load_game_id() const {
  return load_game_id_;
}
inline void CSODOTALobby::set_load_game_id(::google::protobuf::uint32 value) {
  set_has_load_game_id();
  load_game_id_ = value;
}

// optional uint32 series_type = 46;
inline bool CSODOTALobby::has_series_type() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void CSODOTALobby::set_has_series_type() {
  _has_bits_[1] |= 0x00000008u;
}
inline void CSODOTALobby::clear_has_series_type() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void CSODOTALobby::clear_series_type() {
  series_type_ = 0u;
  clear_has_series_type();
}
inline ::google::protobuf::uint32 CSODOTALobby::series_type() const {
  return series_type_;
}
inline void CSODOTALobby::set_series_type(::google::protobuf::uint32 value) {
  set_has_series_type();
  series_type_ = value;
}

// optional uint32 radiant_series_wins = 47;
inline bool CSODOTALobby::has_radiant_series_wins() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void CSODOTALobby::set_has_radiant_series_wins() {
  _has_bits_[1] |= 0x00000010u;
}
inline void CSODOTALobby::clear_has_radiant_series_wins() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void CSODOTALobby::clear_radiant_series_wins() {
  radiant_series_wins_ = 0u;
  clear_has_radiant_series_wins();
}
inline ::google::protobuf::uint32 CSODOTALobby::radiant_series_wins() const {
  return radiant_series_wins_;
}
inline void CSODOTALobby::set_radiant_series_wins(::google::protobuf::uint32 value) {
  set_has_radiant_series_wins();
  radiant_series_wins_ = value;
}

// optional uint32 dire_series_wins = 48;
inline bool CSODOTALobby::has_dire_series_wins() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void CSODOTALobby::set_has_dire_series_wins() {
  _has_bits_[1] |= 0x00000020u;
}
inline void CSODOTALobby::clear_has_dire_series_wins() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void CSODOTALobby::clear_dire_series_wins() {
  dire_series_wins_ = 0u;
  clear_has_dire_series_wins();
}
inline ::google::protobuf::uint32 CSODOTALobby::dire_series_wins() const {
  return dire_series_wins_;
}
inline void CSODOTALobby::set_dire_series_wins(::google::protobuf::uint32 value) {
  set_has_dire_series_wins();
  dire_series_wins_ = value;
}

// optional uint32 loot_generated = 49;
inline bool CSODOTALobby::has_loot_generated() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void CSODOTALobby::set_has_loot_generated() {
  _has_bits_[1] |= 0x00000040u;
}
inline void CSODOTALobby::clear_has_loot_generated() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void CSODOTALobby::clear_loot_generated() {
  loot_generated_ = 0u;
  clear_has_loot_generated();
}
inline ::google::protobuf::uint32 CSODOTALobby::loot_generated() const {
  return loot_generated_;
}
inline void CSODOTALobby::set_loot_generated(::google::protobuf::uint32 value) {
  set_has_loot_generated();
  loot_generated_ = value;
}

// optional uint32 loot_awarded = 50;
inline bool CSODOTALobby::has_loot_awarded() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void CSODOTALobby::set_has_loot_awarded() {
  _has_bits_[1] |= 0x00000080u;
}
inline void CSODOTALobby::clear_has_loot_awarded() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void CSODOTALobby::clear_loot_awarded() {
  loot_awarded_ = 0u;
  clear_has_loot_awarded();
}
inline ::google::protobuf::uint32 CSODOTALobby::loot_awarded() const {
  return loot_awarded_;
}
inline void CSODOTALobby::set_loot_awarded(::google::protobuf::uint32 value) {
  set_has_loot_awarded();
  loot_awarded_ = value;
}

// optional bool allchat = 51 [default = false];
inline bool CSODOTALobby::has_allchat() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void CSODOTALobby::set_has_allchat() {
  _has_bits_[1] |= 0x00000100u;
}
inline void CSODOTALobby::clear_has_allchat() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void CSODOTALobby::clear_allchat() {
  allchat_ = false;
  clear_has_allchat();
}
inline bool CSODOTALobby::allchat() const {
  return allchat_;
}
inline void CSODOTALobby::set_allchat(bool value) {
  set_has_allchat();
  allchat_ = value;
}

// optional uint32 rank_change = 52;
inline bool CSODOTALobby::has_rank_change() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void CSODOTALobby::set_has_rank_change() {
  _has_bits_[1] |= 0x00000200u;
}
inline void CSODOTALobby::clear_has_rank_change() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void CSODOTALobby::clear_rank_change() {
  rank_change_ = 0u;
  clear_has_rank_change();
}
inline ::google::protobuf::uint32 CSODOTALobby::rank_change() const {
  return rank_change_;
}
inline void CSODOTALobby::set_rank_change(::google::protobuf::uint32 value) {
  set_has_rank_change();
  rank_change_ = value;
}

// optional .LobbyDotaTVDelay dota_tv_delay = 53 [default = LobbyDotaTV_10];
inline bool CSODOTALobby::has_dota_tv_delay() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void CSODOTALobby::set_has_dota_tv_delay() {
  _has_bits_[1] |= 0x00000400u;
}
inline void CSODOTALobby::clear_has_dota_tv_delay() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void CSODOTALobby::clear_dota_tv_delay() {
  dota_tv_delay_ = 0;
  clear_has_dota_tv_delay();
}
inline LobbyDotaTVDelay CSODOTALobby::dota_tv_delay() const {
  return static_cast< LobbyDotaTVDelay >(dota_tv_delay_);
}
inline void CSODOTALobby::set_dota_tv_delay(LobbyDotaTVDelay value) {
  GOOGLE_DCHECK(LobbyDotaTVDelay_IsValid(value));
  set_has_dota_tv_delay();
  dota_tv_delay_ = value;
}

// optional string custom_game_mode = 54;
inline bool CSODOTALobby::has_custom_game_mode() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void CSODOTALobby::set_has_custom_game_mode() {
  _has_bits_[1] |= 0x00000800u;
}
inline void CSODOTALobby::clear_has_custom_game_mode() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void CSODOTALobby::clear_custom_game_mode() {
  if (custom_game_mode_ != &::google::protobuf::internal::kEmptyString) {
    custom_game_mode_->clear();
  }
  clear_has_custom_game_mode();
}
inline const ::std::string& CSODOTALobby::custom_game_mode() const {
  return *custom_game_mode_;
}
inline void CSODOTALobby::set_custom_game_mode(const ::std::string& value) {
  set_has_custom_game_mode();
  if (custom_game_mode_ == &::google::protobuf::internal::kEmptyString) {
    custom_game_mode_ = new ::std::string;
  }
  custom_game_mode_->assign(value);
}
inline void CSODOTALobby::set_custom_game_mode(const char* value) {
  set_has_custom_game_mode();
  if (custom_game_mode_ == &::google::protobuf::internal::kEmptyString) {
    custom_game_mode_ = new ::std::string;
  }
  custom_game_mode_->assign(value);
}
inline void CSODOTALobby::set_custom_game_mode(const char* value, size_t size) {
  set_has_custom_game_mode();
  if (custom_game_mode_ == &::google::protobuf::internal::kEmptyString) {
    custom_game_mode_ = new ::std::string;
  }
  custom_game_mode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSODOTALobby::mutable_custom_game_mode() {
  set_has_custom_game_mode();
  if (custom_game_mode_ == &::google::protobuf::internal::kEmptyString) {
    custom_game_mode_ = new ::std::string;
  }
  return custom_game_mode_;
}
inline ::std::string* CSODOTALobby::release_custom_game_mode() {
  clear_has_custom_game_mode();
  if (custom_game_mode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = custom_game_mode_;
    custom_game_mode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string custom_map_name = 55;
inline bool CSODOTALobby::has_custom_map_name() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void CSODOTALobby::set_has_custom_map_name() {
  _has_bits_[1] |= 0x00001000u;
}
inline void CSODOTALobby::clear_has_custom_map_name() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void CSODOTALobby::clear_custom_map_name() {
  if (custom_map_name_ != &::google::protobuf::internal::kEmptyString) {
    custom_map_name_->clear();
  }
  clear_has_custom_map_name();
}
inline const ::std::string& CSODOTALobby::custom_map_name() const {
  return *custom_map_name_;
}
inline void CSODOTALobby::set_custom_map_name(const ::std::string& value) {
  set_has_custom_map_name();
  if (custom_map_name_ == &::google::protobuf::internal::kEmptyString) {
    custom_map_name_ = new ::std::string;
  }
  custom_map_name_->assign(value);
}
inline void CSODOTALobby::set_custom_map_name(const char* value) {
  set_has_custom_map_name();
  if (custom_map_name_ == &::google::protobuf::internal::kEmptyString) {
    custom_map_name_ = new ::std::string;
  }
  custom_map_name_->assign(value);
}
inline void CSODOTALobby::set_custom_map_name(const char* value, size_t size) {
  set_has_custom_map_name();
  if (custom_map_name_ == &::google::protobuf::internal::kEmptyString) {
    custom_map_name_ = new ::std::string;
  }
  custom_map_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSODOTALobby::mutable_custom_map_name() {
  set_has_custom_map_name();
  if (custom_map_name_ == &::google::protobuf::internal::kEmptyString) {
    custom_map_name_ = new ::std::string;
  }
  return custom_map_name_;
}
inline ::std::string* CSODOTALobby::release_custom_map_name() {
  clear_has_custom_map_name();
  if (custom_map_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = custom_map_name_;
    custom_map_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 custom_difficulty = 56;
inline bool CSODOTALobby::has_custom_difficulty() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void CSODOTALobby::set_has_custom_difficulty() {
  _has_bits_[1] |= 0x00002000u;
}
inline void CSODOTALobby::clear_has_custom_difficulty() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void CSODOTALobby::clear_custom_difficulty() {
  custom_difficulty_ = 0u;
  clear_has_custom_difficulty();
}
inline ::google::protobuf::uint32 CSODOTALobby::custom_difficulty() const {
  return custom_difficulty_;
}
inline void CSODOTALobby::set_custom_difficulty(::google::protobuf::uint32 value) {
  set_has_custom_difficulty();
  custom_difficulty_ = value;
}

// optional bool lan = 57;
inline bool CSODOTALobby::has_lan() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void CSODOTALobby::set_has_lan() {
  _has_bits_[1] |= 0x00004000u;
}
inline void CSODOTALobby::clear_has_lan() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void CSODOTALobby::clear_lan() {
  lan_ = false;
  clear_has_lan();
}
inline bool CSODOTALobby::lan() const {
  return lan_;
}
inline void CSODOTALobby::set_lan(bool value) {
  set_has_lan();
  lan_ = value;
}

// repeated .CLobbyBroadcastChannelInfo broadcast_channel_info = 58;
inline int CSODOTALobby::broadcast_channel_info_size() const {
  return broadcast_channel_info_.size();
}
inline void CSODOTALobby::clear_broadcast_channel_info() {
  broadcast_channel_info_.Clear();
}
inline const ::CLobbyBroadcastChannelInfo& CSODOTALobby::broadcast_channel_info(int index) const {
  return broadcast_channel_info_.Get(index);
}
inline ::CLobbyBroadcastChannelInfo* CSODOTALobby::mutable_broadcast_channel_info(int index) {
  return broadcast_channel_info_.Mutable(index);
}
inline ::CLobbyBroadcastChannelInfo* CSODOTALobby::add_broadcast_channel_info() {
  return broadcast_channel_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CLobbyBroadcastChannelInfo >&
CSODOTALobby::broadcast_channel_info() const {
  return broadcast_channel_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::CLobbyBroadcastChannelInfo >*
CSODOTALobby::mutable_broadcast_channel_info() {
  return &broadcast_channel_info_;
}

// optional uint32 first_leaver_accountid = 59;
inline bool CSODOTALobby::has_first_leaver_accountid() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void CSODOTALobby::set_has_first_leaver_accountid() {
  _has_bits_[1] |= 0x00010000u;
}
inline void CSODOTALobby::clear_has_first_leaver_accountid() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void CSODOTALobby::clear_first_leaver_accountid() {
  first_leaver_accountid_ = 0u;
  clear_has_first_leaver_accountid();
}
inline ::google::protobuf::uint32 CSODOTALobby::first_leaver_accountid() const {
  return first_leaver_accountid_;
}
inline void CSODOTALobby::set_first_leaver_accountid(::google::protobuf::uint32 value) {
  set_has_first_leaver_accountid();
  first_leaver_accountid_ = value;
}

// optional uint32 series_id = 60;
inline bool CSODOTALobby::has_series_id() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void CSODOTALobby::set_has_series_id() {
  _has_bits_[1] |= 0x00020000u;
}
inline void CSODOTALobby::clear_has_series_id() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void CSODOTALobby::clear_series_id() {
  series_id_ = 0u;
  clear_has_series_id();
}
inline ::google::protobuf::uint32 CSODOTALobby::series_id() const {
  return series_id_;
}
inline void CSODOTALobby::set_series_id(::google::protobuf::uint32 value) {
  set_has_series_id();
  series_id_ = value;
}

// optional bool low_priority = 61;
inline bool CSODOTALobby::has_low_priority() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void CSODOTALobby::set_has_low_priority() {
  _has_bits_[1] |= 0x00040000u;
}
inline void CSODOTALobby::clear_has_low_priority() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void CSODOTALobby::clear_low_priority() {
  low_priority_ = false;
  clear_has_low_priority();
}
inline bool CSODOTALobby::low_priority() const {
  return low_priority_;
}
inline void CSODOTALobby::set_low_priority(bool value) {
  set_has_low_priority();
  low_priority_ = value;
}

// repeated .CSODOTALobby.CExtraMsg extra_messages = 62;
inline int CSODOTALobby::extra_messages_size() const {
  return extra_messages_.size();
}
inline void CSODOTALobby::clear_extra_messages() {
  extra_messages_.Clear();
}
inline const ::CSODOTALobby_CExtraMsg& CSODOTALobby::extra_messages(int index) const {
  return extra_messages_.Get(index);
}
inline ::CSODOTALobby_CExtraMsg* CSODOTALobby::mutable_extra_messages(int index) {
  return extra_messages_.Mutable(index);
}
inline ::CSODOTALobby_CExtraMsg* CSODOTALobby::add_extra_messages() {
  return extra_messages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSODOTALobby_CExtraMsg >&
CSODOTALobby::extra_messages() const {
  return extra_messages_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSODOTALobby_CExtraMsg >*
CSODOTALobby::mutable_extra_messages() {
  return &extra_messages_;
}

// optional .CDOTASaveGame save_game = 63;
inline bool CSODOTALobby::has_save_game() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void CSODOTALobby::set_has_save_game() {
  _has_bits_[1] |= 0x00100000u;
}
inline void CSODOTALobby::clear_has_save_game() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void CSODOTALobby::clear_save_game() {
  if (save_game_ != NULL) save_game_->::CDOTASaveGame::Clear();
  clear_has_save_game();
}
inline const ::CDOTASaveGame& CSODOTALobby::save_game() const {
  return save_game_ != NULL ? *save_game_ : *default_instance_->save_game_;
}
inline ::CDOTASaveGame* CSODOTALobby::mutable_save_game() {
  set_has_save_game();
  if (save_game_ == NULL) save_game_ = new ::CDOTASaveGame;
  return save_game_;
}
inline ::CDOTASaveGame* CSODOTALobby::release_save_game() {
  clear_has_save_game();
  ::CDOTASaveGame* temp = save_game_;
  save_game_ = NULL;
  return temp;
}

// optional uint32 custom_game_id = 64;
inline bool CSODOTALobby::has_custom_game_id() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void CSODOTALobby::set_has_custom_game_id() {
  _has_bits_[1] |= 0x00200000u;
}
inline void CSODOTALobby::clear_has_custom_game_id() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void CSODOTALobby::clear_custom_game_id() {
  custom_game_id_ = 0u;
  clear_has_custom_game_id();
}
inline ::google::protobuf::uint32 CSODOTALobby::custom_game_id() const {
  return custom_game_id_;
}
inline void CSODOTALobby::set_custom_game_id(::google::protobuf::uint32 value) {
  set_has_custom_game_id();
  custom_game_id_ = value;
}

// optional bool first_blood_happened = 65;
inline bool CSODOTALobby::has_first_blood_happened() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void CSODOTALobby::set_has_first_blood_happened() {
  _has_bits_[1] |= 0x00400000u;
}
inline void CSODOTALobby::clear_has_first_blood_happened() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void CSODOTALobby::clear_first_blood_happened() {
  first_blood_happened_ = false;
  clear_has_first_blood_happened();
}
inline bool CSODOTALobby::first_blood_happened() const {
  return first_blood_happened_;
}
inline void CSODOTALobby::set_first_blood_happened(bool value) {
  set_has_first_blood_happened();
  first_blood_happened_ = value;
}

// optional bool discard_match_results = 66;
inline bool CSODOTALobby::has_discard_match_results() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void CSODOTALobby::set_has_discard_match_results() {
  _has_bits_[1] |= 0x00800000u;
}
inline void CSODOTALobby::clear_has_discard_match_results() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void CSODOTALobby::clear_discard_match_results() {
  discard_match_results_ = false;
  clear_has_discard_match_results();
}
inline bool CSODOTALobby::discard_match_results() const {
  return discard_match_results_;
}
inline void CSODOTALobby::set_discard_match_results(bool value) {
  set_has_discard_match_results();
  discard_match_results_ = value;
}

// optional bool mass_disconnect = 67;
inline bool CSODOTALobby::has_mass_disconnect() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void CSODOTALobby::set_has_mass_disconnect() {
  _has_bits_[1] |= 0x01000000u;
}
inline void CSODOTALobby::clear_has_mass_disconnect() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void CSODOTALobby::clear_mass_disconnect() {
  mass_disconnect_ = false;
  clear_has_mass_disconnect();
}
inline bool CSODOTALobby::mass_disconnect() const {
  return mass_disconnect_;
}
inline void CSODOTALobby::set_mass_disconnect(bool value) {
  set_has_mass_disconnect();
  mass_disconnect_ = value;
}

// -------------------------------------------------------------------

// CSODOTALobbyInternal

// optional string search_key = 1;
inline bool CSODOTALobbyInternal::has_search_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTALobbyInternal::set_has_search_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSODOTALobbyInternal::clear_has_search_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSODOTALobbyInternal::clear_search_key() {
  if (search_key_ != &::google::protobuf::internal::kEmptyString) {
    search_key_->clear();
  }
  clear_has_search_key();
}
inline const ::std::string& CSODOTALobbyInternal::search_key() const {
  return *search_key_;
}
inline void CSODOTALobbyInternal::set_search_key(const ::std::string& value) {
  set_has_search_key();
  if (search_key_ == &::google::protobuf::internal::kEmptyString) {
    search_key_ = new ::std::string;
  }
  search_key_->assign(value);
}
inline void CSODOTALobbyInternal::set_search_key(const char* value) {
  set_has_search_key();
  if (search_key_ == &::google::protobuf::internal::kEmptyString) {
    search_key_ = new ::std::string;
  }
  search_key_->assign(value);
}
inline void CSODOTALobbyInternal::set_search_key(const char* value, size_t size) {
  set_has_search_key();
  if (search_key_ == &::google::protobuf::internal::kEmptyString) {
    search_key_ = new ::std::string;
  }
  search_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSODOTALobbyInternal::mutable_search_key() {
  set_has_search_key();
  if (search_key_ == &::google::protobuf::internal::kEmptyString) {
    search_key_ = new ::std::string;
  }
  return search_key_;
}
inline ::std::string* CSODOTALobbyInternal::release_search_key() {
  clear_has_search_key();
  if (search_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = search_key_;
    search_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 average_rank = 3;
inline bool CSODOTALobbyInternal::has_average_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTALobbyInternal::set_has_average_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSODOTALobbyInternal::clear_has_average_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSODOTALobbyInternal::clear_average_rank() {
  average_rank_ = 0u;
  clear_has_average_rank();
}
inline ::google::protobuf::uint32 CSODOTALobbyInternal::average_rank() const {
  return average_rank_;
}
inline void CSODOTALobbyInternal::set_average_rank(::google::protobuf::uint32 value) {
  set_has_average_rank();
  average_rank_ = value;
}

// optional fixed32 replay_salt = 4;
inline bool CSODOTALobbyInternal::has_replay_salt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSODOTALobbyInternal::set_has_replay_salt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSODOTALobbyInternal::clear_has_replay_salt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSODOTALobbyInternal::clear_replay_salt() {
  replay_salt_ = 0u;
  clear_has_replay_salt();
}
inline ::google::protobuf::uint32 CSODOTALobbyInternal::replay_salt() const {
  return replay_salt_;
}
inline void CSODOTALobbyInternal::set_replay_salt(::google::protobuf::uint32 value) {
  set_has_replay_salt();
  replay_salt_ = value;
}

// optional bool disable_radiant_automatic_team_detection = 5;
inline bool CSODOTALobbyInternal::has_disable_radiant_automatic_team_detection() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSODOTALobbyInternal::set_has_disable_radiant_automatic_team_detection() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSODOTALobbyInternal::clear_has_disable_radiant_automatic_team_detection() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSODOTALobbyInternal::clear_disable_radiant_automatic_team_detection() {
  disable_radiant_automatic_team_detection_ = false;
  clear_has_disable_radiant_automatic_team_detection();
}
inline bool CSODOTALobbyInternal::disable_radiant_automatic_team_detection() const {
  return disable_radiant_automatic_team_detection_;
}
inline void CSODOTALobbyInternal::set_disable_radiant_automatic_team_detection(bool value) {
  set_has_disable_radiant_automatic_team_detection();
  disable_radiant_automatic_team_detection_ = value;
}

// optional bool disable_dire_automatic_team_detection = 6;
inline bool CSODOTALobbyInternal::has_disable_dire_automatic_team_detection() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSODOTALobbyInternal::set_has_disable_dire_automatic_team_detection() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSODOTALobbyInternal::clear_has_disable_dire_automatic_team_detection() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSODOTALobbyInternal::clear_disable_dire_automatic_team_detection() {
  disable_dire_automatic_team_detection_ = false;
  clear_has_disable_dire_automatic_team_detection();
}
inline bool CSODOTALobbyInternal::disable_dire_automatic_team_detection() const {
  return disable_dire_automatic_team_detection_;
}
inline void CSODOTALobbyInternal::set_disable_dire_automatic_team_detection(bool value) {
  set_has_disable_dire_automatic_team_detection();
  disable_dire_automatic_team_detection_ = value;
}

// optional bool submitted_match_history = 8;
inline bool CSODOTALobbyInternal::has_submitted_match_history() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSODOTALobbyInternal::set_has_submitted_match_history() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSODOTALobbyInternal::clear_has_submitted_match_history() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSODOTALobbyInternal::clear_submitted_match_history() {
  submitted_match_history_ = false;
  clear_has_submitted_match_history();
}
inline bool CSODOTALobbyInternal::submitted_match_history() const {
  return submitted_match_history_;
}
inline void CSODOTALobbyInternal::set_submitted_match_history(bool value) {
  set_has_submitted_match_history();
  submitted_match_history_ = value;
}

// repeated .CDOTALobbyMemberPrivate members = 9;
inline int CSODOTALobbyInternal::members_size() const {
  return members_.size();
}
inline void CSODOTALobbyInternal::clear_members() {
  members_.Clear();
}
inline const ::CDOTALobbyMemberPrivate& CSODOTALobbyInternal::members(int index) const {
  return members_.Get(index);
}
inline ::CDOTALobbyMemberPrivate* CSODOTALobbyInternal::mutable_members(int index) {
  return members_.Mutable(index);
}
inline ::CDOTALobbyMemberPrivate* CSODOTALobbyInternal::add_members() {
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMemberPrivate >&
CSODOTALobbyInternal::members() const {
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMemberPrivate >*
CSODOTALobbyInternal::mutable_members() {
  return &members_;
}

// repeated .CDOTALobbyMemberPrivate left_members = 10;
inline int CSODOTALobbyInternal::left_members_size() const {
  return left_members_.size();
}
inline void CSODOTALobbyInternal::clear_left_members() {
  left_members_.Clear();
}
inline const ::CDOTALobbyMemberPrivate& CSODOTALobbyInternal::left_members(int index) const {
  return left_members_.Get(index);
}
inline ::CDOTALobbyMemberPrivate* CSODOTALobbyInternal::mutable_left_members(int index) {
  return left_members_.Mutable(index);
}
inline ::CDOTALobbyMemberPrivate* CSODOTALobbyInternal::add_left_members() {
  return left_members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMemberPrivate >&
CSODOTALobbyInternal::left_members() const {
  return left_members_;
}
inline ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMemberPrivate >*
CSODOTALobbyInternal::mutable_left_members() {
  return &left_members_;
}

// optional bytes save_game_data = 11;
inline bool CSODOTALobbyInternal::has_save_game_data() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CSODOTALobbyInternal::set_has_save_game_data() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CSODOTALobbyInternal::clear_has_save_game_data() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CSODOTALobbyInternal::clear_save_game_data() {
  if (save_game_data_ != &::google::protobuf::internal::kEmptyString) {
    save_game_data_->clear();
  }
  clear_has_save_game_data();
}
inline const ::std::string& CSODOTALobbyInternal::save_game_data() const {
  return *save_game_data_;
}
inline void CSODOTALobbyInternal::set_save_game_data(const ::std::string& value) {
  set_has_save_game_data();
  if (save_game_data_ == &::google::protobuf::internal::kEmptyString) {
    save_game_data_ = new ::std::string;
  }
  save_game_data_->assign(value);
}
inline void CSODOTALobbyInternal::set_save_game_data(const char* value) {
  set_has_save_game_data();
  if (save_game_data_ == &::google::protobuf::internal::kEmptyString) {
    save_game_data_ = new ::std::string;
  }
  save_game_data_->assign(value);
}
inline void CSODOTALobbyInternal::set_save_game_data(const void* value, size_t size) {
  set_has_save_game_data();
  if (save_game_data_ == &::google::protobuf::internal::kEmptyString) {
    save_game_data_ = new ::std::string;
  }
  save_game_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSODOTALobbyInternal::mutable_save_game_data() {
  set_has_save_game_data();
  if (save_game_data_ == &::google::protobuf::internal::kEmptyString) {
    save_game_data_ = new ::std::string;
  }
  return save_game_data_;
}
inline ::std::string* CSODOTALobbyInternal::release_save_game_data() {
  clear_has_save_game_data();
  if (save_game_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = save_game_data_;
    save_game_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 server_run_time = 12;
inline bool CSODOTALobbyInternal::has_server_run_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CSODOTALobbyInternal::set_has_server_run_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CSODOTALobbyInternal::clear_has_server_run_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CSODOTALobbyInternal::clear_server_run_time() {
  server_run_time_ = 0u;
  clear_has_server_run_time();
}
inline ::google::protobuf::uint32 CSODOTALobbyInternal::server_run_time() const {
  return server_run_time_;
}
inline void CSODOTALobbyInternal::set_server_run_time(::google::protobuf::uint32 value) {
  set_has_server_run_time();
  server_run_time_ = value;
}

// optional uint32 last_state_change_time = 13;
inline bool CSODOTALobbyInternal::has_last_state_change_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CSODOTALobbyInternal::set_has_last_state_change_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CSODOTALobbyInternal::clear_has_last_state_change_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CSODOTALobbyInternal::clear_last_state_change_time() {
  last_state_change_time_ = 0u;
  clear_has_last_state_change_time();
}
inline ::google::protobuf::uint32 CSODOTALobbyInternal::last_state_change_time() const {
  return last_state_change_time_;
}
inline void CSODOTALobbyInternal::set_last_state_change_time(::google::protobuf::uint32 value) {
  set_has_last_state_change_time();
  last_state_change_time_ = value;
}

// -------------------------------------------------------------------

// CMsgDOTAGenericResult

// optional uint32 eresult = 1 [default = 2];
inline bool CMsgDOTAGenericResult::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAGenericResult::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAGenericResult::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAGenericResult::clear_eresult() {
  eresult_ = 2u;
  clear_has_eresult();
}
inline ::google::protobuf::uint32 CMsgDOTAGenericResult::eresult() const {
  return eresult_;
}
inline void CMsgDOTAGenericResult::set_eresult(::google::protobuf::uint32 value) {
  set_has_eresult();
  eresult_ = value;
}

// -------------------------------------------------------------------

// CMsgDOTABroadcastNotification

// optional string message = 1;
inline bool CMsgDOTABroadcastNotification::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTABroadcastNotification::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTABroadcastNotification::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTABroadcastNotification::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& CMsgDOTABroadcastNotification::message() const {
  return *message_;
}
inline void CMsgDOTABroadcastNotification::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void CMsgDOTABroadcastNotification::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void CMsgDOTABroadcastNotification::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgDOTABroadcastNotification::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* CMsgDOTABroadcastNotification::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CMsgDOTAPCBangTimedReward

// optional string persona = 1;
inline bool CMsgDOTAPCBangTimedReward::has_persona() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAPCBangTimedReward::set_has_persona() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAPCBangTimedReward::clear_has_persona() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAPCBangTimedReward::clear_persona() {
  if (persona_ != &::google::protobuf::internal::kEmptyString) {
    persona_->clear();
  }
  clear_has_persona();
}
inline const ::std::string& CMsgDOTAPCBangTimedReward::persona() const {
  return *persona_;
}
inline void CMsgDOTAPCBangTimedReward::set_persona(const ::std::string& value) {
  set_has_persona();
  if (persona_ == &::google::protobuf::internal::kEmptyString) {
    persona_ = new ::std::string;
  }
  persona_->assign(value);
}
inline void CMsgDOTAPCBangTimedReward::set_persona(const char* value) {
  set_has_persona();
  if (persona_ == &::google::protobuf::internal::kEmptyString) {
    persona_ = new ::std::string;
  }
  persona_->assign(value);
}
inline void CMsgDOTAPCBangTimedReward::set_persona(const char* value, size_t size) {
  set_has_persona();
  if (persona_ == &::google::protobuf::internal::kEmptyString) {
    persona_ = new ::std::string;
  }
  persona_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgDOTAPCBangTimedReward::mutable_persona() {
  set_has_persona();
  if (persona_ == &::google::protobuf::internal::kEmptyString) {
    persona_ = new ::std::string;
  }
  return persona_;
}
inline ::std::string* CMsgDOTAPCBangTimedReward::release_persona() {
  clear_has_persona();
  if (persona_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = persona_;
    persona_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 itemdef = 2;
inline bool CMsgDOTAPCBangTimedReward::has_itemdef() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAPCBangTimedReward::set_has_itemdef() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAPCBangTimedReward::clear_has_itemdef() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAPCBangTimedReward::clear_itemdef() {
  itemdef_ = 0u;
  clear_has_itemdef();
}
inline ::google::protobuf::uint32 CMsgDOTAPCBangTimedReward::itemdef() const {
  return itemdef_;
}
inline void CMsgDOTAPCBangTimedReward::set_itemdef(::google::protobuf::uint32 value) {
  set_has_itemdef();
  itemdef_ = value;
}

// optional string pcbangname = 3;
inline bool CMsgDOTAPCBangTimedReward::has_pcbangname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAPCBangTimedReward::set_has_pcbangname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAPCBangTimedReward::clear_has_pcbangname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAPCBangTimedReward::clear_pcbangname() {
  if (pcbangname_ != &::google::protobuf::internal::kEmptyString) {
    pcbangname_->clear();
  }
  clear_has_pcbangname();
}
inline const ::std::string& CMsgDOTAPCBangTimedReward::pcbangname() const {
  return *pcbangname_;
}
inline void CMsgDOTAPCBangTimedReward::set_pcbangname(const ::std::string& value) {
  set_has_pcbangname();
  if (pcbangname_ == &::google::protobuf::internal::kEmptyString) {
    pcbangname_ = new ::std::string;
  }
  pcbangname_->assign(value);
}
inline void CMsgDOTAPCBangTimedReward::set_pcbangname(const char* value) {
  set_has_pcbangname();
  if (pcbangname_ == &::google::protobuf::internal::kEmptyString) {
    pcbangname_ = new ::std::string;
  }
  pcbangname_->assign(value);
}
inline void CMsgDOTAPCBangTimedReward::set_pcbangname(const char* value, size_t size) {
  set_has_pcbangname();
  if (pcbangname_ == &::google::protobuf::internal::kEmptyString) {
    pcbangname_ = new ::std::string;
  }
  pcbangname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgDOTAPCBangTimedReward::mutable_pcbangname() {
  set_has_pcbangname();
  if (pcbangname_ == &::google::protobuf::internal::kEmptyString) {
    pcbangname_ = new ::std::string;
  }
  return pcbangname_;
}
inline ::std::string* CMsgDOTAPCBangTimedReward::release_pcbangname() {
  clear_has_pcbangname();
  if (pcbangname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pcbangname_;
    pcbangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CAttribute_String

// optional string value = 1;
inline bool CAttribute_String::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CAttribute_String::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CAttribute_String::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CAttribute_String::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& CAttribute_String::value() const {
  return *value_;
}
inline void CAttribute_String::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CAttribute_String::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CAttribute_String::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAttribute_String::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* CAttribute_String::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CAttribute_ItemDynamicRecipeComponent

// optional uint32 item_def = 1;
inline bool CAttribute_ItemDynamicRecipeComponent::has_item_def() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CAttribute_ItemDynamicRecipeComponent::set_has_item_def() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CAttribute_ItemDynamicRecipeComponent::clear_has_item_def() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CAttribute_ItemDynamicRecipeComponent::clear_item_def() {
  item_def_ = 0u;
  clear_has_item_def();
}
inline ::google::protobuf::uint32 CAttribute_ItemDynamicRecipeComponent::item_def() const {
  return item_def_;
}
inline void CAttribute_ItemDynamicRecipeComponent::set_item_def(::google::protobuf::uint32 value) {
  set_has_item_def();
  item_def_ = value;
}

// optional uint32 item_quality = 2;
inline bool CAttribute_ItemDynamicRecipeComponent::has_item_quality() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CAttribute_ItemDynamicRecipeComponent::set_has_item_quality() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CAttribute_ItemDynamicRecipeComponent::clear_has_item_quality() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CAttribute_ItemDynamicRecipeComponent::clear_item_quality() {
  item_quality_ = 0u;
  clear_has_item_quality();
}
inline ::google::protobuf::uint32 CAttribute_ItemDynamicRecipeComponent::item_quality() const {
  return item_quality_;
}
inline void CAttribute_ItemDynamicRecipeComponent::set_item_quality(::google::protobuf::uint32 value) {
  set_has_item_quality();
  item_quality_ = value;
}

// optional uint32 item_flags = 3;
inline bool CAttribute_ItemDynamicRecipeComponent::has_item_flags() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CAttribute_ItemDynamicRecipeComponent::set_has_item_flags() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CAttribute_ItemDynamicRecipeComponent::clear_has_item_flags() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CAttribute_ItemDynamicRecipeComponent::clear_item_flags() {
  item_flags_ = 0u;
  clear_has_item_flags();
}
inline ::google::protobuf::uint32 CAttribute_ItemDynamicRecipeComponent::item_flags() const {
  return item_flags_;
}
inline void CAttribute_ItemDynamicRecipeComponent::set_item_flags(::google::protobuf::uint32 value) {
  set_has_item_flags();
  item_flags_ = value;
}

// optional string attributes_string = 4;
inline bool CAttribute_ItemDynamicRecipeComponent::has_attributes_string() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CAttribute_ItemDynamicRecipeComponent::set_has_attributes_string() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CAttribute_ItemDynamicRecipeComponent::clear_has_attributes_string() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CAttribute_ItemDynamicRecipeComponent::clear_attributes_string() {
  if (attributes_string_ != &::google::protobuf::internal::kEmptyString) {
    attributes_string_->clear();
  }
  clear_has_attributes_string();
}
inline const ::std::string& CAttribute_ItemDynamicRecipeComponent::attributes_string() const {
  return *attributes_string_;
}
inline void CAttribute_ItemDynamicRecipeComponent::set_attributes_string(const ::std::string& value) {
  set_has_attributes_string();
  if (attributes_string_ == &::google::protobuf::internal::kEmptyString) {
    attributes_string_ = new ::std::string;
  }
  attributes_string_->assign(value);
}
inline void CAttribute_ItemDynamicRecipeComponent::set_attributes_string(const char* value) {
  set_has_attributes_string();
  if (attributes_string_ == &::google::protobuf::internal::kEmptyString) {
    attributes_string_ = new ::std::string;
  }
  attributes_string_->assign(value);
}
inline void CAttribute_ItemDynamicRecipeComponent::set_attributes_string(const char* value, size_t size) {
  set_has_attributes_string();
  if (attributes_string_ == &::google::protobuf::internal::kEmptyString) {
    attributes_string_ = new ::std::string;
  }
  attributes_string_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAttribute_ItemDynamicRecipeComponent::mutable_attributes_string() {
  set_has_attributes_string();
  if (attributes_string_ == &::google::protobuf::internal::kEmptyString) {
    attributes_string_ = new ::std::string;
  }
  return attributes_string_;
}
inline ::std::string* CAttribute_ItemDynamicRecipeComponent::release_attributes_string() {
  clear_has_attributes_string();
  if (attributes_string_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = attributes_string_;
    attributes_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 item_count = 5;
inline bool CAttribute_ItemDynamicRecipeComponent::has_item_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CAttribute_ItemDynamicRecipeComponent::set_has_item_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CAttribute_ItemDynamicRecipeComponent::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CAttribute_ItemDynamicRecipeComponent::clear_item_count() {
  item_count_ = 0u;
  clear_has_item_count();
}
inline ::google::protobuf::uint32 CAttribute_ItemDynamicRecipeComponent::item_count() const {
  return item_count_;
}
inline void CAttribute_ItemDynamicRecipeComponent::set_item_count(::google::protobuf::uint32 value) {
  set_has_item_count();
  item_count_ = value;
}

// optional uint32 items_fulfilled = 6;
inline bool CAttribute_ItemDynamicRecipeComponent::has_items_fulfilled() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CAttribute_ItemDynamicRecipeComponent::set_has_items_fulfilled() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CAttribute_ItemDynamicRecipeComponent::clear_has_items_fulfilled() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CAttribute_ItemDynamicRecipeComponent::clear_items_fulfilled() {
  items_fulfilled_ = 0u;
  clear_has_items_fulfilled();
}
inline ::google::protobuf::uint32 CAttribute_ItemDynamicRecipeComponent::items_fulfilled() const {
  return items_fulfilled_;
}
inline void CAttribute_ItemDynamicRecipeComponent::set_items_fulfilled(::google::protobuf::uint32 value) {
  set_has_items_fulfilled();
  items_fulfilled_ = value;
}

// optional uint32 item_rarity = 7;
inline bool CAttribute_ItemDynamicRecipeComponent::has_item_rarity() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CAttribute_ItemDynamicRecipeComponent::set_has_item_rarity() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CAttribute_ItemDynamicRecipeComponent::clear_has_item_rarity() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CAttribute_ItemDynamicRecipeComponent::clear_item_rarity() {
  item_rarity_ = 0u;
  clear_has_item_rarity();
}
inline ::google::protobuf::uint32 CAttribute_ItemDynamicRecipeComponent::item_rarity() const {
  return item_rarity_;
}
inline void CAttribute_ItemDynamicRecipeComponent::set_item_rarity(::google::protobuf::uint32 value) {
  set_has_item_rarity();
  item_rarity_ = value;
}

// optional string lootlist = 8;
inline bool CAttribute_ItemDynamicRecipeComponent::has_lootlist() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CAttribute_ItemDynamicRecipeComponent::set_has_lootlist() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CAttribute_ItemDynamicRecipeComponent::clear_has_lootlist() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CAttribute_ItemDynamicRecipeComponent::clear_lootlist() {
  if (lootlist_ != &::google::protobuf::internal::kEmptyString) {
    lootlist_->clear();
  }
  clear_has_lootlist();
}
inline const ::std::string& CAttribute_ItemDynamicRecipeComponent::lootlist() const {
  return *lootlist_;
}
inline void CAttribute_ItemDynamicRecipeComponent::set_lootlist(const ::std::string& value) {
  set_has_lootlist();
  if (lootlist_ == &::google::protobuf::internal::kEmptyString) {
    lootlist_ = new ::std::string;
  }
  lootlist_->assign(value);
}
inline void CAttribute_ItemDynamicRecipeComponent::set_lootlist(const char* value) {
  set_has_lootlist();
  if (lootlist_ == &::google::protobuf::internal::kEmptyString) {
    lootlist_ = new ::std::string;
  }
  lootlist_->assign(value);
}
inline void CAttribute_ItemDynamicRecipeComponent::set_lootlist(const char* value, size_t size) {
  set_has_lootlist();
  if (lootlist_ == &::google::protobuf::internal::kEmptyString) {
    lootlist_ = new ::std::string;
  }
  lootlist_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAttribute_ItemDynamicRecipeComponent::mutable_lootlist() {
  set_has_lootlist();
  if (lootlist_ == &::google::protobuf::internal::kEmptyString) {
    lootlist_ = new ::std::string;
  }
  return lootlist_;
}
inline ::std::string* CAttribute_ItemDynamicRecipeComponent::release_lootlist() {
  clear_has_lootlist();
  if (lootlist_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lootlist_;
    lootlist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint64 fulfilled_item_id = 9;
inline bool CAttribute_ItemDynamicRecipeComponent::has_fulfilled_item_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CAttribute_ItemDynamicRecipeComponent::set_has_fulfilled_item_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CAttribute_ItemDynamicRecipeComponent::clear_has_fulfilled_item_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CAttribute_ItemDynamicRecipeComponent::clear_fulfilled_item_id() {
  fulfilled_item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_fulfilled_item_id();
}
inline ::google::protobuf::uint64 CAttribute_ItemDynamicRecipeComponent::fulfilled_item_id() const {
  return fulfilled_item_id_;
}
inline void CAttribute_ItemDynamicRecipeComponent::set_fulfilled_item_id(::google::protobuf::uint64 value) {
  set_has_fulfilled_item_id();
  fulfilled_item_id_ = value;
}

// -------------------------------------------------------------------

// CProtoItemSocket

// optional uint64 item_id = 1;
inline bool CProtoItemSocket::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProtoItemSocket::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProtoItemSocket::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProtoItemSocket::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_item_id();
}
inline ::google::protobuf::uint64 CProtoItemSocket::item_id() const {
  return item_id_;
}
inline void CProtoItemSocket::set_item_id(::google::protobuf::uint64 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional uint32 attr_def_index = 2;
inline bool CProtoItemSocket::has_attr_def_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CProtoItemSocket::set_has_attr_def_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CProtoItemSocket::clear_has_attr_def_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CProtoItemSocket::clear_attr_def_index() {
  attr_def_index_ = 0u;
  clear_has_attr_def_index();
}
inline ::google::protobuf::uint32 CProtoItemSocket::attr_def_index() const {
  return attr_def_index_;
}
inline void CProtoItemSocket::set_attr_def_index(::google::protobuf::uint32 value) {
  set_has_attr_def_index();
  attr_def_index_ = value;
}

// optional uint32 required_type = 3;
inline bool CProtoItemSocket::has_required_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CProtoItemSocket::set_has_required_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CProtoItemSocket::clear_has_required_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CProtoItemSocket::clear_required_type() {
  required_type_ = 0u;
  clear_has_required_type();
}
inline ::google::protobuf::uint32 CProtoItemSocket::required_type() const {
  return required_type_;
}
inline void CProtoItemSocket::set_required_type(::google::protobuf::uint32 value) {
  set_has_required_type();
  required_type_ = value;
}

// optional string required_hero = 4;
inline bool CProtoItemSocket::has_required_hero() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CProtoItemSocket::set_has_required_hero() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CProtoItemSocket::clear_has_required_hero() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CProtoItemSocket::clear_required_hero() {
  if (required_hero_ != &::google::protobuf::internal::kEmptyString) {
    required_hero_->clear();
  }
  clear_has_required_hero();
}
inline const ::std::string& CProtoItemSocket::required_hero() const {
  return *required_hero_;
}
inline void CProtoItemSocket::set_required_hero(const ::std::string& value) {
  set_has_required_hero();
  if (required_hero_ == &::google::protobuf::internal::kEmptyString) {
    required_hero_ = new ::std::string;
  }
  required_hero_->assign(value);
}
inline void CProtoItemSocket::set_required_hero(const char* value) {
  set_has_required_hero();
  if (required_hero_ == &::google::protobuf::internal::kEmptyString) {
    required_hero_ = new ::std::string;
  }
  required_hero_->assign(value);
}
inline void CProtoItemSocket::set_required_hero(const char* value, size_t size) {
  set_has_required_hero();
  if (required_hero_ == &::google::protobuf::internal::kEmptyString) {
    required_hero_ = new ::std::string;
  }
  required_hero_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CProtoItemSocket::mutable_required_hero() {
  set_has_required_hero();
  if (required_hero_ == &::google::protobuf::internal::kEmptyString) {
    required_hero_ = new ::std::string;
  }
  return required_hero_;
}
inline ::std::string* CProtoItemSocket::release_required_hero() {
  clear_has_required_hero();
  if (required_hero_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = required_hero_;
    required_hero_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 gem_def_index = 5;
inline bool CProtoItemSocket::has_gem_def_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CProtoItemSocket::set_has_gem_def_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CProtoItemSocket::clear_has_gem_def_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CProtoItemSocket::clear_gem_def_index() {
  gem_def_index_ = 0u;
  clear_has_gem_def_index();
}
inline ::google::protobuf::uint32 CProtoItemSocket::gem_def_index() const {
  return gem_def_index_;
}
inline void CProtoItemSocket::set_gem_def_index(::google::protobuf::uint32 value) {
  set_has_gem_def_index();
  gem_def_index_ = value;
}

// optional bool not_tradable = 6;
inline bool CProtoItemSocket::has_not_tradable() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CProtoItemSocket::set_has_not_tradable() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CProtoItemSocket::clear_has_not_tradable() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CProtoItemSocket::clear_not_tradable() {
  not_tradable_ = false;
  clear_has_not_tradable();
}
inline bool CProtoItemSocket::not_tradable() const {
  return not_tradable_;
}
inline void CProtoItemSocket::set_not_tradable(bool value) {
  set_has_not_tradable();
  not_tradable_ = value;
}

// optional string required_item_slot = 7;
inline bool CProtoItemSocket::has_required_item_slot() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CProtoItemSocket::set_has_required_item_slot() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CProtoItemSocket::clear_has_required_item_slot() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CProtoItemSocket::clear_required_item_slot() {
  if (required_item_slot_ != &::google::protobuf::internal::kEmptyString) {
    required_item_slot_->clear();
  }
  clear_has_required_item_slot();
}
inline const ::std::string& CProtoItemSocket::required_item_slot() const {
  return *required_item_slot_;
}
inline void CProtoItemSocket::set_required_item_slot(const ::std::string& value) {
  set_has_required_item_slot();
  if (required_item_slot_ == &::google::protobuf::internal::kEmptyString) {
    required_item_slot_ = new ::std::string;
  }
  required_item_slot_->assign(value);
}
inline void CProtoItemSocket::set_required_item_slot(const char* value) {
  set_has_required_item_slot();
  if (required_item_slot_ == &::google::protobuf::internal::kEmptyString) {
    required_item_slot_ = new ::std::string;
  }
  required_item_slot_->assign(value);
}
inline void CProtoItemSocket::set_required_item_slot(const char* value, size_t size) {
  set_has_required_item_slot();
  if (required_item_slot_ == &::google::protobuf::internal::kEmptyString) {
    required_item_slot_ = new ::std::string;
  }
  required_item_slot_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CProtoItemSocket::mutable_required_item_slot() {
  set_has_required_item_slot();
  if (required_item_slot_ == &::google::protobuf::internal::kEmptyString) {
    required_item_slot_ = new ::std::string;
  }
  return required_item_slot_;
}
inline ::std::string* CProtoItemSocket::release_required_item_slot() {
  clear_has_required_item_slot();
  if (required_item_slot_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = required_item_slot_;
    required_item_slot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CProtoItemSocket_Empty

// optional .CProtoItemSocket socket = 1;
inline bool CProtoItemSocket_Empty::has_socket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProtoItemSocket_Empty::set_has_socket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProtoItemSocket_Empty::clear_has_socket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProtoItemSocket_Empty::clear_socket() {
  if (socket_ != NULL) socket_->::CProtoItemSocket::Clear();
  clear_has_socket();
}
inline const ::CProtoItemSocket& CProtoItemSocket_Empty::socket() const {
  return socket_ != NULL ? *socket_ : *default_instance_->socket_;
}
inline ::CProtoItemSocket* CProtoItemSocket_Empty::mutable_socket() {
  set_has_socket();
  if (socket_ == NULL) socket_ = new ::CProtoItemSocket;
  return socket_;
}
inline ::CProtoItemSocket* CProtoItemSocket_Empty::release_socket() {
  clear_has_socket();
  ::CProtoItemSocket* temp = socket_;
  socket_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// CProtoItemSocket_Effect

// optional .CProtoItemSocket socket = 1;
inline bool CProtoItemSocket_Effect::has_socket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProtoItemSocket_Effect::set_has_socket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProtoItemSocket_Effect::clear_has_socket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProtoItemSocket_Effect::clear_socket() {
  if (socket_ != NULL) socket_->::CProtoItemSocket::Clear();
  clear_has_socket();
}
inline const ::CProtoItemSocket& CProtoItemSocket_Effect::socket() const {
  return socket_ != NULL ? *socket_ : *default_instance_->socket_;
}
inline ::CProtoItemSocket* CProtoItemSocket_Effect::mutable_socket() {
  set_has_socket();
  if (socket_ == NULL) socket_ = new ::CProtoItemSocket;
  return socket_;
}
inline ::CProtoItemSocket* CProtoItemSocket_Effect::release_socket() {
  clear_has_socket();
  ::CProtoItemSocket* temp = socket_;
  socket_ = NULL;
  return temp;
}

// optional uint32 effect = 2;
inline bool CProtoItemSocket_Effect::has_effect() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CProtoItemSocket_Effect::set_has_effect() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CProtoItemSocket_Effect::clear_has_effect() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CProtoItemSocket_Effect::clear_effect() {
  effect_ = 0u;
  clear_has_effect();
}
inline ::google::protobuf::uint32 CProtoItemSocket_Effect::effect() const {
  return effect_;
}
inline void CProtoItemSocket_Effect::set_effect(::google::protobuf::uint32 value) {
  set_has_effect();
  effect_ = value;
}

// -------------------------------------------------------------------

// CProtoItemSocket_Color

// optional .CProtoItemSocket socket = 1;
inline bool CProtoItemSocket_Color::has_socket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProtoItemSocket_Color::set_has_socket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProtoItemSocket_Color::clear_has_socket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProtoItemSocket_Color::clear_socket() {
  if (socket_ != NULL) socket_->::CProtoItemSocket::Clear();
  clear_has_socket();
}
inline const ::CProtoItemSocket& CProtoItemSocket_Color::socket() const {
  return socket_ != NULL ? *socket_ : *default_instance_->socket_;
}
inline ::CProtoItemSocket* CProtoItemSocket_Color::mutable_socket() {
  set_has_socket();
  if (socket_ == NULL) socket_ = new ::CProtoItemSocket;
  return socket_;
}
inline ::CProtoItemSocket* CProtoItemSocket_Color::release_socket() {
  clear_has_socket();
  ::CProtoItemSocket* temp = socket_;
  socket_ = NULL;
  return temp;
}

// optional uint32 red = 2;
inline bool CProtoItemSocket_Color::has_red() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CProtoItemSocket_Color::set_has_red() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CProtoItemSocket_Color::clear_has_red() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CProtoItemSocket_Color::clear_red() {
  red_ = 0u;
  clear_has_red();
}
inline ::google::protobuf::uint32 CProtoItemSocket_Color::red() const {
  return red_;
}
inline void CProtoItemSocket_Color::set_red(::google::protobuf::uint32 value) {
  set_has_red();
  red_ = value;
}

// optional uint32 green = 3;
inline bool CProtoItemSocket_Color::has_green() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CProtoItemSocket_Color::set_has_green() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CProtoItemSocket_Color::clear_has_green() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CProtoItemSocket_Color::clear_green() {
  green_ = 0u;
  clear_has_green();
}
inline ::google::protobuf::uint32 CProtoItemSocket_Color::green() const {
  return green_;
}
inline void CProtoItemSocket_Color::set_green(::google::protobuf::uint32 value) {
  set_has_green();
  green_ = value;
}

// optional uint32 blue = 4;
inline bool CProtoItemSocket_Color::has_blue() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CProtoItemSocket_Color::set_has_blue() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CProtoItemSocket_Color::clear_has_blue() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CProtoItemSocket_Color::clear_blue() {
  blue_ = 0u;
  clear_has_blue();
}
inline ::google::protobuf::uint32 CProtoItemSocket_Color::blue() const {
  return blue_;
}
inline void CProtoItemSocket_Color::set_blue(::google::protobuf::uint32 value) {
  set_has_blue();
  blue_ = value;
}

// -------------------------------------------------------------------

// CProtoItemSocket_Strange

// optional .CProtoItemSocket socket = 1;
inline bool CProtoItemSocket_Strange::has_socket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProtoItemSocket_Strange::set_has_socket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProtoItemSocket_Strange::clear_has_socket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProtoItemSocket_Strange::clear_socket() {
  if (socket_ != NULL) socket_->::CProtoItemSocket::Clear();
  clear_has_socket();
}
inline const ::CProtoItemSocket& CProtoItemSocket_Strange::socket() const {
  return socket_ != NULL ? *socket_ : *default_instance_->socket_;
}
inline ::CProtoItemSocket* CProtoItemSocket_Strange::mutable_socket() {
  set_has_socket();
  if (socket_ == NULL) socket_ = new ::CProtoItemSocket;
  return socket_;
}
inline ::CProtoItemSocket* CProtoItemSocket_Strange::release_socket() {
  clear_has_socket();
  ::CProtoItemSocket* temp = socket_;
  socket_ = NULL;
  return temp;
}

// optional uint32 strange_type = 2;
inline bool CProtoItemSocket_Strange::has_strange_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CProtoItemSocket_Strange::set_has_strange_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CProtoItemSocket_Strange::clear_has_strange_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CProtoItemSocket_Strange::clear_strange_type() {
  strange_type_ = 0u;
  clear_has_strange_type();
}
inline ::google::protobuf::uint32 CProtoItemSocket_Strange::strange_type() const {
  return strange_type_;
}
inline void CProtoItemSocket_Strange::set_strange_type(::google::protobuf::uint32 value) {
  set_has_strange_type();
  strange_type_ = value;
}

// optional uint32 strange_value = 3;
inline bool CProtoItemSocket_Strange::has_strange_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CProtoItemSocket_Strange::set_has_strange_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CProtoItemSocket_Strange::clear_has_strange_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CProtoItemSocket_Strange::clear_strange_value() {
  strange_value_ = 0u;
  clear_has_strange_value();
}
inline ::google::protobuf::uint32 CProtoItemSocket_Strange::strange_value() const {
  return strange_value_;
}
inline void CProtoItemSocket_Strange::set_strange_value(::google::protobuf::uint32 value) {
  set_has_strange_value();
  strange_value_ = value;
}

// -------------------------------------------------------------------

// CProtoItemSocket_Spectator

// optional .CProtoItemSocket socket = 1;
inline bool CProtoItemSocket_Spectator::has_socket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProtoItemSocket_Spectator::set_has_socket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProtoItemSocket_Spectator::clear_has_socket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProtoItemSocket_Spectator::clear_socket() {
  if (socket_ != NULL) socket_->::CProtoItemSocket::Clear();
  clear_has_socket();
}
inline const ::CProtoItemSocket& CProtoItemSocket_Spectator::socket() const {
  return socket_ != NULL ? *socket_ : *default_instance_->socket_;
}
inline ::CProtoItemSocket* CProtoItemSocket_Spectator::mutable_socket() {
  set_has_socket();
  if (socket_ == NULL) socket_ = new ::CProtoItemSocket;
  return socket_;
}
inline ::CProtoItemSocket* CProtoItemSocket_Spectator::release_socket() {
  clear_has_socket();
  ::CProtoItemSocket* temp = socket_;
  socket_ = NULL;
  return temp;
}

// optional uint32 games_viewed = 2;
inline bool CProtoItemSocket_Spectator::has_games_viewed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CProtoItemSocket_Spectator::set_has_games_viewed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CProtoItemSocket_Spectator::clear_has_games_viewed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CProtoItemSocket_Spectator::clear_games_viewed() {
  games_viewed_ = 0u;
  clear_has_games_viewed();
}
inline ::google::protobuf::uint32 CProtoItemSocket_Spectator::games_viewed() const {
  return games_viewed_;
}
inline void CProtoItemSocket_Spectator::set_games_viewed(::google::protobuf::uint32 value) {
  set_has_games_viewed();
  games_viewed_ = value;
}

// optional uint32 corporation_id = 3;
inline bool CProtoItemSocket_Spectator::has_corporation_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CProtoItemSocket_Spectator::set_has_corporation_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CProtoItemSocket_Spectator::clear_has_corporation_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CProtoItemSocket_Spectator::clear_corporation_id() {
  corporation_id_ = 0u;
  clear_has_corporation_id();
}
inline ::google::protobuf::uint32 CProtoItemSocket_Spectator::corporation_id() const {
  return corporation_id_;
}
inline void CProtoItemSocket_Spectator::set_corporation_id(::google::protobuf::uint32 value) {
  set_has_corporation_id();
  corporation_id_ = value;
}

// optional uint32 league_id = 4;
inline bool CProtoItemSocket_Spectator::has_league_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CProtoItemSocket_Spectator::set_has_league_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CProtoItemSocket_Spectator::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CProtoItemSocket_Spectator::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
inline ::google::protobuf::uint32 CProtoItemSocket_Spectator::league_id() const {
  return league_id_;
}
inline void CProtoItemSocket_Spectator::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
}

// optional uint32 team_id = 5;
inline bool CProtoItemSocket_Spectator::has_team_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CProtoItemSocket_Spectator::set_has_team_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CProtoItemSocket_Spectator::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CProtoItemSocket_Spectator::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CProtoItemSocket_Spectator::team_id() const {
  return team_id_;
}
inline void CProtoItemSocket_Spectator::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
}

// -------------------------------------------------------------------

// CProtoItemSocket_AnimModifier

// optional .CProtoItemSocket socket = 1;
inline bool CProtoItemSocket_AnimModifier::has_socket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProtoItemSocket_AnimModifier::set_has_socket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProtoItemSocket_AnimModifier::clear_has_socket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProtoItemSocket_AnimModifier::clear_socket() {
  if (socket_ != NULL) socket_->::CProtoItemSocket::Clear();
  clear_has_socket();
}
inline const ::CProtoItemSocket& CProtoItemSocket_AnimModifier::socket() const {
  return socket_ != NULL ? *socket_ : *default_instance_->socket_;
}
inline ::CProtoItemSocket* CProtoItemSocket_AnimModifier::mutable_socket() {
  set_has_socket();
  if (socket_ == NULL) socket_ = new ::CProtoItemSocket;
  return socket_;
}
inline ::CProtoItemSocket* CProtoItemSocket_AnimModifier::release_socket() {
  clear_has_socket();
  ::CProtoItemSocket* temp = socket_;
  socket_ = NULL;
  return temp;
}

// optional uint32 anim_modifier = 2;
inline bool CProtoItemSocket_AnimModifier::has_anim_modifier() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CProtoItemSocket_AnimModifier::set_has_anim_modifier() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CProtoItemSocket_AnimModifier::clear_has_anim_modifier() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CProtoItemSocket_AnimModifier::clear_anim_modifier() {
  anim_modifier_ = 0u;
  clear_has_anim_modifier();
}
inline ::google::protobuf::uint32 CProtoItemSocket_AnimModifier::anim_modifier() const {
  return anim_modifier_;
}
inline void CProtoItemSocket_AnimModifier::set_anim_modifier(::google::protobuf::uint32 value) {
  set_has_anim_modifier();
  anim_modifier_ = value;
}

// -------------------------------------------------------------------

// CProtoItemSocket_Autograph

// optional .CProtoItemSocket socket = 1;
inline bool CProtoItemSocket_Autograph::has_socket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProtoItemSocket_Autograph::set_has_socket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProtoItemSocket_Autograph::clear_has_socket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProtoItemSocket_Autograph::clear_socket() {
  if (socket_ != NULL) socket_->::CProtoItemSocket::Clear();
  clear_has_socket();
}
inline const ::CProtoItemSocket& CProtoItemSocket_Autograph::socket() const {
  return socket_ != NULL ? *socket_ : *default_instance_->socket_;
}
inline ::CProtoItemSocket* CProtoItemSocket_Autograph::mutable_socket() {
  set_has_socket();
  if (socket_ == NULL) socket_ = new ::CProtoItemSocket;
  return socket_;
}
inline ::CProtoItemSocket* CProtoItemSocket_Autograph::release_socket() {
  clear_has_socket();
  ::CProtoItemSocket* temp = socket_;
  socket_ = NULL;
  return temp;
}

// optional string autograph = 2;
inline bool CProtoItemSocket_Autograph::has_autograph() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CProtoItemSocket_Autograph::set_has_autograph() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CProtoItemSocket_Autograph::clear_has_autograph() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CProtoItemSocket_Autograph::clear_autograph() {
  if (autograph_ != &::google::protobuf::internal::kEmptyString) {
    autograph_->clear();
  }
  clear_has_autograph();
}
inline const ::std::string& CProtoItemSocket_Autograph::autograph() const {
  return *autograph_;
}
inline void CProtoItemSocket_Autograph::set_autograph(const ::std::string& value) {
  set_has_autograph();
  if (autograph_ == &::google::protobuf::internal::kEmptyString) {
    autograph_ = new ::std::string;
  }
  autograph_->assign(value);
}
inline void CProtoItemSocket_Autograph::set_autograph(const char* value) {
  set_has_autograph();
  if (autograph_ == &::google::protobuf::internal::kEmptyString) {
    autograph_ = new ::std::string;
  }
  autograph_->assign(value);
}
inline void CProtoItemSocket_Autograph::set_autograph(const char* value, size_t size) {
  set_has_autograph();
  if (autograph_ == &::google::protobuf::internal::kEmptyString) {
    autograph_ = new ::std::string;
  }
  autograph_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CProtoItemSocket_Autograph::mutable_autograph() {
  set_has_autograph();
  if (autograph_ == &::google::protobuf::internal::kEmptyString) {
    autograph_ = new ::std::string;
  }
  return autograph_;
}
inline ::std::string* CProtoItemSocket_Autograph::release_autograph() {
  clear_has_autograph();
  if (autograph_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = autograph_;
    autograph_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CProtoItemSocket_AbilityEffect

// optional .CProtoItemSocket socket = 1;
inline bool CProtoItemSocket_AbilityEffect::has_socket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProtoItemSocket_AbilityEffect::set_has_socket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProtoItemSocket_AbilityEffect::clear_has_socket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProtoItemSocket_AbilityEffect::clear_socket() {
  if (socket_ != NULL) socket_->::CProtoItemSocket::Clear();
  clear_has_socket();
}
inline const ::CProtoItemSocket& CProtoItemSocket_AbilityEffect::socket() const {
  return socket_ != NULL ? *socket_ : *default_instance_->socket_;
}
inline ::CProtoItemSocket* CProtoItemSocket_AbilityEffect::mutable_socket() {
  set_has_socket();
  if (socket_ == NULL) socket_ = new ::CProtoItemSocket;
  return socket_;
}
inline ::CProtoItemSocket* CProtoItemSocket_AbilityEffect::release_socket() {
  clear_has_socket();
  ::CProtoItemSocket* temp = socket_;
  socket_ = NULL;
  return temp;
}

// optional uint32 ability_effect = 2;
inline bool CProtoItemSocket_AbilityEffect::has_ability_effect() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CProtoItemSocket_AbilityEffect::set_has_ability_effect() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CProtoItemSocket_AbilityEffect::clear_has_ability_effect() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CProtoItemSocket_AbilityEffect::clear_ability_effect() {
  ability_effect_ = 0u;
  clear_has_ability_effect();
}
inline ::google::protobuf::uint32 CProtoItemSocket_AbilityEffect::ability_effect() const {
  return ability_effect_;
}
inline void CProtoItemSocket_AbilityEffect::set_ability_effect(::google::protobuf::uint32 value) {
  set_has_ability_effect();
  ability_effect_ = value;
}

// -------------------------------------------------------------------

// CProtoItemSocket_StaticVisuals

// optional .CProtoItemSocket socket = 1;
inline bool CProtoItemSocket_StaticVisuals::has_socket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProtoItemSocket_StaticVisuals::set_has_socket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProtoItemSocket_StaticVisuals::clear_has_socket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProtoItemSocket_StaticVisuals::clear_socket() {
  if (socket_ != NULL) socket_->::CProtoItemSocket::Clear();
  clear_has_socket();
}
inline const ::CProtoItemSocket& CProtoItemSocket_StaticVisuals::socket() const {
  return socket_ != NULL ? *socket_ : *default_instance_->socket_;
}
inline ::CProtoItemSocket* CProtoItemSocket_StaticVisuals::mutable_socket() {
  set_has_socket();
  if (socket_ == NULL) socket_ = new ::CProtoItemSocket;
  return socket_;
}
inline ::CProtoItemSocket* CProtoItemSocket_StaticVisuals::release_socket() {
  clear_has_socket();
  ::CProtoItemSocket* temp = socket_;
  socket_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// CMatchPlayerAbilityUpgrade

// optional uint32 ability = 1;
inline bool CMatchPlayerAbilityUpgrade::has_ability() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMatchPlayerAbilityUpgrade::set_has_ability() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMatchPlayerAbilityUpgrade::clear_has_ability() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMatchPlayerAbilityUpgrade::clear_ability() {
  ability_ = 0u;
  clear_has_ability();
}
inline ::google::protobuf::uint32 CMatchPlayerAbilityUpgrade::ability() const {
  return ability_;
}
inline void CMatchPlayerAbilityUpgrade::set_ability(::google::protobuf::uint32 value) {
  set_has_ability();
  ability_ = value;
}

// optional uint32 time = 2;
inline bool CMatchPlayerAbilityUpgrade::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMatchPlayerAbilityUpgrade::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMatchPlayerAbilityUpgrade::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMatchPlayerAbilityUpgrade::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 CMatchPlayerAbilityUpgrade::time() const {
  return time_;
}
inline void CMatchPlayerAbilityUpgrade::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// CMatchAdditionalUnitInventory

// optional string unit_name = 1;
inline bool CMatchAdditionalUnitInventory::has_unit_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMatchAdditionalUnitInventory::set_has_unit_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMatchAdditionalUnitInventory::clear_has_unit_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMatchAdditionalUnitInventory::clear_unit_name() {
  if (unit_name_ != &::google::protobuf::internal::kEmptyString) {
    unit_name_->clear();
  }
  clear_has_unit_name();
}
inline const ::std::string& CMatchAdditionalUnitInventory::unit_name() const {
  return *unit_name_;
}
inline void CMatchAdditionalUnitInventory::set_unit_name(const ::std::string& value) {
  set_has_unit_name();
  if (unit_name_ == &::google::protobuf::internal::kEmptyString) {
    unit_name_ = new ::std::string;
  }
  unit_name_->assign(value);
}
inline void CMatchAdditionalUnitInventory::set_unit_name(const char* value) {
  set_has_unit_name();
  if (unit_name_ == &::google::protobuf::internal::kEmptyString) {
    unit_name_ = new ::std::string;
  }
  unit_name_->assign(value);
}
inline void CMatchAdditionalUnitInventory::set_unit_name(const char* value, size_t size) {
  set_has_unit_name();
  if (unit_name_ == &::google::protobuf::internal::kEmptyString) {
    unit_name_ = new ::std::string;
  }
  unit_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMatchAdditionalUnitInventory::mutable_unit_name() {
  set_has_unit_name();
  if (unit_name_ == &::google::protobuf::internal::kEmptyString) {
    unit_name_ = new ::std::string;
  }
  return unit_name_;
}
inline ::std::string* CMatchAdditionalUnitInventory::release_unit_name() {
  clear_has_unit_name();
  if (unit_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = unit_name_;
    unit_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated uint32 items = 2;
inline int CMatchAdditionalUnitInventory::items_size() const {
  return items_.size();
}
inline void CMatchAdditionalUnitInventory::clear_items() {
  items_.Clear();
}
inline ::google::protobuf::uint32 CMatchAdditionalUnitInventory::items(int index) const {
  return items_.Get(index);
}
inline void CMatchAdditionalUnitInventory::set_items(int index, ::google::protobuf::uint32 value) {
  items_.Set(index, value);
}
inline void CMatchAdditionalUnitInventory::add_items(::google::protobuf::uint32 value) {
  items_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMatchAdditionalUnitInventory::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMatchAdditionalUnitInventory::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// CMatchHeroSelectEvent

// optional bool is_pick = 1;
inline bool CMatchHeroSelectEvent::has_is_pick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMatchHeroSelectEvent::set_has_is_pick() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMatchHeroSelectEvent::clear_has_is_pick() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMatchHeroSelectEvent::clear_is_pick() {
  is_pick_ = false;
  clear_has_is_pick();
}
inline bool CMatchHeroSelectEvent::is_pick() const {
  return is_pick_;
}
inline void CMatchHeroSelectEvent::set_is_pick(bool value) {
  set_has_is_pick();
  is_pick_ = value;
}

// optional uint32 team = 2;
inline bool CMatchHeroSelectEvent::has_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMatchHeroSelectEvent::set_has_team() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMatchHeroSelectEvent::clear_has_team() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMatchHeroSelectEvent::clear_team() {
  team_ = 0u;
  clear_has_team();
}
inline ::google::protobuf::uint32 CMatchHeroSelectEvent::team() const {
  return team_;
}
inline void CMatchHeroSelectEvent::set_team(::google::protobuf::uint32 value) {
  set_has_team();
  team_ = value;
}

// optional uint32 hero_id = 3;
inline bool CMatchHeroSelectEvent::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMatchHeroSelectEvent::set_has_hero_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMatchHeroSelectEvent::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMatchHeroSelectEvent::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CMatchHeroSelectEvent::hero_id() const {
  return hero_id_;
}
inline void CMatchHeroSelectEvent::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// -------------------------------------------------------------------

// CMsgDOTAProcessFantasyScheduledEvent

// optional uint32 event = 1;
inline bool CMsgDOTAProcessFantasyScheduledEvent::has_event() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::set_has_event() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::clear_has_event() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::clear_event() {
  event_ = 0u;
  clear_has_event();
}
inline ::google::protobuf::uint32 CMsgDOTAProcessFantasyScheduledEvent::event() const {
  return event_;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::set_event(::google::protobuf::uint32 value) {
  set_has_event();
  event_ = value;
}

// optional uint32 timestamp = 2;
inline bool CMsgDOTAProcessFantasyScheduledEvent::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
inline ::google::protobuf::uint32 CMsgDOTAProcessFantasyScheduledEvent::timestamp() const {
  return timestamp_;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// optional uint32 fantasy_league_id = 3;
inline bool CMsgDOTAProcessFantasyScheduledEvent::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
inline ::google::protobuf::uint32 CMsgDOTAProcessFantasyScheduledEvent::fantasy_league_id() const {
  return fantasy_league_id_;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
}

// optional uint32 reference_data = 4;
inline bool CMsgDOTAProcessFantasyScheduledEvent::has_reference_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::set_has_reference_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::clear_has_reference_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::clear_reference_data() {
  reference_data_ = 0u;
  clear_has_reference_data();
}
inline ::google::protobuf::uint32 CMsgDOTAProcessFantasyScheduledEvent::reference_data() const {
  return reference_data_;
}
inline void CMsgDOTAProcessFantasyScheduledEvent::set_reference_data(::google::protobuf::uint32 value) {
  set_has_reference_data();
  reference_data_ = value;
}

// -------------------------------------------------------------------

// CSODOTAMapLocationState

// optional uint32 account_id = 1;
inline bool CSODOTAMapLocationState::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTAMapLocationState::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSODOTAMapLocationState::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSODOTAMapLocationState::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CSODOTAMapLocationState::account_id() const {
  return account_id_;
}
inline void CSODOTAMapLocationState::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
}

// optional int32 location_id = 2;
inline bool CSODOTAMapLocationState::has_location_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTAMapLocationState::set_has_location_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSODOTAMapLocationState::clear_has_location_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSODOTAMapLocationState::clear_location_id() {
  location_id_ = 0;
  clear_has_location_id();
}
inline ::google::protobuf::int32 CSODOTAMapLocationState::location_id() const {
  return location_id_;
}
inline void CSODOTAMapLocationState::set_location_id(::google::protobuf::int32 value) {
  set_has_location_id();
  location_id_ = value;
}

// optional bool completed = 3;
inline bool CSODOTAMapLocationState::has_completed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSODOTAMapLocationState::set_has_completed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSODOTAMapLocationState::clear_has_completed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSODOTAMapLocationState::clear_completed() {
  completed_ = false;
  clear_has_completed();
}
inline bool CSODOTAMapLocationState::completed() const {
  return completed_;
}
inline void CSODOTAMapLocationState::set_completed(bool value) {
  set_has_completed();
  completed_ = value;
}

// -------------------------------------------------------------------

// CMsgNexonPartnerUpdate

// optional uint32 messagetype = 1;
inline bool CMsgNexonPartnerUpdate::has_messagetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgNexonPartnerUpdate::set_has_messagetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgNexonPartnerUpdate::clear_has_messagetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgNexonPartnerUpdate::clear_messagetype() {
  messagetype_ = 0u;
  clear_has_messagetype();
}
inline ::google::protobuf::uint32 CMsgNexonPartnerUpdate::messagetype() const {
  return messagetype_;
}
inline void CMsgNexonPartnerUpdate::set_messagetype(::google::protobuf::uint32 value) {
  set_has_messagetype();
  messagetype_ = value;
}

// optional uint32 timeremaining = 2;
inline bool CMsgNexonPartnerUpdate::has_timeremaining() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgNexonPartnerUpdate::set_has_timeremaining() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgNexonPartnerUpdate::clear_has_timeremaining() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgNexonPartnerUpdate::clear_timeremaining() {
  timeremaining_ = 0u;
  clear_has_timeremaining();
}
inline ::google::protobuf::uint32 CMsgNexonPartnerUpdate::timeremaining() const {
  return timeremaining_;
}
inline void CMsgNexonPartnerUpdate::set_timeremaining(::google::protobuf::uint32 value) {
  set_has_timeremaining();
  timeremaining_ = value;
}

// -------------------------------------------------------------------

// CMsgMakeOffering

// optional uint64 item_id = 1;
inline bool CMsgMakeOffering::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgMakeOffering::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgMakeOffering::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgMakeOffering::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_item_id();
}
inline ::google::protobuf::uint64 CMsgMakeOffering::item_id() const {
  return item_id_;
}
inline void CMsgMakeOffering::set_item_id(::google::protobuf::uint64 value) {
  set_has_item_id();
  item_id_ = value;
}

// -------------------------------------------------------------------

// CMsgRequestOfferings

// -------------------------------------------------------------------

// CMsgRequestOfferingsResponse_NewYearsOffering

// optional uint32 def_index = 1;
inline bool CMsgRequestOfferingsResponse_NewYearsOffering::has_def_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgRequestOfferingsResponse_NewYearsOffering::set_has_def_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgRequestOfferingsResponse_NewYearsOffering::clear_has_def_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgRequestOfferingsResponse_NewYearsOffering::clear_def_index() {
  def_index_ = 0u;
  clear_has_def_index();
}
inline ::google::protobuf::uint32 CMsgRequestOfferingsResponse_NewYearsOffering::def_index() const {
  return def_index_;
}
inline void CMsgRequestOfferingsResponse_NewYearsOffering::set_def_index(::google::protobuf::uint32 value) {
  set_has_def_index();
  def_index_ = value;
}

// optional uint64 item_id = 2;
inline bool CMsgRequestOfferingsResponse_NewYearsOffering::has_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgRequestOfferingsResponse_NewYearsOffering::set_has_item_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgRequestOfferingsResponse_NewYearsOffering::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgRequestOfferingsResponse_NewYearsOffering::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_item_id();
}
inline ::google::protobuf::uint64 CMsgRequestOfferingsResponse_NewYearsOffering::item_id() const {
  return item_id_;
}
inline void CMsgRequestOfferingsResponse_NewYearsOffering::set_item_id(::google::protobuf::uint64 value) {
  set_has_item_id();
  item_id_ = value;
}

// -------------------------------------------------------------------

// CMsgRequestOfferingsResponse

// repeated .CMsgRequestOfferingsResponse.NewYearsOffering offerings = 1;
inline int CMsgRequestOfferingsResponse::offerings_size() const {
  return offerings_.size();
}
inline void CMsgRequestOfferingsResponse::clear_offerings() {
  offerings_.Clear();
}
inline const ::CMsgRequestOfferingsResponse_NewYearsOffering& CMsgRequestOfferingsResponse::offerings(int index) const {
  return offerings_.Get(index);
}
inline ::CMsgRequestOfferingsResponse_NewYearsOffering* CMsgRequestOfferingsResponse::mutable_offerings(int index) {
  return offerings_.Mutable(index);
}
inline ::CMsgRequestOfferingsResponse_NewYearsOffering* CMsgRequestOfferingsResponse::add_offerings() {
  return offerings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgRequestOfferingsResponse_NewYearsOffering >&
CMsgRequestOfferingsResponse::offerings() const {
  return offerings_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgRequestOfferingsResponse_NewYearsOffering >*
CMsgRequestOfferingsResponse::mutable_offerings() {
  return &offerings_;
}

// optional bool completed = 2;
inline bool CMsgRequestOfferingsResponse::has_completed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgRequestOfferingsResponse::set_has_completed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgRequestOfferingsResponse::clear_has_completed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgRequestOfferingsResponse::clear_completed() {
  completed_ = false;
  clear_has_completed();
}
inline bool CMsgRequestOfferingsResponse::completed() const {
  return completed_;
}
inline void CMsgRequestOfferingsResponse::set_completed(bool value) {
  set_has_completed();
  completed_ = value;
}

// -------------------------------------------------------------------

// CMsgLeagueAdminList

// repeated uint32 account_ids = 1;
inline int CMsgLeagueAdminList::account_ids_size() const {
  return account_ids_.size();
}
inline void CMsgLeagueAdminList::clear_account_ids() {
  account_ids_.Clear();
}
inline ::google::protobuf::uint32 CMsgLeagueAdminList::account_ids(int index) const {
  return account_ids_.Get(index);
}
inline void CMsgLeagueAdminList::set_account_ids(int index, ::google::protobuf::uint32 value) {
  account_ids_.Set(index, value);
}
inline void CMsgLeagueAdminList::add_account_ids(::google::protobuf::uint32 value) {
  account_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgLeagueAdminList::account_ids() const {
  return account_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgLeagueAdminList::mutable_account_ids() {
  return &account_ids_;
}

// -------------------------------------------------------------------

// CMsgPerfectWorldUserLookupRequest

// optional string user_name = 1;
inline bool CMsgPerfectWorldUserLookupRequest::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPerfectWorldUserLookupRequest::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPerfectWorldUserLookupRequest::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPerfectWorldUserLookupRequest::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& CMsgPerfectWorldUserLookupRequest::user_name() const {
  return *user_name_;
}
inline void CMsgPerfectWorldUserLookupRequest::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void CMsgPerfectWorldUserLookupRequest::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void CMsgPerfectWorldUserLookupRequest::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgPerfectWorldUserLookupRequest::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* CMsgPerfectWorldUserLookupRequest::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CMsgPerfectWorldUserLookupResponse

// optional .CMsgPerfectWorldUserLookupResponse.EResultCode result_code = 1 [default = SUCCESS_ACCOUNT_FOUND];
inline bool CMsgPerfectWorldUserLookupResponse::has_result_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPerfectWorldUserLookupResponse::set_has_result_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPerfectWorldUserLookupResponse::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPerfectWorldUserLookupResponse::clear_result_code() {
  result_code_ = 0;
  clear_has_result_code();
}
inline ::CMsgPerfectWorldUserLookupResponse_EResultCode CMsgPerfectWorldUserLookupResponse::result_code() const {
  return static_cast< ::CMsgPerfectWorldUserLookupResponse_EResultCode >(result_code_);
}
inline void CMsgPerfectWorldUserLookupResponse::set_result_code(::CMsgPerfectWorldUserLookupResponse_EResultCode value) {
  GOOGLE_DCHECK(::CMsgPerfectWorldUserLookupResponse_EResultCode_IsValid(value));
  set_has_result_code();
  result_code_ = value;
}

// optional uint32 account_id = 2;
inline bool CMsgPerfectWorldUserLookupResponse::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgPerfectWorldUserLookupResponse::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgPerfectWorldUserLookupResponse::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgPerfectWorldUserLookupResponse::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgPerfectWorldUserLookupResponse::account_id() const {
  return account_id_;
}
inline void CMsgPerfectWorldUserLookupResponse::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CSODOTAParty_State>() {
  return ::CSODOTAParty_State_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CSODOTALobby_State>() {
  return ::CSODOTALobby_State_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CSODOTALobby_LobbyType>() {
  return ::CSODOTALobby_LobbyType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgPerfectWorldUserLookupResponse_EResultCode>() {
  return ::CMsgPerfectWorldUserLookupResponse_EResultCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< EDOTAGCMsg>() {
  return EDOTAGCMsg_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< DOTA_GameMode>() {
  return DOTA_GameMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< DOTA_GameState>() {
  return DOTA_GameState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< DOTA_GC_TEAM>() {
  return DOTA_GC_TEAM_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< DOTA_CM_PICK>() {
  return DOTA_CM_PICK_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< DOTAConnectionState_t>() {
  return DOTAConnectionState_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< DOTALeaverStatus_t>() {
  return DOTALeaverStatus_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< DOTALowPriorityBanType>() {
  return DOTALowPriorityBanType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< DOTALobbyReadyState>() {
  return DOTALobbyReadyState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< DOTAGameVersion>() {
  return DOTAGameVersion_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< DOTAJoinLobbyResult>() {
  return DOTAJoinLobbyResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< DOTAMatchVote>() {
  return DOTAMatchVote_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< DOTA_LobbyMemberXPBonus>() {
  return DOTA_LobbyMemberXPBonus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< LobbyDotaTVDelay>() {
  return LobbyDotaTVDelay_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< EDOTAGCSessionNeed>() {
  return EDOTAGCSessionNeed_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< Fantasy_Roles>() {
  return Fantasy_Roles_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< Fantasy_Team_Slots>() {
  return Fantasy_Team_Slots_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< Fantasy_Selection_Mode>() {
  return Fantasy_Selection_Mode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< Fantasy_Matchup_Interval>() {
  return Fantasy_Matchup_Interval_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< DOTA_TournamentEvents>() {
  return DOTA_TournamentEvents_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dota_5fgcmessages_5fcommon_2eproto__INCLUDED
