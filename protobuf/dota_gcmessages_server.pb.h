// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_server.proto

#ifndef PROTOBUF_dota_5fgcmessages_5fserver_2eproto__INCLUDED
#define PROTOBUF_dota_5fgcmessages_5fserver_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "steammessages.pb.h"
#include "matchmaker_common.pb.h"
#include "dota_gcmessages_common.pb.h"
#include "econ_gcmessages.pb.h"
#include "network_connection.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();

class CMsgSpawnLootGreevil;
class CMsgDismissLootGreevil;
class CMsgDismissLootGreevilResponse;
class CMsgConnectedPlayers;
class CMsgConnectedPlayers_Player;
class CMsgGameServerInfo;
class CMsgLeaverDetected;
class CMsgLeaverDetectedResponse;
class CMsgDOTAFantasyPlayerStats;
class CMsgGameMatchSignOut;
class CMsgGameMatchSignOut_CTeam;
class CMsgGameMatchSignOut_CTeam_CPlayer;
class CMsgGameMatchSignOut_CAdditionalSignoutMsg;
class CMsgGameMatchSignoutResponse;
class CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg;
class CMsgGameMatchSignOutPermissionRequest;
class CMsgGameMatchSignOutPermissionResponse;
class CMsgGameChatLog;
class CMsgGameChatLog_CChatLine;
class CMsgDOTALiveScoreboardUpdate;
class CMsgDOTALiveScoreboardUpdate_Team;
class CMsgDOTALiveScoreboardUpdate_Team_Player;
class CMsgDOTARequestPlayerResources;
class CMsgDOTARequestPlayerResourcesResponse;
class CMsgDOTARequestBatchPlayerResources;
class CMsgDOTARequestBatchPlayerResourcesResponse;
class CMsgDOTARequestBatchPlayerResourcesResponse_Result;
class CMsgDOTAPlayerFailedToConnect;
class CMsgGCToRelayConnect;
class CMsgGCToRelayConnectResponse;
class CMsgGCBanStatusRequest;
class CMsgGCBanStatusResponse;
class CMsgTournamentItemEvent;
class CMsgTournamentItemEventResponse;
class CMsgTeamFanfare;
class CMsgResponseTeamFanfare;
class CMsgGameServerUploadSaveGame;
class CMsgGameServerSaveGameResult;
class CMsgGameServerGetLoadGame;
class CMsgGameServerGetLoadGameResult;
class CMsgDOTAGenerateDiretidePrizeList;
class CMsgDOTAGenerateDiretidePrizeListResponse;
class CMsgDOTARewardDiretidePrizes;
class CMsgDOTADiretidePrizesRewardedResponse;
class CMsgDOTAAwardEventPoints;
class CMsgDOTAAwardEventPoints_AwardPoints;
class CMsgDOTAFrostivusTimeElapsed;
class CMsgDOTAFrostivusTimeElapsed_User;
class CMsgGCToServerPingRequest;
class CMsgGCToServerPingResponse;
class CMsgGCToServerConsoleCommand;

enum CMsgConnectedPlayers_SendReason {
  CMsgConnectedPlayers_SendReason_INVALID = 0,
  CMsgConnectedPlayers_SendReason_HEARTBEAT = 1,
  CMsgConnectedPlayers_SendReason_GAME_STATE = 2,
  CMsgConnectedPlayers_SendReason_FIRST_BLOOD = 3,
  CMsgConnectedPlayers_SendReason_PLAYER_CONNECTED = 4,
  CMsgConnectedPlayers_SendReason_PLAYER_HERO = 5,
  CMsgConnectedPlayers_SendReason_PLAYER_DISCONNECTED_CONSEQUENCES = 6,
  CMsgConnectedPlayers_SendReason_PLAYER_DISCONNECTED_NOCONSEQUENCES = 7,
  CMsgConnectedPlayers_SendReason_SPECTATOR_COUNT = 8,
  CMsgConnectedPlayers_SendReason_TOWER_STATE = 9,
  CMsgConnectedPlayers_SendReason_GAMESTATE_TIMEOUT = 10,
  CMsgConnectedPlayers_SendReason_MASS_DISCONNECT = 11
};
bool CMsgConnectedPlayers_SendReason_IsValid(int value);
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers_SendReason_SendReason_MIN = CMsgConnectedPlayers_SendReason_INVALID;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers_SendReason_SendReason_MAX = CMsgConnectedPlayers_SendReason_MASS_DISCONNECT;
const int CMsgConnectedPlayers_SendReason_SendReason_ARRAYSIZE = CMsgConnectedPlayers_SendReason_SendReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgConnectedPlayers_SendReason_descriptor();
inline const ::std::string& CMsgConnectedPlayers_SendReason_Name(CMsgConnectedPlayers_SendReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgConnectedPlayers_SendReason_descriptor(), value);
}
inline bool CMsgConnectedPlayers_SendReason_Parse(
    const ::std::string& name, CMsgConnectedPlayers_SendReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgConnectedPlayers_SendReason>(
    CMsgConnectedPlayers_SendReason_descriptor(), name, value);
}
enum CMsgGameServerInfo_ServerType {
  CMsgGameServerInfo_ServerType_UNSPECIFIED = 0,
  CMsgGameServerInfo_ServerType_GAME = 1,
  CMsgGameServerInfo_ServerType_PROXY = 2
};
bool CMsgGameServerInfo_ServerType_IsValid(int value);
const CMsgGameServerInfo_ServerType CMsgGameServerInfo_ServerType_ServerType_MIN = CMsgGameServerInfo_ServerType_UNSPECIFIED;
const CMsgGameServerInfo_ServerType CMsgGameServerInfo_ServerType_ServerType_MAX = CMsgGameServerInfo_ServerType_PROXY;
const int CMsgGameServerInfo_ServerType_ServerType_ARRAYSIZE = CMsgGameServerInfo_ServerType_ServerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgGameServerInfo_ServerType_descriptor();
inline const ::std::string& CMsgGameServerInfo_ServerType_Name(CMsgGameServerInfo_ServerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgGameServerInfo_ServerType_descriptor(), value);
}
inline bool CMsgGameServerInfo_ServerType_Parse(
    const ::std::string& name, CMsgGameServerInfo_ServerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgGameServerInfo_ServerType>(
    CMsgGameServerInfo_ServerType_descriptor(), name, value);
}
enum CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState {
  CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_k_EDOTAUltimateStateNotLearned = 0,
  CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_k_EDOTAUltimateStateCooldown = 1,
  CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_k_EDOTAUltimateStateNeedsMana = 2,
  CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_k_EDOTAUltimateStateReady = 3
};
bool CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_IsValid(int value);
const CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_DOTAUltimateState_MIN = CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_k_EDOTAUltimateStateNotLearned;
const CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_DOTAUltimateState_MAX = CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_k_EDOTAUltimateStateReady;
const int CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_DOTAUltimateState_ARRAYSIZE = CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_DOTAUltimateState_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_descriptor();
inline const ::std::string& CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_Name(CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_descriptor(), value);
}
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_Parse(
    const ::std::string& name, CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState>(
    CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_descriptor(), name, value);
}
enum CMsgGameServerSaveGameResult_Result {
  CMsgGameServerSaveGameResult_Result_SaveSuccessful = 0,
  CMsgGameServerSaveGameResult_Result_SessionNotFound = 1,
  CMsgGameServerSaveGameResult_Result_DatabaseError = 2,
  CMsgGameServerSaveGameResult_Result_TooBig = 3
};
bool CMsgGameServerSaveGameResult_Result_IsValid(int value);
const CMsgGameServerSaveGameResult_Result CMsgGameServerSaveGameResult_Result_Result_MIN = CMsgGameServerSaveGameResult_Result_SaveSuccessful;
const CMsgGameServerSaveGameResult_Result CMsgGameServerSaveGameResult_Result_Result_MAX = CMsgGameServerSaveGameResult_Result_TooBig;
const int CMsgGameServerSaveGameResult_Result_Result_ARRAYSIZE = CMsgGameServerSaveGameResult_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgGameServerSaveGameResult_Result_descriptor();
inline const ::std::string& CMsgGameServerSaveGameResult_Result_Name(CMsgGameServerSaveGameResult_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgGameServerSaveGameResult_Result_descriptor(), value);
}
inline bool CMsgGameServerSaveGameResult_Result_Parse(
    const ::std::string& name, CMsgGameServerSaveGameResult_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgGameServerSaveGameResult_Result>(
    CMsgGameServerSaveGameResult_Result_descriptor(), name, value);
}
// ===================================================================

class CMsgSpawnLootGreevil : public ::google::protobuf::Message {
 public:
  CMsgSpawnLootGreevil();
  virtual ~CMsgSpawnLootGreevil();
  
  CMsgSpawnLootGreevil(const CMsgSpawnLootGreevil& from);
  
  inline CMsgSpawnLootGreevil& operator=(const CMsgSpawnLootGreevil& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSpawnLootGreevil& default_instance();
  
  void Swap(CMsgSpawnLootGreevil* other);
  
  // implements Message ----------------------------------------------
  
  CMsgSpawnLootGreevil* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSpawnLootGreevil& from);
  void MergeFrom(const CMsgSpawnLootGreevil& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool rare = 1;
  inline bool has_rare() const;
  inline void clear_rare();
  static const int kRareFieldNumber = 1;
  inline bool rare() const;
  inline void set_rare(bool value);
  
  // @@protoc_insertion_point(class_scope:CMsgSpawnLootGreevil)
 private:
  inline void set_has_rare();
  inline void clear_has_rare();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool rare_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgSpawnLootGreevil* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDismissLootGreevil : public ::google::protobuf::Message {
 public:
  CMsgDismissLootGreevil();
  virtual ~CMsgDismissLootGreevil();
  
  CMsgDismissLootGreevil(const CMsgDismissLootGreevil& from);
  
  inline CMsgDismissLootGreevil& operator=(const CMsgDismissLootGreevil& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDismissLootGreevil& default_instance();
  
  void Swap(CMsgDismissLootGreevil* other);
  
  // implements Message ----------------------------------------------
  
  CMsgDismissLootGreevil* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDismissLootGreevil& from);
  void MergeFrom(const CMsgDismissLootGreevil& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool killed = 2;
  inline bool has_killed() const;
  inline void clear_killed();
  static const int kKilledFieldNumber = 2;
  inline bool killed() const;
  inline void set_killed(bool value);
  
  // optional bool rare = 3;
  inline bool has_rare() const;
  inline void clear_rare();
  static const int kRareFieldNumber = 3;
  inline bool rare() const;
  inline void set_rare(bool value);
  
  // @@protoc_insertion_point(class_scope:CMsgDismissLootGreevil)
 private:
  inline void set_has_killed();
  inline void clear_has_killed();
  inline void set_has_rare();
  inline void clear_has_rare();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool killed_;
  bool rare_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgDismissLootGreevil* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDismissLootGreevilResponse : public ::google::protobuf::Message {
 public:
  CMsgDismissLootGreevilResponse();
  virtual ~CMsgDismissLootGreevilResponse();
  
  CMsgDismissLootGreevilResponse(const CMsgDismissLootGreevilResponse& from);
  
  inline CMsgDismissLootGreevilResponse& operator=(const CMsgDismissLootGreevilResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDismissLootGreevilResponse& default_instance();
  
  void Swap(CMsgDismissLootGreevilResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMsgDismissLootGreevilResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDismissLootGreevilResponse& from);
  void MergeFrom(const CMsgDismissLootGreevilResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:CMsgDismissLootGreevilResponse)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgDismissLootGreevilResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgConnectedPlayers_Player : public ::google::protobuf::Message {
 public:
  CMsgConnectedPlayers_Player();
  virtual ~CMsgConnectedPlayers_Player();
  
  CMsgConnectedPlayers_Player(const CMsgConnectedPlayers_Player& from);
  
  inline CMsgConnectedPlayers_Player& operator=(const CMsgConnectedPlayers_Player& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgConnectedPlayers_Player& default_instance();
  
  void Swap(CMsgConnectedPlayers_Player* other);
  
  // implements Message ----------------------------------------------
  
  CMsgConnectedPlayers_Player* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgConnectedPlayers_Player& from);
  void MergeFrom(const CMsgConnectedPlayers_Player& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional fixed64 steam_id = 1;
  inline bool has_steam_id() const;
  inline void clear_steam_id();
  static const int kSteamIdFieldNumber = 1;
  inline ::google::protobuf::uint64 steam_id() const;
  inline void set_steam_id(::google::protobuf::uint64 value);
  
  // optional uint32 hero_id = 2;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);
  
  // optional .CMsgLeaverState leaver_state = 3;
  inline bool has_leaver_state() const;
  inline void clear_leaver_state();
  static const int kLeaverStateFieldNumber = 3;
  inline const ::CMsgLeaverState& leaver_state() const;
  inline ::CMsgLeaverState* mutable_leaver_state();
  inline ::CMsgLeaverState* release_leaver_state();
  
  // optional .ENetworkDisconnectionReason disconnect_reason = 4 [default = NETWORK_DISCONNECT_INVALID];
  inline bool has_disconnect_reason() const;
  inline void clear_disconnect_reason();
  static const int kDisconnectReasonFieldNumber = 4;
  inline ENetworkDisconnectionReason disconnect_reason() const;
  inline void set_disconnect_reason(ENetworkDisconnectionReason value);
  
  // @@protoc_insertion_point(class_scope:CMsgConnectedPlayers.Player)
 private:
  inline void set_has_steam_id();
  inline void clear_has_steam_id();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_leaver_state();
  inline void clear_has_leaver_state();
  inline void set_has_disconnect_reason();
  inline void clear_has_disconnect_reason();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 steam_id_;
  ::CMsgLeaverState* leaver_state_;
  ::google::protobuf::uint32 hero_id_;
  int disconnect_reason_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgConnectedPlayers_Player* default_instance_;
};
// -------------------------------------------------------------------

class CMsgConnectedPlayers : public ::google::protobuf::Message {
 public:
  CMsgConnectedPlayers();
  virtual ~CMsgConnectedPlayers();
  
  CMsgConnectedPlayers(const CMsgConnectedPlayers& from);
  
  inline CMsgConnectedPlayers& operator=(const CMsgConnectedPlayers& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgConnectedPlayers& default_instance();
  
  void Swap(CMsgConnectedPlayers* other);
  
  // implements Message ----------------------------------------------
  
  CMsgConnectedPlayers* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgConnectedPlayers& from);
  void MergeFrom(const CMsgConnectedPlayers& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CMsgConnectedPlayers_Player Player;
  
  typedef CMsgConnectedPlayers_SendReason SendReason;
  static const SendReason INVALID = CMsgConnectedPlayers_SendReason_INVALID;
  static const SendReason HEARTBEAT = CMsgConnectedPlayers_SendReason_HEARTBEAT;
  static const SendReason GAME_STATE = CMsgConnectedPlayers_SendReason_GAME_STATE;
  static const SendReason FIRST_BLOOD = CMsgConnectedPlayers_SendReason_FIRST_BLOOD;
  static const SendReason PLAYER_CONNECTED = CMsgConnectedPlayers_SendReason_PLAYER_CONNECTED;
  static const SendReason PLAYER_HERO = CMsgConnectedPlayers_SendReason_PLAYER_HERO;
  static const SendReason PLAYER_DISCONNECTED_CONSEQUENCES = CMsgConnectedPlayers_SendReason_PLAYER_DISCONNECTED_CONSEQUENCES;
  static const SendReason PLAYER_DISCONNECTED_NOCONSEQUENCES = CMsgConnectedPlayers_SendReason_PLAYER_DISCONNECTED_NOCONSEQUENCES;
  static const SendReason SPECTATOR_COUNT = CMsgConnectedPlayers_SendReason_SPECTATOR_COUNT;
  static const SendReason TOWER_STATE = CMsgConnectedPlayers_SendReason_TOWER_STATE;
  static const SendReason GAMESTATE_TIMEOUT = CMsgConnectedPlayers_SendReason_GAMESTATE_TIMEOUT;
  static const SendReason MASS_DISCONNECT = CMsgConnectedPlayers_SendReason_MASS_DISCONNECT;
  static inline bool SendReason_IsValid(int value) {
    return CMsgConnectedPlayers_SendReason_IsValid(value);
  }
  static const SendReason SendReason_MIN =
    CMsgConnectedPlayers_SendReason_SendReason_MIN;
  static const SendReason SendReason_MAX =
    CMsgConnectedPlayers_SendReason_SendReason_MAX;
  static const int SendReason_ARRAYSIZE =
    CMsgConnectedPlayers_SendReason_SendReason_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SendReason_descriptor() {
    return CMsgConnectedPlayers_SendReason_descriptor();
  }
  static inline const ::std::string& SendReason_Name(SendReason value) {
    return CMsgConnectedPlayers_SendReason_Name(value);
  }
  static inline bool SendReason_Parse(const ::std::string& name,
      SendReason* value) {
    return CMsgConnectedPlayers_SendReason_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated .CMsgConnectedPlayers.Player connected_players = 1;
  inline int connected_players_size() const;
  inline void clear_connected_players();
  static const int kConnectedPlayersFieldNumber = 1;
  inline const ::CMsgConnectedPlayers_Player& connected_players(int index) const;
  inline ::CMsgConnectedPlayers_Player* mutable_connected_players(int index);
  inline ::CMsgConnectedPlayers_Player* add_connected_players();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgConnectedPlayers_Player >&
      connected_players() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgConnectedPlayers_Player >*
      mutable_connected_players();
  
  // repeated .CMsgConnectedPlayers.Player disconnected_players = 7;
  inline int disconnected_players_size() const;
  inline void clear_disconnected_players();
  static const int kDisconnectedPlayersFieldNumber = 7;
  inline const ::CMsgConnectedPlayers_Player& disconnected_players(int index) const;
  inline ::CMsgConnectedPlayers_Player* mutable_disconnected_players(int index);
  inline ::CMsgConnectedPlayers_Player* add_disconnected_players();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgConnectedPlayers_Player >&
      disconnected_players() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgConnectedPlayers_Player >*
      mutable_disconnected_players();
  
  // optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
  inline bool has_game_state() const;
  inline void clear_game_state();
  static const int kGameStateFieldNumber = 2;
  inline DOTA_GameState game_state() const;
  inline void set_game_state(DOTA_GameState value);
  
  // optional uint32 num_spectators = 3;
  inline bool has_num_spectators() const;
  inline void clear_num_spectators();
  static const int kNumSpectatorsFieldNumber = 3;
  inline ::google::protobuf::uint32 num_spectators() const;
  inline void set_num_spectators(::google::protobuf::uint32 value);
  
  // optional uint32 tower_state = 4;
  inline bool has_tower_state() const;
  inline void clear_tower_state();
  static const int kTowerStateFieldNumber = 4;
  inline ::google::protobuf::uint32 tower_state() const;
  inline void set_tower_state(::google::protobuf::uint32 value);
  
  // optional bool first_blood_happened = 6;
  inline bool has_first_blood_happened() const;
  inline void clear_first_blood_happened();
  static const int kFirstBloodHappenedFieldNumber = 6;
  inline bool first_blood_happened() const;
  inline void set_first_blood_happened(bool value);
  
  // optional .CMsgConnectedPlayers.SendReason send_reason = 8 [default = INVALID];
  inline bool has_send_reason() const;
  inline void clear_send_reason();
  static const int kSendReasonFieldNumber = 8;
  inline ::CMsgConnectedPlayers_SendReason send_reason() const;
  inline void set_send_reason(::CMsgConnectedPlayers_SendReason value);
  
  // @@protoc_insertion_point(class_scope:CMsgConnectedPlayers)
 private:
  inline void set_has_game_state();
  inline void clear_has_game_state();
  inline void set_has_num_spectators();
  inline void clear_has_num_spectators();
  inline void set_has_tower_state();
  inline void clear_has_tower_state();
  inline void set_has_first_blood_happened();
  inline void clear_has_first_blood_happened();
  inline void set_has_send_reason();
  inline void clear_has_send_reason();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::CMsgConnectedPlayers_Player > connected_players_;
  ::google::protobuf::RepeatedPtrField< ::CMsgConnectedPlayers_Player > disconnected_players_;
  int game_state_;
  ::google::protobuf::uint32 num_spectators_;
  ::google::protobuf::uint32 tower_state_;
  bool first_blood_happened_;
  int send_reason_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgConnectedPlayers* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGameServerInfo : public ::google::protobuf::Message {
 public:
  CMsgGameServerInfo();
  virtual ~CMsgGameServerInfo();
  
  CMsgGameServerInfo(const CMsgGameServerInfo& from);
  
  inline CMsgGameServerInfo& operator=(const CMsgGameServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGameServerInfo& default_instance();
  
  void Swap(CMsgGameServerInfo* other);
  
  // implements Message ----------------------------------------------
  
  CMsgGameServerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGameServerInfo& from);
  void MergeFrom(const CMsgGameServerInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CMsgGameServerInfo_ServerType ServerType;
  static const ServerType UNSPECIFIED = CMsgGameServerInfo_ServerType_UNSPECIFIED;
  static const ServerType GAME = CMsgGameServerInfo_ServerType_GAME;
  static const ServerType PROXY = CMsgGameServerInfo_ServerType_PROXY;
  static inline bool ServerType_IsValid(int value) {
    return CMsgGameServerInfo_ServerType_IsValid(value);
  }
  static const ServerType ServerType_MIN =
    CMsgGameServerInfo_ServerType_ServerType_MIN;
  static const ServerType ServerType_MAX =
    CMsgGameServerInfo_ServerType_ServerType_MAX;
  static const int ServerType_ARRAYSIZE =
    CMsgGameServerInfo_ServerType_ServerType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ServerType_descriptor() {
    return CMsgGameServerInfo_ServerType_descriptor();
  }
  static inline const ::std::string& ServerType_Name(ServerType value) {
    return CMsgGameServerInfo_ServerType_Name(value);
  }
  static inline bool ServerType_Parse(const ::std::string& name,
      ServerType* value) {
    return CMsgGameServerInfo_ServerType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional fixed32 server_public_ip_addr = 1;
  inline bool has_server_public_ip_addr() const;
  inline void clear_server_public_ip_addr();
  static const int kServerPublicIpAddrFieldNumber = 1;
  inline ::google::protobuf::uint32 server_public_ip_addr() const;
  inline void set_server_public_ip_addr(::google::protobuf::uint32 value);
  
  // optional fixed32 server_private_ip_addr = 2;
  inline bool has_server_private_ip_addr() const;
  inline void clear_server_private_ip_addr();
  static const int kServerPrivateIpAddrFieldNumber = 2;
  inline ::google::protobuf::uint32 server_private_ip_addr() const;
  inline void set_server_private_ip_addr(::google::protobuf::uint32 value);
  
  // optional uint32 server_port = 3;
  inline bool has_server_port() const;
  inline void clear_server_port();
  static const int kServerPortFieldNumber = 3;
  inline ::google::protobuf::uint32 server_port() const;
  inline void set_server_port(::google::protobuf::uint32 value);
  
  // optional uint32 server_tv_port = 4;
  inline bool has_server_tv_port() const;
  inline void clear_server_tv_port();
  static const int kServerTvPortFieldNumber = 4;
  inline ::google::protobuf::uint32 server_tv_port() const;
  inline void set_server_tv_port(::google::protobuf::uint32 value);
  
  // optional string server_key = 5;
  inline bool has_server_key() const;
  inline void clear_server_key();
  static const int kServerKeyFieldNumber = 5;
  inline const ::std::string& server_key() const;
  inline void set_server_key(const ::std::string& value);
  inline void set_server_key(const char* value);
  inline void set_server_key(const char* value, size_t size);
  inline ::std::string* mutable_server_key();
  inline ::std::string* release_server_key();
  
  // optional bool server_hibernation = 6;
  inline bool has_server_hibernation() const;
  inline void clear_server_hibernation();
  static const int kServerHibernationFieldNumber = 6;
  inline bool server_hibernation() const;
  inline void set_server_hibernation(bool value);
  
  // optional .CMsgGameServerInfo.ServerType server_type = 7 [default = UNSPECIFIED];
  inline bool has_server_type() const;
  inline void clear_server_type();
  static const int kServerTypeFieldNumber = 7;
  inline ::CMsgGameServerInfo_ServerType server_type() const;
  inline void set_server_type(::CMsgGameServerInfo_ServerType value);
  
  // optional uint32 server_region = 8;
  inline bool has_server_region() const;
  inline void clear_server_region();
  static const int kServerRegionFieldNumber = 8;
  inline ::google::protobuf::uint32 server_region() const;
  inline void set_server_region(::google::protobuf::uint32 value);
  
  // optional float server_loadavg = 9;
  inline bool has_server_loadavg() const;
  inline void clear_server_loadavg();
  static const int kServerLoadavgFieldNumber = 9;
  inline float server_loadavg() const;
  inline void set_server_loadavg(float value);
  
  // optional float server_tv_broadcast_time = 10;
  inline bool has_server_tv_broadcast_time() const;
  inline void clear_server_tv_broadcast_time();
  static const int kServerTvBroadcastTimeFieldNumber = 10;
  inline float server_tv_broadcast_time() const;
  inline void set_server_tv_broadcast_time(float value);
  
  // optional float server_game_time = 11;
  inline bool has_server_game_time() const;
  inline void clear_server_game_time();
  static const int kServerGameTimeFieldNumber = 11;
  inline float server_game_time() const;
  inline void set_server_game_time(float value);
  
  // optional fixed64 server_relay_connected_steam_id = 12;
  inline bool has_server_relay_connected_steam_id() const;
  inline void clear_server_relay_connected_steam_id();
  static const int kServerRelayConnectedSteamIdFieldNumber = 12;
  inline ::google::protobuf::uint64 server_relay_connected_steam_id() const;
  inline void set_server_relay_connected_steam_id(::google::protobuf::uint64 value);
  
  // optional uint32 relay_slots_max = 13;
  inline bool has_relay_slots_max() const;
  inline void clear_relay_slots_max();
  static const int kRelaySlotsMaxFieldNumber = 13;
  inline ::google::protobuf::uint32 relay_slots_max() const;
  inline void set_relay_slots_max(::google::protobuf::uint32 value);
  
  // optional int32 relays_connected = 14;
  inline bool has_relays_connected() const;
  inline void clear_relays_connected();
  static const int kRelaysConnectedFieldNumber = 14;
  inline ::google::protobuf::int32 relays_connected() const;
  inline void set_relays_connected(::google::protobuf::int32 value);
  
  // optional int32 relay_clients_connected = 15;
  inline bool has_relay_clients_connected() const;
  inline void clear_relay_clients_connected();
  static const int kRelayClientsConnectedFieldNumber = 15;
  inline ::google::protobuf::int32 relay_clients_connected() const;
  inline void set_relay_clients_connected(::google::protobuf::int32 value);
  
  // optional fixed64 relayed_game_server_steam_id = 16;
  inline bool has_relayed_game_server_steam_id() const;
  inline void clear_relayed_game_server_steam_id();
  static const int kRelayedGameServerSteamIdFieldNumber = 16;
  inline ::google::protobuf::uint64 relayed_game_server_steam_id() const;
  inline void set_relayed_game_server_steam_id(::google::protobuf::uint64 value);
  
  // optional uint32 parent_relay_count = 17;
  inline bool has_parent_relay_count() const;
  inline void clear_parent_relay_count();
  static const int kParentRelayCountFieldNumber = 17;
  inline ::google::protobuf::uint32 parent_relay_count() const;
  inline void set_parent_relay_count(::google::protobuf::uint32 value);
  
  // optional fixed64 tv_secret_code = 18;
  inline bool has_tv_secret_code() const;
  inline void clear_tv_secret_code();
  static const int kTvSecretCodeFieldNumber = 18;
  inline ::google::protobuf::uint64 tv_secret_code() const;
  inline void set_tv_secret_code(::google::protobuf::uint64 value);
  
  // optional uint32 server_version = 19;
  inline bool has_server_version() const;
  inline void clear_server_version();
  static const int kServerVersionFieldNumber = 19;
  inline ::google::protobuf::uint32 server_version() const;
  inline void set_server_version(::google::protobuf::uint32 value);
  
  // optional uint32 server_cluster = 20;
  inline bool has_server_cluster() const;
  inline void clear_server_cluster();
  static const int kServerClusterFieldNumber = 20;
  inline ::google::protobuf::uint32 server_cluster() const;
  inline void set_server_cluster(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CMsgGameServerInfo)
 private:
  inline void set_has_server_public_ip_addr();
  inline void clear_has_server_public_ip_addr();
  inline void set_has_server_private_ip_addr();
  inline void clear_has_server_private_ip_addr();
  inline void set_has_server_port();
  inline void clear_has_server_port();
  inline void set_has_server_tv_port();
  inline void clear_has_server_tv_port();
  inline void set_has_server_key();
  inline void clear_has_server_key();
  inline void set_has_server_hibernation();
  inline void clear_has_server_hibernation();
  inline void set_has_server_type();
  inline void clear_has_server_type();
  inline void set_has_server_region();
  inline void clear_has_server_region();
  inline void set_has_server_loadavg();
  inline void clear_has_server_loadavg();
  inline void set_has_server_tv_broadcast_time();
  inline void clear_has_server_tv_broadcast_time();
  inline void set_has_server_game_time();
  inline void clear_has_server_game_time();
  inline void set_has_server_relay_connected_steam_id();
  inline void clear_has_server_relay_connected_steam_id();
  inline void set_has_relay_slots_max();
  inline void clear_has_relay_slots_max();
  inline void set_has_relays_connected();
  inline void clear_has_relays_connected();
  inline void set_has_relay_clients_connected();
  inline void clear_has_relay_clients_connected();
  inline void set_has_relayed_game_server_steam_id();
  inline void clear_has_relayed_game_server_steam_id();
  inline void set_has_parent_relay_count();
  inline void clear_has_parent_relay_count();
  inline void set_has_tv_secret_code();
  inline void clear_has_tv_secret_code();
  inline void set_has_server_version();
  inline void clear_has_server_version();
  inline void set_has_server_cluster();
  inline void clear_has_server_cluster();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 server_public_ip_addr_;
  ::google::protobuf::uint32 server_private_ip_addr_;
  ::google::protobuf::uint32 server_port_;
  ::google::protobuf::uint32 server_tv_port_;
  ::std::string* server_key_;
  bool server_hibernation_;
  int server_type_;
  ::google::protobuf::uint32 server_region_;
  float server_loadavg_;
  float server_tv_broadcast_time_;
  float server_game_time_;
  ::google::protobuf::uint64 server_relay_connected_steam_id_;
  ::google::protobuf::uint32 relay_slots_max_;
  ::google::protobuf::int32 relays_connected_;
  ::google::protobuf::uint64 relayed_game_server_steam_id_;
  ::google::protobuf::int32 relay_clients_connected_;
  ::google::protobuf::uint32 parent_relay_count_;
  ::google::protobuf::uint64 tv_secret_code_;
  ::google::protobuf::uint32 server_version_;
  ::google::protobuf::uint32 server_cluster_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(20 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgGameServerInfo* default_instance_;
};
// -------------------------------------------------------------------

class CMsgLeaverDetected : public ::google::protobuf::Message {
 public:
  CMsgLeaverDetected();
  virtual ~CMsgLeaverDetected();
  
  CMsgLeaverDetected(const CMsgLeaverDetected& from);
  
  inline CMsgLeaverDetected& operator=(const CMsgLeaverDetected& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgLeaverDetected& default_instance();
  
  void Swap(CMsgLeaverDetected* other);
  
  // implements Message ----------------------------------------------
  
  CMsgLeaverDetected* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgLeaverDetected& from);
  void MergeFrom(const CMsgLeaverDetected& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional fixed64 steam_id = 1;
  inline bool has_steam_id() const;
  inline void clear_steam_id();
  static const int kSteamIdFieldNumber = 1;
  inline ::google::protobuf::uint64 steam_id() const;
  inline void set_steam_id(::google::protobuf::uint64 value);
  
  // optional .DOTALeaverStatus_t leaver_status = 2 [default = DOTA_LEAVER_NONE];
  inline bool has_leaver_status() const;
  inline void clear_leaver_status();
  static const int kLeaverStatusFieldNumber = 2;
  inline DOTALeaverStatus_t leaver_status() const;
  inline void set_leaver_status(DOTALeaverStatus_t value);
  
  // optional bool obsolete_mass_disconnect = 3;
  inline bool has_obsolete_mass_disconnect() const;
  inline void clear_obsolete_mass_disconnect();
  static const int kObsoleteMassDisconnectFieldNumber = 3;
  inline bool obsolete_mass_disconnect() const;
  inline void set_obsolete_mass_disconnect(bool value);
  
  // optional .CMsgLeaverState leaver_state = 4;
  inline bool has_leaver_state() const;
  inline void clear_leaver_state();
  static const int kLeaverStateFieldNumber = 4;
  inline const ::CMsgLeaverState& leaver_state() const;
  inline ::CMsgLeaverState* mutable_leaver_state();
  inline ::CMsgLeaverState* release_leaver_state();
  
  // optional uint32 server_cluster = 5;
  inline bool has_server_cluster() const;
  inline void clear_server_cluster();
  static const int kServerClusterFieldNumber = 5;
  inline ::google::protobuf::uint32 server_cluster() const;
  inline void set_server_cluster(::google::protobuf::uint32 value);
  
  // optional .ENetworkDisconnectionReason disconnect_reason = 6 [default = NETWORK_DISCONNECT_INVALID];
  inline bool has_disconnect_reason() const;
  inline void clear_disconnect_reason();
  static const int kDisconnectReasonFieldNumber = 6;
  inline ENetworkDisconnectionReason disconnect_reason() const;
  inline void set_disconnect_reason(ENetworkDisconnectionReason value);
  
  // @@protoc_insertion_point(class_scope:CMsgLeaverDetected)
 private:
  inline void set_has_steam_id();
  inline void clear_has_steam_id();
  inline void set_has_leaver_status();
  inline void clear_has_leaver_status();
  inline void set_has_obsolete_mass_disconnect();
  inline void clear_has_obsolete_mass_disconnect();
  inline void set_has_leaver_state();
  inline void clear_has_leaver_state();
  inline void set_has_server_cluster();
  inline void clear_has_server_cluster();
  inline void set_has_disconnect_reason();
  inline void clear_has_disconnect_reason();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 steam_id_;
  int leaver_status_;
  bool obsolete_mass_disconnect_;
  ::CMsgLeaverState* leaver_state_;
  ::google::protobuf::uint32 server_cluster_;
  int disconnect_reason_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgLeaverDetected* default_instance_;
};
// -------------------------------------------------------------------

class CMsgLeaverDetectedResponse : public ::google::protobuf::Message {
 public:
  CMsgLeaverDetectedResponse();
  virtual ~CMsgLeaverDetectedResponse();
  
  CMsgLeaverDetectedResponse(const CMsgLeaverDetectedResponse& from);
  
  inline CMsgLeaverDetectedResponse& operator=(const CMsgLeaverDetectedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgLeaverDetectedResponse& default_instance();
  
  void Swap(CMsgLeaverDetectedResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMsgLeaverDetectedResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgLeaverDetectedResponse& from);
  void MergeFrom(const CMsgLeaverDetectedResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CMsgLeaverDetectedResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 result_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgLeaverDetectedResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyPlayerStats : public ::google::protobuf::Message {
 public:
  CMsgDOTAFantasyPlayerStats();
  virtual ~CMsgDOTAFantasyPlayerStats();
  
  CMsgDOTAFantasyPlayerStats(const CMsgDOTAFantasyPlayerStats& from);
  
  inline CMsgDOTAFantasyPlayerStats& operator=(const CMsgDOTAFantasyPlayerStats& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAFantasyPlayerStats& default_instance();
  
  void Swap(CMsgDOTAFantasyPlayerStats* other);
  
  // implements Message ----------------------------------------------
  
  CMsgDOTAFantasyPlayerStats* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAFantasyPlayerStats& from);
  void MergeFrom(const CMsgDOTAFantasyPlayerStats& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 player_account_id = 1;
  inline bool has_player_account_id() const;
  inline void clear_player_account_id();
  static const int kPlayerAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 player_account_id() const;
  inline void set_player_account_id(::google::protobuf::uint32 value);
  
  // optional uint32 match_id = 2;
  inline bool has_match_id() const;
  inline void clear_match_id();
  static const int kMatchIdFieldNumber = 2;
  inline ::google::protobuf::uint32 match_id() const;
  inline void set_match_id(::google::protobuf::uint32 value);
  
  // optional bool match_completed = 3;
  inline bool has_match_completed() const;
  inline void clear_match_completed();
  static const int kMatchCompletedFieldNumber = 3;
  inline bool match_completed() const;
  inline void set_match_completed(bool value);
  
  // optional uint32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);
  
  // optional uint32 kills = 5;
  inline bool has_kills() const;
  inline void clear_kills();
  static const int kKillsFieldNumber = 5;
  inline ::google::protobuf::uint32 kills() const;
  inline void set_kills(::google::protobuf::uint32 value);
  
  // optional uint32 deaths = 6;
  inline bool has_deaths() const;
  inline void clear_deaths();
  static const int kDeathsFieldNumber = 6;
  inline ::google::protobuf::uint32 deaths() const;
  inline void set_deaths(::google::protobuf::uint32 value);
  
  // optional uint32 assists = 7;
  inline bool has_assists() const;
  inline void clear_assists();
  static const int kAssistsFieldNumber = 7;
  inline ::google::protobuf::uint32 assists() const;
  inline void set_assists(::google::protobuf::uint32 value);
  
  // optional uint32 last_hits = 8;
  inline bool has_last_hits() const;
  inline void clear_last_hits();
  static const int kLastHitsFieldNumber = 8;
  inline ::google::protobuf::uint32 last_hits() const;
  inline void set_last_hits(::google::protobuf::uint32 value);
  
  // optional uint32 denies = 9;
  inline bool has_denies() const;
  inline void clear_denies();
  static const int kDeniesFieldNumber = 9;
  inline ::google::protobuf::uint32 denies() const;
  inline void set_denies(::google::protobuf::uint32 value);
  
  // optional float gpm = 10;
  inline bool has_gpm() const;
  inline void clear_gpm();
  static const int kGpmFieldNumber = 10;
  inline float gpm() const;
  inline void set_gpm(float value);
  
  // optional float xppm = 11;
  inline bool has_xppm() const;
  inline void clear_xppm();
  static const int kXppmFieldNumber = 11;
  inline float xppm() const;
  inline void set_xppm(float value);
  
  // optional float stuns = 12;
  inline bool has_stuns() const;
  inline void clear_stuns();
  static const int kStunsFieldNumber = 12;
  inline float stuns() const;
  inline void set_stuns(float value);
  
  // optional float healing = 13;
  inline bool has_healing() const;
  inline void clear_healing();
  static const int kHealingFieldNumber = 13;
  inline float healing() const;
  inline void set_healing(float value);
  
  // optional uint32 tower_kills = 14;
  inline bool has_tower_kills() const;
  inline void clear_tower_kills();
  static const int kTowerKillsFieldNumber = 14;
  inline ::google::protobuf::uint32 tower_kills() const;
  inline void set_tower_kills(::google::protobuf::uint32 value);
  
  // optional uint32 roshan_kills = 15;
  inline bool has_roshan_kills() const;
  inline void clear_roshan_kills();
  static const int kRoshanKillsFieldNumber = 15;
  inline ::google::protobuf::uint32 roshan_kills() const;
  inline void set_roshan_kills(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyPlayerStats)
 private:
  inline void set_has_player_account_id();
  inline void clear_has_player_account_id();
  inline void set_has_match_id();
  inline void clear_has_match_id();
  inline void set_has_match_completed();
  inline void clear_has_match_completed();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_kills();
  inline void clear_has_kills();
  inline void set_has_deaths();
  inline void clear_has_deaths();
  inline void set_has_assists();
  inline void clear_has_assists();
  inline void set_has_last_hits();
  inline void clear_has_last_hits();
  inline void set_has_denies();
  inline void clear_has_denies();
  inline void set_has_gpm();
  inline void clear_has_gpm();
  inline void set_has_xppm();
  inline void clear_has_xppm();
  inline void set_has_stuns();
  inline void clear_has_stuns();
  inline void set_has_healing();
  inline void clear_has_healing();
  inline void set_has_tower_kills();
  inline void clear_has_tower_kills();
  inline void set_has_roshan_kills();
  inline void clear_has_roshan_kills();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 player_account_id_;
  ::google::protobuf::uint32 match_id_;
  bool match_completed_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 kills_;
  ::google::protobuf::uint32 deaths_;
  ::google::protobuf::uint32 assists_;
  ::google::protobuf::uint32 last_hits_;
  ::google::protobuf::uint32 denies_;
  float gpm_;
  float xppm_;
  float stuns_;
  float healing_;
  ::google::protobuf::uint32 tower_kills_;
  ::google::protobuf::uint32 roshan_kills_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgDOTAFantasyPlayerStats* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGameMatchSignOut_CTeam_CPlayer : public ::google::protobuf::Message {
 public:
  CMsgGameMatchSignOut_CTeam_CPlayer();
  virtual ~CMsgGameMatchSignOut_CTeam_CPlayer();
  
  CMsgGameMatchSignOut_CTeam_CPlayer(const CMsgGameMatchSignOut_CTeam_CPlayer& from);
  
  inline CMsgGameMatchSignOut_CTeam_CPlayer& operator=(const CMsgGameMatchSignOut_CTeam_CPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGameMatchSignOut_CTeam_CPlayer& default_instance();
  
  void Swap(CMsgGameMatchSignOut_CTeam_CPlayer* other);
  
  // implements Message ----------------------------------------------
  
  CMsgGameMatchSignOut_CTeam_CPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGameMatchSignOut_CTeam_CPlayer& from);
  void MergeFrom(const CMsgGameMatchSignOut_CTeam_CPlayer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional fixed64 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint64 account_id() const;
  inline void set_account_id(::google::protobuf::uint64 value);
  
  // optional uint32 hero_id = 3;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 3;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);
  
  // repeated uint32 items = 4;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 4;
  inline ::google::protobuf::uint32 items(int index) const;
  inline void set_items(int index, ::google::protobuf::uint32 value);
  inline void add_items(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      items() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_items();
  
  // optional uint32 gold = 5;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 5;
  inline ::google::protobuf::uint32 gold() const;
  inline void set_gold(::google::protobuf::uint32 value);
  
  // optional uint32 kills = 6;
  inline bool has_kills() const;
  inline void clear_kills();
  static const int kKillsFieldNumber = 6;
  inline ::google::protobuf::uint32 kills() const;
  inline void set_kills(::google::protobuf::uint32 value);
  
  // optional uint32 deaths = 7;
  inline bool has_deaths() const;
  inline void clear_deaths();
  static const int kDeathsFieldNumber = 7;
  inline ::google::protobuf::uint32 deaths() const;
  inline void set_deaths(::google::protobuf::uint32 value);
  
  // optional uint32 assists = 8;
  inline bool has_assists() const;
  inline void clear_assists();
  static const int kAssistsFieldNumber = 8;
  inline ::google::protobuf::uint32 assists() const;
  inline void set_assists(::google::protobuf::uint32 value);
  
  // optional uint32 leaver_status = 9;
  inline bool has_leaver_status() const;
  inline void clear_leaver_status();
  static const int kLeaverStatusFieldNumber = 9;
  inline ::google::protobuf::uint32 leaver_status() const;
  inline void set_leaver_status(::google::protobuf::uint32 value);
  
  // optional uint32 last_hits = 10;
  inline bool has_last_hits() const;
  inline void clear_last_hits();
  static const int kLastHitsFieldNumber = 10;
  inline ::google::protobuf::uint32 last_hits() const;
  inline void set_last_hits(::google::protobuf::uint32 value);
  
  // optional uint32 denies = 11;
  inline bool has_denies() const;
  inline void clear_denies();
  static const int kDeniesFieldNumber = 11;
  inline ::google::protobuf::uint32 denies() const;
  inline void set_denies(::google::protobuf::uint32 value);
  
  // optional uint32 gold_per_min = 12;
  inline bool has_gold_per_min() const;
  inline void clear_gold_per_min();
  static const int kGoldPerMinFieldNumber = 12;
  inline ::google::protobuf::uint32 gold_per_min() const;
  inline void set_gold_per_min(::google::protobuf::uint32 value);
  
  // optional uint32 xp_per_minute = 13;
  inline bool has_xp_per_minute() const;
  inline void clear_xp_per_minute();
  static const int kXpPerMinuteFieldNumber = 13;
  inline ::google::protobuf::uint32 xp_per_minute() const;
  inline void set_xp_per_minute(::google::protobuf::uint32 value);
  
  // optional uint32 gold_spent = 14;
  inline bool has_gold_spent() const;
  inline void clear_gold_spent();
  static const int kGoldSpentFieldNumber = 14;
  inline ::google::protobuf::uint32 gold_spent() const;
  inline void set_gold_spent(::google::protobuf::uint32 value);
  
  // optional uint32 level = 15;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 15;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);
  
  // optional uint32 hero_damage = 16;
  inline bool has_hero_damage() const;
  inline void clear_hero_damage();
  static const int kHeroDamageFieldNumber = 16;
  inline ::google::protobuf::uint32 hero_damage() const;
  inline void set_hero_damage(::google::protobuf::uint32 value);
  
  // optional uint32 tower_damage = 17;
  inline bool has_tower_damage() const;
  inline void clear_tower_damage();
  static const int kTowerDamageFieldNumber = 17;
  inline ::google::protobuf::uint32 tower_damage() const;
  inline void set_tower_damage(::google::protobuf::uint32 value);
  
  // optional uint32 hero_healing = 18;
  inline bool has_hero_healing() const;
  inline void clear_hero_healing();
  static const int kHeroHealingFieldNumber = 18;
  inline ::google::protobuf::uint32 hero_healing() const;
  inline void set_hero_healing(::google::protobuf::uint32 value);
  
  // optional uint32 time_last_seen = 19;
  inline bool has_time_last_seen() const;
  inline void clear_time_last_seen();
  static const int kTimeLastSeenFieldNumber = 19;
  inline ::google::protobuf::uint32 time_last_seen() const;
  inline void set_time_last_seen(::google::protobuf::uint32 value);
  
  // optional uint32 support_ability_value = 20;
  inline bool has_support_ability_value() const;
  inline void clear_support_ability_value();
  static const int kSupportAbilityValueFieldNumber = 20;
  inline ::google::protobuf::uint32 support_ability_value() const;
  inline void set_support_ability_value(::google::protobuf::uint32 value);
  
  // optional uint64 party_id = 21;
  inline bool has_party_id() const;
  inline void clear_party_id();
  static const int kPartyIdFieldNumber = 21;
  inline ::google::protobuf::uint64 party_id() const;
  inline void set_party_id(::google::protobuf::uint64 value);
  
  // optional float scaled_kills = 24;
  inline bool has_scaled_kills() const;
  inline void clear_scaled_kills();
  static const int kScaledKillsFieldNumber = 24;
  inline float scaled_kills() const;
  inline void set_scaled_kills(float value);
  
  // optional float scaled_deaths = 25;
  inline bool has_scaled_deaths() const;
  inline void clear_scaled_deaths();
  static const int kScaledDeathsFieldNumber = 25;
  inline float scaled_deaths() const;
  inline void set_scaled_deaths(float value);
  
  // optional float scaled_assists = 26;
  inline bool has_scaled_assists() const;
  inline void clear_scaled_assists();
  static const int kScaledAssistsFieldNumber = 26;
  inline float scaled_assists() const;
  inline void set_scaled_assists(float value);
  
  // optional uint32 claimed_farm_gold = 27;
  inline bool has_claimed_farm_gold() const;
  inline void clear_claimed_farm_gold();
  static const int kClaimedFarmGoldFieldNumber = 27;
  inline ::google::protobuf::uint32 claimed_farm_gold() const;
  inline void set_claimed_farm_gold(::google::protobuf::uint32 value);
  
  // optional uint32 support_gold = 28;
  inline bool has_support_gold() const;
  inline void clear_support_gold();
  static const int kSupportGoldFieldNumber = 28;
  inline ::google::protobuf::uint32 support_gold() const;
  inline void set_support_gold(::google::protobuf::uint32 value);
  
  // optional uint32 claimed_denies = 29;
  inline bool has_claimed_denies() const;
  inline void clear_claimed_denies();
  static const int kClaimedDeniesFieldNumber = 29;
  inline ::google::protobuf::uint32 claimed_denies() const;
  inline void set_claimed_denies(::google::protobuf::uint32 value);
  
  // optional uint32 claimed_misses = 30;
  inline bool has_claimed_misses() const;
  inline void clear_claimed_misses();
  static const int kClaimedMissesFieldNumber = 30;
  inline ::google::protobuf::uint32 claimed_misses() const;
  inline void set_claimed_misses(::google::protobuf::uint32 value);
  
  // optional uint32 misses = 31;
  inline bool has_misses() const;
  inline void clear_misses();
  static const int kMissesFieldNumber = 31;
  inline ::google::protobuf::uint32 misses() const;
  inline void set_misses(::google::protobuf::uint32 value);
  
  // repeated .CMatchPlayerAbilityUpgrade ability_upgrades = 32;
  inline int ability_upgrades_size() const;
  inline void clear_ability_upgrades();
  static const int kAbilityUpgradesFieldNumber = 32;
  inline const ::CMatchPlayerAbilityUpgrade& ability_upgrades(int index) const;
  inline ::CMatchPlayerAbilityUpgrade* mutable_ability_upgrades(int index);
  inline ::CMatchPlayerAbilityUpgrade* add_ability_upgrades();
  inline const ::google::protobuf::RepeatedPtrField< ::CMatchPlayerAbilityUpgrade >&
      ability_upgrades() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMatchPlayerAbilityUpgrade >*
      mutable_ability_upgrades();
  
  // repeated .CMatchAdditionalUnitInventory additional_units_inventory = 33;
  inline int additional_units_inventory_size() const;
  inline void clear_additional_units_inventory();
  static const int kAdditionalUnitsInventoryFieldNumber = 33;
  inline const ::CMatchAdditionalUnitInventory& additional_units_inventory(int index) const;
  inline ::CMatchAdditionalUnitInventory* mutable_additional_units_inventory(int index);
  inline ::CMatchAdditionalUnitInventory* add_additional_units_inventory();
  inline const ::google::protobuf::RepeatedPtrField< ::CMatchAdditionalUnitInventory >&
      additional_units_inventory() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMatchAdditionalUnitInventory >*
      mutable_additional_units_inventory();
  
  // @@protoc_insertion_point(class_scope:CMsgGameMatchSignOut.CTeam.CPlayer)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_kills();
  inline void clear_has_kills();
  inline void set_has_deaths();
  inline void clear_has_deaths();
  inline void set_has_assists();
  inline void clear_has_assists();
  inline void set_has_leaver_status();
  inline void clear_has_leaver_status();
  inline void set_has_last_hits();
  inline void clear_has_last_hits();
  inline void set_has_denies();
  inline void clear_has_denies();
  inline void set_has_gold_per_min();
  inline void clear_has_gold_per_min();
  inline void set_has_xp_per_minute();
  inline void clear_has_xp_per_minute();
  inline void set_has_gold_spent();
  inline void clear_has_gold_spent();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_hero_damage();
  inline void clear_has_hero_damage();
  inline void set_has_tower_damage();
  inline void clear_has_tower_damage();
  inline void set_has_hero_healing();
  inline void clear_has_hero_healing();
  inline void set_has_time_last_seen();
  inline void clear_has_time_last_seen();
  inline void set_has_support_ability_value();
  inline void clear_has_support_ability_value();
  inline void set_has_party_id();
  inline void clear_has_party_id();
  inline void set_has_scaled_kills();
  inline void clear_has_scaled_kills();
  inline void set_has_scaled_deaths();
  inline void clear_has_scaled_deaths();
  inline void set_has_scaled_assists();
  inline void clear_has_scaled_assists();
  inline void set_has_claimed_farm_gold();
  inline void clear_has_claimed_farm_gold();
  inline void set_has_support_gold();
  inline void clear_has_support_gold();
  inline void set_has_claimed_denies();
  inline void clear_has_claimed_denies();
  inline void set_has_claimed_misses();
  inline void clear_has_claimed_misses();
  inline void set_has_misses();
  inline void clear_has_misses();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 account_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > items_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 gold_;
  ::google::protobuf::uint32 kills_;
  ::google::protobuf::uint32 deaths_;
  ::google::protobuf::uint32 assists_;
  ::google::protobuf::uint32 leaver_status_;
  ::google::protobuf::uint32 last_hits_;
  ::google::protobuf::uint32 denies_;
  ::google::protobuf::uint32 gold_per_min_;
  ::google::protobuf::uint32 xp_per_minute_;
  ::google::protobuf::uint32 gold_spent_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 hero_damage_;
  ::google::protobuf::uint32 tower_damage_;
  ::google::protobuf::uint32 hero_healing_;
  ::google::protobuf::uint32 time_last_seen_;
  ::google::protobuf::uint64 party_id_;
  ::google::protobuf::uint32 support_ability_value_;
  float scaled_kills_;
  float scaled_deaths_;
  float scaled_assists_;
  ::google::protobuf::uint32 claimed_farm_gold_;
  ::google::protobuf::uint32 support_gold_;
  ::google::protobuf::uint32 claimed_denies_;
  ::google::protobuf::uint32 claimed_misses_;
  ::google::protobuf::RepeatedPtrField< ::CMatchPlayerAbilityUpgrade > ability_upgrades_;
  ::google::protobuf::RepeatedPtrField< ::CMatchAdditionalUnitInventory > additional_units_inventory_;
  ::google::protobuf::uint32 misses_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(30 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgGameMatchSignOut_CTeam_CPlayer* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGameMatchSignOut_CTeam : public ::google::protobuf::Message {
 public:
  CMsgGameMatchSignOut_CTeam();
  virtual ~CMsgGameMatchSignOut_CTeam();
  
  CMsgGameMatchSignOut_CTeam(const CMsgGameMatchSignOut_CTeam& from);
  
  inline CMsgGameMatchSignOut_CTeam& operator=(const CMsgGameMatchSignOut_CTeam& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGameMatchSignOut_CTeam& default_instance();
  
  void Swap(CMsgGameMatchSignOut_CTeam* other);
  
  // implements Message ----------------------------------------------
  
  CMsgGameMatchSignOut_CTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGameMatchSignOut_CTeam& from);
  void MergeFrom(const CMsgGameMatchSignOut_CTeam& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CMsgGameMatchSignOut_CTeam_CPlayer CPlayer;
  
  // accessors -------------------------------------------------------
  
  // repeated .CMsgGameMatchSignOut.CTeam.CPlayer players = 1;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 1;
  inline const ::CMsgGameMatchSignOut_CTeam_CPlayer& players(int index) const;
  inline ::CMsgGameMatchSignOut_CTeam_CPlayer* mutable_players(int index);
  inline ::CMsgGameMatchSignOut_CTeam_CPlayer* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgGameMatchSignOut_CTeam_CPlayer >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgGameMatchSignOut_CTeam_CPlayer >*
      mutable_players();
  
  // @@protoc_insertion_point(class_scope:CMsgGameMatchSignOut.CTeam)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::CMsgGameMatchSignOut_CTeam_CPlayer > players_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgGameMatchSignOut_CTeam* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGameMatchSignOut_CAdditionalSignoutMsg : public ::google::protobuf::Message {
 public:
  CMsgGameMatchSignOut_CAdditionalSignoutMsg();
  virtual ~CMsgGameMatchSignOut_CAdditionalSignoutMsg();
  
  CMsgGameMatchSignOut_CAdditionalSignoutMsg(const CMsgGameMatchSignOut_CAdditionalSignoutMsg& from);
  
  inline CMsgGameMatchSignOut_CAdditionalSignoutMsg& operator=(const CMsgGameMatchSignOut_CAdditionalSignoutMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGameMatchSignOut_CAdditionalSignoutMsg& default_instance();
  
  void Swap(CMsgGameMatchSignOut_CAdditionalSignoutMsg* other);
  
  // implements Message ----------------------------------------------
  
  CMsgGameMatchSignOut_CAdditionalSignoutMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGameMatchSignOut_CAdditionalSignoutMsg& from);
  void MergeFrom(const CMsgGameMatchSignOut_CAdditionalSignoutMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // optional bytes contents = 2;
  inline bool has_contents() const;
  inline void clear_contents();
  static const int kContentsFieldNumber = 2;
  inline const ::std::string& contents() const;
  inline void set_contents(const ::std::string& value);
  inline void set_contents(const char* value);
  inline void set_contents(const void* value, size_t size);
  inline ::std::string* mutable_contents();
  inline ::std::string* release_contents();
  
  // @@protoc_insertion_point(class_scope:CMsgGameMatchSignOut.CAdditionalSignoutMsg)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_contents();
  inline void clear_has_contents();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* contents_;
  ::google::protobuf::uint32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgGameMatchSignOut_CAdditionalSignoutMsg* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGameMatchSignOut : public ::google::protobuf::Message {
 public:
  CMsgGameMatchSignOut();
  virtual ~CMsgGameMatchSignOut();
  
  CMsgGameMatchSignOut(const CMsgGameMatchSignOut& from);
  
  inline CMsgGameMatchSignOut& operator=(const CMsgGameMatchSignOut& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGameMatchSignOut& default_instance();
  
  void Swap(CMsgGameMatchSignOut* other);
  
  // implements Message ----------------------------------------------
  
  CMsgGameMatchSignOut* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGameMatchSignOut& from);
  void MergeFrom(const CMsgGameMatchSignOut& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CMsgGameMatchSignOut_CTeam CTeam;
  typedef CMsgGameMatchSignOut_CAdditionalSignoutMsg CAdditionalSignoutMsg;
  
  // accessors -------------------------------------------------------
  
  // optional uint32 match_id = 1;
  inline bool has_match_id() const;
  inline void clear_match_id();
  static const int kMatchIdFieldNumber = 1;
  inline ::google::protobuf::uint32 match_id() const;
  inline void set_match_id(::google::protobuf::uint32 value);
  
  // optional uint32 duration = 2;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 2;
  inline ::google::protobuf::uint32 duration() const;
  inline void set_duration(::google::protobuf::uint32 value);
  
  // optional bool good_guys_win = 3;
  inline bool has_good_guys_win() const;
  inline void clear_good_guys_win();
  static const int kGoodGuysWinFieldNumber = 3;
  inline bool good_guys_win() const;
  inline void set_good_guys_win(bool value);
  
  // optional fixed32 date = 4;
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 4;
  inline ::google::protobuf::uint32 date() const;
  inline void set_date(::google::protobuf::uint32 value);
  
  // repeated uint32 num_players = 5;
  inline int num_players_size() const;
  inline void clear_num_players();
  static const int kNumPlayersFieldNumber = 5;
  inline ::google::protobuf::uint32 num_players(int index) const;
  inline void set_num_players(int index, ::google::protobuf::uint32 value);
  inline void add_num_players(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      num_players() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_num_players();
  
  // repeated .CMsgGameMatchSignOut.CTeam teams = 6;
  inline int teams_size() const;
  inline void clear_teams();
  static const int kTeamsFieldNumber = 6;
  inline const ::CMsgGameMatchSignOut_CTeam& teams(int index) const;
  inline ::CMsgGameMatchSignOut_CTeam* mutable_teams(int index);
  inline ::CMsgGameMatchSignOut_CTeam* add_teams();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgGameMatchSignOut_CTeam >&
      teams() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgGameMatchSignOut_CTeam >*
      mutable_teams();
  
  // repeated uint32 tower_status = 8;
  inline int tower_status_size() const;
  inline void clear_tower_status();
  static const int kTowerStatusFieldNumber = 8;
  inline ::google::protobuf::uint32 tower_status(int index) const;
  inline void set_tower_status(int index, ::google::protobuf::uint32 value);
  inline void add_tower_status(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      tower_status() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_tower_status();
  
  // repeated uint32 barracks_status = 9;
  inline int barracks_status_size() const;
  inline void clear_barracks_status();
  static const int kBarracksStatusFieldNumber = 9;
  inline ::google::protobuf::uint32 barracks_status(int index) const;
  inline void set_barracks_status(int index, ::google::protobuf::uint32 value);
  inline void add_barracks_status(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      barracks_status() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_barracks_status();
  
  // optional uint32 cluster = 10;
  inline bool has_cluster() const;
  inline void clear_cluster();
  static const int kClusterFieldNumber = 10;
  inline ::google::protobuf::uint32 cluster() const;
  inline void set_cluster(::google::protobuf::uint32 value);
  
  // optional string server_addr = 11;
  inline bool has_server_addr() const;
  inline void clear_server_addr();
  static const int kServerAddrFieldNumber = 11;
  inline const ::std::string& server_addr() const;
  inline void set_server_addr(const ::std::string& value);
  inline void set_server_addr(const char* value);
  inline void set_server_addr(const char* value, size_t size);
  inline ::std::string* mutable_server_addr();
  inline ::std::string* release_server_addr();
  
  // optional uint32 first_blood_time = 12;
  inline bool has_first_blood_time() const;
  inline void clear_first_blood_time();
  static const int kFirstBloodTimeFieldNumber = 12;
  inline ::google::protobuf::uint32 first_blood_time() const;
  inline void set_first_blood_time(::google::protobuf::uint32 value);
  
  // optional float game_balance = 13;
  inline bool has_game_balance() const;
  inline void clear_game_balance();
  static const int kGameBalanceFieldNumber = 13;
  inline float game_balance() const;
  inline void set_game_balance(float value);
  
  // optional uint32 event_score = 14;
  inline bool has_event_score() const;
  inline void clear_event_score();
  static const int kEventScoreFieldNumber = 14;
  inline ::google::protobuf::uint32 event_score() const;
  inline void set_event_score(::google::protobuf::uint32 value);
  
  // repeated .CMatchHeroSelectEvent picks_bans = 15;
  inline int picks_bans_size() const;
  inline void clear_picks_bans();
  static const int kPicksBansFieldNumber = 15;
  inline const ::CMatchHeroSelectEvent& picks_bans(int index) const;
  inline ::CMatchHeroSelectEvent* mutable_picks_bans(int index);
  inline ::CMatchHeroSelectEvent* add_picks_bans();
  inline const ::google::protobuf::RepeatedPtrField< ::CMatchHeroSelectEvent >&
      picks_bans() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMatchHeroSelectEvent >*
      mutable_picks_bans();
  
  // repeated .CMsgDOTAFantasyPlayerStats fantasy_stats = 16;
  inline int fantasy_stats_size() const;
  inline void clear_fantasy_stats();
  static const int kFantasyStatsFieldNumber = 16;
  inline const ::CMsgDOTAFantasyPlayerStats& fantasy_stats(int index) const;
  inline ::CMsgDOTAFantasyPlayerStats* mutable_fantasy_stats(int index);
  inline ::CMsgDOTAFantasyPlayerStats* add_fantasy_stats();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAFantasyPlayerStats >&
      fantasy_stats() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAFantasyPlayerStats >*
      mutable_fantasy_stats();
  
  // repeated .CMsgEconPlayerStrangeCountAdjustment player_strange_count_adjustments = 17;
  inline int player_strange_count_adjustments_size() const;
  inline void clear_player_strange_count_adjustments();
  static const int kPlayerStrangeCountAdjustmentsFieldNumber = 17;
  inline const ::CMsgEconPlayerStrangeCountAdjustment& player_strange_count_adjustments(int index) const;
  inline ::CMsgEconPlayerStrangeCountAdjustment* mutable_player_strange_count_adjustments(int index);
  inline ::CMsgEconPlayerStrangeCountAdjustment* add_player_strange_count_adjustments();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgEconPlayerStrangeCountAdjustment >&
      player_strange_count_adjustments() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgEconPlayerStrangeCountAdjustment >*
      mutable_player_strange_count_adjustments();
  
  // optional bool automatic_surrender = 18;
  inline bool has_automatic_surrender() const;
  inline void clear_automatic_surrender();
  static const int kAutomaticSurrenderFieldNumber = 18;
  inline bool automatic_surrender() const;
  inline void set_automatic_surrender(bool value);
  
  // optional uint32 server_version = 19;
  inline bool has_server_version() const;
  inline void clear_server_version();
  static const int kServerVersionFieldNumber = 19;
  inline ::google::protobuf::uint32 server_version() const;
  inline void set_server_version(::google::protobuf::uint32 value);
  
  // optional bool mass_disconnect = 21;
  inline bool has_mass_disconnect() const;
  inline void clear_mass_disconnect();
  static const int kMassDisconnectFieldNumber = 21;
  inline bool mass_disconnect() const;
  inline void set_mass_disconnect(bool value);
  
  // repeated .CMsgGameMatchSignOut.CAdditionalSignoutMsg additional_msgs = 20;
  inline int additional_msgs_size() const;
  inline void clear_additional_msgs();
  static const int kAdditionalMsgsFieldNumber = 20;
  inline const ::CMsgGameMatchSignOut_CAdditionalSignoutMsg& additional_msgs(int index) const;
  inline ::CMsgGameMatchSignOut_CAdditionalSignoutMsg* mutable_additional_msgs(int index);
  inline ::CMsgGameMatchSignOut_CAdditionalSignoutMsg* add_additional_msgs();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgGameMatchSignOut_CAdditionalSignoutMsg >&
      additional_msgs() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgGameMatchSignOut_CAdditionalSignoutMsg >*
      mutable_additional_msgs();
  
  // @@protoc_insertion_point(class_scope:CMsgGameMatchSignOut)
 private:
  inline void set_has_match_id();
  inline void clear_has_match_id();
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_good_guys_win();
  inline void clear_has_good_guys_win();
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_cluster();
  inline void clear_has_cluster();
  inline void set_has_server_addr();
  inline void clear_has_server_addr();
  inline void set_has_first_blood_time();
  inline void clear_has_first_blood_time();
  inline void set_has_game_balance();
  inline void clear_has_game_balance();
  inline void set_has_event_score();
  inline void clear_has_event_score();
  inline void set_has_automatic_surrender();
  inline void clear_has_automatic_surrender();
  inline void set_has_server_version();
  inline void clear_has_server_version();
  inline void set_has_mass_disconnect();
  inline void clear_has_mass_disconnect();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 match_id_;
  ::google::protobuf::uint32 duration_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > num_players_;
  ::google::protobuf::RepeatedPtrField< ::CMsgGameMatchSignOut_CTeam > teams_;
  ::google::protobuf::uint32 date_;
  ::google::protobuf::uint32 cluster_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > tower_status_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > barracks_status_;
  ::std::string* server_addr_;
  ::google::protobuf::uint32 first_blood_time_;
  float game_balance_;
  ::google::protobuf::uint32 event_score_;
  bool good_guys_win_;
  bool automatic_surrender_;
  bool mass_disconnect_;
  ::google::protobuf::RepeatedPtrField< ::CMatchHeroSelectEvent > picks_bans_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAFantasyPlayerStats > fantasy_stats_;
  ::google::protobuf::RepeatedPtrField< ::CMsgEconPlayerStrangeCountAdjustment > player_strange_count_adjustments_;
  ::google::protobuf::RepeatedPtrField< ::CMsgGameMatchSignOut_CAdditionalSignoutMsg > additional_msgs_;
  ::google::protobuf::uint32 server_version_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(20 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgGameMatchSignOut* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg : public ::google::protobuf::Message {
 public:
  CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg();
  virtual ~CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg();
  
  CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg(const CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg& from);
  
  inline CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg& operator=(const CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg& default_instance();
  
  void Swap(CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg* other);
  
  // implements Message ----------------------------------------------
  
  CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg& from);
  void MergeFrom(const CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // optional bytes contents = 2;
  inline bool has_contents() const;
  inline void clear_contents();
  static const int kContentsFieldNumber = 2;
  inline const ::std::string& contents() const;
  inline void set_contents(const ::std::string& value);
  inline void set_contents(const char* value);
  inline void set_contents(const void* value, size_t size);
  inline ::std::string* mutable_contents();
  inline ::std::string* release_contents();
  
  // @@protoc_insertion_point(class_scope:CMsgGameMatchSignoutResponse.CAdditionalSignoutMsg)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_contents();
  inline void clear_has_contents();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* contents_;
  ::google::protobuf::uint32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGameMatchSignoutResponse : public ::google::protobuf::Message {
 public:
  CMsgGameMatchSignoutResponse();
  virtual ~CMsgGameMatchSignoutResponse();
  
  CMsgGameMatchSignoutResponse(const CMsgGameMatchSignoutResponse& from);
  
  inline CMsgGameMatchSignoutResponse& operator=(const CMsgGameMatchSignoutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGameMatchSignoutResponse& default_instance();
  
  void Swap(CMsgGameMatchSignoutResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMsgGameMatchSignoutResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGameMatchSignoutResponse& from);
  void MergeFrom(const CMsgGameMatchSignoutResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg CAdditionalSignoutMsg;
  
  // accessors -------------------------------------------------------
  
  // optional uint32 match_id = 1;
  inline bool has_match_id() const;
  inline void clear_match_id();
  static const int kMatchIdFieldNumber = 1;
  inline ::google::protobuf::uint32 match_id() const;
  inline void set_match_id(::google::protobuf::uint32 value);
  
  // optional fixed32 replay_salt = 2;
  inline bool has_replay_salt() const;
  inline void clear_replay_salt();
  static const int kReplaySaltFieldNumber = 2;
  inline ::google::protobuf::uint32 replay_salt() const;
  inline void set_replay_salt(::google::protobuf::uint32 value);
  
  // repeated .CLobbyTimedRewardDetails timed_reward_details = 3;
  inline int timed_reward_details_size() const;
  inline void clear_timed_reward_details();
  static const int kTimedRewardDetailsFieldNumber = 3;
  inline const ::CLobbyTimedRewardDetails& timed_reward_details(int index) const;
  inline ::CLobbyTimedRewardDetails* mutable_timed_reward_details(int index);
  inline ::CLobbyTimedRewardDetails* add_timed_reward_details();
  inline const ::google::protobuf::RepeatedPtrField< ::CLobbyTimedRewardDetails >&
      timed_reward_details() const;
  inline ::google::protobuf::RepeatedPtrField< ::CLobbyTimedRewardDetails >*
      mutable_timed_reward_details();
  
  // repeated .CDOTALobbyMember xp_reward_details = 4;
  inline int xp_reward_details_size() const;
  inline void clear_xp_reward_details();
  static const int kXpRewardDetailsFieldNumber = 4;
  inline const ::CDOTALobbyMember& xp_reward_details(int index) const;
  inline ::CDOTALobbyMember* mutable_xp_reward_details(int index);
  inline ::CDOTALobbyMember* add_xp_reward_details();
  inline const ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember >&
      xp_reward_details() const;
  inline ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember >*
      mutable_xp_reward_details();
  
  // optional uint32 leagueid = 5;
  inline bool has_leagueid() const;
  inline void clear_leagueid();
  static const int kLeagueidFieldNumber = 5;
  inline ::google::protobuf::uint32 leagueid() const;
  inline void set_leagueid(::google::protobuf::uint32 value);
  
  // repeated .CMsgGameMatchSignoutResponse.CAdditionalSignoutMsg additional_msgs = 6;
  inline int additional_msgs_size() const;
  inline void clear_additional_msgs();
  static const int kAdditionalMsgsFieldNumber = 6;
  inline const ::CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg& additional_msgs(int index) const;
  inline ::CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg* mutable_additional_msgs(int index);
  inline ::CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg* add_additional_msgs();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg >&
      additional_msgs() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg >*
      mutable_additional_msgs();
  
  // @@protoc_insertion_point(class_scope:CMsgGameMatchSignoutResponse)
 private:
  inline void set_has_match_id();
  inline void clear_has_match_id();
  inline void set_has_replay_salt();
  inline void clear_has_replay_salt();
  inline void set_has_leagueid();
  inline void clear_has_leagueid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 match_id_;
  ::google::protobuf::uint32 replay_salt_;
  ::google::protobuf::RepeatedPtrField< ::CLobbyTimedRewardDetails > timed_reward_details_;
  ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember > xp_reward_details_;
  ::google::protobuf::RepeatedPtrField< ::CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg > additional_msgs_;
  ::google::protobuf::uint32 leagueid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgGameMatchSignoutResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGameMatchSignOutPermissionRequest : public ::google::protobuf::Message {
 public:
  CMsgGameMatchSignOutPermissionRequest();
  virtual ~CMsgGameMatchSignOutPermissionRequest();
  
  CMsgGameMatchSignOutPermissionRequest(const CMsgGameMatchSignOutPermissionRequest& from);
  
  inline CMsgGameMatchSignOutPermissionRequest& operator=(const CMsgGameMatchSignOutPermissionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGameMatchSignOutPermissionRequest& default_instance();
  
  void Swap(CMsgGameMatchSignOutPermissionRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMsgGameMatchSignOutPermissionRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGameMatchSignOutPermissionRequest& from);
  void MergeFrom(const CMsgGameMatchSignOutPermissionRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 server_version = 1;
  inline bool has_server_version() const;
  inline void clear_server_version();
  static const int kServerVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 server_version() const;
  inline void set_server_version(::google::protobuf::uint32 value);
  
  // optional uint32 local_attempt = 2;
  inline bool has_local_attempt() const;
  inline void clear_local_attempt();
  static const int kLocalAttemptFieldNumber = 2;
  inline ::google::protobuf::uint32 local_attempt() const;
  inline void set_local_attempt(::google::protobuf::uint32 value);
  
  // optional uint32 total_attempt = 3;
  inline bool has_total_attempt() const;
  inline void clear_total_attempt();
  static const int kTotalAttemptFieldNumber = 3;
  inline ::google::protobuf::uint32 total_attempt() const;
  inline void set_total_attempt(::google::protobuf::uint32 value);
  
  // optional uint32 seconds_waited = 4;
  inline bool has_seconds_waited() const;
  inline void clear_seconds_waited();
  static const int kSecondsWaitedFieldNumber = 4;
  inline ::google::protobuf::uint32 seconds_waited() const;
  inline void set_seconds_waited(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CMsgGameMatchSignOutPermissionRequest)
 private:
  inline void set_has_server_version();
  inline void clear_has_server_version();
  inline void set_has_local_attempt();
  inline void clear_has_local_attempt();
  inline void set_has_total_attempt();
  inline void clear_has_total_attempt();
  inline void set_has_seconds_waited();
  inline void clear_has_seconds_waited();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 server_version_;
  ::google::protobuf::uint32 local_attempt_;
  ::google::protobuf::uint32 total_attempt_;
  ::google::protobuf::uint32 seconds_waited_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgGameMatchSignOutPermissionRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGameMatchSignOutPermissionResponse : public ::google::protobuf::Message {
 public:
  CMsgGameMatchSignOutPermissionResponse();
  virtual ~CMsgGameMatchSignOutPermissionResponse();
  
  CMsgGameMatchSignOutPermissionResponse(const CMsgGameMatchSignOutPermissionResponse& from);
  
  inline CMsgGameMatchSignOutPermissionResponse& operator=(const CMsgGameMatchSignOutPermissionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGameMatchSignOutPermissionResponse& default_instance();
  
  void Swap(CMsgGameMatchSignOutPermissionResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMsgGameMatchSignOutPermissionResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGameMatchSignOutPermissionResponse& from);
  void MergeFrom(const CMsgGameMatchSignOutPermissionResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool permission_granted = 1 [default = false];
  inline bool has_permission_granted() const;
  inline void clear_permission_granted();
  static const int kPermissionGrantedFieldNumber = 1;
  inline bool permission_granted() const;
  inline void set_permission_granted(bool value);
  
  // optional bool abandon_signout = 2 [default = false];
  inline bool has_abandon_signout() const;
  inline void clear_abandon_signout();
  static const int kAbandonSignoutFieldNumber = 2;
  inline bool abandon_signout() const;
  inline void set_abandon_signout(bool value);
  
  // optional uint32 retry_delay_seconds = 3 [default = 0];
  inline bool has_retry_delay_seconds() const;
  inline void clear_retry_delay_seconds();
  static const int kRetryDelaySecondsFieldNumber = 3;
  inline ::google::protobuf::uint32 retry_delay_seconds() const;
  inline void set_retry_delay_seconds(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CMsgGameMatchSignOutPermissionResponse)
 private:
  inline void set_has_permission_granted();
  inline void clear_has_permission_granted();
  inline void set_has_abandon_signout();
  inline void clear_has_abandon_signout();
  inline void set_has_retry_delay_seconds();
  inline void clear_has_retry_delay_seconds();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool permission_granted_;
  bool abandon_signout_;
  ::google::protobuf::uint32 retry_delay_seconds_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgGameMatchSignOutPermissionResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGameChatLog_CChatLine : public ::google::protobuf::Message {
 public:
  CMsgGameChatLog_CChatLine();
  virtual ~CMsgGameChatLog_CChatLine();
  
  CMsgGameChatLog_CChatLine(const CMsgGameChatLog_CChatLine& from);
  
  inline CMsgGameChatLog_CChatLine& operator=(const CMsgGameChatLog_CChatLine& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGameChatLog_CChatLine& default_instance();
  
  void Swap(CMsgGameChatLog_CChatLine* other);
  
  // implements Message ----------------------------------------------
  
  CMsgGameChatLog_CChatLine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGameChatLog_CChatLine& from);
  void MergeFrom(const CMsgGameChatLog_CChatLine& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);
  
  // optional uint32 team_only = 2;
  inline bool has_team_only() const;
  inline void clear_team_only();
  static const int kTeamOnlyFieldNumber = 2;
  inline ::google::protobuf::uint32 team_only() const;
  inline void set_team_only(::google::protobuf::uint32 value);
  
  // optional string text = 3;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 3;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  
  // optional uint32 game_time = 4;
  inline bool has_game_time() const;
  inline void clear_game_time();
  static const int kGameTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 game_time() const;
  inline void set_game_time(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CMsgGameChatLog.CChatLine)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_team_only();
  inline void clear_has_team_only();
  inline void set_has_text();
  inline void clear_has_text();
  inline void set_has_game_time();
  inline void clear_has_game_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 team_only_;
  ::std::string* text_;
  ::google::protobuf::uint32 game_time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgGameChatLog_CChatLine* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGameChatLog : public ::google::protobuf::Message {
 public:
  CMsgGameChatLog();
  virtual ~CMsgGameChatLog();
  
  CMsgGameChatLog(const CMsgGameChatLog& from);
  
  inline CMsgGameChatLog& operator=(const CMsgGameChatLog& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGameChatLog& default_instance();
  
  void Swap(CMsgGameChatLog* other);
  
  // implements Message ----------------------------------------------
  
  CMsgGameChatLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGameChatLog& from);
  void MergeFrom(const CMsgGameChatLog& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CMsgGameChatLog_CChatLine CChatLine;
  
  // accessors -------------------------------------------------------
  
  // optional uint32 match_id = 1;
  inline bool has_match_id() const;
  inline void clear_match_id();
  static const int kMatchIdFieldNumber = 1;
  inline ::google::protobuf::uint32 match_id() const;
  inline void set_match_id(::google::protobuf::uint32 value);
  
  // repeated .CMsgGameChatLog.CChatLine lines = 2;
  inline int lines_size() const;
  inline void clear_lines();
  static const int kLinesFieldNumber = 2;
  inline const ::CMsgGameChatLog_CChatLine& lines(int index) const;
  inline ::CMsgGameChatLog_CChatLine* mutable_lines(int index);
  inline ::CMsgGameChatLog_CChatLine* add_lines();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgGameChatLog_CChatLine >&
      lines() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgGameChatLog_CChatLine >*
      mutable_lines();
  
  // @@protoc_insertion_point(class_scope:CMsgGameChatLog)
 private:
  inline void set_has_match_id();
  inline void clear_has_match_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::CMsgGameChatLog_CChatLine > lines_;
  ::google::protobuf::uint32 match_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgGameChatLog* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTALiveScoreboardUpdate_Team_Player : public ::google::protobuf::Message {
 public:
  CMsgDOTALiveScoreboardUpdate_Team_Player();
  virtual ~CMsgDOTALiveScoreboardUpdate_Team_Player();
  
  CMsgDOTALiveScoreboardUpdate_Team_Player(const CMsgDOTALiveScoreboardUpdate_Team_Player& from);
  
  inline CMsgDOTALiveScoreboardUpdate_Team_Player& operator=(const CMsgDOTALiveScoreboardUpdate_Team_Player& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTALiveScoreboardUpdate_Team_Player& default_instance();
  
  void Swap(CMsgDOTALiveScoreboardUpdate_Team_Player* other);
  
  // implements Message ----------------------------------------------
  
  CMsgDOTALiveScoreboardUpdate_Team_Player* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTALiveScoreboardUpdate_Team_Player& from);
  void MergeFrom(const CMsgDOTALiveScoreboardUpdate_Team_Player& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState DOTAUltimateState;
  static const DOTAUltimateState k_EDOTAUltimateStateNotLearned = CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_k_EDOTAUltimateStateNotLearned;
  static const DOTAUltimateState k_EDOTAUltimateStateCooldown = CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_k_EDOTAUltimateStateCooldown;
  static const DOTAUltimateState k_EDOTAUltimateStateNeedsMana = CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_k_EDOTAUltimateStateNeedsMana;
  static const DOTAUltimateState k_EDOTAUltimateStateReady = CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_k_EDOTAUltimateStateReady;
  static inline bool DOTAUltimateState_IsValid(int value) {
    return CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_IsValid(value);
  }
  static const DOTAUltimateState DOTAUltimateState_MIN =
    CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_DOTAUltimateState_MIN;
  static const DOTAUltimateState DOTAUltimateState_MAX =
    CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_DOTAUltimateState_MAX;
  static const int DOTAUltimateState_ARRAYSIZE =
    CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_DOTAUltimateState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DOTAUltimateState_descriptor() {
    return CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_descriptor();
  }
  static inline const ::std::string& DOTAUltimateState_Name(DOTAUltimateState value) {
    return CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_Name(value);
  }
  static inline bool DOTAUltimateState_Parse(const ::std::string& name,
      DOTAUltimateState* value) {
    return CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional uint32 player_slot = 1;
  inline bool has_player_slot() const;
  inline void clear_player_slot();
  static const int kPlayerSlotFieldNumber = 1;
  inline ::google::protobuf::uint32 player_slot() const;
  inline void set_player_slot(::google::protobuf::uint32 value);
  
  // optional string player_name = 2;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 2;
  inline const ::std::string& player_name() const;
  inline void set_player_name(const ::std::string& value);
  inline void set_player_name(const char* value);
  inline void set_player_name(const char* value, size_t size);
  inline ::std::string* mutable_player_name();
  inline ::std::string* release_player_name();
  
  // optional string hero_name = 3;
  inline bool has_hero_name() const;
  inline void clear_hero_name();
  static const int kHeroNameFieldNumber = 3;
  inline const ::std::string& hero_name() const;
  inline void set_hero_name(const ::std::string& value);
  inline void set_hero_name(const char* value);
  inline void set_hero_name(const char* value, size_t size);
  inline ::std::string* mutable_hero_name();
  inline ::std::string* release_hero_name();
  
  // optional uint32 hero_id = 4;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 4;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);
  
  // optional uint32 kills = 5;
  inline bool has_kills() const;
  inline void clear_kills();
  static const int kKillsFieldNumber = 5;
  inline ::google::protobuf::uint32 kills() const;
  inline void set_kills(::google::protobuf::uint32 value);
  
  // optional uint32 deaths = 6;
  inline bool has_deaths() const;
  inline void clear_deaths();
  static const int kDeathsFieldNumber = 6;
  inline ::google::protobuf::uint32 deaths() const;
  inline void set_deaths(::google::protobuf::uint32 value);
  
  // optional uint32 assists = 7;
  inline bool has_assists() const;
  inline void clear_assists();
  static const int kAssistsFieldNumber = 7;
  inline ::google::protobuf::uint32 assists() const;
  inline void set_assists(::google::protobuf::uint32 value);
  
  // optional uint32 last_hits = 8;
  inline bool has_last_hits() const;
  inline void clear_last_hits();
  static const int kLastHitsFieldNumber = 8;
  inline ::google::protobuf::uint32 last_hits() const;
  inline void set_last_hits(::google::protobuf::uint32 value);
  
  // optional uint32 denies = 9;
  inline bool has_denies() const;
  inline void clear_denies();
  static const int kDeniesFieldNumber = 9;
  inline ::google::protobuf::uint32 denies() const;
  inline void set_denies(::google::protobuf::uint32 value);
  
  // optional uint32 gold = 10;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 10;
  inline ::google::protobuf::uint32 gold() const;
  inline void set_gold(::google::protobuf::uint32 value);
  
  // optional uint32 level = 11;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 11;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);
  
  // optional float gold_per_min = 12;
  inline bool has_gold_per_min() const;
  inline void clear_gold_per_min();
  static const int kGoldPerMinFieldNumber = 12;
  inline float gold_per_min() const;
  inline void set_gold_per_min(float value);
  
  // optional float xp_per_min = 13;
  inline bool has_xp_per_min() const;
  inline void clear_xp_per_min();
  static const int kXpPerMinFieldNumber = 13;
  inline float xp_per_min() const;
  inline void set_xp_per_min(float value);
  
  // optional .CMsgDOTALiveScoreboardUpdate.Team.Player.DOTAUltimateState ultimate_state = 14 [default = k_EDOTAUltimateStateNotLearned];
  inline bool has_ultimate_state() const;
  inline void clear_ultimate_state();
  static const int kUltimateStateFieldNumber = 14;
  inline ::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState ultimate_state() const;
  inline void set_ultimate_state(::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState value);
  
  // optional float ultimate_cooldown = 15;
  inline bool has_ultimate_cooldown() const;
  inline void clear_ultimate_cooldown();
  static const int kUltimateCooldownFieldNumber = 15;
  inline float ultimate_cooldown() const;
  inline void set_ultimate_cooldown(float value);
  
  // optional uint32 item0 = 16;
  inline bool has_item0() const;
  inline void clear_item0();
  static const int kItem0FieldNumber = 16;
  inline ::google::protobuf::uint32 item0() const;
  inline void set_item0(::google::protobuf::uint32 value);
  
  // optional uint32 item1 = 17;
  inline bool has_item1() const;
  inline void clear_item1();
  static const int kItem1FieldNumber = 17;
  inline ::google::protobuf::uint32 item1() const;
  inline void set_item1(::google::protobuf::uint32 value);
  
  // optional uint32 item2 = 18;
  inline bool has_item2() const;
  inline void clear_item2();
  static const int kItem2FieldNumber = 18;
  inline ::google::protobuf::uint32 item2() const;
  inline void set_item2(::google::protobuf::uint32 value);
  
  // optional uint32 item3 = 19;
  inline bool has_item3() const;
  inline void clear_item3();
  static const int kItem3FieldNumber = 19;
  inline ::google::protobuf::uint32 item3() const;
  inline void set_item3(::google::protobuf::uint32 value);
  
  // optional uint32 item4 = 20;
  inline bool has_item4() const;
  inline void clear_item4();
  static const int kItem4FieldNumber = 20;
  inline ::google::protobuf::uint32 item4() const;
  inline void set_item4(::google::protobuf::uint32 value);
  
  // optional uint32 item5 = 21;
  inline bool has_item5() const;
  inline void clear_item5();
  static const int kItem5FieldNumber = 21;
  inline ::google::protobuf::uint32 item5() const;
  inline void set_item5(::google::protobuf::uint32 value);
  
  // optional uint32 respawn_timer = 22;
  inline bool has_respawn_timer() const;
  inline void clear_respawn_timer();
  static const int kRespawnTimerFieldNumber = 22;
  inline ::google::protobuf::uint32 respawn_timer() const;
  inline void set_respawn_timer(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CMsgDOTALiveScoreboardUpdate.Team.Player)
 private:
  inline void set_has_player_slot();
  inline void clear_has_player_slot();
  inline void set_has_player_name();
  inline void clear_has_player_name();
  inline void set_has_hero_name();
  inline void clear_has_hero_name();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_kills();
  inline void clear_has_kills();
  inline void set_has_deaths();
  inline void clear_has_deaths();
  inline void set_has_assists();
  inline void clear_has_assists();
  inline void set_has_last_hits();
  inline void clear_has_last_hits();
  inline void set_has_denies();
  inline void clear_has_denies();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_gold_per_min();
  inline void clear_has_gold_per_min();
  inline void set_has_xp_per_min();
  inline void clear_has_xp_per_min();
  inline void set_has_ultimate_state();
  inline void clear_has_ultimate_state();
  inline void set_has_ultimate_cooldown();
  inline void clear_has_ultimate_cooldown();
  inline void set_has_item0();
  inline void clear_has_item0();
  inline void set_has_item1();
  inline void clear_has_item1();
  inline void set_has_item2();
  inline void clear_has_item2();
  inline void set_has_item3();
  inline void clear_has_item3();
  inline void set_has_item4();
  inline void clear_has_item4();
  inline void set_has_item5();
  inline void clear_has_item5();
  inline void set_has_respawn_timer();
  inline void clear_has_respawn_timer();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* player_name_;
  ::google::protobuf::uint32 player_slot_;
  ::google::protobuf::uint32 hero_id_;
  ::std::string* hero_name_;
  ::google::protobuf::uint32 kills_;
  ::google::protobuf::uint32 deaths_;
  ::google::protobuf::uint32 assists_;
  ::google::protobuf::uint32 last_hits_;
  ::google::protobuf::uint32 denies_;
  ::google::protobuf::uint32 gold_;
  ::google::protobuf::uint32 level_;
  float gold_per_min_;
  float xp_per_min_;
  int ultimate_state_;
  float ultimate_cooldown_;
  ::google::protobuf::uint32 item0_;
  ::google::protobuf::uint32 item1_;
  ::google::protobuf::uint32 item2_;
  ::google::protobuf::uint32 item3_;
  ::google::protobuf::uint32 item4_;
  ::google::protobuf::uint32 item5_;
  ::google::protobuf::uint32 respawn_timer_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(22 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgDOTALiveScoreboardUpdate_Team_Player* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTALiveScoreboardUpdate_Team : public ::google::protobuf::Message {
 public:
  CMsgDOTALiveScoreboardUpdate_Team();
  virtual ~CMsgDOTALiveScoreboardUpdate_Team();
  
  CMsgDOTALiveScoreboardUpdate_Team(const CMsgDOTALiveScoreboardUpdate_Team& from);
  
  inline CMsgDOTALiveScoreboardUpdate_Team& operator=(const CMsgDOTALiveScoreboardUpdate_Team& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTALiveScoreboardUpdate_Team& default_instance();
  
  void Swap(CMsgDOTALiveScoreboardUpdate_Team* other);
  
  // implements Message ----------------------------------------------
  
  CMsgDOTALiveScoreboardUpdate_Team* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTALiveScoreboardUpdate_Team& from);
  void MergeFrom(const CMsgDOTALiveScoreboardUpdate_Team& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CMsgDOTALiveScoreboardUpdate_Team_Player Player;
  
  // accessors -------------------------------------------------------
  
  // repeated .CMsgDOTALiveScoreboardUpdate.Team.Player players = 1;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 1;
  inline const ::CMsgDOTALiveScoreboardUpdate_Team_Player& players(int index) const;
  inline ::CMsgDOTALiveScoreboardUpdate_Team_Player* mutable_players(int index);
  inline ::CMsgDOTALiveScoreboardUpdate_Team_Player* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTALiveScoreboardUpdate_Team_Player >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTALiveScoreboardUpdate_Team_Player >*
      mutable_players();
  
  // optional uint32 score = 2;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CMsgDOTALiveScoreboardUpdate.Team)
 private:
  inline void set_has_score();
  inline void clear_has_score();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTALiveScoreboardUpdate_Team_Player > players_;
  ::google::protobuf::uint32 score_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgDOTALiveScoreboardUpdate_Team* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTALiveScoreboardUpdate : public ::google::protobuf::Message {
 public:
  CMsgDOTALiveScoreboardUpdate();
  virtual ~CMsgDOTALiveScoreboardUpdate();
  
  CMsgDOTALiveScoreboardUpdate(const CMsgDOTALiveScoreboardUpdate& from);
  
  inline CMsgDOTALiveScoreboardUpdate& operator=(const CMsgDOTALiveScoreboardUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTALiveScoreboardUpdate& default_instance();
  
  void Swap(CMsgDOTALiveScoreboardUpdate* other);
  
  // implements Message ----------------------------------------------
  
  CMsgDOTALiveScoreboardUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTALiveScoreboardUpdate& from);
  void MergeFrom(const CMsgDOTALiveScoreboardUpdate& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CMsgDOTALiveScoreboardUpdate_Team Team;
  
  // accessors -------------------------------------------------------
  
  // optional uint32 tournament_id = 1;
  inline bool has_tournament_id() const;
  inline void clear_tournament_id();
  static const int kTournamentIdFieldNumber = 1;
  inline ::google::protobuf::uint32 tournament_id() const;
  inline void set_tournament_id(::google::protobuf::uint32 value);
  
  // optional uint32 tournament_game_id = 2;
  inline bool has_tournament_game_id() const;
  inline void clear_tournament_game_id();
  static const int kTournamentGameIdFieldNumber = 2;
  inline ::google::protobuf::uint32 tournament_game_id() const;
  inline void set_tournament_game_id(::google::protobuf::uint32 value);
  
  // optional float duration = 3;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 3;
  inline float duration() const;
  inline void set_duration(float value);
  
  // optional int32 hltv_delay = 4;
  inline bool has_hltv_delay() const;
  inline void clear_hltv_delay();
  static const int kHltvDelayFieldNumber = 4;
  inline ::google::protobuf::int32 hltv_delay() const;
  inline void set_hltv_delay(::google::protobuf::int32 value);
  
  // optional .CMsgDOTALiveScoreboardUpdate.Team team_good = 5;
  inline bool has_team_good() const;
  inline void clear_team_good();
  static const int kTeamGoodFieldNumber = 5;
  inline const ::CMsgDOTALiveScoreboardUpdate_Team& team_good() const;
  inline ::CMsgDOTALiveScoreboardUpdate_Team* mutable_team_good();
  inline ::CMsgDOTALiveScoreboardUpdate_Team* release_team_good();
  
  // optional .CMsgDOTALiveScoreboardUpdate.Team team_bad = 6;
  inline bool has_team_bad() const;
  inline void clear_team_bad();
  static const int kTeamBadFieldNumber = 6;
  inline const ::CMsgDOTALiveScoreboardUpdate_Team& team_bad() const;
  inline ::CMsgDOTALiveScoreboardUpdate_Team* mutable_team_bad();
  inline ::CMsgDOTALiveScoreboardUpdate_Team* release_team_bad();
  
  // optional uint32 roshan_respawn_timer = 7;
  inline bool has_roshan_respawn_timer() const;
  inline void clear_roshan_respawn_timer();
  static const int kRoshanRespawnTimerFieldNumber = 7;
  inline ::google::protobuf::uint32 roshan_respawn_timer() const;
  inline void set_roshan_respawn_timer(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CMsgDOTALiveScoreboardUpdate)
 private:
  inline void set_has_tournament_id();
  inline void clear_has_tournament_id();
  inline void set_has_tournament_game_id();
  inline void clear_has_tournament_game_id();
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_hltv_delay();
  inline void clear_has_hltv_delay();
  inline void set_has_team_good();
  inline void clear_has_team_good();
  inline void set_has_team_bad();
  inline void clear_has_team_bad();
  inline void set_has_roshan_respawn_timer();
  inline void clear_has_roshan_respawn_timer();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 tournament_id_;
  ::google::protobuf::uint32 tournament_game_id_;
  float duration_;
  ::google::protobuf::int32 hltv_delay_;
  ::CMsgDOTALiveScoreboardUpdate_Team* team_good_;
  ::CMsgDOTALiveScoreboardUpdate_Team* team_bad_;
  ::google::protobuf::uint32 roshan_respawn_timer_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgDOTALiveScoreboardUpdate* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARequestPlayerResources : public ::google::protobuf::Message {
 public:
  CMsgDOTARequestPlayerResources();
  virtual ~CMsgDOTARequestPlayerResources();
  
  CMsgDOTARequestPlayerResources(const CMsgDOTARequestPlayerResources& from);
  
  inline CMsgDOTARequestPlayerResources& operator=(const CMsgDOTARequestPlayerResources& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARequestPlayerResources& default_instance();
  
  void Swap(CMsgDOTARequestPlayerResources* other);
  
  // implements Message ----------------------------------------------
  
  CMsgDOTARequestPlayerResources* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARequestPlayerResources& from);
  void MergeFrom(const CMsgDOTARequestPlayerResources& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional fixed64 steam_id = 1;
  inline bool has_steam_id() const;
  inline void clear_steam_id();
  static const int kSteamIdFieldNumber = 1;
  inline ::google::protobuf::uint64 steam_id() const;
  inline void set_steam_id(::google::protobuf::uint64 value);
  
  // optional uint32 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::uint32 player_id() const;
  inline void set_player_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CMsgDOTARequestPlayerResources)
 private:
  inline void set_has_steam_id();
  inline void clear_has_steam_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 steam_id_;
  ::google::protobuf::uint32 player_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgDOTARequestPlayerResources* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARequestPlayerResourcesResponse : public ::google::protobuf::Message {
 public:
  CMsgDOTARequestPlayerResourcesResponse();
  virtual ~CMsgDOTARequestPlayerResourcesResponse();
  
  CMsgDOTARequestPlayerResourcesResponse(const CMsgDOTARequestPlayerResourcesResponse& from);
  
  inline CMsgDOTARequestPlayerResourcesResponse& operator=(const CMsgDOTARequestPlayerResourcesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARequestPlayerResourcesResponse& default_instance();
  
  void Swap(CMsgDOTARequestPlayerResourcesResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMsgDOTARequestPlayerResourcesResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARequestPlayerResourcesResponse& from);
  void MergeFrom(const CMsgDOTARequestPlayerResourcesResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional fixed64 steam_id = 1;
  inline bool has_steam_id() const;
  inline void clear_steam_id();
  static const int kSteamIdFieldNumber = 1;
  inline ::google::protobuf::uint64 steam_id() const;
  inline void set_steam_id(::google::protobuf::uint64 value);
  
  // optional uint32 rank = 2;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);
  
  // optional uint32 player_id = 3;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 3;
  inline ::google::protobuf::uint32 player_id() const;
  inline void set_player_id(::google::protobuf::uint32 value);
  
  // optional bool prevent_text_chat = 4;
  inline bool has_prevent_text_chat() const;
  inline void clear_prevent_text_chat();
  static const int kPreventTextChatFieldNumber = 4;
  inline bool prevent_text_chat() const;
  inline void set_prevent_text_chat(bool value);
  
  // optional bool prevent_voice_chat = 5;
  inline bool has_prevent_voice_chat() const;
  inline void clear_prevent_voice_chat();
  static const int kPreventVoiceChatFieldNumber = 5;
  inline bool prevent_voice_chat() const;
  inline void set_prevent_voice_chat(bool value);
  
  // optional bool low_priority = 6;
  inline bool has_low_priority() const;
  inline void clear_low_priority();
  static const int kLowPriorityFieldNumber = 6;
  inline bool low_priority() const;
  inline void set_low_priority(bool value);
  
  // @@protoc_insertion_point(class_scope:CMsgDOTARequestPlayerResourcesResponse)
 private:
  inline void set_has_steam_id();
  inline void clear_has_steam_id();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_prevent_text_chat();
  inline void clear_has_prevent_text_chat();
  inline void set_has_prevent_voice_chat();
  inline void clear_has_prevent_voice_chat();
  inline void set_has_low_priority();
  inline void clear_has_low_priority();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 steam_id_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 player_id_;
  bool prevent_text_chat_;
  bool prevent_voice_chat_;
  bool low_priority_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgDOTARequestPlayerResourcesResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARequestBatchPlayerResources : public ::google::protobuf::Message {
 public:
  CMsgDOTARequestBatchPlayerResources();
  virtual ~CMsgDOTARequestBatchPlayerResources();
  
  CMsgDOTARequestBatchPlayerResources(const CMsgDOTARequestBatchPlayerResources& from);
  
  inline CMsgDOTARequestBatchPlayerResources& operator=(const CMsgDOTARequestBatchPlayerResources& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARequestBatchPlayerResources& default_instance();
  
  void Swap(CMsgDOTARequestBatchPlayerResources* other);
  
  // implements Message ----------------------------------------------
  
  CMsgDOTARequestBatchPlayerResources* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARequestBatchPlayerResources& from);
  void MergeFrom(const CMsgDOTARequestBatchPlayerResources& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated uint32 account_ids = 1 [packed = true];
  inline int account_ids_size() const;
  inline void clear_account_ids();
  static const int kAccountIdsFieldNumber = 1;
  inline ::google::protobuf::uint32 account_ids(int index) const;
  inline void set_account_ids(int index, ::google::protobuf::uint32 value);
  inline void add_account_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      account_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_account_ids();
  
  // optional bool rank_use_competitive = 2;
  inline bool has_rank_use_competitive() const;
  inline void clear_rank_use_competitive();
  static const int kRankUseCompetitiveFieldNumber = 2;
  inline bool rank_use_competitive() const;
  inline void set_rank_use_competitive(bool value);
  
  // repeated bool rank_use_solo = 3 [packed = true];
  inline int rank_use_solo_size() const;
  inline void clear_rank_use_solo();
  static const int kRankUseSoloFieldNumber = 3;
  inline bool rank_use_solo(int index) const;
  inline void set_rank_use_solo(int index, bool value);
  inline void add_rank_use_solo(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      rank_use_solo() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_rank_use_solo();
  
  // @@protoc_insertion_point(class_scope:CMsgDOTARequestBatchPlayerResources)
 private:
  inline void set_has_rank_use_competitive();
  inline void clear_has_rank_use_competitive();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > account_ids_;
  mutable int _account_ids_cached_byte_size_;
  ::google::protobuf::RepeatedField< bool > rank_use_solo_;
  mutable int _rank_use_solo_cached_byte_size_;
  bool rank_use_competitive_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgDOTARequestBatchPlayerResources* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARequestBatchPlayerResourcesResponse_Result : public ::google::protobuf::Message {
 public:
  CMsgDOTARequestBatchPlayerResourcesResponse_Result();
  virtual ~CMsgDOTARequestBatchPlayerResourcesResponse_Result();
  
  CMsgDOTARequestBatchPlayerResourcesResponse_Result(const CMsgDOTARequestBatchPlayerResourcesResponse_Result& from);
  
  inline CMsgDOTARequestBatchPlayerResourcesResponse_Result& operator=(const CMsgDOTARequestBatchPlayerResourcesResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARequestBatchPlayerResourcesResponse_Result& default_instance();
  
  void Swap(CMsgDOTARequestBatchPlayerResourcesResponse_Result* other);
  
  // implements Message ----------------------------------------------
  
  CMsgDOTARequestBatchPlayerResourcesResponse_Result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARequestBatchPlayerResourcesResponse_Result& from);
  void MergeFrom(const CMsgDOTARequestBatchPlayerResourcesResponse_Result& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);
  
  // optional bool prevent_text_chat = 2;
  inline bool has_prevent_text_chat() const;
  inline void clear_prevent_text_chat();
  static const int kPreventTextChatFieldNumber = 2;
  inline bool prevent_text_chat() const;
  inline void set_prevent_text_chat(bool value);
  
  // optional bool prevent_voice_chat = 3;
  inline bool has_prevent_voice_chat() const;
  inline void clear_prevent_voice_chat();
  static const int kPreventVoiceChatFieldNumber = 3;
  inline bool prevent_voice_chat() const;
  inline void set_prevent_voice_chat(bool value);
  
  // optional uint32 rank = 4;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 4;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);
  
  // optional bool rank_calibrated = 5;
  inline bool has_rank_calibrated() const;
  inline void clear_rank_calibrated();
  static const int kRankCalibratedFieldNumber = 5;
  inline bool rank_calibrated() const;
  inline void set_rank_calibrated(bool value);
  
  // optional bool low_priority = 6;
  inline bool has_low_priority() const;
  inline void clear_low_priority();
  static const int kLowPriorityFieldNumber = 6;
  inline bool low_priority() const;
  inline void set_low_priority(bool value);
  
  // @@protoc_insertion_point(class_scope:CMsgDOTARequestBatchPlayerResourcesResponse.Result)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_prevent_text_chat();
  inline void clear_has_prevent_text_chat();
  inline void set_has_prevent_voice_chat();
  inline void clear_has_prevent_voice_chat();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_rank_calibrated();
  inline void clear_has_rank_calibrated();
  inline void set_has_low_priority();
  inline void clear_has_low_priority();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 rank_;
  bool prevent_text_chat_;
  bool prevent_voice_chat_;
  bool rank_calibrated_;
  bool low_priority_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgDOTARequestBatchPlayerResourcesResponse_Result* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARequestBatchPlayerResourcesResponse : public ::google::protobuf::Message {
 public:
  CMsgDOTARequestBatchPlayerResourcesResponse();
  virtual ~CMsgDOTARequestBatchPlayerResourcesResponse();
  
  CMsgDOTARequestBatchPlayerResourcesResponse(const CMsgDOTARequestBatchPlayerResourcesResponse& from);
  
  inline CMsgDOTARequestBatchPlayerResourcesResponse& operator=(const CMsgDOTARequestBatchPlayerResourcesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARequestBatchPlayerResourcesResponse& default_instance();
  
  void Swap(CMsgDOTARequestBatchPlayerResourcesResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMsgDOTARequestBatchPlayerResourcesResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARequestBatchPlayerResourcesResponse& from);
  void MergeFrom(const CMsgDOTARequestBatchPlayerResourcesResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CMsgDOTARequestBatchPlayerResourcesResponse_Result Result;
  
  // accessors -------------------------------------------------------
  
  // repeated .CMsgDOTARequestBatchPlayerResourcesResponse.Result results = 6;
  inline int results_size() const;
  inline void clear_results();
  static const int kResultsFieldNumber = 6;
  inline const ::CMsgDOTARequestBatchPlayerResourcesResponse_Result& results(int index) const;
  inline ::CMsgDOTARequestBatchPlayerResourcesResponse_Result* mutable_results(int index);
  inline ::CMsgDOTARequestBatchPlayerResourcesResponse_Result* add_results();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARequestBatchPlayerResourcesResponse_Result >&
      results() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARequestBatchPlayerResourcesResponse_Result >*
      mutable_results();
  
  // @@protoc_insertion_point(class_scope:CMsgDOTARequestBatchPlayerResourcesResponse)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARequestBatchPlayerResourcesResponse_Result > results_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgDOTARequestBatchPlayerResourcesResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAPlayerFailedToConnect : public ::google::protobuf::Message {
 public:
  CMsgDOTAPlayerFailedToConnect();
  virtual ~CMsgDOTAPlayerFailedToConnect();
  
  CMsgDOTAPlayerFailedToConnect(const CMsgDOTAPlayerFailedToConnect& from);
  
  inline CMsgDOTAPlayerFailedToConnect& operator=(const CMsgDOTAPlayerFailedToConnect& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAPlayerFailedToConnect& default_instance();
  
  void Swap(CMsgDOTAPlayerFailedToConnect* other);
  
  // implements Message ----------------------------------------------
  
  CMsgDOTAPlayerFailedToConnect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAPlayerFailedToConnect& from);
  void MergeFrom(const CMsgDOTAPlayerFailedToConnect& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated fixed64 failed_loaders = 1;
  inline int failed_loaders_size() const;
  inline void clear_failed_loaders();
  static const int kFailedLoadersFieldNumber = 1;
  inline ::google::protobuf::uint64 failed_loaders(int index) const;
  inline void set_failed_loaders(int index, ::google::protobuf::uint64 value);
  inline void add_failed_loaders(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      failed_loaders() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_failed_loaders();
  
  // repeated fixed64 abandoned_loaders = 2;
  inline int abandoned_loaders_size() const;
  inline void clear_abandoned_loaders();
  static const int kAbandonedLoadersFieldNumber = 2;
  inline ::google::protobuf::uint64 abandoned_loaders(int index) const;
  inline void set_abandoned_loaders(int index, ::google::protobuf::uint64 value);
  inline void add_abandoned_loaders(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      abandoned_loaders() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_abandoned_loaders();
  
  // @@protoc_insertion_point(class_scope:CMsgDOTAPlayerFailedToConnect)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > failed_loaders_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > abandoned_loaders_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgDOTAPlayerFailedToConnect* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCToRelayConnect : public ::google::protobuf::Message {
 public:
  CMsgGCToRelayConnect();
  virtual ~CMsgGCToRelayConnect();
  
  CMsgGCToRelayConnect(const CMsgGCToRelayConnect& from);
  
  inline CMsgGCToRelayConnect& operator=(const CMsgGCToRelayConnect& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCToRelayConnect& default_instance();
  
  void Swap(CMsgGCToRelayConnect* other);
  
  // implements Message ----------------------------------------------
  
  CMsgGCToRelayConnect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCToRelayConnect& from);
  void MergeFrom(const CMsgGCToRelayConnect& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 source_tv_public_addr = 1;
  inline bool has_source_tv_public_addr() const;
  inline void clear_source_tv_public_addr();
  static const int kSourceTvPublicAddrFieldNumber = 1;
  inline ::google::protobuf::uint32 source_tv_public_addr() const;
  inline void set_source_tv_public_addr(::google::protobuf::uint32 value);
  
  // optional uint32 source_tv_private_addr = 2;
  inline bool has_source_tv_private_addr() const;
  inline void clear_source_tv_private_addr();
  static const int kSourceTvPrivateAddrFieldNumber = 2;
  inline ::google::protobuf::uint32 source_tv_private_addr() const;
  inline void set_source_tv_private_addr(::google::protobuf::uint32 value);
  
  // optional uint32 source_tv_port = 3;
  inline bool has_source_tv_port() const;
  inline void clear_source_tv_port();
  static const int kSourceTvPortFieldNumber = 3;
  inline ::google::protobuf::uint32 source_tv_port() const;
  inline void set_source_tv_port(::google::protobuf::uint32 value);
  
  // optional uint64 game_server_steam_id = 4;
  inline bool has_game_server_steam_id() const;
  inline void clear_game_server_steam_id();
  static const int kGameServerSteamIdFieldNumber = 4;
  inline ::google::protobuf::uint64 game_server_steam_id() const;
  inline void set_game_server_steam_id(::google::protobuf::uint64 value);
  
  // optional uint32 parent_count = 5;
  inline bool has_parent_count() const;
  inline void clear_parent_count();
  static const int kParentCountFieldNumber = 5;
  inline ::google::protobuf::uint32 parent_count() const;
  inline void set_parent_count(::google::protobuf::uint32 value);
  
  // optional fixed64 tv_unique_secret_code = 6;
  inline bool has_tv_unique_secret_code() const;
  inline void clear_tv_unique_secret_code();
  static const int kTvUniqueSecretCodeFieldNumber = 6;
  inline ::google::protobuf::uint64 tv_unique_secret_code() const;
  inline void set_tv_unique_secret_code(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:CMsgGCToRelayConnect)
 private:
  inline void set_has_source_tv_public_addr();
  inline void clear_has_source_tv_public_addr();
  inline void set_has_source_tv_private_addr();
  inline void clear_has_source_tv_private_addr();
  inline void set_has_source_tv_port();
  inline void clear_has_source_tv_port();
  inline void set_has_game_server_steam_id();
  inline void clear_has_game_server_steam_id();
  inline void set_has_parent_count();
  inline void clear_has_parent_count();
  inline void set_has_tv_unique_secret_code();
  inline void clear_has_tv_unique_secret_code();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 source_tv_public_addr_;
  ::google::protobuf::uint32 source_tv_private_addr_;
  ::google::protobuf::uint64 game_server_steam_id_;
  ::google::protobuf::uint32 source_tv_port_;
  ::google::protobuf::uint32 parent_count_;
  ::google::protobuf::uint64 tv_unique_secret_code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgGCToRelayConnect* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCToRelayConnectResponse : public ::google::protobuf::Message {
 public:
  CMsgGCToRelayConnectResponse();
  virtual ~CMsgGCToRelayConnectResponse();
  
  CMsgGCToRelayConnectResponse(const CMsgGCToRelayConnectResponse& from);
  
  inline CMsgGCToRelayConnectResponse& operator=(const CMsgGCToRelayConnectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCToRelayConnectResponse& default_instance();
  
  void Swap(CMsgGCToRelayConnectResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMsgGCToRelayConnectResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCToRelayConnectResponse& from);
  void MergeFrom(const CMsgGCToRelayConnectResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:CMsgGCToRelayConnectResponse)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgGCToRelayConnectResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCBanStatusRequest : public ::google::protobuf::Message {
 public:
  CMsgGCBanStatusRequest();
  virtual ~CMsgGCBanStatusRequest();
  
  CMsgGCBanStatusRequest(const CMsgGCBanStatusRequest& from);
  
  inline CMsgGCBanStatusRequest& operator=(const CMsgGCBanStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCBanStatusRequest& default_instance();
  
  void Swap(CMsgGCBanStatusRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMsgGCBanStatusRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCBanStatusRequest& from);
  void MergeFrom(const CMsgGCBanStatusRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CMsgGCBanStatusRequest)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 account_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgGCBanStatusRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCBanStatusResponse : public ::google::protobuf::Message {
 public:
  CMsgGCBanStatusResponse();
  virtual ~CMsgGCBanStatusResponse();
  
  CMsgGCBanStatusResponse(const CMsgGCBanStatusResponse& from);
  
  inline CMsgGCBanStatusResponse& operator=(const CMsgGCBanStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCBanStatusResponse& default_instance();
  
  void Swap(CMsgGCBanStatusResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMsgGCBanStatusResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCBanStatusResponse& from);
  void MergeFrom(const CMsgGCBanStatusResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);
  
  // optional bool low_priority = 2;
  inline bool has_low_priority() const;
  inline void clear_low_priority();
  static const int kLowPriorityFieldNumber = 2;
  inline bool low_priority() const;
  inline void set_low_priority(bool value);
  
  // optional bool text_chat_banned = 3;
  inline bool has_text_chat_banned() const;
  inline void clear_text_chat_banned();
  static const int kTextChatBannedFieldNumber = 3;
  inline bool text_chat_banned() const;
  inline void set_text_chat_banned(bool value);
  
  // optional bool voice_chat_banned = 4;
  inline bool has_voice_chat_banned() const;
  inline void clear_voice_chat_banned();
  static const int kVoiceChatBannedFieldNumber = 4;
  inline bool voice_chat_banned() const;
  inline void set_voice_chat_banned(bool value);
  
  // @@protoc_insertion_point(class_scope:CMsgGCBanStatusResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_low_priority();
  inline void clear_has_low_priority();
  inline void set_has_text_chat_banned();
  inline void clear_has_text_chat_banned();
  inline void set_has_voice_chat_banned();
  inline void clear_has_voice_chat_banned();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 result_;
  bool low_priority_;
  bool text_chat_banned_;
  bool voice_chat_banned_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgGCBanStatusResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgTournamentItemEvent : public ::google::protobuf::Message {
 public:
  CMsgTournamentItemEvent();
  virtual ~CMsgTournamentItemEvent();
  
  CMsgTournamentItemEvent(const CMsgTournamentItemEvent& from);
  
  inline CMsgTournamentItemEvent& operator=(const CMsgTournamentItemEvent& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgTournamentItemEvent& default_instance();
  
  void Swap(CMsgTournamentItemEvent* other);
  
  // implements Message ----------------------------------------------
  
  CMsgTournamentItemEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgTournamentItemEvent& from);
  void MergeFrom(const CMsgTournamentItemEvent& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional fixed32 killer_account_id = 1;
  inline bool has_killer_account_id() const;
  inline void clear_killer_account_id();
  static const int kKillerAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 killer_account_id() const;
  inline void set_killer_account_id(::google::protobuf::uint32 value);
  
  // optional fixed32 victim_account_id = 2;
  inline bool has_victim_account_id() const;
  inline void clear_victim_account_id();
  static const int kVictimAccountIdFieldNumber = 2;
  inline ::google::protobuf::uint32 victim_account_id() const;
  inline void set_victim_account_id(::google::protobuf::uint32 value);
  
  // optional .DOTA_TournamentEvents event_type = 3 [default = TE_FIRST_BLOOD];
  inline bool has_event_type() const;
  inline void clear_event_type();
  static const int kEventTypeFieldNumber = 3;
  inline DOTA_TournamentEvents event_type() const;
  inline void set_event_type(DOTA_TournamentEvents value);
  
  // optional int32 tv_delay = 4;
  inline bool has_tv_delay() const;
  inline void clear_tv_delay();
  static const int kTvDelayFieldNumber = 4;
  inline ::google::protobuf::int32 tv_delay() const;
  inline void set_tv_delay(::google::protobuf::int32 value);
  
  // optional int32 dota_time = 5;
  inline bool has_dota_time() const;
  inline void clear_dota_time();
  static const int kDotaTimeFieldNumber = 5;
  inline ::google::protobuf::int32 dota_time() const;
  inline void set_dota_time(::google::protobuf::int32 value);
  
  // optional float replay_time = 6;
  inline bool has_replay_time() const;
  inline void clear_replay_time();
  static const int kReplayTimeFieldNumber = 6;
  inline float replay_time() const;
  inline void set_replay_time(float value);
  
  // optional string loot_list = 7;
  inline bool has_loot_list() const;
  inline void clear_loot_list();
  static const int kLootListFieldNumber = 7;
  inline const ::std::string& loot_list() const;
  inline void set_loot_list(const ::std::string& value);
  inline void set_loot_list(const char* value);
  inline void set_loot_list(const char* value, size_t size);
  inline ::std::string* mutable_loot_list();
  inline ::std::string* release_loot_list();
  
  // optional uint32 event_team = 8;
  inline bool has_event_team() const;
  inline void clear_event_team();
  static const int kEventTeamFieldNumber = 8;
  inline ::google::protobuf::uint32 event_team() const;
  inline void set_event_team(::google::protobuf::uint32 value);
  
  // optional uint32 multi_kill_count = 9;
  inline bool has_multi_kill_count() const;
  inline void clear_multi_kill_count();
  static const int kMultiKillCountFieldNumber = 9;
  inline ::google::protobuf::uint32 multi_kill_count() const;
  inline void set_multi_kill_count(::google::protobuf::uint32 value);
  
  // optional uint32 winner_score = 10;
  inline bool has_winner_score() const;
  inline void clear_winner_score();
  static const int kWinnerScoreFieldNumber = 10;
  inline ::google::protobuf::uint32 winner_score() const;
  inline void set_winner_score(::google::protobuf::uint32 value);
  
  // optional uint32 loser_score = 11;
  inline bool has_loser_score() const;
  inline void clear_loser_score();
  static const int kLoserScoreFieldNumber = 11;
  inline ::google::protobuf::uint32 loser_score() const;
  inline void set_loser_score(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CMsgTournamentItemEvent)
 private:
  inline void set_has_killer_account_id();
  inline void clear_has_killer_account_id();
  inline void set_has_victim_account_id();
  inline void clear_has_victim_account_id();
  inline void set_has_event_type();
  inline void clear_has_event_type();
  inline void set_has_tv_delay();
  inline void clear_has_tv_delay();
  inline void set_has_dota_time();
  inline void clear_has_dota_time();
  inline void set_has_replay_time();
  inline void clear_has_replay_time();
  inline void set_has_loot_list();
  inline void clear_has_loot_list();
  inline void set_has_event_team();
  inline void clear_has_event_team();
  inline void set_has_multi_kill_count();
  inline void clear_has_multi_kill_count();
  inline void set_has_winner_score();
  inline void clear_has_winner_score();
  inline void set_has_loser_score();
  inline void clear_has_loser_score();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 killer_account_id_;
  ::google::protobuf::uint32 victim_account_id_;
  int event_type_;
  ::google::protobuf::int32 tv_delay_;
  ::google::protobuf::int32 dota_time_;
  float replay_time_;
  ::std::string* loot_list_;
  ::google::protobuf::uint32 event_team_;
  ::google::protobuf::uint32 multi_kill_count_;
  ::google::protobuf::uint32 winner_score_;
  ::google::protobuf::uint32 loser_score_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgTournamentItemEvent* default_instance_;
};
// -------------------------------------------------------------------

class CMsgTournamentItemEventResponse : public ::google::protobuf::Message {
 public:
  CMsgTournamentItemEventResponse();
  virtual ~CMsgTournamentItemEventResponse();
  
  CMsgTournamentItemEventResponse(const CMsgTournamentItemEventResponse& from);
  
  inline CMsgTournamentItemEventResponse& operator=(const CMsgTournamentItemEventResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgTournamentItemEventResponse& default_instance();
  
  void Swap(CMsgTournamentItemEventResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMsgTournamentItemEventResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgTournamentItemEventResponse& from);
  void MergeFrom(const CMsgTournamentItemEventResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .DOTA_TournamentEvents event_type = 1 [default = TE_FIRST_BLOOD];
  inline bool has_event_type() const;
  inline void clear_event_type();
  static const int kEventTypeFieldNumber = 1;
  inline DOTA_TournamentEvents event_type() const;
  inline void set_event_type(DOTA_TournamentEvents value);
  
  // optional string winner_name = 2;
  inline bool has_winner_name() const;
  inline void clear_winner_name();
  static const int kWinnerNameFieldNumber = 2;
  inline const ::std::string& winner_name() const;
  inline void set_winner_name(const ::std::string& value);
  inline void set_winner_name(const char* value);
  inline void set_winner_name(const char* value, size_t size);
  inline ::std::string* mutable_winner_name();
  inline ::std::string* release_winner_name();
  
  // optional bool tv_delayed = 3;
  inline bool has_tv_delayed() const;
  inline void clear_tv_delayed();
  static const int kTvDelayedFieldNumber = 3;
  inline bool tv_delayed() const;
  inline void set_tv_delayed(bool value);
  
  // optional bool inhall = 4;
  inline bool has_inhall() const;
  inline void clear_inhall();
  static const int kInhallFieldNumber = 4;
  inline bool inhall() const;
  inline void set_inhall(bool value);
  
  // optional uint32 itemdef = 5;
  inline bool has_itemdef() const;
  inline void clear_itemdef();
  static const int kItemdefFieldNumber = 5;
  inline ::google::protobuf::uint32 itemdef() const;
  inline void set_itemdef(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CMsgTournamentItemEventResponse)
 private:
  inline void set_has_event_type();
  inline void clear_has_event_type();
  inline void set_has_winner_name();
  inline void clear_has_winner_name();
  inline void set_has_tv_delayed();
  inline void clear_has_tv_delayed();
  inline void set_has_inhall();
  inline void clear_has_inhall();
  inline void set_has_itemdef();
  inline void clear_has_itemdef();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* winner_name_;
  int event_type_;
  bool tv_delayed_;
  bool inhall_;
  ::google::protobuf::uint32 itemdef_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgTournamentItemEventResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgTeamFanfare : public ::google::protobuf::Message {
 public:
  CMsgTeamFanfare();
  virtual ~CMsgTeamFanfare();
  
  CMsgTeamFanfare(const CMsgTeamFanfare& from);
  
  inline CMsgTeamFanfare& operator=(const CMsgTeamFanfare& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgTeamFanfare& default_instance();
  
  void Swap(CMsgTeamFanfare* other);
  
  // implements Message ----------------------------------------------
  
  CMsgTeamFanfare* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgTeamFanfare& from);
  void MergeFrom(const CMsgTeamFanfare& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 match_id = 1;
  inline bool has_match_id() const;
  inline void clear_match_id();
  static const int kMatchIdFieldNumber = 1;
  inline ::google::protobuf::uint32 match_id() const;
  inline void set_match_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CMsgTeamFanfare)
 private:
  inline void set_has_match_id();
  inline void clear_has_match_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 match_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgTeamFanfare* default_instance_;
};
// -------------------------------------------------------------------

class CMsgResponseTeamFanfare : public ::google::protobuf::Message {
 public:
  CMsgResponseTeamFanfare();
  virtual ~CMsgResponseTeamFanfare();
  
  CMsgResponseTeamFanfare(const CMsgResponseTeamFanfare& from);
  
  inline CMsgResponseTeamFanfare& operator=(const CMsgResponseTeamFanfare& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgResponseTeamFanfare& default_instance();
  
  void Swap(CMsgResponseTeamFanfare* other);
  
  // implements Message ----------------------------------------------
  
  CMsgResponseTeamFanfare* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgResponseTeamFanfare& from);
  void MergeFrom(const CMsgResponseTeamFanfare& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 fanfare_goodguys = 1;
  inline bool has_fanfare_goodguys() const;
  inline void clear_fanfare_goodguys();
  static const int kFanfareGoodguysFieldNumber = 1;
  inline ::google::protobuf::uint32 fanfare_goodguys() const;
  inline void set_fanfare_goodguys(::google::protobuf::uint32 value);
  
  // optional uint32 fanfare_badguys = 2;
  inline bool has_fanfare_badguys() const;
  inline void clear_fanfare_badguys();
  static const int kFanfareBadguysFieldNumber = 2;
  inline ::google::protobuf::uint32 fanfare_badguys() const;
  inline void set_fanfare_badguys(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CMsgResponseTeamFanfare)
 private:
  inline void set_has_fanfare_goodguys();
  inline void clear_has_fanfare_goodguys();
  inline void set_has_fanfare_badguys();
  inline void clear_has_fanfare_badguys();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 fanfare_goodguys_;
  ::google::protobuf::uint32 fanfare_badguys_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgResponseTeamFanfare* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGameServerUploadSaveGame : public ::google::protobuf::Message {
 public:
  CMsgGameServerUploadSaveGame();
  virtual ~CMsgGameServerUploadSaveGame();
  
  CMsgGameServerUploadSaveGame(const CMsgGameServerUploadSaveGame& from);
  
  inline CMsgGameServerUploadSaveGame& operator=(const CMsgGameServerUploadSaveGame& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGameServerUploadSaveGame& default_instance();
  
  void Swap(CMsgGameServerUploadSaveGame* other);
  
  // implements Message ----------------------------------------------
  
  CMsgGameServerUploadSaveGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGameServerUploadSaveGame& from);
  void MergeFrom(const CMsgGameServerUploadSaveGame& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 game_time = 1;
  inline bool has_game_time() const;
  inline void clear_game_time();
  static const int kGameTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 game_time() const;
  inline void set_game_time(::google::protobuf::uint32 value);
  
  // optional bytes save_game_data = 2;
  inline bool has_save_game_data() const;
  inline void clear_save_game_data();
  static const int kSaveGameDataFieldNumber = 2;
  inline const ::std::string& save_game_data() const;
  inline void set_save_game_data(const ::std::string& value);
  inline void set_save_game_data(const char* value);
  inline void set_save_game_data(const void* value, size_t size);
  inline ::std::string* mutable_save_game_data();
  inline ::std::string* release_save_game_data();
  
  // optional uint64 lobby_id = 3;
  inline bool has_lobby_id() const;
  inline void clear_lobby_id();
  static const int kLobbyIdFieldNumber = 3;
  inline ::google::protobuf::uint64 lobby_id() const;
  inline void set_lobby_id(::google::protobuf::uint64 value);
  
  // repeated uint64 player_steam_ids = 4;
  inline int player_steam_ids_size() const;
  inline void clear_player_steam_ids();
  static const int kPlayerSteamIdsFieldNumber = 4;
  inline ::google::protobuf::uint64 player_steam_ids(int index) const;
  inline void set_player_steam_ids(int index, ::google::protobuf::uint64 value);
  inline void add_player_steam_ids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      player_steam_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_player_steam_ids();
  
  // @@protoc_insertion_point(class_scope:CMsgGameServerUploadSaveGame)
 private:
  inline void set_has_game_time();
  inline void clear_has_game_time();
  inline void set_has_save_game_data();
  inline void clear_has_save_game_data();
  inline void set_has_lobby_id();
  inline void clear_has_lobby_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* save_game_data_;
  ::google::protobuf::uint64 lobby_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > player_steam_ids_;
  ::google::protobuf::uint32 game_time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgGameServerUploadSaveGame* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGameServerSaveGameResult : public ::google::protobuf::Message {
 public:
  CMsgGameServerSaveGameResult();
  virtual ~CMsgGameServerSaveGameResult();
  
  CMsgGameServerSaveGameResult(const CMsgGameServerSaveGameResult& from);
  
  inline CMsgGameServerSaveGameResult& operator=(const CMsgGameServerSaveGameResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGameServerSaveGameResult& default_instance();
  
  void Swap(CMsgGameServerSaveGameResult* other);
  
  // implements Message ----------------------------------------------
  
  CMsgGameServerSaveGameResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGameServerSaveGameResult& from);
  void MergeFrom(const CMsgGameServerSaveGameResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CMsgGameServerSaveGameResult_Result Result;
  static const Result SaveSuccessful = CMsgGameServerSaveGameResult_Result_SaveSuccessful;
  static const Result SessionNotFound = CMsgGameServerSaveGameResult_Result_SessionNotFound;
  static const Result DatabaseError = CMsgGameServerSaveGameResult_Result_DatabaseError;
  static const Result TooBig = CMsgGameServerSaveGameResult_Result_TooBig;
  static inline bool Result_IsValid(int value) {
    return CMsgGameServerSaveGameResult_Result_IsValid(value);
  }
  static const Result Result_MIN =
    CMsgGameServerSaveGameResult_Result_Result_MIN;
  static const Result Result_MAX =
    CMsgGameServerSaveGameResult_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    CMsgGameServerSaveGameResult_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return CMsgGameServerSaveGameResult_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return CMsgGameServerSaveGameResult_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return CMsgGameServerSaveGameResult_Result_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .CMsgGameServerSaveGameResult.Result result = 1 [default = SaveSuccessful];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::CMsgGameServerSaveGameResult_Result result() const;
  inline void set_result(::CMsgGameServerSaveGameResult_Result value);
  
  // @@protoc_insertion_point(class_scope:CMsgGameServerSaveGameResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int result_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgGameServerSaveGameResult* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGameServerGetLoadGame : public ::google::protobuf::Message {
 public:
  CMsgGameServerGetLoadGame();
  virtual ~CMsgGameServerGetLoadGame();
  
  CMsgGameServerGetLoadGame(const CMsgGameServerGetLoadGame& from);
  
  inline CMsgGameServerGetLoadGame& operator=(const CMsgGameServerGetLoadGame& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGameServerGetLoadGame& default_instance();
  
  void Swap(CMsgGameServerGetLoadGame* other);
  
  // implements Message ----------------------------------------------
  
  CMsgGameServerGetLoadGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGameServerGetLoadGame& from);
  void MergeFrom(const CMsgGameServerGetLoadGame& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 save_id = 1;
  inline bool has_save_id() const;
  inline void clear_save_id();
  static const int kSaveIdFieldNumber = 1;
  inline ::google::protobuf::uint32 save_id() const;
  inline void set_save_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CMsgGameServerGetLoadGame)
 private:
  inline void set_has_save_id();
  inline void clear_has_save_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 save_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgGameServerGetLoadGame* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGameServerGetLoadGameResult : public ::google::protobuf::Message {
 public:
  CMsgGameServerGetLoadGameResult();
  virtual ~CMsgGameServerGetLoadGameResult();
  
  CMsgGameServerGetLoadGameResult(const CMsgGameServerGetLoadGameResult& from);
  
  inline CMsgGameServerGetLoadGameResult& operator=(const CMsgGameServerGetLoadGameResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGameServerGetLoadGameResult& default_instance();
  
  void Swap(CMsgGameServerGetLoadGameResult* other);
  
  // implements Message ----------------------------------------------
  
  CMsgGameServerGetLoadGameResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGameServerGetLoadGameResult& from);
  void MergeFrom(const CMsgGameServerGetLoadGameResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes save_game_data = 1;
  inline bool has_save_game_data() const;
  inline void clear_save_game_data();
  static const int kSaveGameDataFieldNumber = 1;
  inline const ::std::string& save_game_data() const;
  inline void set_save_game_data(const ::std::string& value);
  inline void set_save_game_data(const char* value);
  inline void set_save_game_data(const void* value, size_t size);
  inline ::std::string* mutable_save_game_data();
  inline ::std::string* release_save_game_data();
  
  // @@protoc_insertion_point(class_scope:CMsgGameServerGetLoadGameResult)
 private:
  inline void set_has_save_game_data();
  inline void clear_has_save_game_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* save_game_data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgGameServerGetLoadGameResult* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAGenerateDiretidePrizeList : public ::google::protobuf::Message {
 public:
  CMsgDOTAGenerateDiretidePrizeList();
  virtual ~CMsgDOTAGenerateDiretidePrizeList();
  
  CMsgDOTAGenerateDiretidePrizeList(const CMsgDOTAGenerateDiretidePrizeList& from);
  
  inline CMsgDOTAGenerateDiretidePrizeList& operator=(const CMsgDOTAGenerateDiretidePrizeList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAGenerateDiretidePrizeList& default_instance();
  
  void Swap(CMsgDOTAGenerateDiretidePrizeList* other);
  
  // implements Message ----------------------------------------------
  
  CMsgDOTAGenerateDiretidePrizeList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAGenerateDiretidePrizeList& from);
  void MergeFrom(const CMsgDOTAGenerateDiretidePrizeList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 prize_list = 1;
  inline bool has_prize_list() const;
  inline void clear_prize_list();
  static const int kPrizeListFieldNumber = 1;
  inline ::google::protobuf::uint32 prize_list() const;
  inline void set_prize_list(::google::protobuf::uint32 value);
  
  // optional uint32 highest_roshan_level = 2;
  inline bool has_highest_roshan_level() const;
  inline void clear_highest_roshan_level();
  static const int kHighestRoshanLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 highest_roshan_level() const;
  inline void set_highest_roshan_level(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CMsgDOTAGenerateDiretidePrizeList)
 private:
  inline void set_has_prize_list();
  inline void clear_has_prize_list();
  inline void set_has_highest_roshan_level();
  inline void clear_has_highest_roshan_level();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 prize_list_;
  ::google::protobuf::uint32 highest_roshan_level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgDOTAGenerateDiretidePrizeList* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAGenerateDiretidePrizeListResponse : public ::google::protobuf::Message {
 public:
  CMsgDOTAGenerateDiretidePrizeListResponse();
  virtual ~CMsgDOTAGenerateDiretidePrizeListResponse();
  
  CMsgDOTAGenerateDiretidePrizeListResponse(const CMsgDOTAGenerateDiretidePrizeListResponse& from);
  
  inline CMsgDOTAGenerateDiretidePrizeListResponse& operator=(const CMsgDOTAGenerateDiretidePrizeListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAGenerateDiretidePrizeListResponse& default_instance();
  
  void Swap(CMsgDOTAGenerateDiretidePrizeListResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMsgDOTAGenerateDiretidePrizeListResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAGenerateDiretidePrizeListResponse& from);
  void MergeFrom(const CMsgDOTAGenerateDiretidePrizeListResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated uint32 item_defs = 1;
  inline int item_defs_size() const;
  inline void clear_item_defs();
  static const int kItemDefsFieldNumber = 1;
  inline ::google::protobuf::uint32 item_defs(int index) const;
  inline void set_item_defs(int index, ::google::protobuf::uint32 value);
  inline void add_item_defs(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      item_defs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_item_defs();
  
  // repeated fixed64 steam_ids = 2;
  inline int steam_ids_size() const;
  inline void clear_steam_ids();
  static const int kSteamIdsFieldNumber = 2;
  inline ::google::protobuf::uint64 steam_ids(int index) const;
  inline void set_steam_ids(int index, ::google::protobuf::uint64 value);
  inline void add_steam_ids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      steam_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_steam_ids();
  
  // optional uint32 prize_list = 3;
  inline bool has_prize_list() const;
  inline void clear_prize_list();
  static const int kPrizeListFieldNumber = 3;
  inline ::google::protobuf::uint32 prize_list() const;
  inline void set_prize_list(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CMsgDOTAGenerateDiretidePrizeListResponse)
 private:
  inline void set_has_prize_list();
  inline void clear_has_prize_list();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > item_defs_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > steam_ids_;
  ::google::protobuf::uint32 prize_list_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgDOTAGenerateDiretidePrizeListResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARewardDiretidePrizes : public ::google::protobuf::Message {
 public:
  CMsgDOTARewardDiretidePrizes();
  virtual ~CMsgDOTARewardDiretidePrizes();
  
  CMsgDOTARewardDiretidePrizes(const CMsgDOTARewardDiretidePrizes& from);
  
  inline CMsgDOTARewardDiretidePrizes& operator=(const CMsgDOTARewardDiretidePrizes& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARewardDiretidePrizes& default_instance();
  
  void Swap(CMsgDOTARewardDiretidePrizes* other);
  
  // implements Message ----------------------------------------------
  
  CMsgDOTARewardDiretidePrizes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARewardDiretidePrizes& from);
  void MergeFrom(const CMsgDOTARewardDiretidePrizes& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 team = 1;
  inline bool has_team() const;
  inline void clear_team();
  static const int kTeamFieldNumber = 1;
  inline ::google::protobuf::uint32 team() const;
  inline void set_team(::google::protobuf::uint32 value);
  
  // optional uint32 prize_list = 2;
  inline bool has_prize_list() const;
  inline void clear_prize_list();
  static const int kPrizeListFieldNumber = 2;
  inline ::google::protobuf::uint32 prize_list() const;
  inline void set_prize_list(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CMsgDOTARewardDiretidePrizes)
 private:
  inline void set_has_team();
  inline void clear_has_team();
  inline void set_has_prize_list();
  inline void clear_has_prize_list();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 team_;
  ::google::protobuf::uint32 prize_list_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgDOTARewardDiretidePrizes* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTADiretidePrizesRewardedResponse : public ::google::protobuf::Message {
 public:
  CMsgDOTADiretidePrizesRewardedResponse();
  virtual ~CMsgDOTADiretidePrizesRewardedResponse();
  
  CMsgDOTADiretidePrizesRewardedResponse(const CMsgDOTADiretidePrizesRewardedResponse& from);
  
  inline CMsgDOTADiretidePrizesRewardedResponse& operator=(const CMsgDOTADiretidePrizesRewardedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTADiretidePrizesRewardedResponse& default_instance();
  
  void Swap(CMsgDOTADiretidePrizesRewardedResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMsgDOTADiretidePrizesRewardedResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTADiretidePrizesRewardedResponse& from);
  void MergeFrom(const CMsgDOTADiretidePrizesRewardedResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 prize_list = 1;
  inline bool has_prize_list() const;
  inline void clear_prize_list();
  static const int kPrizeListFieldNumber = 1;
  inline ::google::protobuf::uint32 prize_list() const;
  inline void set_prize_list(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CMsgDOTADiretidePrizesRewardedResponse)
 private:
  inline void set_has_prize_list();
  inline void clear_has_prize_list();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 prize_list_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgDOTADiretidePrizesRewardedResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAAwardEventPoints_AwardPoints : public ::google::protobuf::Message {
 public:
  CMsgDOTAAwardEventPoints_AwardPoints();
  virtual ~CMsgDOTAAwardEventPoints_AwardPoints();
  
  CMsgDOTAAwardEventPoints_AwardPoints(const CMsgDOTAAwardEventPoints_AwardPoints& from);
  
  inline CMsgDOTAAwardEventPoints_AwardPoints& operator=(const CMsgDOTAAwardEventPoints_AwardPoints& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAAwardEventPoints_AwardPoints& default_instance();
  
  void Swap(CMsgDOTAAwardEventPoints_AwardPoints* other);
  
  // implements Message ----------------------------------------------
  
  CMsgDOTAAwardEventPoints_AwardPoints* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAAwardEventPoints_AwardPoints& from);
  void MergeFrom(const CMsgDOTAAwardEventPoints_AwardPoints& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);
  
  // optional int32 points = 2;
  inline bool has_points() const;
  inline void clear_points();
  static const int kPointsFieldNumber = 2;
  inline ::google::protobuf::int32 points() const;
  inline void set_points(::google::protobuf::int32 value);
  
  // optional int32 premium_points = 3;
  inline bool has_premium_points() const;
  inline void clear_premium_points();
  static const int kPremiumPointsFieldNumber = 3;
  inline ::google::protobuf::int32 premium_points() const;
  inline void set_premium_points(::google::protobuf::int32 value);
  
  // optional int32 rank = 4;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 4;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:CMsgDOTAAwardEventPoints.AwardPoints)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_points();
  inline void clear_has_points();
  inline void set_has_premium_points();
  inline void clear_has_premium_points();
  inline void set_has_rank();
  inline void clear_has_rank();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::int32 points_;
  ::google::protobuf::int32 premium_points_;
  ::google::protobuf::int32 rank_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgDOTAAwardEventPoints_AwardPoints* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAAwardEventPoints : public ::google::protobuf::Message {
 public:
  CMsgDOTAAwardEventPoints();
  virtual ~CMsgDOTAAwardEventPoints();
  
  CMsgDOTAAwardEventPoints(const CMsgDOTAAwardEventPoints& from);
  
  inline CMsgDOTAAwardEventPoints& operator=(const CMsgDOTAAwardEventPoints& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAAwardEventPoints& default_instance();
  
  void Swap(CMsgDOTAAwardEventPoints* other);
  
  // implements Message ----------------------------------------------
  
  CMsgDOTAAwardEventPoints* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAAwardEventPoints& from);
  void MergeFrom(const CMsgDOTAAwardEventPoints& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CMsgDOTAAwardEventPoints_AwardPoints AwardPoints;
  
  // accessors -------------------------------------------------------
  
  // repeated .CMsgDOTAAwardEventPoints.AwardPoints award_points = 1;
  inline int award_points_size() const;
  inline void clear_award_points();
  static const int kAwardPointsFieldNumber = 1;
  inline const ::CMsgDOTAAwardEventPoints_AwardPoints& award_points(int index) const;
  inline ::CMsgDOTAAwardEventPoints_AwardPoints* mutable_award_points(int index);
  inline ::CMsgDOTAAwardEventPoints_AwardPoints* add_award_points();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAAwardEventPoints_AwardPoints >&
      award_points() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAAwardEventPoints_AwardPoints >*
      mutable_award_points();
  
  // optional uint64 match_id = 2;
  inline bool has_match_id() const;
  inline void clear_match_id();
  static const int kMatchIdFieldNumber = 2;
  inline ::google::protobuf::uint64 match_id() const;
  inline void set_match_id(::google::protobuf::uint64 value);
  
  // optional uint32 event_id = 4;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 4;
  inline ::google::protobuf::uint32 event_id() const;
  inline void set_event_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CMsgDOTAAwardEventPoints)
 private:
  inline void set_has_match_id();
  inline void clear_has_match_id();
  inline void set_has_event_id();
  inline void clear_has_event_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAAwardEventPoints_AwardPoints > award_points_;
  ::google::protobuf::uint64 match_id_;
  ::google::protobuf::uint32 event_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgDOTAAwardEventPoints* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAFrostivusTimeElapsed_User : public ::google::protobuf::Message {
 public:
  CMsgDOTAFrostivusTimeElapsed_User();
  virtual ~CMsgDOTAFrostivusTimeElapsed_User();
  
  CMsgDOTAFrostivusTimeElapsed_User(const CMsgDOTAFrostivusTimeElapsed_User& from);
  
  inline CMsgDOTAFrostivusTimeElapsed_User& operator=(const CMsgDOTAFrostivusTimeElapsed_User& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAFrostivusTimeElapsed_User& default_instance();
  
  void Swap(CMsgDOTAFrostivusTimeElapsed_User* other);
  
  // implements Message ----------------------------------------------
  
  CMsgDOTAFrostivusTimeElapsed_User* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAFrostivusTimeElapsed_User& from);
  void MergeFrom(const CMsgDOTAFrostivusTimeElapsed_User& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);
  
  // optional uint32 time_elapsed_s = 2;
  inline bool has_time_elapsed_s() const;
  inline void clear_time_elapsed_s();
  static const int kTimeElapsedSFieldNumber = 2;
  inline ::google::protobuf::uint32 time_elapsed_s() const;
  inline void set_time_elapsed_s(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CMsgDOTAFrostivusTimeElapsed.User)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_time_elapsed_s();
  inline void clear_has_time_elapsed_s();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 time_elapsed_s_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgDOTAFrostivusTimeElapsed_User* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAFrostivusTimeElapsed : public ::google::protobuf::Message {
 public:
  CMsgDOTAFrostivusTimeElapsed();
  virtual ~CMsgDOTAFrostivusTimeElapsed();
  
  CMsgDOTAFrostivusTimeElapsed(const CMsgDOTAFrostivusTimeElapsed& from);
  
  inline CMsgDOTAFrostivusTimeElapsed& operator=(const CMsgDOTAFrostivusTimeElapsed& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAFrostivusTimeElapsed& default_instance();
  
  void Swap(CMsgDOTAFrostivusTimeElapsed* other);
  
  // implements Message ----------------------------------------------
  
  CMsgDOTAFrostivusTimeElapsed* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAFrostivusTimeElapsed& from);
  void MergeFrom(const CMsgDOTAFrostivusTimeElapsed& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CMsgDOTAFrostivusTimeElapsed_User User;
  
  // accessors -------------------------------------------------------
  
  // optional uint32 seconds = 1;
  inline bool has_seconds() const;
  inline void clear_seconds();
  static const int kSecondsFieldNumber = 1;
  inline ::google::protobuf::uint32 seconds() const;
  inline void set_seconds(::google::protobuf::uint32 value);
  
  // repeated .CMsgDOTAFrostivusTimeElapsed.User users = 2;
  inline int users_size() const;
  inline void clear_users();
  static const int kUsersFieldNumber = 2;
  inline const ::CMsgDOTAFrostivusTimeElapsed_User& users(int index) const;
  inline ::CMsgDOTAFrostivusTimeElapsed_User* mutable_users(int index);
  inline ::CMsgDOTAFrostivusTimeElapsed_User* add_users();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAFrostivusTimeElapsed_User >&
      users() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAFrostivusTimeElapsed_User >*
      mutable_users();
  
  // optional uint64 match_id = 3;
  inline bool has_match_id() const;
  inline void clear_match_id();
  static const int kMatchIdFieldNumber = 3;
  inline ::google::protobuf::uint64 match_id() const;
  inline void set_match_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:CMsgDOTAFrostivusTimeElapsed)
 private:
  inline void set_has_seconds();
  inline void clear_has_seconds();
  inline void set_has_match_id();
  inline void clear_has_match_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAFrostivusTimeElapsed_User > users_;
  ::google::protobuf::uint64 match_id_;
  ::google::protobuf::uint32 seconds_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgDOTAFrostivusTimeElapsed* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCToServerPingRequest : public ::google::protobuf::Message {
 public:
  CMsgGCToServerPingRequest();
  virtual ~CMsgGCToServerPingRequest();
  
  CMsgGCToServerPingRequest(const CMsgGCToServerPingRequest& from);
  
  inline CMsgGCToServerPingRequest& operator=(const CMsgGCToServerPingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCToServerPingRequest& default_instance();
  
  void Swap(CMsgGCToServerPingRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMsgGCToServerPingRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCToServerPingRequest& from);
  void MergeFrom(const CMsgGCToServerPingRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional fixed64 request_id = 1;
  inline bool has_request_id() const;
  inline void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  inline ::google::protobuf::uint64 request_id() const;
  inline void set_request_id(::google::protobuf::uint64 value);
  
  // optional uint64 request_time = 2;
  inline bool has_request_time() const;
  inline void clear_request_time();
  static const int kRequestTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 request_time() const;
  inline void set_request_time(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:CMsgGCToServerPingRequest)
 private:
  inline void set_has_request_id();
  inline void clear_has_request_id();
  inline void set_has_request_time();
  inline void clear_has_request_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 request_id_;
  ::google::protobuf::uint64 request_time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgGCToServerPingRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCToServerPingResponse : public ::google::protobuf::Message {
 public:
  CMsgGCToServerPingResponse();
  virtual ~CMsgGCToServerPingResponse();
  
  CMsgGCToServerPingResponse(const CMsgGCToServerPingResponse& from);
  
  inline CMsgGCToServerPingResponse& operator=(const CMsgGCToServerPingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCToServerPingResponse& default_instance();
  
  void Swap(CMsgGCToServerPingResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMsgGCToServerPingResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCToServerPingResponse& from);
  void MergeFrom(const CMsgGCToServerPingResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional fixed64 request_id = 1;
  inline bool has_request_id() const;
  inline void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  inline ::google::protobuf::uint64 request_id() const;
  inline void set_request_id(::google::protobuf::uint64 value);
  
  // optional uint64 request_time = 2;
  inline bool has_request_time() const;
  inline void clear_request_time();
  static const int kRequestTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 request_time() const;
  inline void set_request_time(::google::protobuf::uint64 value);
  
  // optional uint32 cluster = 3;
  inline bool has_cluster() const;
  inline void clear_cluster();
  static const int kClusterFieldNumber = 3;
  inline ::google::protobuf::uint32 cluster() const;
  inline void set_cluster(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CMsgGCToServerPingResponse)
 private:
  inline void set_has_request_id();
  inline void clear_has_request_id();
  inline void set_has_request_time();
  inline void clear_has_request_time();
  inline void set_has_cluster();
  inline void clear_has_cluster();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 request_id_;
  ::google::protobuf::uint64 request_time_;
  ::google::protobuf::uint32 cluster_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgGCToServerPingResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCToServerConsoleCommand : public ::google::protobuf::Message {
 public:
  CMsgGCToServerConsoleCommand();
  virtual ~CMsgGCToServerConsoleCommand();
  
  CMsgGCToServerConsoleCommand(const CMsgGCToServerConsoleCommand& from);
  
  inline CMsgGCToServerConsoleCommand& operator=(const CMsgGCToServerConsoleCommand& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCToServerConsoleCommand& default_instance();
  
  void Swap(CMsgGCToServerConsoleCommand* other);
  
  // implements Message ----------------------------------------------
  
  CMsgGCToServerConsoleCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCToServerConsoleCommand& from);
  void MergeFrom(const CMsgGCToServerConsoleCommand& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string console_command = 1;
  inline bool has_console_command() const;
  inline void clear_console_command();
  static const int kConsoleCommandFieldNumber = 1;
  inline const ::std::string& console_command() const;
  inline void set_console_command(const ::std::string& value);
  inline void set_console_command(const char* value);
  inline void set_console_command(const char* value, size_t size);
  inline ::std::string* mutable_console_command();
  inline ::std::string* release_console_command();
  
  // @@protoc_insertion_point(class_scope:CMsgGCToServerConsoleCommand)
 private:
  inline void set_has_console_command();
  inline void clear_has_console_command();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* console_command_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CMsgGCToServerConsoleCommand* default_instance_;
};
// ===================================================================


// ===================================================================

// CMsgSpawnLootGreevil

// optional bool rare = 1;
inline bool CMsgSpawnLootGreevil::has_rare() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSpawnLootGreevil::set_has_rare() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSpawnLootGreevil::clear_has_rare() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSpawnLootGreevil::clear_rare() {
  rare_ = false;
  clear_has_rare();
}
inline bool CMsgSpawnLootGreevil::rare() const {
  return rare_;
}
inline void CMsgSpawnLootGreevil::set_rare(bool value) {
  set_has_rare();
  rare_ = value;
}

// -------------------------------------------------------------------

// CMsgDismissLootGreevil

// optional bool killed = 2;
inline bool CMsgDismissLootGreevil::has_killed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDismissLootGreevil::set_has_killed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDismissLootGreevil::clear_has_killed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDismissLootGreevil::clear_killed() {
  killed_ = false;
  clear_has_killed();
}
inline bool CMsgDismissLootGreevil::killed() const {
  return killed_;
}
inline void CMsgDismissLootGreevil::set_killed(bool value) {
  set_has_killed();
  killed_ = value;
}

// optional bool rare = 3;
inline bool CMsgDismissLootGreevil::has_rare() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDismissLootGreevil::set_has_rare() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDismissLootGreevil::clear_has_rare() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDismissLootGreevil::clear_rare() {
  rare_ = false;
  clear_has_rare();
}
inline bool CMsgDismissLootGreevil::rare() const {
  return rare_;
}
inline void CMsgDismissLootGreevil::set_rare(bool value) {
  set_has_rare();
  rare_ = value;
}

// -------------------------------------------------------------------

// CMsgDismissLootGreevilResponse

// -------------------------------------------------------------------

// CMsgConnectedPlayers_Player

// optional fixed64 steam_id = 1;
inline bool CMsgConnectedPlayers_Player::has_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgConnectedPlayers_Player::set_has_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgConnectedPlayers_Player::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgConnectedPlayers_Player::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
inline ::google::protobuf::uint64 CMsgConnectedPlayers_Player::steam_id() const {
  return steam_id_;
}
inline void CMsgConnectedPlayers_Player::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
}

// optional uint32 hero_id = 2;
inline bool CMsgConnectedPlayers_Player::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgConnectedPlayers_Player::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgConnectedPlayers_Player::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgConnectedPlayers_Player::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CMsgConnectedPlayers_Player::hero_id() const {
  return hero_id_;
}
inline void CMsgConnectedPlayers_Player::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// optional .CMsgLeaverState leaver_state = 3;
inline bool CMsgConnectedPlayers_Player::has_leaver_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgConnectedPlayers_Player::set_has_leaver_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgConnectedPlayers_Player::clear_has_leaver_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgConnectedPlayers_Player::clear_leaver_state() {
  if (leaver_state_ != NULL) leaver_state_->::CMsgLeaverState::Clear();
  clear_has_leaver_state();
}
inline const ::CMsgLeaverState& CMsgConnectedPlayers_Player::leaver_state() const {
  return leaver_state_ != NULL ? *leaver_state_ : *default_instance_->leaver_state_;
}
inline ::CMsgLeaverState* CMsgConnectedPlayers_Player::mutable_leaver_state() {
  set_has_leaver_state();
  if (leaver_state_ == NULL) leaver_state_ = new ::CMsgLeaverState;
  return leaver_state_;
}
inline ::CMsgLeaverState* CMsgConnectedPlayers_Player::release_leaver_state() {
  clear_has_leaver_state();
  ::CMsgLeaverState* temp = leaver_state_;
  leaver_state_ = NULL;
  return temp;
}

// optional .ENetworkDisconnectionReason disconnect_reason = 4 [default = NETWORK_DISCONNECT_INVALID];
inline bool CMsgConnectedPlayers_Player::has_disconnect_reason() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgConnectedPlayers_Player::set_has_disconnect_reason() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgConnectedPlayers_Player::clear_has_disconnect_reason() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgConnectedPlayers_Player::clear_disconnect_reason() {
  disconnect_reason_ = 0;
  clear_has_disconnect_reason();
}
inline ENetworkDisconnectionReason CMsgConnectedPlayers_Player::disconnect_reason() const {
  return static_cast< ENetworkDisconnectionReason >(disconnect_reason_);
}
inline void CMsgConnectedPlayers_Player::set_disconnect_reason(ENetworkDisconnectionReason value) {
  GOOGLE_DCHECK(ENetworkDisconnectionReason_IsValid(value));
  set_has_disconnect_reason();
  disconnect_reason_ = value;
}

// -------------------------------------------------------------------

// CMsgConnectedPlayers

// repeated .CMsgConnectedPlayers.Player connected_players = 1;
inline int CMsgConnectedPlayers::connected_players_size() const {
  return connected_players_.size();
}
inline void CMsgConnectedPlayers::clear_connected_players() {
  connected_players_.Clear();
}
inline const ::CMsgConnectedPlayers_Player& CMsgConnectedPlayers::connected_players(int index) const {
  return connected_players_.Get(index);
}
inline ::CMsgConnectedPlayers_Player* CMsgConnectedPlayers::mutable_connected_players(int index) {
  return connected_players_.Mutable(index);
}
inline ::CMsgConnectedPlayers_Player* CMsgConnectedPlayers::add_connected_players() {
  return connected_players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgConnectedPlayers_Player >&
CMsgConnectedPlayers::connected_players() const {
  return connected_players_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgConnectedPlayers_Player >*
CMsgConnectedPlayers::mutable_connected_players() {
  return &connected_players_;
}

// repeated .CMsgConnectedPlayers.Player disconnected_players = 7;
inline int CMsgConnectedPlayers::disconnected_players_size() const {
  return disconnected_players_.size();
}
inline void CMsgConnectedPlayers::clear_disconnected_players() {
  disconnected_players_.Clear();
}
inline const ::CMsgConnectedPlayers_Player& CMsgConnectedPlayers::disconnected_players(int index) const {
  return disconnected_players_.Get(index);
}
inline ::CMsgConnectedPlayers_Player* CMsgConnectedPlayers::mutable_disconnected_players(int index) {
  return disconnected_players_.Mutable(index);
}
inline ::CMsgConnectedPlayers_Player* CMsgConnectedPlayers::add_disconnected_players() {
  return disconnected_players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgConnectedPlayers_Player >&
CMsgConnectedPlayers::disconnected_players() const {
  return disconnected_players_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgConnectedPlayers_Player >*
CMsgConnectedPlayers::mutable_disconnected_players() {
  return &disconnected_players_;
}

// optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
inline bool CMsgConnectedPlayers::has_game_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgConnectedPlayers::set_has_game_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgConnectedPlayers::clear_has_game_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgConnectedPlayers::clear_game_state() {
  game_state_ = 0;
  clear_has_game_state();
}
inline DOTA_GameState CMsgConnectedPlayers::game_state() const {
  return static_cast< DOTA_GameState >(game_state_);
}
inline void CMsgConnectedPlayers::set_game_state(DOTA_GameState value) {
  GOOGLE_DCHECK(DOTA_GameState_IsValid(value));
  set_has_game_state();
  game_state_ = value;
}

// optional uint32 num_spectators = 3;
inline bool CMsgConnectedPlayers::has_num_spectators() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgConnectedPlayers::set_has_num_spectators() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgConnectedPlayers::clear_has_num_spectators() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgConnectedPlayers::clear_num_spectators() {
  num_spectators_ = 0u;
  clear_has_num_spectators();
}
inline ::google::protobuf::uint32 CMsgConnectedPlayers::num_spectators() const {
  return num_spectators_;
}
inline void CMsgConnectedPlayers::set_num_spectators(::google::protobuf::uint32 value) {
  set_has_num_spectators();
  num_spectators_ = value;
}

// optional uint32 tower_state = 4;
inline bool CMsgConnectedPlayers::has_tower_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgConnectedPlayers::set_has_tower_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgConnectedPlayers::clear_has_tower_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgConnectedPlayers::clear_tower_state() {
  tower_state_ = 0u;
  clear_has_tower_state();
}
inline ::google::protobuf::uint32 CMsgConnectedPlayers::tower_state() const {
  return tower_state_;
}
inline void CMsgConnectedPlayers::set_tower_state(::google::protobuf::uint32 value) {
  set_has_tower_state();
  tower_state_ = value;
}

// optional bool first_blood_happened = 6;
inline bool CMsgConnectedPlayers::has_first_blood_happened() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgConnectedPlayers::set_has_first_blood_happened() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgConnectedPlayers::clear_has_first_blood_happened() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgConnectedPlayers::clear_first_blood_happened() {
  first_blood_happened_ = false;
  clear_has_first_blood_happened();
}
inline bool CMsgConnectedPlayers::first_blood_happened() const {
  return first_blood_happened_;
}
inline void CMsgConnectedPlayers::set_first_blood_happened(bool value) {
  set_has_first_blood_happened();
  first_blood_happened_ = value;
}

// optional .CMsgConnectedPlayers.SendReason send_reason = 8 [default = INVALID];
inline bool CMsgConnectedPlayers::has_send_reason() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgConnectedPlayers::set_has_send_reason() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgConnectedPlayers::clear_has_send_reason() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgConnectedPlayers::clear_send_reason() {
  send_reason_ = 0;
  clear_has_send_reason();
}
inline ::CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::send_reason() const {
  return static_cast< ::CMsgConnectedPlayers_SendReason >(send_reason_);
}
inline void CMsgConnectedPlayers::set_send_reason(::CMsgConnectedPlayers_SendReason value) {
  GOOGLE_DCHECK(::CMsgConnectedPlayers_SendReason_IsValid(value));
  set_has_send_reason();
  send_reason_ = value;
}

// -------------------------------------------------------------------

// CMsgGameServerInfo

// optional fixed32 server_public_ip_addr = 1;
inline bool CMsgGameServerInfo::has_server_public_ip_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGameServerInfo::set_has_server_public_ip_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGameServerInfo::clear_has_server_public_ip_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGameServerInfo::clear_server_public_ip_addr() {
  server_public_ip_addr_ = 0u;
  clear_has_server_public_ip_addr();
}
inline ::google::protobuf::uint32 CMsgGameServerInfo::server_public_ip_addr() const {
  return server_public_ip_addr_;
}
inline void CMsgGameServerInfo::set_server_public_ip_addr(::google::protobuf::uint32 value) {
  set_has_server_public_ip_addr();
  server_public_ip_addr_ = value;
}

// optional fixed32 server_private_ip_addr = 2;
inline bool CMsgGameServerInfo::has_server_private_ip_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGameServerInfo::set_has_server_private_ip_addr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGameServerInfo::clear_has_server_private_ip_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGameServerInfo::clear_server_private_ip_addr() {
  server_private_ip_addr_ = 0u;
  clear_has_server_private_ip_addr();
}
inline ::google::protobuf::uint32 CMsgGameServerInfo::server_private_ip_addr() const {
  return server_private_ip_addr_;
}
inline void CMsgGameServerInfo::set_server_private_ip_addr(::google::protobuf::uint32 value) {
  set_has_server_private_ip_addr();
  server_private_ip_addr_ = value;
}

// optional uint32 server_port = 3;
inline bool CMsgGameServerInfo::has_server_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGameServerInfo::set_has_server_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGameServerInfo::clear_has_server_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGameServerInfo::clear_server_port() {
  server_port_ = 0u;
  clear_has_server_port();
}
inline ::google::protobuf::uint32 CMsgGameServerInfo::server_port() const {
  return server_port_;
}
inline void CMsgGameServerInfo::set_server_port(::google::protobuf::uint32 value) {
  set_has_server_port();
  server_port_ = value;
}

// optional uint32 server_tv_port = 4;
inline bool CMsgGameServerInfo::has_server_tv_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGameServerInfo::set_has_server_tv_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGameServerInfo::clear_has_server_tv_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGameServerInfo::clear_server_tv_port() {
  server_tv_port_ = 0u;
  clear_has_server_tv_port();
}
inline ::google::protobuf::uint32 CMsgGameServerInfo::server_tv_port() const {
  return server_tv_port_;
}
inline void CMsgGameServerInfo::set_server_tv_port(::google::protobuf::uint32 value) {
  set_has_server_tv_port();
  server_tv_port_ = value;
}

// optional string server_key = 5;
inline bool CMsgGameServerInfo::has_server_key() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgGameServerInfo::set_has_server_key() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgGameServerInfo::clear_has_server_key() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgGameServerInfo::clear_server_key() {
  if (server_key_ != &::google::protobuf::internal::kEmptyString) {
    server_key_->clear();
  }
  clear_has_server_key();
}
inline const ::std::string& CMsgGameServerInfo::server_key() const {
  return *server_key_;
}
inline void CMsgGameServerInfo::set_server_key(const ::std::string& value) {
  set_has_server_key();
  if (server_key_ == &::google::protobuf::internal::kEmptyString) {
    server_key_ = new ::std::string;
  }
  server_key_->assign(value);
}
inline void CMsgGameServerInfo::set_server_key(const char* value) {
  set_has_server_key();
  if (server_key_ == &::google::protobuf::internal::kEmptyString) {
    server_key_ = new ::std::string;
  }
  server_key_->assign(value);
}
inline void CMsgGameServerInfo::set_server_key(const char* value, size_t size) {
  set_has_server_key();
  if (server_key_ == &::google::protobuf::internal::kEmptyString) {
    server_key_ = new ::std::string;
  }
  server_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgGameServerInfo::mutable_server_key() {
  set_has_server_key();
  if (server_key_ == &::google::protobuf::internal::kEmptyString) {
    server_key_ = new ::std::string;
  }
  return server_key_;
}
inline ::std::string* CMsgGameServerInfo::release_server_key() {
  clear_has_server_key();
  if (server_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_key_;
    server_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool server_hibernation = 6;
inline bool CMsgGameServerInfo::has_server_hibernation() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgGameServerInfo::set_has_server_hibernation() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgGameServerInfo::clear_has_server_hibernation() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgGameServerInfo::clear_server_hibernation() {
  server_hibernation_ = false;
  clear_has_server_hibernation();
}
inline bool CMsgGameServerInfo::server_hibernation() const {
  return server_hibernation_;
}
inline void CMsgGameServerInfo::set_server_hibernation(bool value) {
  set_has_server_hibernation();
  server_hibernation_ = value;
}

// optional .CMsgGameServerInfo.ServerType server_type = 7 [default = UNSPECIFIED];
inline bool CMsgGameServerInfo::has_server_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgGameServerInfo::set_has_server_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgGameServerInfo::clear_has_server_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgGameServerInfo::clear_server_type() {
  server_type_ = 0;
  clear_has_server_type();
}
inline ::CMsgGameServerInfo_ServerType CMsgGameServerInfo::server_type() const {
  return static_cast< ::CMsgGameServerInfo_ServerType >(server_type_);
}
inline void CMsgGameServerInfo::set_server_type(::CMsgGameServerInfo_ServerType value) {
  GOOGLE_DCHECK(::CMsgGameServerInfo_ServerType_IsValid(value));
  set_has_server_type();
  server_type_ = value;
}

// optional uint32 server_region = 8;
inline bool CMsgGameServerInfo::has_server_region() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgGameServerInfo::set_has_server_region() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgGameServerInfo::clear_has_server_region() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgGameServerInfo::clear_server_region() {
  server_region_ = 0u;
  clear_has_server_region();
}
inline ::google::protobuf::uint32 CMsgGameServerInfo::server_region() const {
  return server_region_;
}
inline void CMsgGameServerInfo::set_server_region(::google::protobuf::uint32 value) {
  set_has_server_region();
  server_region_ = value;
}

// optional float server_loadavg = 9;
inline bool CMsgGameServerInfo::has_server_loadavg() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgGameServerInfo::set_has_server_loadavg() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgGameServerInfo::clear_has_server_loadavg() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgGameServerInfo::clear_server_loadavg() {
  server_loadavg_ = 0;
  clear_has_server_loadavg();
}
inline float CMsgGameServerInfo::server_loadavg() const {
  return server_loadavg_;
}
inline void CMsgGameServerInfo::set_server_loadavg(float value) {
  set_has_server_loadavg();
  server_loadavg_ = value;
}

// optional float server_tv_broadcast_time = 10;
inline bool CMsgGameServerInfo::has_server_tv_broadcast_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgGameServerInfo::set_has_server_tv_broadcast_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgGameServerInfo::clear_has_server_tv_broadcast_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgGameServerInfo::clear_server_tv_broadcast_time() {
  server_tv_broadcast_time_ = 0;
  clear_has_server_tv_broadcast_time();
}
inline float CMsgGameServerInfo::server_tv_broadcast_time() const {
  return server_tv_broadcast_time_;
}
inline void CMsgGameServerInfo::set_server_tv_broadcast_time(float value) {
  set_has_server_tv_broadcast_time();
  server_tv_broadcast_time_ = value;
}

// optional float server_game_time = 11;
inline bool CMsgGameServerInfo::has_server_game_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgGameServerInfo::set_has_server_game_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgGameServerInfo::clear_has_server_game_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgGameServerInfo::clear_server_game_time() {
  server_game_time_ = 0;
  clear_has_server_game_time();
}
inline float CMsgGameServerInfo::server_game_time() const {
  return server_game_time_;
}
inline void CMsgGameServerInfo::set_server_game_time(float value) {
  set_has_server_game_time();
  server_game_time_ = value;
}

// optional fixed64 server_relay_connected_steam_id = 12;
inline bool CMsgGameServerInfo::has_server_relay_connected_steam_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgGameServerInfo::set_has_server_relay_connected_steam_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgGameServerInfo::clear_has_server_relay_connected_steam_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgGameServerInfo::clear_server_relay_connected_steam_id() {
  server_relay_connected_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_relay_connected_steam_id();
}
inline ::google::protobuf::uint64 CMsgGameServerInfo::server_relay_connected_steam_id() const {
  return server_relay_connected_steam_id_;
}
inline void CMsgGameServerInfo::set_server_relay_connected_steam_id(::google::protobuf::uint64 value) {
  set_has_server_relay_connected_steam_id();
  server_relay_connected_steam_id_ = value;
}

// optional uint32 relay_slots_max = 13;
inline bool CMsgGameServerInfo::has_relay_slots_max() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgGameServerInfo::set_has_relay_slots_max() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgGameServerInfo::clear_has_relay_slots_max() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgGameServerInfo::clear_relay_slots_max() {
  relay_slots_max_ = 0u;
  clear_has_relay_slots_max();
}
inline ::google::protobuf::uint32 CMsgGameServerInfo::relay_slots_max() const {
  return relay_slots_max_;
}
inline void CMsgGameServerInfo::set_relay_slots_max(::google::protobuf::uint32 value) {
  set_has_relay_slots_max();
  relay_slots_max_ = value;
}

// optional int32 relays_connected = 14;
inline bool CMsgGameServerInfo::has_relays_connected() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgGameServerInfo::set_has_relays_connected() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgGameServerInfo::clear_has_relays_connected() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgGameServerInfo::clear_relays_connected() {
  relays_connected_ = 0;
  clear_has_relays_connected();
}
inline ::google::protobuf::int32 CMsgGameServerInfo::relays_connected() const {
  return relays_connected_;
}
inline void CMsgGameServerInfo::set_relays_connected(::google::protobuf::int32 value) {
  set_has_relays_connected();
  relays_connected_ = value;
}

// optional int32 relay_clients_connected = 15;
inline bool CMsgGameServerInfo::has_relay_clients_connected() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgGameServerInfo::set_has_relay_clients_connected() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgGameServerInfo::clear_has_relay_clients_connected() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgGameServerInfo::clear_relay_clients_connected() {
  relay_clients_connected_ = 0;
  clear_has_relay_clients_connected();
}
inline ::google::protobuf::int32 CMsgGameServerInfo::relay_clients_connected() const {
  return relay_clients_connected_;
}
inline void CMsgGameServerInfo::set_relay_clients_connected(::google::protobuf::int32 value) {
  set_has_relay_clients_connected();
  relay_clients_connected_ = value;
}

// optional fixed64 relayed_game_server_steam_id = 16;
inline bool CMsgGameServerInfo::has_relayed_game_server_steam_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgGameServerInfo::set_has_relayed_game_server_steam_id() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CMsgGameServerInfo::clear_has_relayed_game_server_steam_id() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CMsgGameServerInfo::clear_relayed_game_server_steam_id() {
  relayed_game_server_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_relayed_game_server_steam_id();
}
inline ::google::protobuf::uint64 CMsgGameServerInfo::relayed_game_server_steam_id() const {
  return relayed_game_server_steam_id_;
}
inline void CMsgGameServerInfo::set_relayed_game_server_steam_id(::google::protobuf::uint64 value) {
  set_has_relayed_game_server_steam_id();
  relayed_game_server_steam_id_ = value;
}

// optional uint32 parent_relay_count = 17;
inline bool CMsgGameServerInfo::has_parent_relay_count() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMsgGameServerInfo::set_has_parent_relay_count() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CMsgGameServerInfo::clear_has_parent_relay_count() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CMsgGameServerInfo::clear_parent_relay_count() {
  parent_relay_count_ = 0u;
  clear_has_parent_relay_count();
}
inline ::google::protobuf::uint32 CMsgGameServerInfo::parent_relay_count() const {
  return parent_relay_count_;
}
inline void CMsgGameServerInfo::set_parent_relay_count(::google::protobuf::uint32 value) {
  set_has_parent_relay_count();
  parent_relay_count_ = value;
}

// optional fixed64 tv_secret_code = 18;
inline bool CMsgGameServerInfo::has_tv_secret_code() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMsgGameServerInfo::set_has_tv_secret_code() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CMsgGameServerInfo::clear_has_tv_secret_code() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CMsgGameServerInfo::clear_tv_secret_code() {
  tv_secret_code_ = GOOGLE_ULONGLONG(0);
  clear_has_tv_secret_code();
}
inline ::google::protobuf::uint64 CMsgGameServerInfo::tv_secret_code() const {
  return tv_secret_code_;
}
inline void CMsgGameServerInfo::set_tv_secret_code(::google::protobuf::uint64 value) {
  set_has_tv_secret_code();
  tv_secret_code_ = value;
}

// optional uint32 server_version = 19;
inline bool CMsgGameServerInfo::has_server_version() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CMsgGameServerInfo::set_has_server_version() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CMsgGameServerInfo::clear_has_server_version() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CMsgGameServerInfo::clear_server_version() {
  server_version_ = 0u;
  clear_has_server_version();
}
inline ::google::protobuf::uint32 CMsgGameServerInfo::server_version() const {
  return server_version_;
}
inline void CMsgGameServerInfo::set_server_version(::google::protobuf::uint32 value) {
  set_has_server_version();
  server_version_ = value;
}

// optional uint32 server_cluster = 20;
inline bool CMsgGameServerInfo::has_server_cluster() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CMsgGameServerInfo::set_has_server_cluster() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CMsgGameServerInfo::clear_has_server_cluster() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CMsgGameServerInfo::clear_server_cluster() {
  server_cluster_ = 0u;
  clear_has_server_cluster();
}
inline ::google::protobuf::uint32 CMsgGameServerInfo::server_cluster() const {
  return server_cluster_;
}
inline void CMsgGameServerInfo::set_server_cluster(::google::protobuf::uint32 value) {
  set_has_server_cluster();
  server_cluster_ = value;
}

// -------------------------------------------------------------------

// CMsgLeaverDetected

// optional fixed64 steam_id = 1;
inline bool CMsgLeaverDetected::has_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgLeaverDetected::set_has_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgLeaverDetected::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgLeaverDetected::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
inline ::google::protobuf::uint64 CMsgLeaverDetected::steam_id() const {
  return steam_id_;
}
inline void CMsgLeaverDetected::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
}

// optional .DOTALeaverStatus_t leaver_status = 2 [default = DOTA_LEAVER_NONE];
inline bool CMsgLeaverDetected::has_leaver_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgLeaverDetected::set_has_leaver_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgLeaverDetected::clear_has_leaver_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgLeaverDetected::clear_leaver_status() {
  leaver_status_ = 0;
  clear_has_leaver_status();
}
inline DOTALeaverStatus_t CMsgLeaverDetected::leaver_status() const {
  return static_cast< DOTALeaverStatus_t >(leaver_status_);
}
inline void CMsgLeaverDetected::set_leaver_status(DOTALeaverStatus_t value) {
  GOOGLE_DCHECK(DOTALeaverStatus_t_IsValid(value));
  set_has_leaver_status();
  leaver_status_ = value;
}

// optional bool obsolete_mass_disconnect = 3;
inline bool CMsgLeaverDetected::has_obsolete_mass_disconnect() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgLeaverDetected::set_has_obsolete_mass_disconnect() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgLeaverDetected::clear_has_obsolete_mass_disconnect() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgLeaverDetected::clear_obsolete_mass_disconnect() {
  obsolete_mass_disconnect_ = false;
  clear_has_obsolete_mass_disconnect();
}
inline bool CMsgLeaverDetected::obsolete_mass_disconnect() const {
  return obsolete_mass_disconnect_;
}
inline void CMsgLeaverDetected::set_obsolete_mass_disconnect(bool value) {
  set_has_obsolete_mass_disconnect();
  obsolete_mass_disconnect_ = value;
}

// optional .CMsgLeaverState leaver_state = 4;
inline bool CMsgLeaverDetected::has_leaver_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgLeaverDetected::set_has_leaver_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgLeaverDetected::clear_has_leaver_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgLeaverDetected::clear_leaver_state() {
  if (leaver_state_ != NULL) leaver_state_->::CMsgLeaverState::Clear();
  clear_has_leaver_state();
}
inline const ::CMsgLeaverState& CMsgLeaverDetected::leaver_state() const {
  return leaver_state_ != NULL ? *leaver_state_ : *default_instance_->leaver_state_;
}
inline ::CMsgLeaverState* CMsgLeaverDetected::mutable_leaver_state() {
  set_has_leaver_state();
  if (leaver_state_ == NULL) leaver_state_ = new ::CMsgLeaverState;
  return leaver_state_;
}
inline ::CMsgLeaverState* CMsgLeaverDetected::release_leaver_state() {
  clear_has_leaver_state();
  ::CMsgLeaverState* temp = leaver_state_;
  leaver_state_ = NULL;
  return temp;
}

// optional uint32 server_cluster = 5;
inline bool CMsgLeaverDetected::has_server_cluster() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgLeaverDetected::set_has_server_cluster() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgLeaverDetected::clear_has_server_cluster() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgLeaverDetected::clear_server_cluster() {
  server_cluster_ = 0u;
  clear_has_server_cluster();
}
inline ::google::protobuf::uint32 CMsgLeaverDetected::server_cluster() const {
  return server_cluster_;
}
inline void CMsgLeaverDetected::set_server_cluster(::google::protobuf::uint32 value) {
  set_has_server_cluster();
  server_cluster_ = value;
}

// optional .ENetworkDisconnectionReason disconnect_reason = 6 [default = NETWORK_DISCONNECT_INVALID];
inline bool CMsgLeaverDetected::has_disconnect_reason() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgLeaverDetected::set_has_disconnect_reason() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgLeaverDetected::clear_has_disconnect_reason() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgLeaverDetected::clear_disconnect_reason() {
  disconnect_reason_ = 0;
  clear_has_disconnect_reason();
}
inline ENetworkDisconnectionReason CMsgLeaverDetected::disconnect_reason() const {
  return static_cast< ENetworkDisconnectionReason >(disconnect_reason_);
}
inline void CMsgLeaverDetected::set_disconnect_reason(ENetworkDisconnectionReason value) {
  GOOGLE_DCHECK(ENetworkDisconnectionReason_IsValid(value));
  set_has_disconnect_reason();
  disconnect_reason_ = value;
}

// -------------------------------------------------------------------

// CMsgLeaverDetectedResponse

// optional uint32 result = 1;
inline bool CMsgLeaverDetectedResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgLeaverDetectedResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgLeaverDetectedResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgLeaverDetectedResponse::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 CMsgLeaverDetectedResponse::result() const {
  return result_;
}
inline void CMsgLeaverDetectedResponse::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyPlayerStats

// optional uint32 player_account_id = 1;
inline bool CMsgDOTAFantasyPlayerStats::has_player_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::set_has_player_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_has_player_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_player_account_id() {
  player_account_id_ = 0u;
  clear_has_player_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::player_account_id() const {
  return player_account_id_;
}
inline void CMsgDOTAFantasyPlayerStats::set_player_account_id(::google::protobuf::uint32 value) {
  set_has_player_account_id();
  player_account_id_ = value;
}

// optional uint32 match_id = 2;
inline bool CMsgDOTAFantasyPlayerStats::has_match_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::set_has_match_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_match_id() {
  match_id_ = 0u;
  clear_has_match_id();
}
inline ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::match_id() const {
  return match_id_;
}
inline void CMsgDOTAFantasyPlayerStats::set_match_id(::google::protobuf::uint32 value) {
  set_has_match_id();
  match_id_ = value;
}

// optional bool match_completed = 3;
inline bool CMsgDOTAFantasyPlayerStats::has_match_completed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::set_has_match_completed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_has_match_completed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_match_completed() {
  match_completed_ = false;
  clear_has_match_completed();
}
inline bool CMsgDOTAFantasyPlayerStats::match_completed() const {
  return match_completed_;
}
inline void CMsgDOTAFantasyPlayerStats::set_match_completed(bool value) {
  set_has_match_completed();
  match_completed_ = value;
}

// optional uint32 level = 4;
inline bool CMsgDOTAFantasyPlayerStats::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::level() const {
  return level_;
}
inline void CMsgDOTAFantasyPlayerStats::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 kills = 5;
inline bool CMsgDOTAFantasyPlayerStats::has_kills() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::set_has_kills() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_has_kills() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_kills() {
  kills_ = 0u;
  clear_has_kills();
}
inline ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::kills() const {
  return kills_;
}
inline void CMsgDOTAFantasyPlayerStats::set_kills(::google::protobuf::uint32 value) {
  set_has_kills();
  kills_ = value;
}

// optional uint32 deaths = 6;
inline bool CMsgDOTAFantasyPlayerStats::has_deaths() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::set_has_deaths() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_has_deaths() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_deaths() {
  deaths_ = 0u;
  clear_has_deaths();
}
inline ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::deaths() const {
  return deaths_;
}
inline void CMsgDOTAFantasyPlayerStats::set_deaths(::google::protobuf::uint32 value) {
  set_has_deaths();
  deaths_ = value;
}

// optional uint32 assists = 7;
inline bool CMsgDOTAFantasyPlayerStats::has_assists() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::set_has_assists() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_has_assists() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_assists() {
  assists_ = 0u;
  clear_has_assists();
}
inline ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::assists() const {
  return assists_;
}
inline void CMsgDOTAFantasyPlayerStats::set_assists(::google::protobuf::uint32 value) {
  set_has_assists();
  assists_ = value;
}

// optional uint32 last_hits = 8;
inline bool CMsgDOTAFantasyPlayerStats::has_last_hits() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::set_has_last_hits() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_has_last_hits() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_last_hits() {
  last_hits_ = 0u;
  clear_has_last_hits();
}
inline ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::last_hits() const {
  return last_hits_;
}
inline void CMsgDOTAFantasyPlayerStats::set_last_hits(::google::protobuf::uint32 value) {
  set_has_last_hits();
  last_hits_ = value;
}

// optional uint32 denies = 9;
inline bool CMsgDOTAFantasyPlayerStats::has_denies() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::set_has_denies() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_has_denies() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_denies() {
  denies_ = 0u;
  clear_has_denies();
}
inline ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::denies() const {
  return denies_;
}
inline void CMsgDOTAFantasyPlayerStats::set_denies(::google::protobuf::uint32 value) {
  set_has_denies();
  denies_ = value;
}

// optional float gpm = 10;
inline bool CMsgDOTAFantasyPlayerStats::has_gpm() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::set_has_gpm() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_has_gpm() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_gpm() {
  gpm_ = 0;
  clear_has_gpm();
}
inline float CMsgDOTAFantasyPlayerStats::gpm() const {
  return gpm_;
}
inline void CMsgDOTAFantasyPlayerStats::set_gpm(float value) {
  set_has_gpm();
  gpm_ = value;
}

// optional float xppm = 11;
inline bool CMsgDOTAFantasyPlayerStats::has_xppm() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::set_has_xppm() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_has_xppm() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_xppm() {
  xppm_ = 0;
  clear_has_xppm();
}
inline float CMsgDOTAFantasyPlayerStats::xppm() const {
  return xppm_;
}
inline void CMsgDOTAFantasyPlayerStats::set_xppm(float value) {
  set_has_xppm();
  xppm_ = value;
}

// optional float stuns = 12;
inline bool CMsgDOTAFantasyPlayerStats::has_stuns() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::set_has_stuns() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_has_stuns() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_stuns() {
  stuns_ = 0;
  clear_has_stuns();
}
inline float CMsgDOTAFantasyPlayerStats::stuns() const {
  return stuns_;
}
inline void CMsgDOTAFantasyPlayerStats::set_stuns(float value) {
  set_has_stuns();
  stuns_ = value;
}

// optional float healing = 13;
inline bool CMsgDOTAFantasyPlayerStats::has_healing() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::set_has_healing() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_has_healing() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_healing() {
  healing_ = 0;
  clear_has_healing();
}
inline float CMsgDOTAFantasyPlayerStats::healing() const {
  return healing_;
}
inline void CMsgDOTAFantasyPlayerStats::set_healing(float value) {
  set_has_healing();
  healing_ = value;
}

// optional uint32 tower_kills = 14;
inline bool CMsgDOTAFantasyPlayerStats::has_tower_kills() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::set_has_tower_kills() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_has_tower_kills() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_tower_kills() {
  tower_kills_ = 0u;
  clear_has_tower_kills();
}
inline ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::tower_kills() const {
  return tower_kills_;
}
inline void CMsgDOTAFantasyPlayerStats::set_tower_kills(::google::protobuf::uint32 value) {
  set_has_tower_kills();
  tower_kills_ = value;
}

// optional uint32 roshan_kills = 15;
inline bool CMsgDOTAFantasyPlayerStats::has_roshan_kills() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgDOTAFantasyPlayerStats::set_has_roshan_kills() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_has_roshan_kills() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgDOTAFantasyPlayerStats::clear_roshan_kills() {
  roshan_kills_ = 0u;
  clear_has_roshan_kills();
}
inline ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::roshan_kills() const {
  return roshan_kills_;
}
inline void CMsgDOTAFantasyPlayerStats::set_roshan_kills(::google::protobuf::uint32 value) {
  set_has_roshan_kills();
  roshan_kills_ = value;
}

// -------------------------------------------------------------------

// CMsgGameMatchSignOut_CTeam_CPlayer

// optional fixed64 account_id = 1;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_account_id() {
  account_id_ = GOOGLE_ULONGLONG(0);
  clear_has_account_id();
}
inline ::google::protobuf::uint64 CMsgGameMatchSignOut_CTeam_CPlayer::account_id() const {
  return account_id_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_account_id(::google::protobuf::uint64 value) {
  set_has_account_id();
  account_id_ = value;
}

// optional uint32 hero_id = 3;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::hero_id() const {
  return hero_id_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// repeated uint32 items = 4;
inline int CMsgGameMatchSignOut_CTeam_CPlayer::items_size() const {
  return items_.size();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_items() {
  items_.Clear();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::items(int index) const {
  return items_.Get(index);
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_items(int index, ::google::protobuf::uint32 value) {
  items_.Set(index, value);
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::add_items(::google::protobuf::uint32 value) {
  items_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGameMatchSignOut_CTeam_CPlayer::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGameMatchSignOut_CTeam_CPlayer::mutable_items() {
  return &items_;
}

// optional uint32 gold = 5;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_gold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_gold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_gold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_gold() {
  gold_ = 0u;
  clear_has_gold();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::gold() const {
  return gold_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_gold(::google::protobuf::uint32 value) {
  set_has_gold();
  gold_ = value;
}

// optional uint32 kills = 6;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_kills() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_kills() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_kills() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_kills() {
  kills_ = 0u;
  clear_has_kills();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::kills() const {
  return kills_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_kills(::google::protobuf::uint32 value) {
  set_has_kills();
  kills_ = value;
}

// optional uint32 deaths = 7;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_deaths() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_deaths() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_deaths() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_deaths() {
  deaths_ = 0u;
  clear_has_deaths();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::deaths() const {
  return deaths_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_deaths(::google::protobuf::uint32 value) {
  set_has_deaths();
  deaths_ = value;
}

// optional uint32 assists = 8;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_assists() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_assists() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_assists() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_assists() {
  assists_ = 0u;
  clear_has_assists();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::assists() const {
  return assists_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_assists(::google::protobuf::uint32 value) {
  set_has_assists();
  assists_ = value;
}

// optional uint32 leaver_status = 9;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_leaver_status() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_leaver_status() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_leaver_status() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_leaver_status() {
  leaver_status_ = 0u;
  clear_has_leaver_status();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::leaver_status() const {
  return leaver_status_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_leaver_status(::google::protobuf::uint32 value) {
  set_has_leaver_status();
  leaver_status_ = value;
}

// optional uint32 last_hits = 10;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_last_hits() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_last_hits() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_last_hits() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_last_hits() {
  last_hits_ = 0u;
  clear_has_last_hits();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::last_hits() const {
  return last_hits_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_last_hits(::google::protobuf::uint32 value) {
  set_has_last_hits();
  last_hits_ = value;
}

// optional uint32 denies = 11;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_denies() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_denies() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_denies() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_denies() {
  denies_ = 0u;
  clear_has_denies();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::denies() const {
  return denies_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_denies(::google::protobuf::uint32 value) {
  set_has_denies();
  denies_ = value;
}

// optional uint32 gold_per_min = 12;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_gold_per_min() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_gold_per_min() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_gold_per_min() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_gold_per_min() {
  gold_per_min_ = 0u;
  clear_has_gold_per_min();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::gold_per_min() const {
  return gold_per_min_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_gold_per_min(::google::protobuf::uint32 value) {
  set_has_gold_per_min();
  gold_per_min_ = value;
}

// optional uint32 xp_per_minute = 13;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_xp_per_minute() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_xp_per_minute() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_xp_per_minute() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_xp_per_minute() {
  xp_per_minute_ = 0u;
  clear_has_xp_per_minute();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::xp_per_minute() const {
  return xp_per_minute_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_xp_per_minute(::google::protobuf::uint32 value) {
  set_has_xp_per_minute();
  xp_per_minute_ = value;
}

// optional uint32 gold_spent = 14;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_gold_spent() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_gold_spent() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_gold_spent() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_gold_spent() {
  gold_spent_ = 0u;
  clear_has_gold_spent();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::gold_spent() const {
  return gold_spent_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_gold_spent(::google::protobuf::uint32 value) {
  set_has_gold_spent();
  gold_spent_ = value;
}

// optional uint32 level = 15;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_level() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_level() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_level() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::level() const {
  return level_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 hero_damage = 16;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_hero_damage() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_hero_damage() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_hero_damage() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_hero_damage() {
  hero_damage_ = 0u;
  clear_has_hero_damage();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::hero_damage() const {
  return hero_damage_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_hero_damage(::google::protobuf::uint32 value) {
  set_has_hero_damage();
  hero_damage_ = value;
}

// optional uint32 tower_damage = 17;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_tower_damage() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_tower_damage() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_tower_damage() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_tower_damage() {
  tower_damage_ = 0u;
  clear_has_tower_damage();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::tower_damage() const {
  return tower_damage_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_tower_damage(::google::protobuf::uint32 value) {
  set_has_tower_damage();
  tower_damage_ = value;
}

// optional uint32 hero_healing = 18;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_hero_healing() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_hero_healing() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_hero_healing() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_hero_healing() {
  hero_healing_ = 0u;
  clear_has_hero_healing();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::hero_healing() const {
  return hero_healing_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_hero_healing(::google::protobuf::uint32 value) {
  set_has_hero_healing();
  hero_healing_ = value;
}

// optional uint32 time_last_seen = 19;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_time_last_seen() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_time_last_seen() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_time_last_seen() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_time_last_seen() {
  time_last_seen_ = 0u;
  clear_has_time_last_seen();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::time_last_seen() const {
  return time_last_seen_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_time_last_seen(::google::protobuf::uint32 value) {
  set_has_time_last_seen();
  time_last_seen_ = value;
}

// optional uint32 support_ability_value = 20;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_support_ability_value() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_support_ability_value() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_support_ability_value() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_support_ability_value() {
  support_ability_value_ = 0u;
  clear_has_support_ability_value();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::support_ability_value() const {
  return support_ability_value_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_support_ability_value(::google::protobuf::uint32 value) {
  set_has_support_ability_value();
  support_ability_value_ = value;
}

// optional uint64 party_id = 21;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_party_id() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_party_id() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_party_id() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_party_id() {
  party_id_ = GOOGLE_ULONGLONG(0);
  clear_has_party_id();
}
inline ::google::protobuf::uint64 CMsgGameMatchSignOut_CTeam_CPlayer::party_id() const {
  return party_id_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_party_id(::google::protobuf::uint64 value) {
  set_has_party_id();
  party_id_ = value;
}

// optional float scaled_kills = 24;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_scaled_kills() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_scaled_kills() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_scaled_kills() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_scaled_kills() {
  scaled_kills_ = 0;
  clear_has_scaled_kills();
}
inline float CMsgGameMatchSignOut_CTeam_CPlayer::scaled_kills() const {
  return scaled_kills_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_scaled_kills(float value) {
  set_has_scaled_kills();
  scaled_kills_ = value;
}

// optional float scaled_deaths = 25;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_scaled_deaths() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_scaled_deaths() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_scaled_deaths() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_scaled_deaths() {
  scaled_deaths_ = 0;
  clear_has_scaled_deaths();
}
inline float CMsgGameMatchSignOut_CTeam_CPlayer::scaled_deaths() const {
  return scaled_deaths_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_scaled_deaths(float value) {
  set_has_scaled_deaths();
  scaled_deaths_ = value;
}

// optional float scaled_assists = 26;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_scaled_assists() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_scaled_assists() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_scaled_assists() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_scaled_assists() {
  scaled_assists_ = 0;
  clear_has_scaled_assists();
}
inline float CMsgGameMatchSignOut_CTeam_CPlayer::scaled_assists() const {
  return scaled_assists_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_scaled_assists(float value) {
  set_has_scaled_assists();
  scaled_assists_ = value;
}

// optional uint32 claimed_farm_gold = 27;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_claimed_farm_gold() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_claimed_farm_gold() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_claimed_farm_gold() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_claimed_farm_gold() {
  claimed_farm_gold_ = 0u;
  clear_has_claimed_farm_gold();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::claimed_farm_gold() const {
  return claimed_farm_gold_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_claimed_farm_gold(::google::protobuf::uint32 value) {
  set_has_claimed_farm_gold();
  claimed_farm_gold_ = value;
}

// optional uint32 support_gold = 28;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_support_gold() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_support_gold() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_support_gold() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_support_gold() {
  support_gold_ = 0u;
  clear_has_support_gold();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::support_gold() const {
  return support_gold_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_support_gold(::google::protobuf::uint32 value) {
  set_has_support_gold();
  support_gold_ = value;
}

// optional uint32 claimed_denies = 29;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_claimed_denies() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_claimed_denies() {
  _has_bits_[0] |= 0x02000000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_claimed_denies() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_claimed_denies() {
  claimed_denies_ = 0u;
  clear_has_claimed_denies();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::claimed_denies() const {
  return claimed_denies_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_claimed_denies(::google::protobuf::uint32 value) {
  set_has_claimed_denies();
  claimed_denies_ = value;
}

// optional uint32 claimed_misses = 30;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_claimed_misses() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_claimed_misses() {
  _has_bits_[0] |= 0x04000000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_claimed_misses() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_claimed_misses() {
  claimed_misses_ = 0u;
  clear_has_claimed_misses();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::claimed_misses() const {
  return claimed_misses_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_claimed_misses(::google::protobuf::uint32 value) {
  set_has_claimed_misses();
  claimed_misses_ = value;
}

// optional uint32 misses = 31;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_misses() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_has_misses() {
  _has_bits_[0] |= 0x08000000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_has_misses() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_misses() {
  misses_ = 0u;
  clear_has_misses();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CTeam_CPlayer::misses() const {
  return misses_;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_misses(::google::protobuf::uint32 value) {
  set_has_misses();
  misses_ = value;
}

// repeated .CMatchPlayerAbilityUpgrade ability_upgrades = 32;
inline int CMsgGameMatchSignOut_CTeam_CPlayer::ability_upgrades_size() const {
  return ability_upgrades_.size();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_ability_upgrades() {
  ability_upgrades_.Clear();
}
inline const ::CMatchPlayerAbilityUpgrade& CMsgGameMatchSignOut_CTeam_CPlayer::ability_upgrades(int index) const {
  return ability_upgrades_.Get(index);
}
inline ::CMatchPlayerAbilityUpgrade* CMsgGameMatchSignOut_CTeam_CPlayer::mutable_ability_upgrades(int index) {
  return ability_upgrades_.Mutable(index);
}
inline ::CMatchPlayerAbilityUpgrade* CMsgGameMatchSignOut_CTeam_CPlayer::add_ability_upgrades() {
  return ability_upgrades_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMatchPlayerAbilityUpgrade >&
CMsgGameMatchSignOut_CTeam_CPlayer::ability_upgrades() const {
  return ability_upgrades_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMatchPlayerAbilityUpgrade >*
CMsgGameMatchSignOut_CTeam_CPlayer::mutable_ability_upgrades() {
  return &ability_upgrades_;
}

// repeated .CMatchAdditionalUnitInventory additional_units_inventory = 33;
inline int CMsgGameMatchSignOut_CTeam_CPlayer::additional_units_inventory_size() const {
  return additional_units_inventory_.size();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_additional_units_inventory() {
  additional_units_inventory_.Clear();
}
inline const ::CMatchAdditionalUnitInventory& CMsgGameMatchSignOut_CTeam_CPlayer::additional_units_inventory(int index) const {
  return additional_units_inventory_.Get(index);
}
inline ::CMatchAdditionalUnitInventory* CMsgGameMatchSignOut_CTeam_CPlayer::mutable_additional_units_inventory(int index) {
  return additional_units_inventory_.Mutable(index);
}
inline ::CMatchAdditionalUnitInventory* CMsgGameMatchSignOut_CTeam_CPlayer::add_additional_units_inventory() {
  return additional_units_inventory_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMatchAdditionalUnitInventory >&
CMsgGameMatchSignOut_CTeam_CPlayer::additional_units_inventory() const {
  return additional_units_inventory_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMatchAdditionalUnitInventory >*
CMsgGameMatchSignOut_CTeam_CPlayer::mutable_additional_units_inventory() {
  return &additional_units_inventory_;
}

// -------------------------------------------------------------------

// CMsgGameMatchSignOut_CTeam

// repeated .CMsgGameMatchSignOut.CTeam.CPlayer players = 1;
inline int CMsgGameMatchSignOut_CTeam::players_size() const {
  return players_.size();
}
inline void CMsgGameMatchSignOut_CTeam::clear_players() {
  players_.Clear();
}
inline const ::CMsgGameMatchSignOut_CTeam_CPlayer& CMsgGameMatchSignOut_CTeam::players(int index) const {
  return players_.Get(index);
}
inline ::CMsgGameMatchSignOut_CTeam_CPlayer* CMsgGameMatchSignOut_CTeam::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::CMsgGameMatchSignOut_CTeam_CPlayer* CMsgGameMatchSignOut_CTeam::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgGameMatchSignOut_CTeam_CPlayer >&
CMsgGameMatchSignOut_CTeam::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgGameMatchSignOut_CTeam_CPlayer >*
CMsgGameMatchSignOut_CTeam::mutable_players() {
  return &players_;
}

// -------------------------------------------------------------------

// CMsgGameMatchSignOut_CAdditionalSignoutMsg

// optional uint32 id = 1;
inline bool CMsgGameMatchSignOut_CAdditionalSignoutMsg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGameMatchSignOut_CAdditionalSignoutMsg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGameMatchSignOut_CAdditionalSignoutMsg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGameMatchSignOut_CAdditionalSignoutMsg::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut_CAdditionalSignoutMsg::id() const {
  return id_;
}
inline void CMsgGameMatchSignOut_CAdditionalSignoutMsg::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional bytes contents = 2;
inline bool CMsgGameMatchSignOut_CAdditionalSignoutMsg::has_contents() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGameMatchSignOut_CAdditionalSignoutMsg::set_has_contents() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGameMatchSignOut_CAdditionalSignoutMsg::clear_has_contents() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGameMatchSignOut_CAdditionalSignoutMsg::clear_contents() {
  if (contents_ != &::google::protobuf::internal::kEmptyString) {
    contents_->clear();
  }
  clear_has_contents();
}
inline const ::std::string& CMsgGameMatchSignOut_CAdditionalSignoutMsg::contents() const {
  return *contents_;
}
inline void CMsgGameMatchSignOut_CAdditionalSignoutMsg::set_contents(const ::std::string& value) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  contents_->assign(value);
}
inline void CMsgGameMatchSignOut_CAdditionalSignoutMsg::set_contents(const char* value) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  contents_->assign(value);
}
inline void CMsgGameMatchSignOut_CAdditionalSignoutMsg::set_contents(const void* value, size_t size) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  contents_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgGameMatchSignOut_CAdditionalSignoutMsg::mutable_contents() {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  return contents_;
}
inline ::std::string* CMsgGameMatchSignOut_CAdditionalSignoutMsg::release_contents() {
  clear_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = contents_;
    contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CMsgGameMatchSignOut

// optional uint32 match_id = 1;
inline bool CMsgGameMatchSignOut::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGameMatchSignOut::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGameMatchSignOut::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGameMatchSignOut::clear_match_id() {
  match_id_ = 0u;
  clear_has_match_id();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut::match_id() const {
  return match_id_;
}
inline void CMsgGameMatchSignOut::set_match_id(::google::protobuf::uint32 value) {
  set_has_match_id();
  match_id_ = value;
}

// optional uint32 duration = 2;
inline bool CMsgGameMatchSignOut::has_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGameMatchSignOut::set_has_duration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGameMatchSignOut::clear_has_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGameMatchSignOut::clear_duration() {
  duration_ = 0u;
  clear_has_duration();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut::duration() const {
  return duration_;
}
inline void CMsgGameMatchSignOut::set_duration(::google::protobuf::uint32 value) {
  set_has_duration();
  duration_ = value;
}

// optional bool good_guys_win = 3;
inline bool CMsgGameMatchSignOut::has_good_guys_win() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGameMatchSignOut::set_has_good_guys_win() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGameMatchSignOut::clear_has_good_guys_win() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGameMatchSignOut::clear_good_guys_win() {
  good_guys_win_ = false;
  clear_has_good_guys_win();
}
inline bool CMsgGameMatchSignOut::good_guys_win() const {
  return good_guys_win_;
}
inline void CMsgGameMatchSignOut::set_good_guys_win(bool value) {
  set_has_good_guys_win();
  good_guys_win_ = value;
}

// optional fixed32 date = 4;
inline bool CMsgGameMatchSignOut::has_date() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGameMatchSignOut::set_has_date() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGameMatchSignOut::clear_has_date() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGameMatchSignOut::clear_date() {
  date_ = 0u;
  clear_has_date();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut::date() const {
  return date_;
}
inline void CMsgGameMatchSignOut::set_date(::google::protobuf::uint32 value) {
  set_has_date();
  date_ = value;
}

// repeated uint32 num_players = 5;
inline int CMsgGameMatchSignOut::num_players_size() const {
  return num_players_.size();
}
inline void CMsgGameMatchSignOut::clear_num_players() {
  num_players_.Clear();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut::num_players(int index) const {
  return num_players_.Get(index);
}
inline void CMsgGameMatchSignOut::set_num_players(int index, ::google::protobuf::uint32 value) {
  num_players_.Set(index, value);
}
inline void CMsgGameMatchSignOut::add_num_players(::google::protobuf::uint32 value) {
  num_players_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGameMatchSignOut::num_players() const {
  return num_players_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGameMatchSignOut::mutable_num_players() {
  return &num_players_;
}

// repeated .CMsgGameMatchSignOut.CTeam teams = 6;
inline int CMsgGameMatchSignOut::teams_size() const {
  return teams_.size();
}
inline void CMsgGameMatchSignOut::clear_teams() {
  teams_.Clear();
}
inline const ::CMsgGameMatchSignOut_CTeam& CMsgGameMatchSignOut::teams(int index) const {
  return teams_.Get(index);
}
inline ::CMsgGameMatchSignOut_CTeam* CMsgGameMatchSignOut::mutable_teams(int index) {
  return teams_.Mutable(index);
}
inline ::CMsgGameMatchSignOut_CTeam* CMsgGameMatchSignOut::add_teams() {
  return teams_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgGameMatchSignOut_CTeam >&
CMsgGameMatchSignOut::teams() const {
  return teams_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgGameMatchSignOut_CTeam >*
CMsgGameMatchSignOut::mutable_teams() {
  return &teams_;
}

// repeated uint32 tower_status = 8;
inline int CMsgGameMatchSignOut::tower_status_size() const {
  return tower_status_.size();
}
inline void CMsgGameMatchSignOut::clear_tower_status() {
  tower_status_.Clear();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut::tower_status(int index) const {
  return tower_status_.Get(index);
}
inline void CMsgGameMatchSignOut::set_tower_status(int index, ::google::protobuf::uint32 value) {
  tower_status_.Set(index, value);
}
inline void CMsgGameMatchSignOut::add_tower_status(::google::protobuf::uint32 value) {
  tower_status_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGameMatchSignOut::tower_status() const {
  return tower_status_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGameMatchSignOut::mutable_tower_status() {
  return &tower_status_;
}

// repeated uint32 barracks_status = 9;
inline int CMsgGameMatchSignOut::barracks_status_size() const {
  return barracks_status_.size();
}
inline void CMsgGameMatchSignOut::clear_barracks_status() {
  barracks_status_.Clear();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut::barracks_status(int index) const {
  return barracks_status_.Get(index);
}
inline void CMsgGameMatchSignOut::set_barracks_status(int index, ::google::protobuf::uint32 value) {
  barracks_status_.Set(index, value);
}
inline void CMsgGameMatchSignOut::add_barracks_status(::google::protobuf::uint32 value) {
  barracks_status_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGameMatchSignOut::barracks_status() const {
  return barracks_status_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGameMatchSignOut::mutable_barracks_status() {
  return &barracks_status_;
}

// optional uint32 cluster = 10;
inline bool CMsgGameMatchSignOut::has_cluster() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgGameMatchSignOut::set_has_cluster() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgGameMatchSignOut::clear_has_cluster() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgGameMatchSignOut::clear_cluster() {
  cluster_ = 0u;
  clear_has_cluster();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut::cluster() const {
  return cluster_;
}
inline void CMsgGameMatchSignOut::set_cluster(::google::protobuf::uint32 value) {
  set_has_cluster();
  cluster_ = value;
}

// optional string server_addr = 11;
inline bool CMsgGameMatchSignOut::has_server_addr() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgGameMatchSignOut::set_has_server_addr() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgGameMatchSignOut::clear_has_server_addr() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgGameMatchSignOut::clear_server_addr() {
  if (server_addr_ != &::google::protobuf::internal::kEmptyString) {
    server_addr_->clear();
  }
  clear_has_server_addr();
}
inline const ::std::string& CMsgGameMatchSignOut::server_addr() const {
  return *server_addr_;
}
inline void CMsgGameMatchSignOut::set_server_addr(const ::std::string& value) {
  set_has_server_addr();
  if (server_addr_ == &::google::protobuf::internal::kEmptyString) {
    server_addr_ = new ::std::string;
  }
  server_addr_->assign(value);
}
inline void CMsgGameMatchSignOut::set_server_addr(const char* value) {
  set_has_server_addr();
  if (server_addr_ == &::google::protobuf::internal::kEmptyString) {
    server_addr_ = new ::std::string;
  }
  server_addr_->assign(value);
}
inline void CMsgGameMatchSignOut::set_server_addr(const char* value, size_t size) {
  set_has_server_addr();
  if (server_addr_ == &::google::protobuf::internal::kEmptyString) {
    server_addr_ = new ::std::string;
  }
  server_addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgGameMatchSignOut::mutable_server_addr() {
  set_has_server_addr();
  if (server_addr_ == &::google::protobuf::internal::kEmptyString) {
    server_addr_ = new ::std::string;
  }
  return server_addr_;
}
inline ::std::string* CMsgGameMatchSignOut::release_server_addr() {
  clear_has_server_addr();
  if (server_addr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_addr_;
    server_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 first_blood_time = 12;
inline bool CMsgGameMatchSignOut::has_first_blood_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgGameMatchSignOut::set_has_first_blood_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgGameMatchSignOut::clear_has_first_blood_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgGameMatchSignOut::clear_first_blood_time() {
  first_blood_time_ = 0u;
  clear_has_first_blood_time();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut::first_blood_time() const {
  return first_blood_time_;
}
inline void CMsgGameMatchSignOut::set_first_blood_time(::google::protobuf::uint32 value) {
  set_has_first_blood_time();
  first_blood_time_ = value;
}

// optional float game_balance = 13;
inline bool CMsgGameMatchSignOut::has_game_balance() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgGameMatchSignOut::set_has_game_balance() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgGameMatchSignOut::clear_has_game_balance() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgGameMatchSignOut::clear_game_balance() {
  game_balance_ = 0;
  clear_has_game_balance();
}
inline float CMsgGameMatchSignOut::game_balance() const {
  return game_balance_;
}
inline void CMsgGameMatchSignOut::set_game_balance(float value) {
  set_has_game_balance();
  game_balance_ = value;
}

// optional uint32 event_score = 14;
inline bool CMsgGameMatchSignOut::has_event_score() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgGameMatchSignOut::set_has_event_score() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgGameMatchSignOut::clear_has_event_score() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgGameMatchSignOut::clear_event_score() {
  event_score_ = 0u;
  clear_has_event_score();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut::event_score() const {
  return event_score_;
}
inline void CMsgGameMatchSignOut::set_event_score(::google::protobuf::uint32 value) {
  set_has_event_score();
  event_score_ = value;
}

// repeated .CMatchHeroSelectEvent picks_bans = 15;
inline int CMsgGameMatchSignOut::picks_bans_size() const {
  return picks_bans_.size();
}
inline void CMsgGameMatchSignOut::clear_picks_bans() {
  picks_bans_.Clear();
}
inline const ::CMatchHeroSelectEvent& CMsgGameMatchSignOut::picks_bans(int index) const {
  return picks_bans_.Get(index);
}
inline ::CMatchHeroSelectEvent* CMsgGameMatchSignOut::mutable_picks_bans(int index) {
  return picks_bans_.Mutable(index);
}
inline ::CMatchHeroSelectEvent* CMsgGameMatchSignOut::add_picks_bans() {
  return picks_bans_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMatchHeroSelectEvent >&
CMsgGameMatchSignOut::picks_bans() const {
  return picks_bans_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMatchHeroSelectEvent >*
CMsgGameMatchSignOut::mutable_picks_bans() {
  return &picks_bans_;
}

// repeated .CMsgDOTAFantasyPlayerStats fantasy_stats = 16;
inline int CMsgGameMatchSignOut::fantasy_stats_size() const {
  return fantasy_stats_.size();
}
inline void CMsgGameMatchSignOut::clear_fantasy_stats() {
  fantasy_stats_.Clear();
}
inline const ::CMsgDOTAFantasyPlayerStats& CMsgGameMatchSignOut::fantasy_stats(int index) const {
  return fantasy_stats_.Get(index);
}
inline ::CMsgDOTAFantasyPlayerStats* CMsgGameMatchSignOut::mutable_fantasy_stats(int index) {
  return fantasy_stats_.Mutable(index);
}
inline ::CMsgDOTAFantasyPlayerStats* CMsgGameMatchSignOut::add_fantasy_stats() {
  return fantasy_stats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAFantasyPlayerStats >&
CMsgGameMatchSignOut::fantasy_stats() const {
  return fantasy_stats_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAFantasyPlayerStats >*
CMsgGameMatchSignOut::mutable_fantasy_stats() {
  return &fantasy_stats_;
}

// repeated .CMsgEconPlayerStrangeCountAdjustment player_strange_count_adjustments = 17;
inline int CMsgGameMatchSignOut::player_strange_count_adjustments_size() const {
  return player_strange_count_adjustments_.size();
}
inline void CMsgGameMatchSignOut::clear_player_strange_count_adjustments() {
  player_strange_count_adjustments_.Clear();
}
inline const ::CMsgEconPlayerStrangeCountAdjustment& CMsgGameMatchSignOut::player_strange_count_adjustments(int index) const {
  return player_strange_count_adjustments_.Get(index);
}
inline ::CMsgEconPlayerStrangeCountAdjustment* CMsgGameMatchSignOut::mutable_player_strange_count_adjustments(int index) {
  return player_strange_count_adjustments_.Mutable(index);
}
inline ::CMsgEconPlayerStrangeCountAdjustment* CMsgGameMatchSignOut::add_player_strange_count_adjustments() {
  return player_strange_count_adjustments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgEconPlayerStrangeCountAdjustment >&
CMsgGameMatchSignOut::player_strange_count_adjustments() const {
  return player_strange_count_adjustments_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgEconPlayerStrangeCountAdjustment >*
CMsgGameMatchSignOut::mutable_player_strange_count_adjustments() {
  return &player_strange_count_adjustments_;
}

// optional bool automatic_surrender = 18;
inline bool CMsgGameMatchSignOut::has_automatic_surrender() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMsgGameMatchSignOut::set_has_automatic_surrender() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CMsgGameMatchSignOut::clear_has_automatic_surrender() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CMsgGameMatchSignOut::clear_automatic_surrender() {
  automatic_surrender_ = false;
  clear_has_automatic_surrender();
}
inline bool CMsgGameMatchSignOut::automatic_surrender() const {
  return automatic_surrender_;
}
inline void CMsgGameMatchSignOut::set_automatic_surrender(bool value) {
  set_has_automatic_surrender();
  automatic_surrender_ = value;
}

// optional uint32 server_version = 19;
inline bool CMsgGameMatchSignOut::has_server_version() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMsgGameMatchSignOut::set_has_server_version() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CMsgGameMatchSignOut::clear_has_server_version() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CMsgGameMatchSignOut::clear_server_version() {
  server_version_ = 0u;
  clear_has_server_version();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOut::server_version() const {
  return server_version_;
}
inline void CMsgGameMatchSignOut::set_server_version(::google::protobuf::uint32 value) {
  set_has_server_version();
  server_version_ = value;
}

// optional bool mass_disconnect = 21;
inline bool CMsgGameMatchSignOut::has_mass_disconnect() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CMsgGameMatchSignOut::set_has_mass_disconnect() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CMsgGameMatchSignOut::clear_has_mass_disconnect() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CMsgGameMatchSignOut::clear_mass_disconnect() {
  mass_disconnect_ = false;
  clear_has_mass_disconnect();
}
inline bool CMsgGameMatchSignOut::mass_disconnect() const {
  return mass_disconnect_;
}
inline void CMsgGameMatchSignOut::set_mass_disconnect(bool value) {
  set_has_mass_disconnect();
  mass_disconnect_ = value;
}

// repeated .CMsgGameMatchSignOut.CAdditionalSignoutMsg additional_msgs = 20;
inline int CMsgGameMatchSignOut::additional_msgs_size() const {
  return additional_msgs_.size();
}
inline void CMsgGameMatchSignOut::clear_additional_msgs() {
  additional_msgs_.Clear();
}
inline const ::CMsgGameMatchSignOut_CAdditionalSignoutMsg& CMsgGameMatchSignOut::additional_msgs(int index) const {
  return additional_msgs_.Get(index);
}
inline ::CMsgGameMatchSignOut_CAdditionalSignoutMsg* CMsgGameMatchSignOut::mutable_additional_msgs(int index) {
  return additional_msgs_.Mutable(index);
}
inline ::CMsgGameMatchSignOut_CAdditionalSignoutMsg* CMsgGameMatchSignOut::add_additional_msgs() {
  return additional_msgs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgGameMatchSignOut_CAdditionalSignoutMsg >&
CMsgGameMatchSignOut::additional_msgs() const {
  return additional_msgs_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgGameMatchSignOut_CAdditionalSignoutMsg >*
CMsgGameMatchSignOut::mutable_additional_msgs() {
  return &additional_msgs_;
}

// -------------------------------------------------------------------

// CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg

// optional uint32 id = 1;
inline bool CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::id() const {
  return id_;
}
inline void CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional bytes contents = 2;
inline bool CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::has_contents() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::set_has_contents() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::clear_has_contents() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::clear_contents() {
  if (contents_ != &::google::protobuf::internal::kEmptyString) {
    contents_->clear();
  }
  clear_has_contents();
}
inline const ::std::string& CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::contents() const {
  return *contents_;
}
inline void CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::set_contents(const ::std::string& value) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  contents_->assign(value);
}
inline void CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::set_contents(const char* value) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  contents_->assign(value);
}
inline void CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::set_contents(const void* value, size_t size) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  contents_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::mutable_contents() {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  return contents_;
}
inline ::std::string* CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::release_contents() {
  clear_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = contents_;
    contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CMsgGameMatchSignoutResponse

// optional uint32 match_id = 1;
inline bool CMsgGameMatchSignoutResponse::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGameMatchSignoutResponse::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGameMatchSignoutResponse::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGameMatchSignoutResponse::clear_match_id() {
  match_id_ = 0u;
  clear_has_match_id();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignoutResponse::match_id() const {
  return match_id_;
}
inline void CMsgGameMatchSignoutResponse::set_match_id(::google::protobuf::uint32 value) {
  set_has_match_id();
  match_id_ = value;
}

// optional fixed32 replay_salt = 2;
inline bool CMsgGameMatchSignoutResponse::has_replay_salt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGameMatchSignoutResponse::set_has_replay_salt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGameMatchSignoutResponse::clear_has_replay_salt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGameMatchSignoutResponse::clear_replay_salt() {
  replay_salt_ = 0u;
  clear_has_replay_salt();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignoutResponse::replay_salt() const {
  return replay_salt_;
}
inline void CMsgGameMatchSignoutResponse::set_replay_salt(::google::protobuf::uint32 value) {
  set_has_replay_salt();
  replay_salt_ = value;
}

// repeated .CLobbyTimedRewardDetails timed_reward_details = 3;
inline int CMsgGameMatchSignoutResponse::timed_reward_details_size() const {
  return timed_reward_details_.size();
}
inline void CMsgGameMatchSignoutResponse::clear_timed_reward_details() {
  timed_reward_details_.Clear();
}
inline const ::CLobbyTimedRewardDetails& CMsgGameMatchSignoutResponse::timed_reward_details(int index) const {
  return timed_reward_details_.Get(index);
}
inline ::CLobbyTimedRewardDetails* CMsgGameMatchSignoutResponse::mutable_timed_reward_details(int index) {
  return timed_reward_details_.Mutable(index);
}
inline ::CLobbyTimedRewardDetails* CMsgGameMatchSignoutResponse::add_timed_reward_details() {
  return timed_reward_details_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CLobbyTimedRewardDetails >&
CMsgGameMatchSignoutResponse::timed_reward_details() const {
  return timed_reward_details_;
}
inline ::google::protobuf::RepeatedPtrField< ::CLobbyTimedRewardDetails >*
CMsgGameMatchSignoutResponse::mutable_timed_reward_details() {
  return &timed_reward_details_;
}

// repeated .CDOTALobbyMember xp_reward_details = 4;
inline int CMsgGameMatchSignoutResponse::xp_reward_details_size() const {
  return xp_reward_details_.size();
}
inline void CMsgGameMatchSignoutResponse::clear_xp_reward_details() {
  xp_reward_details_.Clear();
}
inline const ::CDOTALobbyMember& CMsgGameMatchSignoutResponse::xp_reward_details(int index) const {
  return xp_reward_details_.Get(index);
}
inline ::CDOTALobbyMember* CMsgGameMatchSignoutResponse::mutable_xp_reward_details(int index) {
  return xp_reward_details_.Mutable(index);
}
inline ::CDOTALobbyMember* CMsgGameMatchSignoutResponse::add_xp_reward_details() {
  return xp_reward_details_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember >&
CMsgGameMatchSignoutResponse::xp_reward_details() const {
  return xp_reward_details_;
}
inline ::google::protobuf::RepeatedPtrField< ::CDOTALobbyMember >*
CMsgGameMatchSignoutResponse::mutable_xp_reward_details() {
  return &xp_reward_details_;
}

// optional uint32 leagueid = 5;
inline bool CMsgGameMatchSignoutResponse::has_leagueid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgGameMatchSignoutResponse::set_has_leagueid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgGameMatchSignoutResponse::clear_has_leagueid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgGameMatchSignoutResponse::clear_leagueid() {
  leagueid_ = 0u;
  clear_has_leagueid();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignoutResponse::leagueid() const {
  return leagueid_;
}
inline void CMsgGameMatchSignoutResponse::set_leagueid(::google::protobuf::uint32 value) {
  set_has_leagueid();
  leagueid_ = value;
}

// repeated .CMsgGameMatchSignoutResponse.CAdditionalSignoutMsg additional_msgs = 6;
inline int CMsgGameMatchSignoutResponse::additional_msgs_size() const {
  return additional_msgs_.size();
}
inline void CMsgGameMatchSignoutResponse::clear_additional_msgs() {
  additional_msgs_.Clear();
}
inline const ::CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg& CMsgGameMatchSignoutResponse::additional_msgs(int index) const {
  return additional_msgs_.Get(index);
}
inline ::CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg* CMsgGameMatchSignoutResponse::mutable_additional_msgs(int index) {
  return additional_msgs_.Mutable(index);
}
inline ::CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg* CMsgGameMatchSignoutResponse::add_additional_msgs() {
  return additional_msgs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg >&
CMsgGameMatchSignoutResponse::additional_msgs() const {
  return additional_msgs_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg >*
CMsgGameMatchSignoutResponse::mutable_additional_msgs() {
  return &additional_msgs_;
}

// -------------------------------------------------------------------

// CMsgGameMatchSignOutPermissionRequest

// optional uint32 server_version = 1;
inline bool CMsgGameMatchSignOutPermissionRequest::has_server_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGameMatchSignOutPermissionRequest::set_has_server_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGameMatchSignOutPermissionRequest::clear_has_server_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGameMatchSignOutPermissionRequest::clear_server_version() {
  server_version_ = 0u;
  clear_has_server_version();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOutPermissionRequest::server_version() const {
  return server_version_;
}
inline void CMsgGameMatchSignOutPermissionRequest::set_server_version(::google::protobuf::uint32 value) {
  set_has_server_version();
  server_version_ = value;
}

// optional uint32 local_attempt = 2;
inline bool CMsgGameMatchSignOutPermissionRequest::has_local_attempt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGameMatchSignOutPermissionRequest::set_has_local_attempt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGameMatchSignOutPermissionRequest::clear_has_local_attempt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGameMatchSignOutPermissionRequest::clear_local_attempt() {
  local_attempt_ = 0u;
  clear_has_local_attempt();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOutPermissionRequest::local_attempt() const {
  return local_attempt_;
}
inline void CMsgGameMatchSignOutPermissionRequest::set_local_attempt(::google::protobuf::uint32 value) {
  set_has_local_attempt();
  local_attempt_ = value;
}

// optional uint32 total_attempt = 3;
inline bool CMsgGameMatchSignOutPermissionRequest::has_total_attempt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGameMatchSignOutPermissionRequest::set_has_total_attempt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGameMatchSignOutPermissionRequest::clear_has_total_attempt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGameMatchSignOutPermissionRequest::clear_total_attempt() {
  total_attempt_ = 0u;
  clear_has_total_attempt();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOutPermissionRequest::total_attempt() const {
  return total_attempt_;
}
inline void CMsgGameMatchSignOutPermissionRequest::set_total_attempt(::google::protobuf::uint32 value) {
  set_has_total_attempt();
  total_attempt_ = value;
}

// optional uint32 seconds_waited = 4;
inline bool CMsgGameMatchSignOutPermissionRequest::has_seconds_waited() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGameMatchSignOutPermissionRequest::set_has_seconds_waited() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGameMatchSignOutPermissionRequest::clear_has_seconds_waited() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGameMatchSignOutPermissionRequest::clear_seconds_waited() {
  seconds_waited_ = 0u;
  clear_has_seconds_waited();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOutPermissionRequest::seconds_waited() const {
  return seconds_waited_;
}
inline void CMsgGameMatchSignOutPermissionRequest::set_seconds_waited(::google::protobuf::uint32 value) {
  set_has_seconds_waited();
  seconds_waited_ = value;
}

// -------------------------------------------------------------------

// CMsgGameMatchSignOutPermissionResponse

// optional bool permission_granted = 1 [default = false];
inline bool CMsgGameMatchSignOutPermissionResponse::has_permission_granted() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGameMatchSignOutPermissionResponse::set_has_permission_granted() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGameMatchSignOutPermissionResponse::clear_has_permission_granted() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGameMatchSignOutPermissionResponse::clear_permission_granted() {
  permission_granted_ = false;
  clear_has_permission_granted();
}
inline bool CMsgGameMatchSignOutPermissionResponse::permission_granted() const {
  return permission_granted_;
}
inline void CMsgGameMatchSignOutPermissionResponse::set_permission_granted(bool value) {
  set_has_permission_granted();
  permission_granted_ = value;
}

// optional bool abandon_signout = 2 [default = false];
inline bool CMsgGameMatchSignOutPermissionResponse::has_abandon_signout() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGameMatchSignOutPermissionResponse::set_has_abandon_signout() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGameMatchSignOutPermissionResponse::clear_has_abandon_signout() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGameMatchSignOutPermissionResponse::clear_abandon_signout() {
  abandon_signout_ = false;
  clear_has_abandon_signout();
}
inline bool CMsgGameMatchSignOutPermissionResponse::abandon_signout() const {
  return abandon_signout_;
}
inline void CMsgGameMatchSignOutPermissionResponse::set_abandon_signout(bool value) {
  set_has_abandon_signout();
  abandon_signout_ = value;
}

// optional uint32 retry_delay_seconds = 3 [default = 0];
inline bool CMsgGameMatchSignOutPermissionResponse::has_retry_delay_seconds() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGameMatchSignOutPermissionResponse::set_has_retry_delay_seconds() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGameMatchSignOutPermissionResponse::clear_has_retry_delay_seconds() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGameMatchSignOutPermissionResponse::clear_retry_delay_seconds() {
  retry_delay_seconds_ = 0u;
  clear_has_retry_delay_seconds();
}
inline ::google::protobuf::uint32 CMsgGameMatchSignOutPermissionResponse::retry_delay_seconds() const {
  return retry_delay_seconds_;
}
inline void CMsgGameMatchSignOutPermissionResponse::set_retry_delay_seconds(::google::protobuf::uint32 value) {
  set_has_retry_delay_seconds();
  retry_delay_seconds_ = value;
}

// -------------------------------------------------------------------

// CMsgGameChatLog_CChatLine

// optional uint32 account_id = 1;
inline bool CMsgGameChatLog_CChatLine::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGameChatLog_CChatLine::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGameChatLog_CChatLine::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGameChatLog_CChatLine::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgGameChatLog_CChatLine::account_id() const {
  return account_id_;
}
inline void CMsgGameChatLog_CChatLine::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
}

// optional uint32 team_only = 2;
inline bool CMsgGameChatLog_CChatLine::has_team_only() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGameChatLog_CChatLine::set_has_team_only() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGameChatLog_CChatLine::clear_has_team_only() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGameChatLog_CChatLine::clear_team_only() {
  team_only_ = 0u;
  clear_has_team_only();
}
inline ::google::protobuf::uint32 CMsgGameChatLog_CChatLine::team_only() const {
  return team_only_;
}
inline void CMsgGameChatLog_CChatLine::set_team_only(::google::protobuf::uint32 value) {
  set_has_team_only();
  team_only_ = value;
}

// optional string text = 3;
inline bool CMsgGameChatLog_CChatLine::has_text() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGameChatLog_CChatLine::set_has_text() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGameChatLog_CChatLine::clear_has_text() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGameChatLog_CChatLine::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& CMsgGameChatLog_CChatLine::text() const {
  return *text_;
}
inline void CMsgGameChatLog_CChatLine::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void CMsgGameChatLog_CChatLine::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void CMsgGameChatLog_CChatLine::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgGameChatLog_CChatLine::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* CMsgGameChatLog_CChatLine::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 game_time = 4;
inline bool CMsgGameChatLog_CChatLine::has_game_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGameChatLog_CChatLine::set_has_game_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGameChatLog_CChatLine::clear_has_game_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGameChatLog_CChatLine::clear_game_time() {
  game_time_ = 0u;
  clear_has_game_time();
}
inline ::google::protobuf::uint32 CMsgGameChatLog_CChatLine::game_time() const {
  return game_time_;
}
inline void CMsgGameChatLog_CChatLine::set_game_time(::google::protobuf::uint32 value) {
  set_has_game_time();
  game_time_ = value;
}

// -------------------------------------------------------------------

// CMsgGameChatLog

// optional uint32 match_id = 1;
inline bool CMsgGameChatLog::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGameChatLog::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGameChatLog::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGameChatLog::clear_match_id() {
  match_id_ = 0u;
  clear_has_match_id();
}
inline ::google::protobuf::uint32 CMsgGameChatLog::match_id() const {
  return match_id_;
}
inline void CMsgGameChatLog::set_match_id(::google::protobuf::uint32 value) {
  set_has_match_id();
  match_id_ = value;
}

// repeated .CMsgGameChatLog.CChatLine lines = 2;
inline int CMsgGameChatLog::lines_size() const {
  return lines_.size();
}
inline void CMsgGameChatLog::clear_lines() {
  lines_.Clear();
}
inline const ::CMsgGameChatLog_CChatLine& CMsgGameChatLog::lines(int index) const {
  return lines_.Get(index);
}
inline ::CMsgGameChatLog_CChatLine* CMsgGameChatLog::mutable_lines(int index) {
  return lines_.Mutable(index);
}
inline ::CMsgGameChatLog_CChatLine* CMsgGameChatLog::add_lines() {
  return lines_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgGameChatLog_CChatLine >&
CMsgGameChatLog::lines() const {
  return lines_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgGameChatLog_CChatLine >*
CMsgGameChatLog::mutable_lines() {
  return &lines_;
}

// -------------------------------------------------------------------

// CMsgDOTALiveScoreboardUpdate_Team_Player

// optional uint32 player_slot = 1;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_player_slot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_player_slot() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_player_slot() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_player_slot() {
  player_slot_ = 0u;
  clear_has_player_slot();
}
inline ::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::player_slot() const {
  return player_slot_;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_player_slot(::google::protobuf::uint32 value) {
  set_has_player_slot();
  player_slot_ = value;
}

// optional string player_name = 2;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_player_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_player_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_player_name() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    player_name_->clear();
  }
  clear_has_player_name();
}
inline const ::std::string& CMsgDOTALiveScoreboardUpdate_Team_Player::player_name() const {
  return *player_name_;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_player_name(const ::std::string& value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_player_name(const char* value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgDOTALiveScoreboardUpdate_Team_Player::mutable_player_name() {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  return player_name_;
}
inline ::std::string* CMsgDOTALiveScoreboardUpdate_Team_Player::release_player_name() {
  clear_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_name_;
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string hero_name = 3;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_hero_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_hero_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_hero_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_hero_name() {
  if (hero_name_ != &::google::protobuf::internal::kEmptyString) {
    hero_name_->clear();
  }
  clear_has_hero_name();
}
inline const ::std::string& CMsgDOTALiveScoreboardUpdate_Team_Player::hero_name() const {
  return *hero_name_;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_hero_name(const ::std::string& value) {
  set_has_hero_name();
  if (hero_name_ == &::google::protobuf::internal::kEmptyString) {
    hero_name_ = new ::std::string;
  }
  hero_name_->assign(value);
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_hero_name(const char* value) {
  set_has_hero_name();
  if (hero_name_ == &::google::protobuf::internal::kEmptyString) {
    hero_name_ = new ::std::string;
  }
  hero_name_->assign(value);
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_hero_name(const char* value, size_t size) {
  set_has_hero_name();
  if (hero_name_ == &::google::protobuf::internal::kEmptyString) {
    hero_name_ = new ::std::string;
  }
  hero_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgDOTALiveScoreboardUpdate_Team_Player::mutable_hero_name() {
  set_has_hero_name();
  if (hero_name_ == &::google::protobuf::internal::kEmptyString) {
    hero_name_ = new ::std::string;
  }
  return hero_name_;
}
inline ::std::string* CMsgDOTALiveScoreboardUpdate_Team_Player::release_hero_name() {
  clear_has_hero_name();
  if (hero_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hero_name_;
    hero_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 hero_id = 4;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_hero_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_hero_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::hero_id() const {
  return hero_id_;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// optional uint32 kills = 5;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_kills() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_kills() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_kills() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_kills() {
  kills_ = 0u;
  clear_has_kills();
}
inline ::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::kills() const {
  return kills_;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_kills(::google::protobuf::uint32 value) {
  set_has_kills();
  kills_ = value;
}

// optional uint32 deaths = 6;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_deaths() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_deaths() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_deaths() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_deaths() {
  deaths_ = 0u;
  clear_has_deaths();
}
inline ::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::deaths() const {
  return deaths_;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_deaths(::google::protobuf::uint32 value) {
  set_has_deaths();
  deaths_ = value;
}

// optional uint32 assists = 7;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_assists() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_assists() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_assists() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_assists() {
  assists_ = 0u;
  clear_has_assists();
}
inline ::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::assists() const {
  return assists_;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_assists(::google::protobuf::uint32 value) {
  set_has_assists();
  assists_ = value;
}

// optional uint32 last_hits = 8;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_last_hits() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_last_hits() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_last_hits() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_last_hits() {
  last_hits_ = 0u;
  clear_has_last_hits();
}
inline ::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::last_hits() const {
  return last_hits_;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_last_hits(::google::protobuf::uint32 value) {
  set_has_last_hits();
  last_hits_ = value;
}

// optional uint32 denies = 9;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_denies() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_denies() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_denies() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_denies() {
  denies_ = 0u;
  clear_has_denies();
}
inline ::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::denies() const {
  return denies_;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_denies(::google::protobuf::uint32 value) {
  set_has_denies();
  denies_ = value;
}

// optional uint32 gold = 10;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_gold() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_gold() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_gold() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_gold() {
  gold_ = 0u;
  clear_has_gold();
}
inline ::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::gold() const {
  return gold_;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_gold(::google::protobuf::uint32 value) {
  set_has_gold();
  gold_ = value;
}

// optional uint32 level = 11;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_level() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_level() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_level() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::level() const {
  return level_;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional float gold_per_min = 12;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_gold_per_min() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_gold_per_min() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_gold_per_min() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_gold_per_min() {
  gold_per_min_ = 0;
  clear_has_gold_per_min();
}
inline float CMsgDOTALiveScoreboardUpdate_Team_Player::gold_per_min() const {
  return gold_per_min_;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_gold_per_min(float value) {
  set_has_gold_per_min();
  gold_per_min_ = value;
}

// optional float xp_per_min = 13;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_xp_per_min() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_xp_per_min() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_xp_per_min() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_xp_per_min() {
  xp_per_min_ = 0;
  clear_has_xp_per_min();
}
inline float CMsgDOTALiveScoreboardUpdate_Team_Player::xp_per_min() const {
  return xp_per_min_;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_xp_per_min(float value) {
  set_has_xp_per_min();
  xp_per_min_ = value;
}

// optional .CMsgDOTALiveScoreboardUpdate.Team.Player.DOTAUltimateState ultimate_state = 14 [default = k_EDOTAUltimateStateNotLearned];
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_ultimate_state() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_ultimate_state() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_ultimate_state() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_ultimate_state() {
  ultimate_state_ = 0;
  clear_has_ultimate_state();
}
inline ::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState CMsgDOTALiveScoreboardUpdate_Team_Player::ultimate_state() const {
  return static_cast< ::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState >(ultimate_state_);
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_ultimate_state(::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState value) {
  GOOGLE_DCHECK(::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_IsValid(value));
  set_has_ultimate_state();
  ultimate_state_ = value;
}

// optional float ultimate_cooldown = 15;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_ultimate_cooldown() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_ultimate_cooldown() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_ultimate_cooldown() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_ultimate_cooldown() {
  ultimate_cooldown_ = 0;
  clear_has_ultimate_cooldown();
}
inline float CMsgDOTALiveScoreboardUpdate_Team_Player::ultimate_cooldown() const {
  return ultimate_cooldown_;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_ultimate_cooldown(float value) {
  set_has_ultimate_cooldown();
  ultimate_cooldown_ = value;
}

// optional uint32 item0 = 16;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_item0() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_item0() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_item0() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_item0() {
  item0_ = 0u;
  clear_has_item0();
}
inline ::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::item0() const {
  return item0_;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_item0(::google::protobuf::uint32 value) {
  set_has_item0();
  item0_ = value;
}

// optional uint32 item1 = 17;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_item1() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_item1() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_item1() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_item1() {
  item1_ = 0u;
  clear_has_item1();
}
inline ::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::item1() const {
  return item1_;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_item1(::google::protobuf::uint32 value) {
  set_has_item1();
  item1_ = value;
}

// optional uint32 item2 = 18;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_item2() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_item2() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_item2() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_item2() {
  item2_ = 0u;
  clear_has_item2();
}
inline ::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::item2() const {
  return item2_;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_item2(::google::protobuf::uint32 value) {
  set_has_item2();
  item2_ = value;
}

// optional uint32 item3 = 19;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_item3() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_item3() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_item3() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_item3() {
  item3_ = 0u;
  clear_has_item3();
}
inline ::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::item3() const {
  return item3_;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_item3(::google::protobuf::uint32 value) {
  set_has_item3();
  item3_ = value;
}

// optional uint32 item4 = 20;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_item4() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_item4() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_item4() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_item4() {
  item4_ = 0u;
  clear_has_item4();
}
inline ::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::item4() const {
  return item4_;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_item4(::google::protobuf::uint32 value) {
  set_has_item4();
  item4_ = value;
}

// optional uint32 item5 = 21;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_item5() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_item5() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_item5() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_item5() {
  item5_ = 0u;
  clear_has_item5();
}
inline ::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::item5() const {
  return item5_;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_item5(::google::protobuf::uint32 value) {
  set_has_item5();
  item5_ = value;
}

// optional uint32 respawn_timer = 22;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_respawn_timer() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_has_respawn_timer() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_has_respawn_timer() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_respawn_timer() {
  respawn_timer_ = 0u;
  clear_has_respawn_timer();
}
inline ::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team_Player::respawn_timer() const {
  return respawn_timer_;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_respawn_timer(::google::protobuf::uint32 value) {
  set_has_respawn_timer();
  respawn_timer_ = value;
}

// -------------------------------------------------------------------

// CMsgDOTALiveScoreboardUpdate_Team

// repeated .CMsgDOTALiveScoreboardUpdate.Team.Player players = 1;
inline int CMsgDOTALiveScoreboardUpdate_Team::players_size() const {
  return players_.size();
}
inline void CMsgDOTALiveScoreboardUpdate_Team::clear_players() {
  players_.Clear();
}
inline const ::CMsgDOTALiveScoreboardUpdate_Team_Player& CMsgDOTALiveScoreboardUpdate_Team::players(int index) const {
  return players_.Get(index);
}
inline ::CMsgDOTALiveScoreboardUpdate_Team_Player* CMsgDOTALiveScoreboardUpdate_Team::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::CMsgDOTALiveScoreboardUpdate_Team_Player* CMsgDOTALiveScoreboardUpdate_Team::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTALiveScoreboardUpdate_Team_Player >&
CMsgDOTALiveScoreboardUpdate_Team::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTALiveScoreboardUpdate_Team_Player >*
CMsgDOTALiveScoreboardUpdate_Team::mutable_players() {
  return &players_;
}

// optional uint32 score = 2;
inline bool CMsgDOTALiveScoreboardUpdate_Team::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate_Team::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTALiveScoreboardUpdate_Team::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate_Team::score() const {
  return score_;
}
inline void CMsgDOTALiveScoreboardUpdate_Team::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// CMsgDOTALiveScoreboardUpdate

// optional uint32 tournament_id = 1;
inline bool CMsgDOTALiveScoreboardUpdate::has_tournament_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate::set_has_tournament_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTALiveScoreboardUpdate::clear_has_tournament_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTALiveScoreboardUpdate::clear_tournament_id() {
  tournament_id_ = 0u;
  clear_has_tournament_id();
}
inline ::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate::tournament_id() const {
  return tournament_id_;
}
inline void CMsgDOTALiveScoreboardUpdate::set_tournament_id(::google::protobuf::uint32 value) {
  set_has_tournament_id();
  tournament_id_ = value;
}

// optional uint32 tournament_game_id = 2;
inline bool CMsgDOTALiveScoreboardUpdate::has_tournament_game_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate::set_has_tournament_game_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTALiveScoreboardUpdate::clear_has_tournament_game_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTALiveScoreboardUpdate::clear_tournament_game_id() {
  tournament_game_id_ = 0u;
  clear_has_tournament_game_id();
}
inline ::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate::tournament_game_id() const {
  return tournament_game_id_;
}
inline void CMsgDOTALiveScoreboardUpdate::set_tournament_game_id(::google::protobuf::uint32 value) {
  set_has_tournament_game_id();
  tournament_game_id_ = value;
}

// optional float duration = 3;
inline bool CMsgDOTALiveScoreboardUpdate::has_duration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate::set_has_duration() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTALiveScoreboardUpdate::clear_has_duration() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTALiveScoreboardUpdate::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline float CMsgDOTALiveScoreboardUpdate::duration() const {
  return duration_;
}
inline void CMsgDOTALiveScoreboardUpdate::set_duration(float value) {
  set_has_duration();
  duration_ = value;
}

// optional int32 hltv_delay = 4;
inline bool CMsgDOTALiveScoreboardUpdate::has_hltv_delay() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate::set_has_hltv_delay() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTALiveScoreboardUpdate::clear_has_hltv_delay() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTALiveScoreboardUpdate::clear_hltv_delay() {
  hltv_delay_ = 0;
  clear_has_hltv_delay();
}
inline ::google::protobuf::int32 CMsgDOTALiveScoreboardUpdate::hltv_delay() const {
  return hltv_delay_;
}
inline void CMsgDOTALiveScoreboardUpdate::set_hltv_delay(::google::protobuf::int32 value) {
  set_has_hltv_delay();
  hltv_delay_ = value;
}

// optional .CMsgDOTALiveScoreboardUpdate.Team team_good = 5;
inline bool CMsgDOTALiveScoreboardUpdate::has_team_good() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate::set_has_team_good() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTALiveScoreboardUpdate::clear_has_team_good() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTALiveScoreboardUpdate::clear_team_good() {
  if (team_good_ != NULL) team_good_->::CMsgDOTALiveScoreboardUpdate_Team::Clear();
  clear_has_team_good();
}
inline const ::CMsgDOTALiveScoreboardUpdate_Team& CMsgDOTALiveScoreboardUpdate::team_good() const {
  return team_good_ != NULL ? *team_good_ : *default_instance_->team_good_;
}
inline ::CMsgDOTALiveScoreboardUpdate_Team* CMsgDOTALiveScoreboardUpdate::mutable_team_good() {
  set_has_team_good();
  if (team_good_ == NULL) team_good_ = new ::CMsgDOTALiveScoreboardUpdate_Team;
  return team_good_;
}
inline ::CMsgDOTALiveScoreboardUpdate_Team* CMsgDOTALiveScoreboardUpdate::release_team_good() {
  clear_has_team_good();
  ::CMsgDOTALiveScoreboardUpdate_Team* temp = team_good_;
  team_good_ = NULL;
  return temp;
}

// optional .CMsgDOTALiveScoreboardUpdate.Team team_bad = 6;
inline bool CMsgDOTALiveScoreboardUpdate::has_team_bad() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate::set_has_team_bad() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTALiveScoreboardUpdate::clear_has_team_bad() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTALiveScoreboardUpdate::clear_team_bad() {
  if (team_bad_ != NULL) team_bad_->::CMsgDOTALiveScoreboardUpdate_Team::Clear();
  clear_has_team_bad();
}
inline const ::CMsgDOTALiveScoreboardUpdate_Team& CMsgDOTALiveScoreboardUpdate::team_bad() const {
  return team_bad_ != NULL ? *team_bad_ : *default_instance_->team_bad_;
}
inline ::CMsgDOTALiveScoreboardUpdate_Team* CMsgDOTALiveScoreboardUpdate::mutable_team_bad() {
  set_has_team_bad();
  if (team_bad_ == NULL) team_bad_ = new ::CMsgDOTALiveScoreboardUpdate_Team;
  return team_bad_;
}
inline ::CMsgDOTALiveScoreboardUpdate_Team* CMsgDOTALiveScoreboardUpdate::release_team_bad() {
  clear_has_team_bad();
  ::CMsgDOTALiveScoreboardUpdate_Team* temp = team_bad_;
  team_bad_ = NULL;
  return temp;
}

// optional uint32 roshan_respawn_timer = 7;
inline bool CMsgDOTALiveScoreboardUpdate::has_roshan_respawn_timer() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTALiveScoreboardUpdate::set_has_roshan_respawn_timer() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTALiveScoreboardUpdate::clear_has_roshan_respawn_timer() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTALiveScoreboardUpdate::clear_roshan_respawn_timer() {
  roshan_respawn_timer_ = 0u;
  clear_has_roshan_respawn_timer();
}
inline ::google::protobuf::uint32 CMsgDOTALiveScoreboardUpdate::roshan_respawn_timer() const {
  return roshan_respawn_timer_;
}
inline void CMsgDOTALiveScoreboardUpdate::set_roshan_respawn_timer(::google::protobuf::uint32 value) {
  set_has_roshan_respawn_timer();
  roshan_respawn_timer_ = value;
}

// -------------------------------------------------------------------

// CMsgDOTARequestPlayerResources

// optional fixed64 steam_id = 1;
inline bool CMsgDOTARequestPlayerResources::has_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARequestPlayerResources::set_has_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARequestPlayerResources::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARequestPlayerResources::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
inline ::google::protobuf::uint64 CMsgDOTARequestPlayerResources::steam_id() const {
  return steam_id_;
}
inline void CMsgDOTARequestPlayerResources::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
}

// optional uint32 player_id = 2;
inline bool CMsgDOTARequestPlayerResources::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARequestPlayerResources::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTARequestPlayerResources::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTARequestPlayerResources::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
inline ::google::protobuf::uint32 CMsgDOTARequestPlayerResources::player_id() const {
  return player_id_;
}
inline void CMsgDOTARequestPlayerResources::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
}

// -------------------------------------------------------------------

// CMsgDOTARequestPlayerResourcesResponse

// optional fixed64 steam_id = 1;
inline bool CMsgDOTARequestPlayerResourcesResponse::has_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARequestPlayerResourcesResponse::set_has_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARequestPlayerResourcesResponse::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARequestPlayerResourcesResponse::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
inline ::google::protobuf::uint64 CMsgDOTARequestPlayerResourcesResponse::steam_id() const {
  return steam_id_;
}
inline void CMsgDOTARequestPlayerResourcesResponse::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
}

// optional uint32 rank = 2;
inline bool CMsgDOTARequestPlayerResourcesResponse::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARequestPlayerResourcesResponse::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTARequestPlayerResourcesResponse::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTARequestPlayerResourcesResponse::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 CMsgDOTARequestPlayerResourcesResponse::rank() const {
  return rank_;
}
inline void CMsgDOTARequestPlayerResourcesResponse::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// optional uint32 player_id = 3;
inline bool CMsgDOTARequestPlayerResourcesResponse::has_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARequestPlayerResourcesResponse::set_has_player_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTARequestPlayerResourcesResponse::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTARequestPlayerResourcesResponse::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
inline ::google::protobuf::uint32 CMsgDOTARequestPlayerResourcesResponse::player_id() const {
  return player_id_;
}
inline void CMsgDOTARequestPlayerResourcesResponse::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional bool prevent_text_chat = 4;
inline bool CMsgDOTARequestPlayerResourcesResponse::has_prevent_text_chat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTARequestPlayerResourcesResponse::set_has_prevent_text_chat() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTARequestPlayerResourcesResponse::clear_has_prevent_text_chat() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTARequestPlayerResourcesResponse::clear_prevent_text_chat() {
  prevent_text_chat_ = false;
  clear_has_prevent_text_chat();
}
inline bool CMsgDOTARequestPlayerResourcesResponse::prevent_text_chat() const {
  return prevent_text_chat_;
}
inline void CMsgDOTARequestPlayerResourcesResponse::set_prevent_text_chat(bool value) {
  set_has_prevent_text_chat();
  prevent_text_chat_ = value;
}

// optional bool prevent_voice_chat = 5;
inline bool CMsgDOTARequestPlayerResourcesResponse::has_prevent_voice_chat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTARequestPlayerResourcesResponse::set_has_prevent_voice_chat() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTARequestPlayerResourcesResponse::clear_has_prevent_voice_chat() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTARequestPlayerResourcesResponse::clear_prevent_voice_chat() {
  prevent_voice_chat_ = false;
  clear_has_prevent_voice_chat();
}
inline bool CMsgDOTARequestPlayerResourcesResponse::prevent_voice_chat() const {
  return prevent_voice_chat_;
}
inline void CMsgDOTARequestPlayerResourcesResponse::set_prevent_voice_chat(bool value) {
  set_has_prevent_voice_chat();
  prevent_voice_chat_ = value;
}

// optional bool low_priority = 6;
inline bool CMsgDOTARequestPlayerResourcesResponse::has_low_priority() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTARequestPlayerResourcesResponse::set_has_low_priority() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTARequestPlayerResourcesResponse::clear_has_low_priority() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTARequestPlayerResourcesResponse::clear_low_priority() {
  low_priority_ = false;
  clear_has_low_priority();
}
inline bool CMsgDOTARequestPlayerResourcesResponse::low_priority() const {
  return low_priority_;
}
inline void CMsgDOTARequestPlayerResourcesResponse::set_low_priority(bool value) {
  set_has_low_priority();
  low_priority_ = value;
}

// -------------------------------------------------------------------

// CMsgDOTARequestBatchPlayerResources

// repeated uint32 account_ids = 1 [packed = true];
inline int CMsgDOTARequestBatchPlayerResources::account_ids_size() const {
  return account_ids_.size();
}
inline void CMsgDOTARequestBatchPlayerResources::clear_account_ids() {
  account_ids_.Clear();
}
inline ::google::protobuf::uint32 CMsgDOTARequestBatchPlayerResources::account_ids(int index) const {
  return account_ids_.Get(index);
}
inline void CMsgDOTARequestBatchPlayerResources::set_account_ids(int index, ::google::protobuf::uint32 value) {
  account_ids_.Set(index, value);
}
inline void CMsgDOTARequestBatchPlayerResources::add_account_ids(::google::protobuf::uint32 value) {
  account_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTARequestBatchPlayerResources::account_ids() const {
  return account_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTARequestBatchPlayerResources::mutable_account_ids() {
  return &account_ids_;
}

// optional bool rank_use_competitive = 2;
inline bool CMsgDOTARequestBatchPlayerResources::has_rank_use_competitive() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARequestBatchPlayerResources::set_has_rank_use_competitive() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTARequestBatchPlayerResources::clear_has_rank_use_competitive() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTARequestBatchPlayerResources::clear_rank_use_competitive() {
  rank_use_competitive_ = false;
  clear_has_rank_use_competitive();
}
inline bool CMsgDOTARequestBatchPlayerResources::rank_use_competitive() const {
  return rank_use_competitive_;
}
inline void CMsgDOTARequestBatchPlayerResources::set_rank_use_competitive(bool value) {
  set_has_rank_use_competitive();
  rank_use_competitive_ = value;
}

// repeated bool rank_use_solo = 3 [packed = true];
inline int CMsgDOTARequestBatchPlayerResources::rank_use_solo_size() const {
  return rank_use_solo_.size();
}
inline void CMsgDOTARequestBatchPlayerResources::clear_rank_use_solo() {
  rank_use_solo_.Clear();
}
inline bool CMsgDOTARequestBatchPlayerResources::rank_use_solo(int index) const {
  return rank_use_solo_.Get(index);
}
inline void CMsgDOTARequestBatchPlayerResources::set_rank_use_solo(int index, bool value) {
  rank_use_solo_.Set(index, value);
}
inline void CMsgDOTARequestBatchPlayerResources::add_rank_use_solo(bool value) {
  rank_use_solo_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
CMsgDOTARequestBatchPlayerResources::rank_use_solo() const {
  return rank_use_solo_;
}
inline ::google::protobuf::RepeatedField< bool >*
CMsgDOTARequestBatchPlayerResources::mutable_rank_use_solo() {
  return &rank_use_solo_;
}

// -------------------------------------------------------------------

// CMsgDOTARequestBatchPlayerResourcesResponse_Result

// optional uint32 account_id = 1;
inline bool CMsgDOTARequestBatchPlayerResourcesResponse_Result::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARequestBatchPlayerResourcesResponse_Result::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARequestBatchPlayerResourcesResponse_Result::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARequestBatchPlayerResourcesResponse_Result::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTARequestBatchPlayerResourcesResponse_Result::account_id() const {
  return account_id_;
}
inline void CMsgDOTARequestBatchPlayerResourcesResponse_Result::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
}

// optional bool prevent_text_chat = 2;
inline bool CMsgDOTARequestBatchPlayerResourcesResponse_Result::has_prevent_text_chat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARequestBatchPlayerResourcesResponse_Result::set_has_prevent_text_chat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTARequestBatchPlayerResourcesResponse_Result::clear_has_prevent_text_chat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTARequestBatchPlayerResourcesResponse_Result::clear_prevent_text_chat() {
  prevent_text_chat_ = false;
  clear_has_prevent_text_chat();
}
inline bool CMsgDOTARequestBatchPlayerResourcesResponse_Result::prevent_text_chat() const {
  return prevent_text_chat_;
}
inline void CMsgDOTARequestBatchPlayerResourcesResponse_Result::set_prevent_text_chat(bool value) {
  set_has_prevent_text_chat();
  prevent_text_chat_ = value;
}

// optional bool prevent_voice_chat = 3;
inline bool CMsgDOTARequestBatchPlayerResourcesResponse_Result::has_prevent_voice_chat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARequestBatchPlayerResourcesResponse_Result::set_has_prevent_voice_chat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTARequestBatchPlayerResourcesResponse_Result::clear_has_prevent_voice_chat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTARequestBatchPlayerResourcesResponse_Result::clear_prevent_voice_chat() {
  prevent_voice_chat_ = false;
  clear_has_prevent_voice_chat();
}
inline bool CMsgDOTARequestBatchPlayerResourcesResponse_Result::prevent_voice_chat() const {
  return prevent_voice_chat_;
}
inline void CMsgDOTARequestBatchPlayerResourcesResponse_Result::set_prevent_voice_chat(bool value) {
  set_has_prevent_voice_chat();
  prevent_voice_chat_ = value;
}

// optional uint32 rank = 4;
inline bool CMsgDOTARequestBatchPlayerResourcesResponse_Result::has_rank() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTARequestBatchPlayerResourcesResponse_Result::set_has_rank() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTARequestBatchPlayerResourcesResponse_Result::clear_has_rank() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTARequestBatchPlayerResourcesResponse_Result::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 CMsgDOTARequestBatchPlayerResourcesResponse_Result::rank() const {
  return rank_;
}
inline void CMsgDOTARequestBatchPlayerResourcesResponse_Result::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// optional bool rank_calibrated = 5;
inline bool CMsgDOTARequestBatchPlayerResourcesResponse_Result::has_rank_calibrated() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTARequestBatchPlayerResourcesResponse_Result::set_has_rank_calibrated() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTARequestBatchPlayerResourcesResponse_Result::clear_has_rank_calibrated() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTARequestBatchPlayerResourcesResponse_Result::clear_rank_calibrated() {
  rank_calibrated_ = false;
  clear_has_rank_calibrated();
}
inline bool CMsgDOTARequestBatchPlayerResourcesResponse_Result::rank_calibrated() const {
  return rank_calibrated_;
}
inline void CMsgDOTARequestBatchPlayerResourcesResponse_Result::set_rank_calibrated(bool value) {
  set_has_rank_calibrated();
  rank_calibrated_ = value;
}

// optional bool low_priority = 6;
inline bool CMsgDOTARequestBatchPlayerResourcesResponse_Result::has_low_priority() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTARequestBatchPlayerResourcesResponse_Result::set_has_low_priority() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTARequestBatchPlayerResourcesResponse_Result::clear_has_low_priority() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTARequestBatchPlayerResourcesResponse_Result::clear_low_priority() {
  low_priority_ = false;
  clear_has_low_priority();
}
inline bool CMsgDOTARequestBatchPlayerResourcesResponse_Result::low_priority() const {
  return low_priority_;
}
inline void CMsgDOTARequestBatchPlayerResourcesResponse_Result::set_low_priority(bool value) {
  set_has_low_priority();
  low_priority_ = value;
}

// -------------------------------------------------------------------

// CMsgDOTARequestBatchPlayerResourcesResponse

// repeated .CMsgDOTARequestBatchPlayerResourcesResponse.Result results = 6;
inline int CMsgDOTARequestBatchPlayerResourcesResponse::results_size() const {
  return results_.size();
}
inline void CMsgDOTARequestBatchPlayerResourcesResponse::clear_results() {
  results_.Clear();
}
inline const ::CMsgDOTARequestBatchPlayerResourcesResponse_Result& CMsgDOTARequestBatchPlayerResourcesResponse::results(int index) const {
  return results_.Get(index);
}
inline ::CMsgDOTARequestBatchPlayerResourcesResponse_Result* CMsgDOTARequestBatchPlayerResourcesResponse::mutable_results(int index) {
  return results_.Mutable(index);
}
inline ::CMsgDOTARequestBatchPlayerResourcesResponse_Result* CMsgDOTARequestBatchPlayerResourcesResponse::add_results() {
  return results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARequestBatchPlayerResourcesResponse_Result >&
CMsgDOTARequestBatchPlayerResourcesResponse::results() const {
  return results_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARequestBatchPlayerResourcesResponse_Result >*
CMsgDOTARequestBatchPlayerResourcesResponse::mutable_results() {
  return &results_;
}

// -------------------------------------------------------------------

// CMsgDOTAPlayerFailedToConnect

// repeated fixed64 failed_loaders = 1;
inline int CMsgDOTAPlayerFailedToConnect::failed_loaders_size() const {
  return failed_loaders_.size();
}
inline void CMsgDOTAPlayerFailedToConnect::clear_failed_loaders() {
  failed_loaders_.Clear();
}
inline ::google::protobuf::uint64 CMsgDOTAPlayerFailedToConnect::failed_loaders(int index) const {
  return failed_loaders_.Get(index);
}
inline void CMsgDOTAPlayerFailedToConnect::set_failed_loaders(int index, ::google::protobuf::uint64 value) {
  failed_loaders_.Set(index, value);
}
inline void CMsgDOTAPlayerFailedToConnect::add_failed_loaders(::google::protobuf::uint64 value) {
  failed_loaders_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgDOTAPlayerFailedToConnect::failed_loaders() const {
  return failed_loaders_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgDOTAPlayerFailedToConnect::mutable_failed_loaders() {
  return &failed_loaders_;
}

// repeated fixed64 abandoned_loaders = 2;
inline int CMsgDOTAPlayerFailedToConnect::abandoned_loaders_size() const {
  return abandoned_loaders_.size();
}
inline void CMsgDOTAPlayerFailedToConnect::clear_abandoned_loaders() {
  abandoned_loaders_.Clear();
}
inline ::google::protobuf::uint64 CMsgDOTAPlayerFailedToConnect::abandoned_loaders(int index) const {
  return abandoned_loaders_.Get(index);
}
inline void CMsgDOTAPlayerFailedToConnect::set_abandoned_loaders(int index, ::google::protobuf::uint64 value) {
  abandoned_loaders_.Set(index, value);
}
inline void CMsgDOTAPlayerFailedToConnect::add_abandoned_loaders(::google::protobuf::uint64 value) {
  abandoned_loaders_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgDOTAPlayerFailedToConnect::abandoned_loaders() const {
  return abandoned_loaders_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgDOTAPlayerFailedToConnect::mutable_abandoned_loaders() {
  return &abandoned_loaders_;
}

// -------------------------------------------------------------------

// CMsgGCToRelayConnect

// optional uint32 source_tv_public_addr = 1;
inline bool CMsgGCToRelayConnect::has_source_tv_public_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCToRelayConnect::set_has_source_tv_public_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCToRelayConnect::clear_has_source_tv_public_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCToRelayConnect::clear_source_tv_public_addr() {
  source_tv_public_addr_ = 0u;
  clear_has_source_tv_public_addr();
}
inline ::google::protobuf::uint32 CMsgGCToRelayConnect::source_tv_public_addr() const {
  return source_tv_public_addr_;
}
inline void CMsgGCToRelayConnect::set_source_tv_public_addr(::google::protobuf::uint32 value) {
  set_has_source_tv_public_addr();
  source_tv_public_addr_ = value;
}

// optional uint32 source_tv_private_addr = 2;
inline bool CMsgGCToRelayConnect::has_source_tv_private_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCToRelayConnect::set_has_source_tv_private_addr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCToRelayConnect::clear_has_source_tv_private_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCToRelayConnect::clear_source_tv_private_addr() {
  source_tv_private_addr_ = 0u;
  clear_has_source_tv_private_addr();
}
inline ::google::protobuf::uint32 CMsgGCToRelayConnect::source_tv_private_addr() const {
  return source_tv_private_addr_;
}
inline void CMsgGCToRelayConnect::set_source_tv_private_addr(::google::protobuf::uint32 value) {
  set_has_source_tv_private_addr();
  source_tv_private_addr_ = value;
}

// optional uint32 source_tv_port = 3;
inline bool CMsgGCToRelayConnect::has_source_tv_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCToRelayConnect::set_has_source_tv_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCToRelayConnect::clear_has_source_tv_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCToRelayConnect::clear_source_tv_port() {
  source_tv_port_ = 0u;
  clear_has_source_tv_port();
}
inline ::google::protobuf::uint32 CMsgGCToRelayConnect::source_tv_port() const {
  return source_tv_port_;
}
inline void CMsgGCToRelayConnect::set_source_tv_port(::google::protobuf::uint32 value) {
  set_has_source_tv_port();
  source_tv_port_ = value;
}

// optional uint64 game_server_steam_id = 4;
inline bool CMsgGCToRelayConnect::has_game_server_steam_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGCToRelayConnect::set_has_game_server_steam_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGCToRelayConnect::clear_has_game_server_steam_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGCToRelayConnect::clear_game_server_steam_id() {
  game_server_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_game_server_steam_id();
}
inline ::google::protobuf::uint64 CMsgGCToRelayConnect::game_server_steam_id() const {
  return game_server_steam_id_;
}
inline void CMsgGCToRelayConnect::set_game_server_steam_id(::google::protobuf::uint64 value) {
  set_has_game_server_steam_id();
  game_server_steam_id_ = value;
}

// optional uint32 parent_count = 5;
inline bool CMsgGCToRelayConnect::has_parent_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgGCToRelayConnect::set_has_parent_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgGCToRelayConnect::clear_has_parent_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgGCToRelayConnect::clear_parent_count() {
  parent_count_ = 0u;
  clear_has_parent_count();
}
inline ::google::protobuf::uint32 CMsgGCToRelayConnect::parent_count() const {
  return parent_count_;
}
inline void CMsgGCToRelayConnect::set_parent_count(::google::protobuf::uint32 value) {
  set_has_parent_count();
  parent_count_ = value;
}

// optional fixed64 tv_unique_secret_code = 6;
inline bool CMsgGCToRelayConnect::has_tv_unique_secret_code() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgGCToRelayConnect::set_has_tv_unique_secret_code() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgGCToRelayConnect::clear_has_tv_unique_secret_code() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgGCToRelayConnect::clear_tv_unique_secret_code() {
  tv_unique_secret_code_ = GOOGLE_ULONGLONG(0);
  clear_has_tv_unique_secret_code();
}
inline ::google::protobuf::uint64 CMsgGCToRelayConnect::tv_unique_secret_code() const {
  return tv_unique_secret_code_;
}
inline void CMsgGCToRelayConnect::set_tv_unique_secret_code(::google::protobuf::uint64 value) {
  set_has_tv_unique_secret_code();
  tv_unique_secret_code_ = value;
}

// -------------------------------------------------------------------

// CMsgGCToRelayConnectResponse

// -------------------------------------------------------------------

// CMsgGCBanStatusRequest

// optional uint32 account_id = 1;
inline bool CMsgGCBanStatusRequest::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCBanStatusRequest::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCBanStatusRequest::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCBanStatusRequest::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgGCBanStatusRequest::account_id() const {
  return account_id_;
}
inline void CMsgGCBanStatusRequest::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
}

// -------------------------------------------------------------------

// CMsgGCBanStatusResponse

// optional uint32 result = 1;
inline bool CMsgGCBanStatusResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCBanStatusResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCBanStatusResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCBanStatusResponse::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 CMsgGCBanStatusResponse::result() const {
  return result_;
}
inline void CMsgGCBanStatusResponse::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// optional bool low_priority = 2;
inline bool CMsgGCBanStatusResponse::has_low_priority() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCBanStatusResponse::set_has_low_priority() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCBanStatusResponse::clear_has_low_priority() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCBanStatusResponse::clear_low_priority() {
  low_priority_ = false;
  clear_has_low_priority();
}
inline bool CMsgGCBanStatusResponse::low_priority() const {
  return low_priority_;
}
inline void CMsgGCBanStatusResponse::set_low_priority(bool value) {
  set_has_low_priority();
  low_priority_ = value;
}

// optional bool text_chat_banned = 3;
inline bool CMsgGCBanStatusResponse::has_text_chat_banned() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCBanStatusResponse::set_has_text_chat_banned() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCBanStatusResponse::clear_has_text_chat_banned() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCBanStatusResponse::clear_text_chat_banned() {
  text_chat_banned_ = false;
  clear_has_text_chat_banned();
}
inline bool CMsgGCBanStatusResponse::text_chat_banned() const {
  return text_chat_banned_;
}
inline void CMsgGCBanStatusResponse::set_text_chat_banned(bool value) {
  set_has_text_chat_banned();
  text_chat_banned_ = value;
}

// optional bool voice_chat_banned = 4;
inline bool CMsgGCBanStatusResponse::has_voice_chat_banned() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGCBanStatusResponse::set_has_voice_chat_banned() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGCBanStatusResponse::clear_has_voice_chat_banned() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGCBanStatusResponse::clear_voice_chat_banned() {
  voice_chat_banned_ = false;
  clear_has_voice_chat_banned();
}
inline bool CMsgGCBanStatusResponse::voice_chat_banned() const {
  return voice_chat_banned_;
}
inline void CMsgGCBanStatusResponse::set_voice_chat_banned(bool value) {
  set_has_voice_chat_banned();
  voice_chat_banned_ = value;
}

// -------------------------------------------------------------------

// CMsgTournamentItemEvent

// optional fixed32 killer_account_id = 1;
inline bool CMsgTournamentItemEvent::has_killer_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgTournamentItemEvent::set_has_killer_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgTournamentItemEvent::clear_has_killer_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgTournamentItemEvent::clear_killer_account_id() {
  killer_account_id_ = 0u;
  clear_has_killer_account_id();
}
inline ::google::protobuf::uint32 CMsgTournamentItemEvent::killer_account_id() const {
  return killer_account_id_;
}
inline void CMsgTournamentItemEvent::set_killer_account_id(::google::protobuf::uint32 value) {
  set_has_killer_account_id();
  killer_account_id_ = value;
}

// optional fixed32 victim_account_id = 2;
inline bool CMsgTournamentItemEvent::has_victim_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgTournamentItemEvent::set_has_victim_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgTournamentItemEvent::clear_has_victim_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgTournamentItemEvent::clear_victim_account_id() {
  victim_account_id_ = 0u;
  clear_has_victim_account_id();
}
inline ::google::protobuf::uint32 CMsgTournamentItemEvent::victim_account_id() const {
  return victim_account_id_;
}
inline void CMsgTournamentItemEvent::set_victim_account_id(::google::protobuf::uint32 value) {
  set_has_victim_account_id();
  victim_account_id_ = value;
}

// optional .DOTA_TournamentEvents event_type = 3 [default = TE_FIRST_BLOOD];
inline bool CMsgTournamentItemEvent::has_event_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgTournamentItemEvent::set_has_event_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgTournamentItemEvent::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgTournamentItemEvent::clear_event_type() {
  event_type_ = 0;
  clear_has_event_type();
}
inline DOTA_TournamentEvents CMsgTournamentItemEvent::event_type() const {
  return static_cast< DOTA_TournamentEvents >(event_type_);
}
inline void CMsgTournamentItemEvent::set_event_type(DOTA_TournamentEvents value) {
  GOOGLE_DCHECK(DOTA_TournamentEvents_IsValid(value));
  set_has_event_type();
  event_type_ = value;
}

// optional int32 tv_delay = 4;
inline bool CMsgTournamentItemEvent::has_tv_delay() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgTournamentItemEvent::set_has_tv_delay() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgTournamentItemEvent::clear_has_tv_delay() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgTournamentItemEvent::clear_tv_delay() {
  tv_delay_ = 0;
  clear_has_tv_delay();
}
inline ::google::protobuf::int32 CMsgTournamentItemEvent::tv_delay() const {
  return tv_delay_;
}
inline void CMsgTournamentItemEvent::set_tv_delay(::google::protobuf::int32 value) {
  set_has_tv_delay();
  tv_delay_ = value;
}

// optional int32 dota_time = 5;
inline bool CMsgTournamentItemEvent::has_dota_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgTournamentItemEvent::set_has_dota_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgTournamentItemEvent::clear_has_dota_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgTournamentItemEvent::clear_dota_time() {
  dota_time_ = 0;
  clear_has_dota_time();
}
inline ::google::protobuf::int32 CMsgTournamentItemEvent::dota_time() const {
  return dota_time_;
}
inline void CMsgTournamentItemEvent::set_dota_time(::google::protobuf::int32 value) {
  set_has_dota_time();
  dota_time_ = value;
}

// optional float replay_time = 6;
inline bool CMsgTournamentItemEvent::has_replay_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgTournamentItemEvent::set_has_replay_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgTournamentItemEvent::clear_has_replay_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgTournamentItemEvent::clear_replay_time() {
  replay_time_ = 0;
  clear_has_replay_time();
}
inline float CMsgTournamentItemEvent::replay_time() const {
  return replay_time_;
}
inline void CMsgTournamentItemEvent::set_replay_time(float value) {
  set_has_replay_time();
  replay_time_ = value;
}

// optional string loot_list = 7;
inline bool CMsgTournamentItemEvent::has_loot_list() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgTournamentItemEvent::set_has_loot_list() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgTournamentItemEvent::clear_has_loot_list() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgTournamentItemEvent::clear_loot_list() {
  if (loot_list_ != &::google::protobuf::internal::kEmptyString) {
    loot_list_->clear();
  }
  clear_has_loot_list();
}
inline const ::std::string& CMsgTournamentItemEvent::loot_list() const {
  return *loot_list_;
}
inline void CMsgTournamentItemEvent::set_loot_list(const ::std::string& value) {
  set_has_loot_list();
  if (loot_list_ == &::google::protobuf::internal::kEmptyString) {
    loot_list_ = new ::std::string;
  }
  loot_list_->assign(value);
}
inline void CMsgTournamentItemEvent::set_loot_list(const char* value) {
  set_has_loot_list();
  if (loot_list_ == &::google::protobuf::internal::kEmptyString) {
    loot_list_ = new ::std::string;
  }
  loot_list_->assign(value);
}
inline void CMsgTournamentItemEvent::set_loot_list(const char* value, size_t size) {
  set_has_loot_list();
  if (loot_list_ == &::google::protobuf::internal::kEmptyString) {
    loot_list_ = new ::std::string;
  }
  loot_list_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgTournamentItemEvent::mutable_loot_list() {
  set_has_loot_list();
  if (loot_list_ == &::google::protobuf::internal::kEmptyString) {
    loot_list_ = new ::std::string;
  }
  return loot_list_;
}
inline ::std::string* CMsgTournamentItemEvent::release_loot_list() {
  clear_has_loot_list();
  if (loot_list_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = loot_list_;
    loot_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 event_team = 8;
inline bool CMsgTournamentItemEvent::has_event_team() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgTournamentItemEvent::set_has_event_team() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgTournamentItemEvent::clear_has_event_team() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgTournamentItemEvent::clear_event_team() {
  event_team_ = 0u;
  clear_has_event_team();
}
inline ::google::protobuf::uint32 CMsgTournamentItemEvent::event_team() const {
  return event_team_;
}
inline void CMsgTournamentItemEvent::set_event_team(::google::protobuf::uint32 value) {
  set_has_event_team();
  event_team_ = value;
}

// optional uint32 multi_kill_count = 9;
inline bool CMsgTournamentItemEvent::has_multi_kill_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgTournamentItemEvent::set_has_multi_kill_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgTournamentItemEvent::clear_has_multi_kill_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgTournamentItemEvent::clear_multi_kill_count() {
  multi_kill_count_ = 0u;
  clear_has_multi_kill_count();
}
inline ::google::protobuf::uint32 CMsgTournamentItemEvent::multi_kill_count() const {
  return multi_kill_count_;
}
inline void CMsgTournamentItemEvent::set_multi_kill_count(::google::protobuf::uint32 value) {
  set_has_multi_kill_count();
  multi_kill_count_ = value;
}

// optional uint32 winner_score = 10;
inline bool CMsgTournamentItemEvent::has_winner_score() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgTournamentItemEvent::set_has_winner_score() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgTournamentItemEvent::clear_has_winner_score() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgTournamentItemEvent::clear_winner_score() {
  winner_score_ = 0u;
  clear_has_winner_score();
}
inline ::google::protobuf::uint32 CMsgTournamentItemEvent::winner_score() const {
  return winner_score_;
}
inline void CMsgTournamentItemEvent::set_winner_score(::google::protobuf::uint32 value) {
  set_has_winner_score();
  winner_score_ = value;
}

// optional uint32 loser_score = 11;
inline bool CMsgTournamentItemEvent::has_loser_score() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgTournamentItemEvent::set_has_loser_score() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgTournamentItemEvent::clear_has_loser_score() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgTournamentItemEvent::clear_loser_score() {
  loser_score_ = 0u;
  clear_has_loser_score();
}
inline ::google::protobuf::uint32 CMsgTournamentItemEvent::loser_score() const {
  return loser_score_;
}
inline void CMsgTournamentItemEvent::set_loser_score(::google::protobuf::uint32 value) {
  set_has_loser_score();
  loser_score_ = value;
}

// -------------------------------------------------------------------

// CMsgTournamentItemEventResponse

// optional .DOTA_TournamentEvents event_type = 1 [default = TE_FIRST_BLOOD];
inline bool CMsgTournamentItemEventResponse::has_event_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgTournamentItemEventResponse::set_has_event_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgTournamentItemEventResponse::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgTournamentItemEventResponse::clear_event_type() {
  event_type_ = 0;
  clear_has_event_type();
}
inline DOTA_TournamentEvents CMsgTournamentItemEventResponse::event_type() const {
  return static_cast< DOTA_TournamentEvents >(event_type_);
}
inline void CMsgTournamentItemEventResponse::set_event_type(DOTA_TournamentEvents value) {
  GOOGLE_DCHECK(DOTA_TournamentEvents_IsValid(value));
  set_has_event_type();
  event_type_ = value;
}

// optional string winner_name = 2;
inline bool CMsgTournamentItemEventResponse::has_winner_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgTournamentItemEventResponse::set_has_winner_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgTournamentItemEventResponse::clear_has_winner_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgTournamentItemEventResponse::clear_winner_name() {
  if (winner_name_ != &::google::protobuf::internal::kEmptyString) {
    winner_name_->clear();
  }
  clear_has_winner_name();
}
inline const ::std::string& CMsgTournamentItemEventResponse::winner_name() const {
  return *winner_name_;
}
inline void CMsgTournamentItemEventResponse::set_winner_name(const ::std::string& value) {
  set_has_winner_name();
  if (winner_name_ == &::google::protobuf::internal::kEmptyString) {
    winner_name_ = new ::std::string;
  }
  winner_name_->assign(value);
}
inline void CMsgTournamentItemEventResponse::set_winner_name(const char* value) {
  set_has_winner_name();
  if (winner_name_ == &::google::protobuf::internal::kEmptyString) {
    winner_name_ = new ::std::string;
  }
  winner_name_->assign(value);
}
inline void CMsgTournamentItemEventResponse::set_winner_name(const char* value, size_t size) {
  set_has_winner_name();
  if (winner_name_ == &::google::protobuf::internal::kEmptyString) {
    winner_name_ = new ::std::string;
  }
  winner_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgTournamentItemEventResponse::mutable_winner_name() {
  set_has_winner_name();
  if (winner_name_ == &::google::protobuf::internal::kEmptyString) {
    winner_name_ = new ::std::string;
  }
  return winner_name_;
}
inline ::std::string* CMsgTournamentItemEventResponse::release_winner_name() {
  clear_has_winner_name();
  if (winner_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = winner_name_;
    winner_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool tv_delayed = 3;
inline bool CMsgTournamentItemEventResponse::has_tv_delayed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgTournamentItemEventResponse::set_has_tv_delayed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgTournamentItemEventResponse::clear_has_tv_delayed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgTournamentItemEventResponse::clear_tv_delayed() {
  tv_delayed_ = false;
  clear_has_tv_delayed();
}
inline bool CMsgTournamentItemEventResponse::tv_delayed() const {
  return tv_delayed_;
}
inline void CMsgTournamentItemEventResponse::set_tv_delayed(bool value) {
  set_has_tv_delayed();
  tv_delayed_ = value;
}

// optional bool inhall = 4;
inline bool CMsgTournamentItemEventResponse::has_inhall() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgTournamentItemEventResponse::set_has_inhall() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgTournamentItemEventResponse::clear_has_inhall() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgTournamentItemEventResponse::clear_inhall() {
  inhall_ = false;
  clear_has_inhall();
}
inline bool CMsgTournamentItemEventResponse::inhall() const {
  return inhall_;
}
inline void CMsgTournamentItemEventResponse::set_inhall(bool value) {
  set_has_inhall();
  inhall_ = value;
}

// optional uint32 itemdef = 5;
inline bool CMsgTournamentItemEventResponse::has_itemdef() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgTournamentItemEventResponse::set_has_itemdef() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgTournamentItemEventResponse::clear_has_itemdef() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgTournamentItemEventResponse::clear_itemdef() {
  itemdef_ = 0u;
  clear_has_itemdef();
}
inline ::google::protobuf::uint32 CMsgTournamentItemEventResponse::itemdef() const {
  return itemdef_;
}
inline void CMsgTournamentItemEventResponse::set_itemdef(::google::protobuf::uint32 value) {
  set_has_itemdef();
  itemdef_ = value;
}

// -------------------------------------------------------------------

// CMsgTeamFanfare

// optional uint32 match_id = 1;
inline bool CMsgTeamFanfare::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgTeamFanfare::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgTeamFanfare::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgTeamFanfare::clear_match_id() {
  match_id_ = 0u;
  clear_has_match_id();
}
inline ::google::protobuf::uint32 CMsgTeamFanfare::match_id() const {
  return match_id_;
}
inline void CMsgTeamFanfare::set_match_id(::google::protobuf::uint32 value) {
  set_has_match_id();
  match_id_ = value;
}

// -------------------------------------------------------------------

// CMsgResponseTeamFanfare

// optional uint32 fanfare_goodguys = 1;
inline bool CMsgResponseTeamFanfare::has_fanfare_goodguys() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgResponseTeamFanfare::set_has_fanfare_goodguys() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgResponseTeamFanfare::clear_has_fanfare_goodguys() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgResponseTeamFanfare::clear_fanfare_goodguys() {
  fanfare_goodguys_ = 0u;
  clear_has_fanfare_goodguys();
}
inline ::google::protobuf::uint32 CMsgResponseTeamFanfare::fanfare_goodguys() const {
  return fanfare_goodguys_;
}
inline void CMsgResponseTeamFanfare::set_fanfare_goodguys(::google::protobuf::uint32 value) {
  set_has_fanfare_goodguys();
  fanfare_goodguys_ = value;
}

// optional uint32 fanfare_badguys = 2;
inline bool CMsgResponseTeamFanfare::has_fanfare_badguys() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgResponseTeamFanfare::set_has_fanfare_badguys() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgResponseTeamFanfare::clear_has_fanfare_badguys() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgResponseTeamFanfare::clear_fanfare_badguys() {
  fanfare_badguys_ = 0u;
  clear_has_fanfare_badguys();
}
inline ::google::protobuf::uint32 CMsgResponseTeamFanfare::fanfare_badguys() const {
  return fanfare_badguys_;
}
inline void CMsgResponseTeamFanfare::set_fanfare_badguys(::google::protobuf::uint32 value) {
  set_has_fanfare_badguys();
  fanfare_badguys_ = value;
}

// -------------------------------------------------------------------

// CMsgGameServerUploadSaveGame

// optional uint32 game_time = 1;
inline bool CMsgGameServerUploadSaveGame::has_game_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGameServerUploadSaveGame::set_has_game_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGameServerUploadSaveGame::clear_has_game_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGameServerUploadSaveGame::clear_game_time() {
  game_time_ = 0u;
  clear_has_game_time();
}
inline ::google::protobuf::uint32 CMsgGameServerUploadSaveGame::game_time() const {
  return game_time_;
}
inline void CMsgGameServerUploadSaveGame::set_game_time(::google::protobuf::uint32 value) {
  set_has_game_time();
  game_time_ = value;
}

// optional bytes save_game_data = 2;
inline bool CMsgGameServerUploadSaveGame::has_save_game_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGameServerUploadSaveGame::set_has_save_game_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGameServerUploadSaveGame::clear_has_save_game_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGameServerUploadSaveGame::clear_save_game_data() {
  if (save_game_data_ != &::google::protobuf::internal::kEmptyString) {
    save_game_data_->clear();
  }
  clear_has_save_game_data();
}
inline const ::std::string& CMsgGameServerUploadSaveGame::save_game_data() const {
  return *save_game_data_;
}
inline void CMsgGameServerUploadSaveGame::set_save_game_data(const ::std::string& value) {
  set_has_save_game_data();
  if (save_game_data_ == &::google::protobuf::internal::kEmptyString) {
    save_game_data_ = new ::std::string;
  }
  save_game_data_->assign(value);
}
inline void CMsgGameServerUploadSaveGame::set_save_game_data(const char* value) {
  set_has_save_game_data();
  if (save_game_data_ == &::google::protobuf::internal::kEmptyString) {
    save_game_data_ = new ::std::string;
  }
  save_game_data_->assign(value);
}
inline void CMsgGameServerUploadSaveGame::set_save_game_data(const void* value, size_t size) {
  set_has_save_game_data();
  if (save_game_data_ == &::google::protobuf::internal::kEmptyString) {
    save_game_data_ = new ::std::string;
  }
  save_game_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgGameServerUploadSaveGame::mutable_save_game_data() {
  set_has_save_game_data();
  if (save_game_data_ == &::google::protobuf::internal::kEmptyString) {
    save_game_data_ = new ::std::string;
  }
  return save_game_data_;
}
inline ::std::string* CMsgGameServerUploadSaveGame::release_save_game_data() {
  clear_has_save_game_data();
  if (save_game_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = save_game_data_;
    save_game_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint64 lobby_id = 3;
inline bool CMsgGameServerUploadSaveGame::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGameServerUploadSaveGame::set_has_lobby_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGameServerUploadSaveGame::clear_has_lobby_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGameServerUploadSaveGame::clear_lobby_id() {
  lobby_id_ = GOOGLE_ULONGLONG(0);
  clear_has_lobby_id();
}
inline ::google::protobuf::uint64 CMsgGameServerUploadSaveGame::lobby_id() const {
  return lobby_id_;
}
inline void CMsgGameServerUploadSaveGame::set_lobby_id(::google::protobuf::uint64 value) {
  set_has_lobby_id();
  lobby_id_ = value;
}

// repeated uint64 player_steam_ids = 4;
inline int CMsgGameServerUploadSaveGame::player_steam_ids_size() const {
  return player_steam_ids_.size();
}
inline void CMsgGameServerUploadSaveGame::clear_player_steam_ids() {
  player_steam_ids_.Clear();
}
inline ::google::protobuf::uint64 CMsgGameServerUploadSaveGame::player_steam_ids(int index) const {
  return player_steam_ids_.Get(index);
}
inline void CMsgGameServerUploadSaveGame::set_player_steam_ids(int index, ::google::protobuf::uint64 value) {
  player_steam_ids_.Set(index, value);
}
inline void CMsgGameServerUploadSaveGame::add_player_steam_ids(::google::protobuf::uint64 value) {
  player_steam_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgGameServerUploadSaveGame::player_steam_ids() const {
  return player_steam_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgGameServerUploadSaveGame::mutable_player_steam_ids() {
  return &player_steam_ids_;
}

// -------------------------------------------------------------------

// CMsgGameServerSaveGameResult

// optional .CMsgGameServerSaveGameResult.Result result = 1 [default = SaveSuccessful];
inline bool CMsgGameServerSaveGameResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGameServerSaveGameResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGameServerSaveGameResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGameServerSaveGameResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::CMsgGameServerSaveGameResult_Result CMsgGameServerSaveGameResult::result() const {
  return static_cast< ::CMsgGameServerSaveGameResult_Result >(result_);
}
inline void CMsgGameServerSaveGameResult::set_result(::CMsgGameServerSaveGameResult_Result value) {
  GOOGLE_DCHECK(::CMsgGameServerSaveGameResult_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// CMsgGameServerGetLoadGame

// optional uint32 save_id = 1;
inline bool CMsgGameServerGetLoadGame::has_save_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGameServerGetLoadGame::set_has_save_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGameServerGetLoadGame::clear_has_save_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGameServerGetLoadGame::clear_save_id() {
  save_id_ = 0u;
  clear_has_save_id();
}
inline ::google::protobuf::uint32 CMsgGameServerGetLoadGame::save_id() const {
  return save_id_;
}
inline void CMsgGameServerGetLoadGame::set_save_id(::google::protobuf::uint32 value) {
  set_has_save_id();
  save_id_ = value;
}

// -------------------------------------------------------------------

// CMsgGameServerGetLoadGameResult

// optional bytes save_game_data = 1;
inline bool CMsgGameServerGetLoadGameResult::has_save_game_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGameServerGetLoadGameResult::set_has_save_game_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGameServerGetLoadGameResult::clear_has_save_game_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGameServerGetLoadGameResult::clear_save_game_data() {
  if (save_game_data_ != &::google::protobuf::internal::kEmptyString) {
    save_game_data_->clear();
  }
  clear_has_save_game_data();
}
inline const ::std::string& CMsgGameServerGetLoadGameResult::save_game_data() const {
  return *save_game_data_;
}
inline void CMsgGameServerGetLoadGameResult::set_save_game_data(const ::std::string& value) {
  set_has_save_game_data();
  if (save_game_data_ == &::google::protobuf::internal::kEmptyString) {
    save_game_data_ = new ::std::string;
  }
  save_game_data_->assign(value);
}
inline void CMsgGameServerGetLoadGameResult::set_save_game_data(const char* value) {
  set_has_save_game_data();
  if (save_game_data_ == &::google::protobuf::internal::kEmptyString) {
    save_game_data_ = new ::std::string;
  }
  save_game_data_->assign(value);
}
inline void CMsgGameServerGetLoadGameResult::set_save_game_data(const void* value, size_t size) {
  set_has_save_game_data();
  if (save_game_data_ == &::google::protobuf::internal::kEmptyString) {
    save_game_data_ = new ::std::string;
  }
  save_game_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgGameServerGetLoadGameResult::mutable_save_game_data() {
  set_has_save_game_data();
  if (save_game_data_ == &::google::protobuf::internal::kEmptyString) {
    save_game_data_ = new ::std::string;
  }
  return save_game_data_;
}
inline ::std::string* CMsgGameServerGetLoadGameResult::release_save_game_data() {
  clear_has_save_game_data();
  if (save_game_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = save_game_data_;
    save_game_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CMsgDOTAGenerateDiretidePrizeList

// optional uint32 prize_list = 1;
inline bool CMsgDOTAGenerateDiretidePrizeList::has_prize_list() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAGenerateDiretidePrizeList::set_has_prize_list() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAGenerateDiretidePrizeList::clear_has_prize_list() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAGenerateDiretidePrizeList::clear_prize_list() {
  prize_list_ = 0u;
  clear_has_prize_list();
}
inline ::google::protobuf::uint32 CMsgDOTAGenerateDiretidePrizeList::prize_list() const {
  return prize_list_;
}
inline void CMsgDOTAGenerateDiretidePrizeList::set_prize_list(::google::protobuf::uint32 value) {
  set_has_prize_list();
  prize_list_ = value;
}

// optional uint32 highest_roshan_level = 2;
inline bool CMsgDOTAGenerateDiretidePrizeList::has_highest_roshan_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAGenerateDiretidePrizeList::set_has_highest_roshan_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAGenerateDiretidePrizeList::clear_has_highest_roshan_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAGenerateDiretidePrizeList::clear_highest_roshan_level() {
  highest_roshan_level_ = 0u;
  clear_has_highest_roshan_level();
}
inline ::google::protobuf::uint32 CMsgDOTAGenerateDiretidePrizeList::highest_roshan_level() const {
  return highest_roshan_level_;
}
inline void CMsgDOTAGenerateDiretidePrizeList::set_highest_roshan_level(::google::protobuf::uint32 value) {
  set_has_highest_roshan_level();
  highest_roshan_level_ = value;
}

// -------------------------------------------------------------------

// CMsgDOTAGenerateDiretidePrizeListResponse

// repeated uint32 item_defs = 1;
inline int CMsgDOTAGenerateDiretidePrizeListResponse::item_defs_size() const {
  return item_defs_.size();
}
inline void CMsgDOTAGenerateDiretidePrizeListResponse::clear_item_defs() {
  item_defs_.Clear();
}
inline ::google::protobuf::uint32 CMsgDOTAGenerateDiretidePrizeListResponse::item_defs(int index) const {
  return item_defs_.Get(index);
}
inline void CMsgDOTAGenerateDiretidePrizeListResponse::set_item_defs(int index, ::google::protobuf::uint32 value) {
  item_defs_.Set(index, value);
}
inline void CMsgDOTAGenerateDiretidePrizeListResponse::add_item_defs(::google::protobuf::uint32 value) {
  item_defs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAGenerateDiretidePrizeListResponse::item_defs() const {
  return item_defs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAGenerateDiretidePrizeListResponse::mutable_item_defs() {
  return &item_defs_;
}

// repeated fixed64 steam_ids = 2;
inline int CMsgDOTAGenerateDiretidePrizeListResponse::steam_ids_size() const {
  return steam_ids_.size();
}
inline void CMsgDOTAGenerateDiretidePrizeListResponse::clear_steam_ids() {
  steam_ids_.Clear();
}
inline ::google::protobuf::uint64 CMsgDOTAGenerateDiretidePrizeListResponse::steam_ids(int index) const {
  return steam_ids_.Get(index);
}
inline void CMsgDOTAGenerateDiretidePrizeListResponse::set_steam_ids(int index, ::google::protobuf::uint64 value) {
  steam_ids_.Set(index, value);
}
inline void CMsgDOTAGenerateDiretidePrizeListResponse::add_steam_ids(::google::protobuf::uint64 value) {
  steam_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgDOTAGenerateDiretidePrizeListResponse::steam_ids() const {
  return steam_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgDOTAGenerateDiretidePrizeListResponse::mutable_steam_ids() {
  return &steam_ids_;
}

// optional uint32 prize_list = 3;
inline bool CMsgDOTAGenerateDiretidePrizeListResponse::has_prize_list() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAGenerateDiretidePrizeListResponse::set_has_prize_list() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAGenerateDiretidePrizeListResponse::clear_has_prize_list() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAGenerateDiretidePrizeListResponse::clear_prize_list() {
  prize_list_ = 0u;
  clear_has_prize_list();
}
inline ::google::protobuf::uint32 CMsgDOTAGenerateDiretidePrizeListResponse::prize_list() const {
  return prize_list_;
}
inline void CMsgDOTAGenerateDiretidePrizeListResponse::set_prize_list(::google::protobuf::uint32 value) {
  set_has_prize_list();
  prize_list_ = value;
}

// -------------------------------------------------------------------

// CMsgDOTARewardDiretidePrizes

// optional uint32 team = 1;
inline bool CMsgDOTARewardDiretidePrizes::has_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARewardDiretidePrizes::set_has_team() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARewardDiretidePrizes::clear_has_team() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARewardDiretidePrizes::clear_team() {
  team_ = 0u;
  clear_has_team();
}
inline ::google::protobuf::uint32 CMsgDOTARewardDiretidePrizes::team() const {
  return team_;
}
inline void CMsgDOTARewardDiretidePrizes::set_team(::google::protobuf::uint32 value) {
  set_has_team();
  team_ = value;
}

// optional uint32 prize_list = 2;
inline bool CMsgDOTARewardDiretidePrizes::has_prize_list() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARewardDiretidePrizes::set_has_prize_list() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTARewardDiretidePrizes::clear_has_prize_list() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTARewardDiretidePrizes::clear_prize_list() {
  prize_list_ = 0u;
  clear_has_prize_list();
}
inline ::google::protobuf::uint32 CMsgDOTARewardDiretidePrizes::prize_list() const {
  return prize_list_;
}
inline void CMsgDOTARewardDiretidePrizes::set_prize_list(::google::protobuf::uint32 value) {
  set_has_prize_list();
  prize_list_ = value;
}

// -------------------------------------------------------------------

// CMsgDOTADiretidePrizesRewardedResponse

// optional uint32 prize_list = 1;
inline bool CMsgDOTADiretidePrizesRewardedResponse::has_prize_list() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTADiretidePrizesRewardedResponse::set_has_prize_list() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTADiretidePrizesRewardedResponse::clear_has_prize_list() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTADiretidePrizesRewardedResponse::clear_prize_list() {
  prize_list_ = 0u;
  clear_has_prize_list();
}
inline ::google::protobuf::uint32 CMsgDOTADiretidePrizesRewardedResponse::prize_list() const {
  return prize_list_;
}
inline void CMsgDOTADiretidePrizesRewardedResponse::set_prize_list(::google::protobuf::uint32 value) {
  set_has_prize_list();
  prize_list_ = value;
}

// -------------------------------------------------------------------

// CMsgDOTAAwardEventPoints_AwardPoints

// optional uint32 account_id = 1;
inline bool CMsgDOTAAwardEventPoints_AwardPoints::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAAwardEventPoints_AwardPoints::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAAwardEventPoints_AwardPoints::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAAwardEventPoints_AwardPoints::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAAwardEventPoints_AwardPoints::account_id() const {
  return account_id_;
}
inline void CMsgDOTAAwardEventPoints_AwardPoints::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
}

// optional int32 points = 2;
inline bool CMsgDOTAAwardEventPoints_AwardPoints::has_points() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAAwardEventPoints_AwardPoints::set_has_points() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAAwardEventPoints_AwardPoints::clear_has_points() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAAwardEventPoints_AwardPoints::clear_points() {
  points_ = 0;
  clear_has_points();
}
inline ::google::protobuf::int32 CMsgDOTAAwardEventPoints_AwardPoints::points() const {
  return points_;
}
inline void CMsgDOTAAwardEventPoints_AwardPoints::set_points(::google::protobuf::int32 value) {
  set_has_points();
  points_ = value;
}

// optional int32 premium_points = 3;
inline bool CMsgDOTAAwardEventPoints_AwardPoints::has_premium_points() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAAwardEventPoints_AwardPoints::set_has_premium_points() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAAwardEventPoints_AwardPoints::clear_has_premium_points() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAAwardEventPoints_AwardPoints::clear_premium_points() {
  premium_points_ = 0;
  clear_has_premium_points();
}
inline ::google::protobuf::int32 CMsgDOTAAwardEventPoints_AwardPoints::premium_points() const {
  return premium_points_;
}
inline void CMsgDOTAAwardEventPoints_AwardPoints::set_premium_points(::google::protobuf::int32 value) {
  set_has_premium_points();
  premium_points_ = value;
}

// optional int32 rank = 4;
inline bool CMsgDOTAAwardEventPoints_AwardPoints::has_rank() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAAwardEventPoints_AwardPoints::set_has_rank() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAAwardEventPoints_AwardPoints::clear_has_rank() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAAwardEventPoints_AwardPoints::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 CMsgDOTAAwardEventPoints_AwardPoints::rank() const {
  return rank_;
}
inline void CMsgDOTAAwardEventPoints_AwardPoints::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// -------------------------------------------------------------------

// CMsgDOTAAwardEventPoints

// repeated .CMsgDOTAAwardEventPoints.AwardPoints award_points = 1;
inline int CMsgDOTAAwardEventPoints::award_points_size() const {
  return award_points_.size();
}
inline void CMsgDOTAAwardEventPoints::clear_award_points() {
  award_points_.Clear();
}
inline const ::CMsgDOTAAwardEventPoints_AwardPoints& CMsgDOTAAwardEventPoints::award_points(int index) const {
  return award_points_.Get(index);
}
inline ::CMsgDOTAAwardEventPoints_AwardPoints* CMsgDOTAAwardEventPoints::mutable_award_points(int index) {
  return award_points_.Mutable(index);
}
inline ::CMsgDOTAAwardEventPoints_AwardPoints* CMsgDOTAAwardEventPoints::add_award_points() {
  return award_points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAAwardEventPoints_AwardPoints >&
CMsgDOTAAwardEventPoints::award_points() const {
  return award_points_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAAwardEventPoints_AwardPoints >*
CMsgDOTAAwardEventPoints::mutable_award_points() {
  return &award_points_;
}

// optional uint64 match_id = 2;
inline bool CMsgDOTAAwardEventPoints::has_match_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAAwardEventPoints::set_has_match_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAAwardEventPoints::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAAwardEventPoints::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
inline ::google::protobuf::uint64 CMsgDOTAAwardEventPoints::match_id() const {
  return match_id_;
}
inline void CMsgDOTAAwardEventPoints::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
}

// optional uint32 event_id = 4;
inline bool CMsgDOTAAwardEventPoints::has_event_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAAwardEventPoints::set_has_event_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAAwardEventPoints::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAAwardEventPoints::clear_event_id() {
  event_id_ = 0u;
  clear_has_event_id();
}
inline ::google::protobuf::uint32 CMsgDOTAAwardEventPoints::event_id() const {
  return event_id_;
}
inline void CMsgDOTAAwardEventPoints::set_event_id(::google::protobuf::uint32 value) {
  set_has_event_id();
  event_id_ = value;
}

// -------------------------------------------------------------------

// CMsgDOTAFrostivusTimeElapsed_User

// optional uint32 account_id = 1;
inline bool CMsgDOTAFrostivusTimeElapsed_User::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAFrostivusTimeElapsed_User::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAFrostivusTimeElapsed_User::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAFrostivusTimeElapsed_User::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAFrostivusTimeElapsed_User::account_id() const {
  return account_id_;
}
inline void CMsgDOTAFrostivusTimeElapsed_User::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
}

// optional uint32 time_elapsed_s = 2;
inline bool CMsgDOTAFrostivusTimeElapsed_User::has_time_elapsed_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAFrostivusTimeElapsed_User::set_has_time_elapsed_s() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAFrostivusTimeElapsed_User::clear_has_time_elapsed_s() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAFrostivusTimeElapsed_User::clear_time_elapsed_s() {
  time_elapsed_s_ = 0u;
  clear_has_time_elapsed_s();
}
inline ::google::protobuf::uint32 CMsgDOTAFrostivusTimeElapsed_User::time_elapsed_s() const {
  return time_elapsed_s_;
}
inline void CMsgDOTAFrostivusTimeElapsed_User::set_time_elapsed_s(::google::protobuf::uint32 value) {
  set_has_time_elapsed_s();
  time_elapsed_s_ = value;
}

// -------------------------------------------------------------------

// CMsgDOTAFrostivusTimeElapsed

// optional uint32 seconds = 1;
inline bool CMsgDOTAFrostivusTimeElapsed::has_seconds() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAFrostivusTimeElapsed::set_has_seconds() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAFrostivusTimeElapsed::clear_has_seconds() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAFrostivusTimeElapsed::clear_seconds() {
  seconds_ = 0u;
  clear_has_seconds();
}
inline ::google::protobuf::uint32 CMsgDOTAFrostivusTimeElapsed::seconds() const {
  return seconds_;
}
inline void CMsgDOTAFrostivusTimeElapsed::set_seconds(::google::protobuf::uint32 value) {
  set_has_seconds();
  seconds_ = value;
}

// repeated .CMsgDOTAFrostivusTimeElapsed.User users = 2;
inline int CMsgDOTAFrostivusTimeElapsed::users_size() const {
  return users_.size();
}
inline void CMsgDOTAFrostivusTimeElapsed::clear_users() {
  users_.Clear();
}
inline const ::CMsgDOTAFrostivusTimeElapsed_User& CMsgDOTAFrostivusTimeElapsed::users(int index) const {
  return users_.Get(index);
}
inline ::CMsgDOTAFrostivusTimeElapsed_User* CMsgDOTAFrostivusTimeElapsed::mutable_users(int index) {
  return users_.Mutable(index);
}
inline ::CMsgDOTAFrostivusTimeElapsed_User* CMsgDOTAFrostivusTimeElapsed::add_users() {
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAFrostivusTimeElapsed_User >&
CMsgDOTAFrostivusTimeElapsed::users() const {
  return users_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAFrostivusTimeElapsed_User >*
CMsgDOTAFrostivusTimeElapsed::mutable_users() {
  return &users_;
}

// optional uint64 match_id = 3;
inline bool CMsgDOTAFrostivusTimeElapsed::has_match_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAFrostivusTimeElapsed::set_has_match_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAFrostivusTimeElapsed::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAFrostivusTimeElapsed::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
inline ::google::protobuf::uint64 CMsgDOTAFrostivusTimeElapsed::match_id() const {
  return match_id_;
}
inline void CMsgDOTAFrostivusTimeElapsed::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
}

// -------------------------------------------------------------------

// CMsgGCToServerPingRequest

// optional fixed64 request_id = 1;
inline bool CMsgGCToServerPingRequest::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCToServerPingRequest::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCToServerPingRequest::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCToServerPingRequest::clear_request_id() {
  request_id_ = GOOGLE_ULONGLONG(0);
  clear_has_request_id();
}
inline ::google::protobuf::uint64 CMsgGCToServerPingRequest::request_id() const {
  return request_id_;
}
inline void CMsgGCToServerPingRequest::set_request_id(::google::protobuf::uint64 value) {
  set_has_request_id();
  request_id_ = value;
}

// optional uint64 request_time = 2;
inline bool CMsgGCToServerPingRequest::has_request_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCToServerPingRequest::set_has_request_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCToServerPingRequest::clear_has_request_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCToServerPingRequest::clear_request_time() {
  request_time_ = GOOGLE_ULONGLONG(0);
  clear_has_request_time();
}
inline ::google::protobuf::uint64 CMsgGCToServerPingRequest::request_time() const {
  return request_time_;
}
inline void CMsgGCToServerPingRequest::set_request_time(::google::protobuf::uint64 value) {
  set_has_request_time();
  request_time_ = value;
}

// -------------------------------------------------------------------

// CMsgGCToServerPingResponse

// optional fixed64 request_id = 1;
inline bool CMsgGCToServerPingResponse::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCToServerPingResponse::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCToServerPingResponse::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCToServerPingResponse::clear_request_id() {
  request_id_ = GOOGLE_ULONGLONG(0);
  clear_has_request_id();
}
inline ::google::protobuf::uint64 CMsgGCToServerPingResponse::request_id() const {
  return request_id_;
}
inline void CMsgGCToServerPingResponse::set_request_id(::google::protobuf::uint64 value) {
  set_has_request_id();
  request_id_ = value;
}

// optional uint64 request_time = 2;
inline bool CMsgGCToServerPingResponse::has_request_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCToServerPingResponse::set_has_request_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCToServerPingResponse::clear_has_request_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCToServerPingResponse::clear_request_time() {
  request_time_ = GOOGLE_ULONGLONG(0);
  clear_has_request_time();
}
inline ::google::protobuf::uint64 CMsgGCToServerPingResponse::request_time() const {
  return request_time_;
}
inline void CMsgGCToServerPingResponse::set_request_time(::google::protobuf::uint64 value) {
  set_has_request_time();
  request_time_ = value;
}

// optional uint32 cluster = 3;
inline bool CMsgGCToServerPingResponse::has_cluster() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCToServerPingResponse::set_has_cluster() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCToServerPingResponse::clear_has_cluster() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCToServerPingResponse::clear_cluster() {
  cluster_ = 0u;
  clear_has_cluster();
}
inline ::google::protobuf::uint32 CMsgGCToServerPingResponse::cluster() const {
  return cluster_;
}
inline void CMsgGCToServerPingResponse::set_cluster(::google::protobuf::uint32 value) {
  set_has_cluster();
  cluster_ = value;
}

// -------------------------------------------------------------------

// CMsgGCToServerConsoleCommand

// optional string console_command = 1;
inline bool CMsgGCToServerConsoleCommand::has_console_command() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCToServerConsoleCommand::set_has_console_command() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCToServerConsoleCommand::clear_has_console_command() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCToServerConsoleCommand::clear_console_command() {
  if (console_command_ != &::google::protobuf::internal::kEmptyString) {
    console_command_->clear();
  }
  clear_has_console_command();
}
inline const ::std::string& CMsgGCToServerConsoleCommand::console_command() const {
  return *console_command_;
}
inline void CMsgGCToServerConsoleCommand::set_console_command(const ::std::string& value) {
  set_has_console_command();
  if (console_command_ == &::google::protobuf::internal::kEmptyString) {
    console_command_ = new ::std::string;
  }
  console_command_->assign(value);
}
inline void CMsgGCToServerConsoleCommand::set_console_command(const char* value) {
  set_has_console_command();
  if (console_command_ == &::google::protobuf::internal::kEmptyString) {
    console_command_ = new ::std::string;
  }
  console_command_->assign(value);
}
inline void CMsgGCToServerConsoleCommand::set_console_command(const char* value, size_t size) {
  set_has_console_command();
  if (console_command_ == &::google::protobuf::internal::kEmptyString) {
    console_command_ = new ::std::string;
  }
  console_command_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgGCToServerConsoleCommand::mutable_console_command() {
  set_has_console_command();
  if (console_command_ == &::google::protobuf::internal::kEmptyString) {
    console_command_ = new ::std::string;
  }
  return console_command_;
}
inline ::std::string* CMsgGCToServerConsoleCommand::release_console_command() {
  clear_has_console_command();
  if (console_command_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = console_command_;
    console_command_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgConnectedPlayers_SendReason>() {
  return ::CMsgConnectedPlayers_SendReason_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgGameServerInfo_ServerType>() {
  return ::CMsgGameServerInfo_ServerType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState>() {
  return ::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgGameServerSaveGameResult_Result>() {
  return ::CMsgGameServerSaveGameResult_Result_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dota_5fgcmessages_5fserver_2eproto__INCLUDED
