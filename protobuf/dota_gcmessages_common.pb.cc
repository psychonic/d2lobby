// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dota_gcmessages_common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CSODOTAGameAccountClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSODOTAGameAccountClient_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSODOTAPartyMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSODOTAPartyMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSODOTAParty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSODOTAParty_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CSODOTAParty_State_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CSODOTAPartyInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSODOTAPartyInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSODOTAPartyInvite_PartyMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSODOTAPartyInvite_PartyMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAPartyMemberSetCoach_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAPartyMemberSetCoach_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTASaveGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTASaveGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTASaveGame_Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTASaveGame_Player_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTASaveGame_SaveInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTASaveGame_SaveInstance_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTASaveGame_SaveInstance_PlayerPositions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTASaveGame_SaveInstance_PlayerPositions_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgLeaverState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgLeaverState_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTALobbyMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTALobbyMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTALobbyMember_CDOTALobbyMemberXPBonus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTALobbyMember_CDOTALobbyMemberXPBonus_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTALobbyMemberPrivate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTALobbyMemberPrivate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLobbyTeamDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLobbyTeamDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLobbyTimedRewardDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLobbyTimedRewardDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLobbyBroadcastChannelInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLobbyBroadcastChannelInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSODOTALobby_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSODOTALobby_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSODOTALobby_CExtraMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSODOTALobby_CExtraMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CSODOTALobby_State_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CSODOTALobby_LobbyType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CSODOTALobbyInternal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSODOTALobbyInternal_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAGenericResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAGenericResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTABroadcastNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTABroadcastNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAPCBangTimedReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAPCBangTimedReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* CAttribute_String_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAttribute_String_reflection_ = NULL;
const ::google::protobuf::Descriptor* CAttribute_ItemDynamicRecipeComponent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAttribute_ItemDynamicRecipeComponent_reflection_ = NULL;
const ::google::protobuf::Descriptor* CProtoItemSocket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CProtoItemSocket_reflection_ = NULL;
const ::google::protobuf::Descriptor* CProtoItemSocket_Empty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CProtoItemSocket_Empty_reflection_ = NULL;
const ::google::protobuf::Descriptor* CProtoItemSocket_Effect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CProtoItemSocket_Effect_reflection_ = NULL;
const ::google::protobuf::Descriptor* CProtoItemSocket_Color_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CProtoItemSocket_Color_reflection_ = NULL;
const ::google::protobuf::Descriptor* CProtoItemSocket_Strange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CProtoItemSocket_Strange_reflection_ = NULL;
const ::google::protobuf::Descriptor* CProtoItemSocket_Spectator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CProtoItemSocket_Spectator_reflection_ = NULL;
const ::google::protobuf::Descriptor* CProtoItemSocket_AnimModifier_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CProtoItemSocket_AnimModifier_reflection_ = NULL;
const ::google::protobuf::Descriptor* CProtoItemSocket_Autograph_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CProtoItemSocket_Autograph_reflection_ = NULL;
const ::google::protobuf::Descriptor* CProtoItemSocket_AbilityEffect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CProtoItemSocket_AbilityEffect_reflection_ = NULL;
const ::google::protobuf::Descriptor* CProtoItemSocket_StaticVisuals_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CProtoItemSocket_StaticVisuals_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMatchPlayerAbilityUpgrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMatchPlayerAbilityUpgrade_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMatchAdditionalUnitInventory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMatchAdditionalUnitInventory_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMatchHeroSelectEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMatchHeroSelectEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAProcessFantasyScheduledEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAProcessFantasyScheduledEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSODOTAMapLocationState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSODOTAMapLocationState_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgNexonPartnerUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgNexonPartnerUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgMakeOffering_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgMakeOffering_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgRequestOfferings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgRequestOfferings_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgRequestOfferingsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgRequestOfferingsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgRequestOfferingsResponse_NewYearsOffering_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgRequestOfferingsResponse_NewYearsOffering_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgLeagueAdminList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgLeagueAdminList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPerfectWorldUserLookupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPerfectWorldUserLookupRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPerfectWorldUserLookupResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPerfectWorldUserLookupResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgPerfectWorldUserLookupResponse_EResultCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EDOTAGCMsg_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTA_GameMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTA_GameState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTA_GC_TEAM_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTA_CM_PICK_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTAConnectionState_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTALeaverStatus_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTALowPriorityBanType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTALobbyReadyState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTAGameVersion_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTAJoinLobbyResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTAMatchVote_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTA_LobbyMemberXPBonus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LobbyDotaTVDelay_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EDOTAGCSessionNeed_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Fantasy_Roles_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Fantasy_Team_Slots_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Fantasy_Selection_Mode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Fantasy_Matchup_Interval_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTA_TournamentEvents_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto() {
  protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dota_gcmessages_common.proto");
  GOOGLE_CHECK(file != NULL);
  CSODOTAGameAccountClient_descriptor_ = file->message_type(0);
  static const int CSODOTAGameAccountClient_offsets_[38] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, wins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, losses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, xp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, initial_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, leaver_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, secondary_leaver_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, low_priority_until_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, prevent_text_chat_until_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, prevent_voice_until_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, last_abandoned_game_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, last_secondary_abandoned_game_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, leaver_penalty_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, completed_game_streak_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, teaching_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, leadership_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, friendly_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, forgiving_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, account_disabled_until_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, account_disabled_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, showcase_hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, match_disabled_until_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, match_disabled_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, partner_account_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, partner_account_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, shutdownlawterminatetimestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, low_priority_games_remaining_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, competitive_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, calibration_games_remaining_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, solo_competitive_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, solo_calibration_games_remaining_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, recruitment_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, has_new_notifications_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, is_league_admin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, casual_games_played_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, solo_competitive_games_played_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, party_competitive_games_played_),
  };
  CSODOTAGameAccountClient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSODOTAGameAccountClient_descriptor_,
      CSODOTAGameAccountClient::default_instance_,
      CSODOTAGameAccountClient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSODOTAGameAccountClient));
  CSODOTAPartyMember_descriptor_ = file->message_type(1);
  static const int CSODOTAPartyMember_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyMember, partner_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyMember, is_coach_),
  };
  CSODOTAPartyMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSODOTAPartyMember_descriptor_,
      CSODOTAPartyMember::default_instance_,
      CSODOTAPartyMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSODOTAPartyMember));
  CSODOTAParty_descriptor_ = file->message_type(2);
  static const int CSODOTAParty_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, party_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, leader_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, member_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, game_modes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, pending_invites_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, effective_started_matchmaking_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, raw_started_matchmaking_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, attempt_start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, attempt_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, matchgroups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, low_priority_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, match_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, bot_difficulty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, match_disabled_until_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, match_disabled_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, matchmaking_max_range_minutes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, matchlanguages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, map_preference_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, open_guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, common_guilds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, low_priority_games_remaining_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, min_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, max_level_),
  };
  CSODOTAParty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSODOTAParty_descriptor_,
      CSODOTAParty::default_instance_,
      CSODOTAParty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSODOTAParty));
  CSODOTAParty_State_descriptor_ = CSODOTAParty_descriptor_->enum_type(0);
  CSODOTAPartyInvite_descriptor_ = file->message_type(3);
  static const int CSODOTAPartyInvite_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite, sender_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite, sender_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite, low_priority_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite, as_coach_),
  };
  CSODOTAPartyInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSODOTAPartyInvite_descriptor_,
      CSODOTAPartyInvite::default_instance_,
      CSODOTAPartyInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSODOTAPartyInvite));
  CSODOTAPartyInvite_PartyMember_descriptor_ = CSODOTAPartyInvite_descriptor_->nested_type(0);
  static const int CSODOTAPartyInvite_PartyMember_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite_PartyMember, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite_PartyMember, steam_id_),
  };
  CSODOTAPartyInvite_PartyMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSODOTAPartyInvite_PartyMember_descriptor_,
      CSODOTAPartyInvite_PartyMember::default_instance_,
      CSODOTAPartyInvite_PartyMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite_PartyMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite_PartyMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSODOTAPartyInvite_PartyMember));
  CMsgDOTAPartyMemberSetCoach_descriptor_ = file->message_type(4);
  static const int CMsgDOTAPartyMemberSetCoach_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPartyMemberSetCoach, wants_coach_),
  };
  CMsgDOTAPartyMemberSetCoach_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAPartyMemberSetCoach_descriptor_,
      CMsgDOTAPartyMemberSetCoach::default_instance_,
      CMsgDOTAPartyMemberSetCoach_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPartyMemberSetCoach, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPartyMemberSetCoach, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAPartyMemberSetCoach));
  CDOTASaveGame_descriptor_ = file->message_type(5);
  static const int CDOTASaveGame_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame, save_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame, save_instances_),
  };
  CDOTASaveGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTASaveGame_descriptor_,
      CDOTASaveGame::default_instance_,
      CDOTASaveGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTASaveGame));
  CDOTASaveGame_Player_descriptor_ = CDOTASaveGame_descriptor_->nested_type(0);
  static const int CDOTASaveGame_Player_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_Player, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_Player, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_Player, hero_),
  };
  CDOTASaveGame_Player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTASaveGame_Player_descriptor_,
      CDOTASaveGame_Player::default_instance_,
      CDOTASaveGame_Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_Player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_Player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTASaveGame_Player));
  CDOTASaveGame_SaveInstance_descriptor_ = CDOTASaveGame_descriptor_->nested_type(1);
  static const int CDOTASaveGame_SaveInstance_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance, game_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance, team1_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance, team2_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance, player_positions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance, save_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance, save_time_),
  };
  CDOTASaveGame_SaveInstance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTASaveGame_SaveInstance_descriptor_,
      CDOTASaveGame_SaveInstance::default_instance_,
      CDOTASaveGame_SaveInstance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTASaveGame_SaveInstance));
  CDOTASaveGame_SaveInstance_PlayerPositions_descriptor_ = CDOTASaveGame_SaveInstance_descriptor_->nested_type(0);
  static const int CDOTASaveGame_SaveInstance_PlayerPositions_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance_PlayerPositions, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance_PlayerPositions, y_),
  };
  CDOTASaveGame_SaveInstance_PlayerPositions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTASaveGame_SaveInstance_PlayerPositions_descriptor_,
      CDOTASaveGame_SaveInstance_PlayerPositions::default_instance_,
      CDOTASaveGame_SaveInstance_PlayerPositions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance_PlayerPositions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance_PlayerPositions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTASaveGame_SaveInstance_PlayerPositions));
  CMsgLeaverState_descriptor_ = file->message_type(6);
  static const int CMsgLeaverState_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverState, lobby_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverState, game_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverState, leaver_detected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverState, first_blood_happened_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverState, discard_match_results_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverState, mass_disconnect_),
  };
  CMsgLeaverState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgLeaverState_descriptor_,
      CMsgLeaverState::default_instance_,
      CMsgLeaverState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgLeaverState));
  CDOTALobbyMember_descriptor_ = file->message_type(7);
  static const int CDOTALobbyMember_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, party_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, meta_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, meta_xp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, meta_xp_awarded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, leaver_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, leaver_actions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, prize_def_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, disabled_hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, partner_account_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, enabled_hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, coach_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, nexon_pc_bang_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, nexon_pc_bang_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, xp_bonuses_),
  };
  CDOTALobbyMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTALobbyMember_descriptor_,
      CDOTALobbyMember::default_instance_,
      CDOTALobbyMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTALobbyMember));
  CDOTALobbyMember_CDOTALobbyMemberXPBonus_descriptor_ = CDOTALobbyMember_descriptor_->nested_type(0);
  static const int CDOTALobbyMember_CDOTALobbyMemberXPBonus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember_CDOTALobbyMemberXPBonus, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember_CDOTALobbyMemberXPBonus, xp_bonus_),
  };
  CDOTALobbyMember_CDOTALobbyMemberXPBonus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTALobbyMember_CDOTALobbyMemberXPBonus_descriptor_,
      CDOTALobbyMember_CDOTALobbyMemberXPBonus::default_instance_,
      CDOTALobbyMember_CDOTALobbyMemberXPBonus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember_CDOTALobbyMemberXPBonus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember_CDOTALobbyMemberXPBonus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTALobbyMember_CDOTALobbyMemberXPBonus));
  CDOTALobbyMemberPrivate_descriptor_ = file->message_type(8);
  static const int CDOTALobbyMemberPrivate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMemberPrivate, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMemberPrivate, ready_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMemberPrivate, leaver_state_),
  };
  CDOTALobbyMemberPrivate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTALobbyMemberPrivate_descriptor_,
      CDOTALobbyMemberPrivate::default_instance_,
      CDOTALobbyMemberPrivate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMemberPrivate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMemberPrivate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTALobbyMemberPrivate));
  CLobbyTeamDetails_descriptor_ = file->message_type(9);
  static const int CLobbyTeamDetails_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, team_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, team_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, team_base_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, team_banner_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, team_complete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, guild_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, guild_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, guild_base_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, guild_banner_logo_),
  };
  CLobbyTeamDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLobbyTeamDetails_descriptor_,
      CLobbyTeamDetails::default_instance_,
      CLobbyTeamDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLobbyTeamDetails));
  CLobbyTimedRewardDetails_descriptor_ = file->message_type(10);
  static const int CLobbyTimedRewardDetails_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTimedRewardDetails, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTimedRewardDetails, item_def_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTimedRewardDetails, is_supply_crate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTimedRewardDetails, is_timed_drop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTimedRewardDetails, account_id_),
  };
  CLobbyTimedRewardDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLobbyTimedRewardDetails_descriptor_,
      CLobbyTimedRewardDetails::default_instance_,
      CLobbyTimedRewardDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTimedRewardDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTimedRewardDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLobbyTimedRewardDetails));
  CLobbyBroadcastChannelInfo_descriptor_ = file->message_type(11);
  static const int CLobbyBroadcastChannelInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyBroadcastChannelInfo, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyBroadcastChannelInfo, country_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyBroadcastChannelInfo, description_),
  };
  CLobbyBroadcastChannelInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLobbyBroadcastChannelInfo_descriptor_,
      CLobbyBroadcastChannelInfo::default_instance_,
      CLobbyBroadcastChannelInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyBroadcastChannelInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyBroadcastChannelInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLobbyBroadcastChannelInfo));
  CSODOTALobby_descriptor_ = file->message_type(12);
  static const int CSODOTALobby_offsets_[57] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, lobby_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, left_members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, leader_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, game_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, pending_invites_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, connect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, lobby_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, allow_cheats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, fill_with_bots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, intro_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, game_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, team_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, tutorial_lesson_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, tournament_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, tournament_game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, server_region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, game_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, num_spectators_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, tower_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, matchgroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, cm_pick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, allow_spectating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, bot_difficulty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, game_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, timed_reward_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, pass_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, bot_slot_difficulty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, leagueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, penalty_level_radiant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, penalty_level_dire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, load_game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, series_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, radiant_series_wins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, dire_series_wins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, loot_generated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, loot_awarded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, allchat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, rank_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, dota_tv_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, custom_game_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, custom_map_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, custom_difficulty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, lan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, broadcast_channel_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, first_leaver_accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, series_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, low_priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, extra_messages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, save_game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, custom_game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, first_blood_happened_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, discard_match_results_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, mass_disconnect_),
  };
  CSODOTALobby_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSODOTALobby_descriptor_,
      CSODOTALobby::default_instance_,
      CSODOTALobby_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSODOTALobby));
  CSODOTALobby_CExtraMsg_descriptor_ = CSODOTALobby_descriptor_->nested_type(0);
  static const int CSODOTALobby_CExtraMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby_CExtraMsg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby_CExtraMsg, contents_),
  };
  CSODOTALobby_CExtraMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSODOTALobby_CExtraMsg_descriptor_,
      CSODOTALobby_CExtraMsg::default_instance_,
      CSODOTALobby_CExtraMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby_CExtraMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby_CExtraMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSODOTALobby_CExtraMsg));
  CSODOTALobby_State_descriptor_ = CSODOTALobby_descriptor_->enum_type(0);
  CSODOTALobby_LobbyType_descriptor_ = CSODOTALobby_descriptor_->enum_type(1);
  CSODOTALobbyInternal_descriptor_ = file->message_type(13);
  static const int CSODOTALobbyInternal_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInternal, search_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInternal, average_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInternal, replay_salt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInternal, disable_radiant_automatic_team_detection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInternal, disable_dire_automatic_team_detection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInternal, submitted_match_history_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInternal, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInternal, left_members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInternal, save_game_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInternal, server_run_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInternal, last_state_change_time_),
  };
  CSODOTALobbyInternal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSODOTALobbyInternal_descriptor_,
      CSODOTALobbyInternal::default_instance_,
      CSODOTALobbyInternal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInternal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInternal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSODOTALobbyInternal));
  CMsgDOTAGenericResult_descriptor_ = file->message_type(14);
  static const int CMsgDOTAGenericResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGenericResult, eresult_),
  };
  CMsgDOTAGenericResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAGenericResult_descriptor_,
      CMsgDOTAGenericResult::default_instance_,
      CMsgDOTAGenericResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGenericResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGenericResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAGenericResult));
  CMsgDOTABroadcastNotification_descriptor_ = file->message_type(15);
  static const int CMsgDOTABroadcastNotification_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABroadcastNotification, message_),
  };
  CMsgDOTABroadcastNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTABroadcastNotification_descriptor_,
      CMsgDOTABroadcastNotification::default_instance_,
      CMsgDOTABroadcastNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABroadcastNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABroadcastNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTABroadcastNotification));
  CMsgDOTAPCBangTimedReward_descriptor_ = file->message_type(16);
  static const int CMsgDOTAPCBangTimedReward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPCBangTimedReward, persona_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPCBangTimedReward, itemdef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPCBangTimedReward, pcbangname_),
  };
  CMsgDOTAPCBangTimedReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAPCBangTimedReward_descriptor_,
      CMsgDOTAPCBangTimedReward::default_instance_,
      CMsgDOTAPCBangTimedReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPCBangTimedReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPCBangTimedReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAPCBangTimedReward));
  CAttribute_String_descriptor_ = file->message_type(17);
  static const int CAttribute_String_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_String, value_),
  };
  CAttribute_String_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CAttribute_String_descriptor_,
      CAttribute_String::default_instance_,
      CAttribute_String_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_String, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_String, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CAttribute_String));
  CAttribute_ItemDynamicRecipeComponent_descriptor_ = file->message_type(18);
  static const int CAttribute_ItemDynamicRecipeComponent_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_ItemDynamicRecipeComponent, item_def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_ItemDynamicRecipeComponent, item_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_ItemDynamicRecipeComponent, item_flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_ItemDynamicRecipeComponent, attributes_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_ItemDynamicRecipeComponent, item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_ItemDynamicRecipeComponent, items_fulfilled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_ItemDynamicRecipeComponent, item_rarity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_ItemDynamicRecipeComponent, lootlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_ItemDynamicRecipeComponent, fulfilled_item_id_),
  };
  CAttribute_ItemDynamicRecipeComponent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CAttribute_ItemDynamicRecipeComponent_descriptor_,
      CAttribute_ItemDynamicRecipeComponent::default_instance_,
      CAttribute_ItemDynamicRecipeComponent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_ItemDynamicRecipeComponent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAttribute_ItemDynamicRecipeComponent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CAttribute_ItemDynamicRecipeComponent));
  CProtoItemSocket_descriptor_ = file->message_type(19);
  static const int CProtoItemSocket_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket, attr_def_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket, required_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket, required_hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket, gem_def_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket, not_tradable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket, required_item_slot_),
  };
  CProtoItemSocket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CProtoItemSocket_descriptor_,
      CProtoItemSocket::default_instance_,
      CProtoItemSocket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CProtoItemSocket));
  CProtoItemSocket_Empty_descriptor_ = file->message_type(20);
  static const int CProtoItemSocket_Empty_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Empty, socket_),
  };
  CProtoItemSocket_Empty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CProtoItemSocket_Empty_descriptor_,
      CProtoItemSocket_Empty::default_instance_,
      CProtoItemSocket_Empty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Empty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Empty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CProtoItemSocket_Empty));
  CProtoItemSocket_Effect_descriptor_ = file->message_type(21);
  static const int CProtoItemSocket_Effect_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Effect, socket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Effect, effect_),
  };
  CProtoItemSocket_Effect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CProtoItemSocket_Effect_descriptor_,
      CProtoItemSocket_Effect::default_instance_,
      CProtoItemSocket_Effect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Effect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Effect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CProtoItemSocket_Effect));
  CProtoItemSocket_Color_descriptor_ = file->message_type(22);
  static const int CProtoItemSocket_Color_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Color, socket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Color, red_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Color, green_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Color, blue_),
  };
  CProtoItemSocket_Color_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CProtoItemSocket_Color_descriptor_,
      CProtoItemSocket_Color::default_instance_,
      CProtoItemSocket_Color_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Color, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Color, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CProtoItemSocket_Color));
  CProtoItemSocket_Strange_descriptor_ = file->message_type(23);
  static const int CProtoItemSocket_Strange_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Strange, socket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Strange, strange_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Strange, strange_value_),
  };
  CProtoItemSocket_Strange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CProtoItemSocket_Strange_descriptor_,
      CProtoItemSocket_Strange::default_instance_,
      CProtoItemSocket_Strange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Strange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Strange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CProtoItemSocket_Strange));
  CProtoItemSocket_Spectator_descriptor_ = file->message_type(24);
  static const int CProtoItemSocket_Spectator_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Spectator, socket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Spectator, games_viewed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Spectator, corporation_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Spectator, league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Spectator, team_id_),
  };
  CProtoItemSocket_Spectator_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CProtoItemSocket_Spectator_descriptor_,
      CProtoItemSocket_Spectator::default_instance_,
      CProtoItemSocket_Spectator_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Spectator, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Spectator, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CProtoItemSocket_Spectator));
  CProtoItemSocket_AnimModifier_descriptor_ = file->message_type(25);
  static const int CProtoItemSocket_AnimModifier_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_AnimModifier, socket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_AnimModifier, anim_modifier_),
  };
  CProtoItemSocket_AnimModifier_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CProtoItemSocket_AnimModifier_descriptor_,
      CProtoItemSocket_AnimModifier::default_instance_,
      CProtoItemSocket_AnimModifier_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_AnimModifier, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_AnimModifier, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CProtoItemSocket_AnimModifier));
  CProtoItemSocket_Autograph_descriptor_ = file->message_type(26);
  static const int CProtoItemSocket_Autograph_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Autograph, socket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Autograph, autograph_),
  };
  CProtoItemSocket_Autograph_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CProtoItemSocket_Autograph_descriptor_,
      CProtoItemSocket_Autograph::default_instance_,
      CProtoItemSocket_Autograph_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Autograph, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_Autograph, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CProtoItemSocket_Autograph));
  CProtoItemSocket_AbilityEffect_descriptor_ = file->message_type(27);
  static const int CProtoItemSocket_AbilityEffect_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_AbilityEffect, socket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_AbilityEffect, ability_effect_),
  };
  CProtoItemSocket_AbilityEffect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CProtoItemSocket_AbilityEffect_descriptor_,
      CProtoItemSocket_AbilityEffect::default_instance_,
      CProtoItemSocket_AbilityEffect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_AbilityEffect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_AbilityEffect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CProtoItemSocket_AbilityEffect));
  CProtoItemSocket_StaticVisuals_descriptor_ = file->message_type(28);
  static const int CProtoItemSocket_StaticVisuals_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_StaticVisuals, socket_),
  };
  CProtoItemSocket_StaticVisuals_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CProtoItemSocket_StaticVisuals_descriptor_,
      CProtoItemSocket_StaticVisuals::default_instance_,
      CProtoItemSocket_StaticVisuals_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_StaticVisuals, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemSocket_StaticVisuals, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CProtoItemSocket_StaticVisuals));
  CMatchPlayerAbilityUpgrade_descriptor_ = file->message_type(29);
  static const int CMatchPlayerAbilityUpgrade_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchPlayerAbilityUpgrade, ability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchPlayerAbilityUpgrade, time_),
  };
  CMatchPlayerAbilityUpgrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMatchPlayerAbilityUpgrade_descriptor_,
      CMatchPlayerAbilityUpgrade::default_instance_,
      CMatchPlayerAbilityUpgrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchPlayerAbilityUpgrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchPlayerAbilityUpgrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMatchPlayerAbilityUpgrade));
  CMatchAdditionalUnitInventory_descriptor_ = file->message_type(30);
  static const int CMatchAdditionalUnitInventory_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchAdditionalUnitInventory, unit_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchAdditionalUnitInventory, items_),
  };
  CMatchAdditionalUnitInventory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMatchAdditionalUnitInventory_descriptor_,
      CMatchAdditionalUnitInventory::default_instance_,
      CMatchAdditionalUnitInventory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchAdditionalUnitInventory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchAdditionalUnitInventory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMatchAdditionalUnitInventory));
  CMatchHeroSelectEvent_descriptor_ = file->message_type(31);
  static const int CMatchHeroSelectEvent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchHeroSelectEvent, is_pick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchHeroSelectEvent, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchHeroSelectEvent, hero_id_),
  };
  CMatchHeroSelectEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMatchHeroSelectEvent_descriptor_,
      CMatchHeroSelectEvent::default_instance_,
      CMatchHeroSelectEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchHeroSelectEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchHeroSelectEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMatchHeroSelectEvent));
  CMsgDOTAProcessFantasyScheduledEvent_descriptor_ = file->message_type(32);
  static const int CMsgDOTAProcessFantasyScheduledEvent_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProcessFantasyScheduledEvent, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProcessFantasyScheduledEvent, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProcessFantasyScheduledEvent, fantasy_league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProcessFantasyScheduledEvent, reference_data_),
  };
  CMsgDOTAProcessFantasyScheduledEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAProcessFantasyScheduledEvent_descriptor_,
      CMsgDOTAProcessFantasyScheduledEvent::default_instance_,
      CMsgDOTAProcessFantasyScheduledEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProcessFantasyScheduledEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProcessFantasyScheduledEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAProcessFantasyScheduledEvent));
  CSODOTAMapLocationState_descriptor_ = file->message_type(33);
  static const int CSODOTAMapLocationState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAMapLocationState, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAMapLocationState, location_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAMapLocationState, completed_),
  };
  CSODOTAMapLocationState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSODOTAMapLocationState_descriptor_,
      CSODOTAMapLocationState::default_instance_,
      CSODOTAMapLocationState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAMapLocationState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAMapLocationState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSODOTAMapLocationState));
  CMsgNexonPartnerUpdate_descriptor_ = file->message_type(34);
  static const int CMsgNexonPartnerUpdate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNexonPartnerUpdate, messagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNexonPartnerUpdate, timeremaining_),
  };
  CMsgNexonPartnerUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgNexonPartnerUpdate_descriptor_,
      CMsgNexonPartnerUpdate::default_instance_,
      CMsgNexonPartnerUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNexonPartnerUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNexonPartnerUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgNexonPartnerUpdate));
  CMsgMakeOffering_descriptor_ = file->message_type(35);
  static const int CMsgMakeOffering_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMakeOffering, item_id_),
  };
  CMsgMakeOffering_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgMakeOffering_descriptor_,
      CMsgMakeOffering::default_instance_,
      CMsgMakeOffering_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMakeOffering, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMakeOffering, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgMakeOffering));
  CMsgRequestOfferings_descriptor_ = file->message_type(36);
  static const int CMsgRequestOfferings_offsets_[1] = {
  };
  CMsgRequestOfferings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgRequestOfferings_descriptor_,
      CMsgRequestOfferings::default_instance_,
      CMsgRequestOfferings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestOfferings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestOfferings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgRequestOfferings));
  CMsgRequestOfferingsResponse_descriptor_ = file->message_type(37);
  static const int CMsgRequestOfferingsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestOfferingsResponse, offerings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestOfferingsResponse, completed_),
  };
  CMsgRequestOfferingsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgRequestOfferingsResponse_descriptor_,
      CMsgRequestOfferingsResponse::default_instance_,
      CMsgRequestOfferingsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestOfferingsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestOfferingsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgRequestOfferingsResponse));
  CMsgRequestOfferingsResponse_NewYearsOffering_descriptor_ = CMsgRequestOfferingsResponse_descriptor_->nested_type(0);
  static const int CMsgRequestOfferingsResponse_NewYearsOffering_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestOfferingsResponse_NewYearsOffering, def_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestOfferingsResponse_NewYearsOffering, item_id_),
  };
  CMsgRequestOfferingsResponse_NewYearsOffering_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgRequestOfferingsResponse_NewYearsOffering_descriptor_,
      CMsgRequestOfferingsResponse_NewYearsOffering::default_instance_,
      CMsgRequestOfferingsResponse_NewYearsOffering_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestOfferingsResponse_NewYearsOffering, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestOfferingsResponse_NewYearsOffering, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgRequestOfferingsResponse_NewYearsOffering));
  CMsgLeagueAdminList_descriptor_ = file->message_type(38);
  static const int CMsgLeagueAdminList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeagueAdminList, account_ids_),
  };
  CMsgLeagueAdminList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgLeagueAdminList_descriptor_,
      CMsgLeagueAdminList::default_instance_,
      CMsgLeagueAdminList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeagueAdminList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeagueAdminList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgLeagueAdminList));
  CMsgPerfectWorldUserLookupRequest_descriptor_ = file->message_type(39);
  static const int CMsgPerfectWorldUserLookupRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPerfectWorldUserLookupRequest, user_name_),
  };
  CMsgPerfectWorldUserLookupRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPerfectWorldUserLookupRequest_descriptor_,
      CMsgPerfectWorldUserLookupRequest::default_instance_,
      CMsgPerfectWorldUserLookupRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPerfectWorldUserLookupRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPerfectWorldUserLookupRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPerfectWorldUserLookupRequest));
  CMsgPerfectWorldUserLookupResponse_descriptor_ = file->message_type(40);
  static const int CMsgPerfectWorldUserLookupResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPerfectWorldUserLookupResponse, result_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPerfectWorldUserLookupResponse, account_id_),
  };
  CMsgPerfectWorldUserLookupResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPerfectWorldUserLookupResponse_descriptor_,
      CMsgPerfectWorldUserLookupResponse::default_instance_,
      CMsgPerfectWorldUserLookupResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPerfectWorldUserLookupResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPerfectWorldUserLookupResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPerfectWorldUserLookupResponse));
  CMsgPerfectWorldUserLookupResponse_EResultCode_descriptor_ = CMsgPerfectWorldUserLookupResponse_descriptor_->enum_type(0);
  EDOTAGCMsg_descriptor_ = file->enum_type(0);
  DOTA_GameMode_descriptor_ = file->enum_type(1);
  DOTA_GameState_descriptor_ = file->enum_type(2);
  DOTA_GC_TEAM_descriptor_ = file->enum_type(3);
  DOTA_CM_PICK_descriptor_ = file->enum_type(4);
  DOTAConnectionState_t_descriptor_ = file->enum_type(5);
  DOTALeaverStatus_t_descriptor_ = file->enum_type(6);
  DOTALowPriorityBanType_descriptor_ = file->enum_type(7);
  DOTALobbyReadyState_descriptor_ = file->enum_type(8);
  DOTAGameVersion_descriptor_ = file->enum_type(9);
  DOTAJoinLobbyResult_descriptor_ = file->enum_type(10);
  DOTAMatchVote_descriptor_ = file->enum_type(11);
  DOTA_LobbyMemberXPBonus_descriptor_ = file->enum_type(12);
  LobbyDotaTVDelay_descriptor_ = file->enum_type(13);
  EDOTAGCSessionNeed_descriptor_ = file->enum_type(14);
  Fantasy_Roles_descriptor_ = file->enum_type(15);
  Fantasy_Team_Slots_descriptor_ = file->enum_type(16);
  Fantasy_Selection_Mode_descriptor_ = file->enum_type(17);
  Fantasy_Matchup_Interval_descriptor_ = file->enum_type(18);
  DOTA_TournamentEvents_descriptor_ = file->enum_type(19);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dota_5fgcmessages_5fcommon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSODOTAGameAccountClient_descriptor_, &CSODOTAGameAccountClient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSODOTAPartyMember_descriptor_, &CSODOTAPartyMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSODOTAParty_descriptor_, &CSODOTAParty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSODOTAPartyInvite_descriptor_, &CSODOTAPartyInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSODOTAPartyInvite_PartyMember_descriptor_, &CSODOTAPartyInvite_PartyMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAPartyMemberSetCoach_descriptor_, &CMsgDOTAPartyMemberSetCoach::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTASaveGame_descriptor_, &CDOTASaveGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTASaveGame_Player_descriptor_, &CDOTASaveGame_Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTASaveGame_SaveInstance_descriptor_, &CDOTASaveGame_SaveInstance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTASaveGame_SaveInstance_PlayerPositions_descriptor_, &CDOTASaveGame_SaveInstance_PlayerPositions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgLeaverState_descriptor_, &CMsgLeaverState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTALobbyMember_descriptor_, &CDOTALobbyMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTALobbyMember_CDOTALobbyMemberXPBonus_descriptor_, &CDOTALobbyMember_CDOTALobbyMemberXPBonus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTALobbyMemberPrivate_descriptor_, &CDOTALobbyMemberPrivate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLobbyTeamDetails_descriptor_, &CLobbyTeamDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLobbyTimedRewardDetails_descriptor_, &CLobbyTimedRewardDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLobbyBroadcastChannelInfo_descriptor_, &CLobbyBroadcastChannelInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSODOTALobby_descriptor_, &CSODOTALobby::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSODOTALobby_CExtraMsg_descriptor_, &CSODOTALobby_CExtraMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSODOTALobbyInternal_descriptor_, &CSODOTALobbyInternal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAGenericResult_descriptor_, &CMsgDOTAGenericResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTABroadcastNotification_descriptor_, &CMsgDOTABroadcastNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAPCBangTimedReward_descriptor_, &CMsgDOTAPCBangTimedReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CAttribute_String_descriptor_, &CAttribute_String::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CAttribute_ItemDynamicRecipeComponent_descriptor_, &CAttribute_ItemDynamicRecipeComponent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CProtoItemSocket_descriptor_, &CProtoItemSocket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CProtoItemSocket_Empty_descriptor_, &CProtoItemSocket_Empty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CProtoItemSocket_Effect_descriptor_, &CProtoItemSocket_Effect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CProtoItemSocket_Color_descriptor_, &CProtoItemSocket_Color::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CProtoItemSocket_Strange_descriptor_, &CProtoItemSocket_Strange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CProtoItemSocket_Spectator_descriptor_, &CProtoItemSocket_Spectator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CProtoItemSocket_AnimModifier_descriptor_, &CProtoItemSocket_AnimModifier::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CProtoItemSocket_Autograph_descriptor_, &CProtoItemSocket_Autograph::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CProtoItemSocket_AbilityEffect_descriptor_, &CProtoItemSocket_AbilityEffect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CProtoItemSocket_StaticVisuals_descriptor_, &CProtoItemSocket_StaticVisuals::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMatchPlayerAbilityUpgrade_descriptor_, &CMatchPlayerAbilityUpgrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMatchAdditionalUnitInventory_descriptor_, &CMatchAdditionalUnitInventory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMatchHeroSelectEvent_descriptor_, &CMatchHeroSelectEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAProcessFantasyScheduledEvent_descriptor_, &CMsgDOTAProcessFantasyScheduledEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSODOTAMapLocationState_descriptor_, &CSODOTAMapLocationState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgNexonPartnerUpdate_descriptor_, &CMsgNexonPartnerUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgMakeOffering_descriptor_, &CMsgMakeOffering::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgRequestOfferings_descriptor_, &CMsgRequestOfferings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgRequestOfferingsResponse_descriptor_, &CMsgRequestOfferingsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgRequestOfferingsResponse_NewYearsOffering_descriptor_, &CMsgRequestOfferingsResponse_NewYearsOffering::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgLeagueAdminList_descriptor_, &CMsgLeagueAdminList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPerfectWorldUserLookupRequest_descriptor_, &CMsgPerfectWorldUserLookupRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPerfectWorldUserLookupResponse_descriptor_, &CMsgPerfectWorldUserLookupResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto() {
  delete CSODOTAGameAccountClient::default_instance_;
  delete CSODOTAGameAccountClient_reflection_;
  delete CSODOTAPartyMember::default_instance_;
  delete CSODOTAPartyMember_reflection_;
  delete CSODOTAParty::default_instance_;
  delete CSODOTAParty_reflection_;
  delete CSODOTAPartyInvite::default_instance_;
  delete CSODOTAPartyInvite_reflection_;
  delete CSODOTAPartyInvite_PartyMember::default_instance_;
  delete CSODOTAPartyInvite_PartyMember_reflection_;
  delete CMsgDOTAPartyMemberSetCoach::default_instance_;
  delete CMsgDOTAPartyMemberSetCoach_reflection_;
  delete CDOTASaveGame::default_instance_;
  delete CDOTASaveGame_reflection_;
  delete CDOTASaveGame_Player::default_instance_;
  delete CDOTASaveGame_Player_reflection_;
  delete CDOTASaveGame_SaveInstance::default_instance_;
  delete CDOTASaveGame_SaveInstance_reflection_;
  delete CDOTASaveGame_SaveInstance_PlayerPositions::default_instance_;
  delete CDOTASaveGame_SaveInstance_PlayerPositions_reflection_;
  delete CMsgLeaverState::default_instance_;
  delete CMsgLeaverState_reflection_;
  delete CDOTALobbyMember::default_instance_;
  delete CDOTALobbyMember_reflection_;
  delete CDOTALobbyMember_CDOTALobbyMemberXPBonus::default_instance_;
  delete CDOTALobbyMember_CDOTALobbyMemberXPBonus_reflection_;
  delete CDOTALobbyMemberPrivate::default_instance_;
  delete CDOTALobbyMemberPrivate_reflection_;
  delete CLobbyTeamDetails::default_instance_;
  delete CLobbyTeamDetails_reflection_;
  delete CLobbyTimedRewardDetails::default_instance_;
  delete CLobbyTimedRewardDetails_reflection_;
  delete CLobbyBroadcastChannelInfo::default_instance_;
  delete CLobbyBroadcastChannelInfo_reflection_;
  delete CSODOTALobby::default_instance_;
  delete CSODOTALobby_reflection_;
  delete CSODOTALobby_CExtraMsg::default_instance_;
  delete CSODOTALobby_CExtraMsg_reflection_;
  delete CSODOTALobbyInternal::default_instance_;
  delete CSODOTALobbyInternal_reflection_;
  delete CMsgDOTAGenericResult::default_instance_;
  delete CMsgDOTAGenericResult_reflection_;
  delete CMsgDOTABroadcastNotification::default_instance_;
  delete CMsgDOTABroadcastNotification_reflection_;
  delete CMsgDOTAPCBangTimedReward::default_instance_;
  delete CMsgDOTAPCBangTimedReward_reflection_;
  delete CAttribute_String::default_instance_;
  delete CAttribute_String_reflection_;
  delete CAttribute_ItemDynamicRecipeComponent::default_instance_;
  delete CAttribute_ItemDynamicRecipeComponent_reflection_;
  delete CProtoItemSocket::default_instance_;
  delete CProtoItemSocket_reflection_;
  delete CProtoItemSocket_Empty::default_instance_;
  delete CProtoItemSocket_Empty_reflection_;
  delete CProtoItemSocket_Effect::default_instance_;
  delete CProtoItemSocket_Effect_reflection_;
  delete CProtoItemSocket_Color::default_instance_;
  delete CProtoItemSocket_Color_reflection_;
  delete CProtoItemSocket_Strange::default_instance_;
  delete CProtoItemSocket_Strange_reflection_;
  delete CProtoItemSocket_Spectator::default_instance_;
  delete CProtoItemSocket_Spectator_reflection_;
  delete CProtoItemSocket_AnimModifier::default_instance_;
  delete CProtoItemSocket_AnimModifier_reflection_;
  delete CProtoItemSocket_Autograph::default_instance_;
  delete CProtoItemSocket_Autograph_reflection_;
  delete CProtoItemSocket_AbilityEffect::default_instance_;
  delete CProtoItemSocket_AbilityEffect_reflection_;
  delete CProtoItemSocket_StaticVisuals::default_instance_;
  delete CProtoItemSocket_StaticVisuals_reflection_;
  delete CMatchPlayerAbilityUpgrade::default_instance_;
  delete CMatchPlayerAbilityUpgrade_reflection_;
  delete CMatchAdditionalUnitInventory::default_instance_;
  delete CMatchAdditionalUnitInventory_reflection_;
  delete CMatchHeroSelectEvent::default_instance_;
  delete CMatchHeroSelectEvent_reflection_;
  delete CMsgDOTAProcessFantasyScheduledEvent::default_instance_;
  delete CMsgDOTAProcessFantasyScheduledEvent_reflection_;
  delete CSODOTAMapLocationState::default_instance_;
  delete CSODOTAMapLocationState_reflection_;
  delete CMsgNexonPartnerUpdate::default_instance_;
  delete CMsgNexonPartnerUpdate_reflection_;
  delete CMsgMakeOffering::default_instance_;
  delete CMsgMakeOffering_reflection_;
  delete CMsgRequestOfferings::default_instance_;
  delete CMsgRequestOfferings_reflection_;
  delete CMsgRequestOfferingsResponse::default_instance_;
  delete CMsgRequestOfferingsResponse_reflection_;
  delete CMsgRequestOfferingsResponse_NewYearsOffering::default_instance_;
  delete CMsgRequestOfferingsResponse_NewYearsOffering_reflection_;
  delete CMsgLeagueAdminList::default_instance_;
  delete CMsgLeagueAdminList_reflection_;
  delete CMsgPerfectWorldUserLookupRequest::default_instance_;
  delete CMsgPerfectWorldUserLookupRequest_reflection_;
  delete CMsgPerfectWorldUserLookupResponse::default_instance_;
  delete CMsgPerfectWorldUserLookupResponse_reflection_;
}

void protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_steammessages_2eproto();
  ::protobuf_AddDesc_matchmaker_5fcommon_2eproto();
  ::protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034dota_gcmessages_common.proto\032\023steammes"
    "sages.proto\032\027matchmaker_common.proto\032\026gc"
    "sdk_gcmessages.proto\"\215\t\n\030CSODOTAGameAcco"
    "untClient\022\030\n\naccount_id\030\001 \001(\rB\004\200\246\035\001\022\014\n\004w"
    "ins\030\003 \001(\r\022\016\n\006losses\030\004 \001(\r\022\n\n\002xp\030\014 \001(\r\022\r\n"
    "\005level\030\r \001(\r\022\025\n\rinitial_skill\030\016 \001(\r\022\024\n\014l"
    "eaver_count\030\017 \001(\r\022\036\n\026secondary_leaver_co"
    "unt\030: \001(\r\022\037\n\027low_priority_until_date\030\022 \001"
    "(\r\022$\n\034prevent_text_chat_until_date\030\024 \001(\r"
    "\022 \n\030prevent_voice_until_date\030\025 \001(\r\022 \n\030la"
    "st_abandoned_game_date\030\026 \001(\r\022*\n\"last_sec"
    "ondary_abandoned_game_date\030; \001(\r\022\034\n\024leav"
    "er_penalty_count\030\027 \001(\r\022\035\n\025completed_game"
    "_streak\030\030 \001(\r\022\020\n\010teaching\030\034 \001(\r\022\022\n\nleade"
    "rship\030\035 \001(\r\022\020\n\010friendly\030\036 \001(\r\022\021\n\tforgivi"
    "ng\030\037 \001(\r\022#\n\033account_disabled_until_date\030"
    "& \001(\r\022\036\n\026account_disabled_count\030\' \001(\r\022\030\n"
    "\020showcase_hero_id\030( \001(\r\022!\n\031match_disable"
    "d_until_date\030) \001(\r\022\034\n\024match_disabled_cou"
    "nt\030* \001(\r\022\?\n\024partner_account_type\030, \001(\0162\023"
    ".PartnerAccountType:\014PARTNER_NONE\022\035\n\025par"
    "tner_account_state\030- \001(\r\022%\n\035shutdownlawt"
    "erminatetimestamp\030/ \001(\r\022$\n\034low_priority_"
    "games_remaining\0300 \001(\r\022\030\n\020competitive_ran"
    "k\0301 \001(\r\022#\n\033calibration_games_remaining\0303"
    " \001(\r\022\035\n\025solo_competitive_rank\0304 \001(\r\022(\n s"
    "olo_calibration_games_remaining\0306 \001(\r\022\031\n"
    "\021recruitment_level\0307 \001(\r\022\035\n\025has_new_noti"
    "fications\0308 \001(\010\022\027\n\017is_league_admin\0309 \001(\010"
    "\022\033\n\023casual_games_played\030< \001(\r\022%\n\035solo_co"
    "mpetitive_games_played\030= \001(\r\022&\n\036party_co"
    "mpetitive_games_played\030> \001(\r\"_\n\022CSODOTAP"
    "artyMember\0227\n\014partner_type\030\001 \001(\0162\023.Partn"
    "erAccountType:\014PARTNER_NONE\022\020\n\010is_coach\030"
    "\002 \001(\010\"\322\006\n\014CSODOTAParty\022\026\n\010party_id\030\001 \001(\004"
    "B\004\200\246\035\001\022\021\n\tleader_id\030\002 \001(\006\022\022\n\nmember_ids\030"
    "\003 \003(\006\022\022\n\ngame_modes\030\004 \001(\r\022\027\n\017pending_inv"
    "ites\030\005 \003(\006\022&\n\005state\030\006 \001(\0162\023.CSODOTAParty"
    ".State:\002UI\022*\n\"effective_started_matchmak"
    "ing_time\030\007 \001(\r\022$\n\034raw_started_matchmakin"
    "g_time\030  \001(\r\022\032\n\022attempt_start_time\030! \001(\r"
    "\022\023\n\013attempt_num\030\" \001(\r\022\023\n\013matchgroups\030\013 \001"
    "(\r\022\037\n\027low_priority_account_id\030\023 \001(\r\0221\n\nm"
    "atch_type\030\025 \001(\0162\n.MatchType:\021MATCH_TYPE_"
    "CASUAL\022B\n\016bot_difficulty\030\026 \001(\0162\022.DOTABot"
    "Difficulty:\026BOT_DIFFICULTY_PASSIVE\022\017\n\007te"
    "am_id\030\027 \001(\r\022!\n\031match_disabled_until_date"
    "\030\030 \001(\r\022!\n\031match_disabled_account_id\030\031 \001("
    "\r\022%\n\035matchmaking_max_range_minutes\030\032 \001(\r"
    "\022\026\n\016matchlanguages\030\033 \001(\r\022\026\n\016map_preferen"
    "ce\030& \001(\r\022$\n\007members\030\035 \003(\0132\023.CSODOTAParty"
    "Member\022\025\n\ropen_guild_id\030\036 \001(\r\022\025\n\rcommon_"
    "guilds\030\037 \003(\r\022$\n\034low_priority_games_remai"
    "ning\030# \001(\r\022\021\n\tmin_level\030$ \001(\r\022\021\n\tmax_lev"
    "el\030% \001(\r\"0\n\005State\022\006\n\002UI\020\000\022\021\n\rFINDING_MAT"
    "CH\020\001\022\014\n\010IN_MATCH\020\002\"\365\001\n\022CSODOTAPartyInvit"
    "e\022\026\n\010group_id\030\001 \001(\004B\004\200\246\035\001\022\021\n\tsender_id\030\002"
    " \001(\006\022\023\n\013sender_name\030\003 \001(\t\0220\n\007members\030\004 \003"
    "(\0132\037.CSODOTAPartyInvite.PartyMember\022\017\n\007t"
    "eam_id\030\005 \001(\r\022\033\n\023low_priority_status\030\006 \001("
    "\010\022\020\n\010as_coach\030\007 \001(\010\032-\n\013PartyMember\022\014\n\004na"
    "me\030\001 \001(\t\022\020\n\010steam_id\030\002 \001(\006\"2\n\033CMsgDOTAPa"
    "rtyMemberSetCoach\022\023\n\013wants_coach\030\001 \001(\010\"\316"
    "\003\n\rCDOTASaveGame\022\020\n\010match_id\030\005 \001(\r\022\021\n\tsa"
    "ve_time\030\002 \001(\r\022&\n\007players\030\003 \003(\0132\025.CDOTASa"
    "veGame.Player\0223\n\016save_instances\030\004 \003(\0132\033."
    "CDOTASaveGame.SaveInstance\032Y\n\006Player\0223\n\004"
    "team\030\001 \001(\0162\r.DOTA_GC_TEAM:\026DOTA_GC_TEAM_"
    "GOOD_GUYS\022\014\n\004name\030\002 \001(\t\022\014\n\004hero\030\003 \001(\t\032\337\001"
    "\n\014SaveInstance\022\021\n\tgame_time\030\002 \001(\r\022\023\n\013tea"
    "m1_score\030\003 \001(\r\022\023\n\013team2_score\030\004 \001(\r\022E\n\020p"
    "layer_positions\030\005 \003(\0132+.CDOTASaveGame.Sa"
    "veInstance.PlayerPositions\022\017\n\007save_id\030\006 "
    "\001(\r\022\021\n\tsave_time\030\007 \001(\r\032\'\n\017PlayerPosition"
    "s\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\"\325\001\n\017CMsgLeaverSt"
    "ate\022\023\n\013lobby_state\030\001 \001(\r\022>\n\ngame_state\030\002"
    " \001(\0162\017.DOTA_GameState:\031DOTA_GAMERULES_ST"
    "ATE_INIT\022\027\n\017leaver_detected\030\003 \001(\010\022\034\n\024fir"
    "st_blood_happened\030\004 \001(\010\022\035\n\025discard_match"
    "_results\030\005 \001(\010\022\027\n\017mass_disconnect\030\006 \001(\010\""
    "\265\005\n\020CDOTALobbyMember\022\020\n\002id\030\001 \001(\006B\004\200\246\035\001\022\017"
    "\n\007hero_id\030\002 \001(\r\0223\n\004team\030\003 \001(\0162\r.DOTA_GC_"
    "TEAM:\026DOTA_GC_TEAM_GOOD_GUYS\022\014\n\004name\030\006 \001"
    "(\t\022\014\n\004slot\030\007 \001(\r\022\020\n\010party_id\030\014 \001(\004\022\022\n\nme"
    "ta_level\030\r \001(\r\022\017\n\007meta_xp\030\016 \001(\r\022\027\n\017meta_"
    "xp_awarded\030\017 \001(\r\022<\n\rleaver_status\030\020 \001(\0162"
    "\023.DOTALeaverStatus_t:\020DOTA_LEAVER_NONE\022\026"
    "\n\016leaver_actions\030\034 \001(\r\022\017\n\007channel\030\021 \001(\r\022"
    "\027\n\017prize_def_index\030\022 \001(\r\022\030\n\020disabled_her"
    "o_id\030\024 \003(\r\022\?\n\024partner_account_type\030\025 \001(\016"
    "2\023.PartnerAccountType:\014PARTNER_NONE\022\027\n\017e"
    "nabled_hero_id\030\026 \003(\r\0229\n\ncoach_team\030\027 \001(\016"
    "2\r.DOTA_GC_TEAM:\026DOTA_GC_TEAM_GOOD_GUYS\022"
    "\030\n\020nexon_pc_bang_no\030\030 \001(\r\022\032\n\022nexon_pc_ba"
    "ng_name\030\031 \001(\t\022=\n\nxp_bonuses\030\033 \003(\0132).CDOT"
    "ALobbyMember.CDOTALobbyMemberXPBonus\0329\n\027"
    "CDOTALobbyMemberXPBonus\022\014\n\004type\030\001 \001(\r\022\020\n"
    "\010xp_bonus\030\002 \001(\002\"\230\001\n\027CDOTALobbyMemberPriv"
    "ate\022\n\n\002ip\030\001 \001(\r\022I\n\013ready_state\030\002 \001(\0162\024.D"
    "OTALobbyReadyState:\036DOTALobbyReadyState_"
    "UNDECLARED\022&\n\014leaver_state\030\003 \001(\0132\020.CMsgL"
    "eaverState\"\246\002\n\021CLobbyTeamDetails\022\021\n\tteam"
    "_name\030\001 \001(\t\022\020\n\010team_tag\030\003 \001(\t\022\017\n\007team_id"
    "\030\004 \001(\r\022\021\n\tteam_logo\030\005 \001(\004\022\026\n\016team_base_l"
    "ogo\030\006 \001(\004\022\030\n\020team_banner_logo\030\007 \001(\004\022\025\n\rt"
    "eam_complete\030\010 \001(\010\022\022\n\nguild_name\030\t \001(\t\022\021"
    "\n\tguild_tag\030\n \001(\t\022\020\n\010guild_id\030\013 \001(\r\022\022\n\ng"
    "uild_logo\030\014 \001(\004\022\027\n\017guild_base_logo\030\r \001(\004"
    "\022\031\n\021guild_banner_logo\030\016 \001(\004\"\207\001\n\030CLobbyTi"
    "medRewardDetails\022\017\n\007item_id\030\001 \001(\004\022\026\n\016ite"
    "m_def_index\030\002 \001(\r\022\027\n\017is_supply_crate\030\003 \001"
    "(\010\022\025\n\ris_timed_drop\030\004 \001(\010\022\022\n\naccount_id\030"
    "\005 \001(\r\"[\n\032CLobbyBroadcastChannelInfo\022\022\n\nc"
    "hannel_id\030\001 \001(\r\022\024\n\014country_code\030\002 \001(\t\022\023\n"
    "\013description\030\003 \001(\t\"\235\020\n\014CSODOTALobby\022\026\n\010l"
    "obby_id\030\001 \001(\004B\004\200\246\035\001\022\"\n\007members\030\002 \003(\0132\021.C"
    "DOTALobbyMember\022\'\n\014left_members\030\007 \003(\0132\021."
    "CDOTALobbyMember\022\021\n\tleader_id\030\013 \001(\006\022\024\n\ts"
    "erver_id\030\006 \001(\006:\0010\022\021\n\tgame_mode\030\003 \001(\r\022\027\n\017"
    "pending_invites\030\n \003(\006\022&\n\005state\030\004 \001(\0162\023.C"
    "SODOTALobby.State:\002UI\022\017\n\007connect\030\005 \001(\t\0224"
    "\n\nlobby_type\030\014 \001(\0162\027.CSODOTALobby.LobbyT"
    "ype:\007INVALID\022\024\n\014allow_cheats\030\r \001(\010\022\026\n\016fi"
    "ll_with_bots\030\016 \001(\010\022\022\n\nintro_mode\030\017 \001(\010\022\021"
    "\n\tgame_name\030\020 \001(\t\022(\n\014team_details\030\021 \003(\0132"
    "\022.CLobbyTeamDetails\022\027\n\017tutorial_lesson\030\022"
    " \001(\r\022\025\n\rtournament_id\030\023 \001(\r\022\032\n\022tournamen"
    "t_game_id\030\024 \001(\r\022\030\n\rserver_region\030\025 \001(\r:\001"
    "0\022>\n\ngame_state\030\026 \001(\0162\017.DOTA_GameState:\031"
    "DOTA_GAMERULES_STATE_INIT\022\026\n\016num_spectat"
    "ors\030\027 \001(\r\022\023\n\013tower_state\030\030 \001(\r\022\022\n\nmatchg"
    "roup\030\031 \001(\r\022.\n\007cm_pick\030\034 \001(\0162\r.DOTA_CM_PI"
    "CK:\016DOTA_CM_RANDOM\022\020\n\010match_id\030\036 \001(\r\022\036\n\020"
    "allow_spectating\030\037 \001(\010:\004true\022\?\n\016bot_diff"
    "iculty\030$ \001(\0162\022.DOTABotDifficulty:\023BOT_DI"
    "FFICULTY_HARD\022<\n\014game_version\030% \001(\0162\020.DO"
    "TAGameVersion:\024GAME_VERSION_CURRENT\0227\n\024t"
    "imed_reward_details\030& \003(\0132\031.CLobbyTimedR"
    "ewardDetails\022\020\n\010pass_key\030\' \001(\t\022/\n\023bot_sl"
    "ot_difficulty\030) \003(\0162\022.DOTABotDifficulty\022"
    "\020\n\010leagueid\030* \001(\r\022 \n\025penalty_level_radia"
    "nt\030+ \001(\r:\0010\022\035\n\022penalty_level_dire\030, \001(\r:"
    "\0010\022\024\n\014load_game_id\030- \001(\r\022\023\n\013series_type\030"
    ". \001(\r\022\033\n\023radiant_series_wins\030/ \001(\r\022\030\n\020di"
    "re_series_wins\0300 \001(\r\022\026\n\016loot_generated\0301"
    " \001(\r\022\024\n\014loot_awarded\0302 \001(\r\022\026\n\007allchat\0303 "
    "\001(\010:\005false\022\023\n\013rank_change\0304 \001(\r\0228\n\rdota_"
    "tv_delay\0305 \001(\0162\021.LobbyDotaTVDelay:\016Lobby"
    "DotaTV_10\022\030\n\020custom_game_mode\0306 \001(\t\022\027\n\017c"
    "ustom_map_name\0307 \001(\t\022\031\n\021custom_difficult"
    "y\0308 \001(\r\022\013\n\003lan\0309 \001(\010\022;\n\026broadcast_channe"
    "l_info\030: \003(\0132\033.CLobbyBroadcastChannelInf"
    "o\022\036\n\026first_leaver_accountid\030; \001(\r\022\021\n\tser"
    "ies_id\030< \001(\r\022\024\n\014low_priority\030= \001(\010\022/\n\016ex"
    "tra_messages\030> \003(\0132\027.CSODOTALobby.CExtra"
    "Msg\022!\n\tsave_game\030\? \001(\0132\016.CDOTASaveGame\022\026"
    "\n\016custom_game_id\030@ \001(\r\022\034\n\024first_blood_ha"
    "ppened\030A \001(\010\022\035\n\025discard_match_results\030B "
    "\001(\010\022\027\n\017mass_disconnect\030C \001(\010\032)\n\tCExtraMs"
    "g\022\n\n\002id\030\001 \001(\r\022\020\n\010contents\030\002 \001(\014\"d\n\005State"
    "\022\006\n\002UI\020\000\022\013\n\007READYUP\020\004\022\017\n\013SERVERSETUP\020\001\022\007"
    "\n\003RUN\020\002\022\014\n\010POSTGAME\020\003\022\014\n\010NOTREADY\020\005\022\020\n\014S"
    "ERVERASSIGN\020\006\"\242\001\n\tLobbyType\022\024\n\007INVALID\020\377"
    "\377\377\377\377\377\377\377\377\001\022\020\n\014CASUAL_MATCH\020\000\022\014\n\010PRACTICE\020"
    "\001\022\016\n\nTOURNAMENT\020\002\022\022\n\016COOP_BOT_MATCH\020\004\022\016\n"
    "\nTEAM_MATCH\020\005\022\024\n\020SOLO_QUEUE_MATCH\020\006\022\025\n\021C"
    "OMPETITIVE_MATCH\020\007\"\203\003\n\024CSODOTALobbyInter"
    "nal\022\022\n\nsearch_key\030\001 \001(\t\022\024\n\014average_rank\030"
    "\003 \001(\r\022\023\n\013replay_salt\030\004 \001(\007\0220\n(disable_ra"
    "diant_automatic_team_detection\030\005 \001(\010\022-\n%"
    "disable_dire_automatic_team_detection\030\006 "
    "\001(\010\022\037\n\027submitted_match_history\030\010 \001(\010\022)\n\007"
    "members\030\t \003(\0132\030.CDOTALobbyMemberPrivate\022"
    ".\n\014left_members\030\n \003(\0132\030.CDOTALobbyMember"
    "Private\022\026\n\016save_game_data\030\013 \001(\014\022\027\n\017serve"
    "r_run_time\030\014 \001(\r\022\036\n\026last_state_change_ti"
    "me\030\r \001(\r\"+\n\025CMsgDOTAGenericResult\022\022\n\007ere"
    "sult\030\001 \001(\r:\0012\"0\n\035CMsgDOTABroadcastNotifi"
    "cation\022\017\n\007message\030\001 \001(\t\"Q\n\031CMsgDOTAPCBan"
    "gTimedReward\022\017\n\007persona\030\001 \001(\t\022\017\n\007itemdef"
    "\030\002 \001(\r\022\022\n\npcbangname\030\003 \001(\t\"\"\n\021CAttribute"
    "_String\022\r\n\005value\030\001 \001(\t\"\355\001\n%CAttribute_It"
    "emDynamicRecipeComponent\022\020\n\010item_def\030\001 \001"
    "(\r\022\024\n\014item_quality\030\002 \001(\r\022\022\n\nitem_flags\030\003"
    " \001(\r\022\031\n\021attributes_string\030\004 \001(\t\022\022\n\nitem_"
    "count\030\005 \001(\r\022\027\n\017items_fulfilled\030\006 \001(\r\022\023\n\013"
    "item_rarity\030\007 \001(\r\022\020\n\010lootlist\030\010 \001(\t\022\031\n\021f"
    "ulfilled_item_id\030\t \001(\004\"\262\001\n\020CProtoItemSoc"
    "ket\022\017\n\007item_id\030\001 \001(\004\022\026\n\016attr_def_index\030\002"
    " \001(\r\022\025\n\rrequired_type\030\003 \001(\r\022\025\n\rrequired_"
    "hero\030\004 \001(\t\022\025\n\rgem_def_index\030\005 \001(\r\022\024\n\014not"
    "_tradable\030\006 \001(\010\022\032\n\022required_item_slot\030\007 "
    "\001(\t\";\n\026CProtoItemSocket_Empty\022!\n\006socket\030"
    "\001 \001(\0132\021.CProtoItemSocket\"L\n\027CProtoItemSo"
    "cket_Effect\022!\n\006socket\030\001 \001(\0132\021.CProtoItem"
    "Socket\022\016\n\006effect\030\002 \001(\r\"e\n\026CProtoItemSock"
    "et_Color\022!\n\006socket\030\001 \001(\0132\021.CProtoItemSoc"
    "ket\022\013\n\003red\030\002 \001(\r\022\r\n\005green\030\003 \001(\r\022\014\n\004blue\030"
    "\004 \001(\r\"j\n\030CProtoItemSocket_Strange\022!\n\006soc"
    "ket\030\001 \001(\0132\021.CProtoItemSocket\022\024\n\014strange_"
    "type\030\002 \001(\r\022\025\n\rstrange_value\030\003 \001(\r\"\221\001\n\032CP"
    "rotoItemSocket_Spectator\022!\n\006socket\030\001 \001(\013"
    "2\021.CProtoItemSocket\022\024\n\014games_viewed\030\002 \001("
    "\r\022\026\n\016corporation_id\030\003 \001(\r\022\021\n\tleague_id\030\004"
    " \001(\r\022\017\n\007team_id\030\005 \001(\r\"Y\n\035CProtoItemSocke"
    "t_AnimModifier\022!\n\006socket\030\001 \001(\0132\021.CProtoI"
    "temSocket\022\025\n\ranim_modifier\030\002 \001(\r\"R\n\032CPro"
    "toItemSocket_Autograph\022!\n\006socket\030\001 \001(\0132\021"
    ".CProtoItemSocket\022\021\n\tautograph\030\002 \001(\t\"[\n\036"
    "CProtoItemSocket_AbilityEffect\022!\n\006socket"
    "\030\001 \001(\0132\021.CProtoItemSocket\022\026\n\016ability_eff"
    "ect\030\002 \001(\r\"C\n\036CProtoItemSocket_StaticVisu"
    "als\022!\n\006socket\030\001 \001(\0132\021.CProtoItemSocket\";"
    "\n\032CMatchPlayerAbilityUpgrade\022\017\n\007ability\030"
    "\001 \001(\r\022\014\n\004time\030\002 \001(\r\"A\n\035CMatchAdditionalU"
    "nitInventory\022\021\n\tunit_name\030\001 \001(\t\022\r\n\005items"
    "\030\002 \003(\r\"G\n\025CMatchHeroSelectEvent\022\017\n\007is_pi"
    "ck\030\001 \001(\010\022\014\n\004team\030\002 \001(\r\022\017\n\007hero_id\030\003 \001(\r\""
    "{\n$CMsgDOTAProcessFantasyScheduledEvent\022"
    "\r\n\005event\030\001 \001(\r\022\021\n\ttimestamp\030\002 \001(\r\022\031\n\021fan"
    "tasy_league_id\030\003 \001(\r\022\026\n\016reference_data\030\004"
    " \001(\r\"a\n\027CSODOTAMapLocationState\022\030\n\naccou"
    "nt_id\030\001 \001(\rB\004\200\246\035\001\022\031\n\013location_id\030\002 \001(\005B\004"
    "\200\246\035\001\022\021\n\tcompleted\030\003 \001(\010\"D\n\026CMsgNexonPart"
    "nerUpdate\022\023\n\013messagetype\030\001 \001(\r\022\025\n\rtimere"
    "maining\030\002 \001(\r\"#\n\020CMsgMakeOffering\022\017\n\007ite"
    "m_id\030\001 \001(\004\"\026\n\024CMsgRequestOfferings\"\254\001\n\034C"
    "MsgRequestOfferingsResponse\022A\n\tofferings"
    "\030\001 \003(\0132..CMsgRequestOfferingsResponse.Ne"
    "wYearsOffering\022\021\n\tcompleted\030\002 \001(\010\0326\n\020New"
    "YearsOffering\022\021\n\tdef_index\030\001 \001(\r\022\017\n\007item"
    "_id\030\002 \001(\004\"*\n\023CMsgLeagueAdminList\022\023\n\013acco"
    "unt_ids\030\001 \003(\r\"6\n!CMsgPerfectWorldUserLoo"
    "kupRequest\022\021\n\tuser_name\030\001 \001(\t\"\310\002\n\"CMsgPe"
    "rfectWorldUserLookupResponse\022[\n\013result_c"
    "ode\030\001 \001(\0162/.CMsgPerfectWorldUserLookupRe"
    "sponse.EResultCode:\025SUCCESS_ACCOUNT_FOUN"
    "D\022\022\n\naccount_id\030\002 \001(\r\"\260\001\n\013EResultCode\022\031\n"
    "\025SUCCESS_ACCOUNT_FOUND\020\000\022\021\n\rERROR_UNKNOW"
    "N\020\001\022 \n\034ERROR_USER_NAME_WRONG_FORMAT\020\002\022(\n"
    "$ERROR_NO_PERFECT_WORLD_ACCOUNT_FOUND\020\003\022"
    "\'\n#ERROR_NO_LINKED_STEAM_ACCOUNT_FOUND\020\004"
    "*\205u\n\nEDOTAGCMsg\022\025\n\020k_EMsgGCDOTABase\020\3306\022\034"
    "\n\027k_EMsgGCGeneralResponse\020\3316\022\035\n\030k_EMsgGC"
    "GameMatchSignOut\020\3346\022%\n k_EMsgGCGameMatch"
    "SignOutResponse\020\3356\022\034\n\027k_EMsgGCJoinChatCh"
    "annel\020\3416\022$\n\037k_EMsgGCJoinChatChannelRespo"
    "nse\020\3426\022\037\n\032k_EMsgGCOtherJoinedChannel\020\3456\022"
    "\035\n\030k_EMsgGCOtherLeftChannel\020\3466\022\035\n\030k_EMsg"
    "GCMatchHistoryList\020\3516\022\023\n\016k_EMsgGCStatus\020"
    "\3626\022\035\n\030k_EMsgGCGetRecentMatches\020\3636\022\"\n\035k_E"
    "MsgGCRecentMatchesResponse\020\3646\022\036\n\031k_EMsgG"
    "CFindSourceTVGames\020\3676\022\"\n\035k_EMsgGCSourceT"
    "VGamesResponse\020\3706\022\036\n\031k_EMsgGCStartFindin"
    "gMatch\020\3716\022\035\n\030k_EMsgGCConnectedPlayers\020\3726"
    "\022\037\n\032k_EMsgGCAbandonCurrentGame\020\3736\022\035\n\030k_E"
    "MsgGCStopFindingMatch\020\3746\022 \n\033k_EMsgGCPrac"
    "ticeLobbyCreate\020\3766\022\037\n\032k_EMsgGCPracticeLo"
    "bbyLeave\020\2007\022 \n\033k_EMsgGCPracticeLobbyLaun"
    "ch\020\2017\022\036\n\031k_EMsgGCPracticeLobbyList\020\2027\022&\n"
    "!k_EMsgGCPracticeLobbyListResponse\020\2037\022\036\n"
    "\031k_EMsgGCPracticeLobbyJoin\020\2047\022$\n\037k_EMsgG"
    "CPracticeLobbySetDetails\020\2067\022%\n k_EMsgGCP"
    "racticeLobbySetTeamSlot\020\2077\022)\n$k_EMsgGCIn"
    "itialQuestionnaireResponse\020\2117\022\036\n\031k_EMsgG"
    "CTournamentRequest\020\2137\022\037\n\032k_EMsgGCTournam"
    "entResponse\020\2147\022\"\n\035k_EMsgGCPracticeLobbyR"
    "esponse\020\2177\022\"\n\035k_EMsgGCBroadcastNotificat"
    "ion\020\2207\022!\n\034k_EMsgGCLiveScoreboardUpdate\020\221"
    "7\022#\n\036k_EMsgGCRequestChatChannelList\020\2247\022+"
    "\n&k_EMsgGCRequestChatChannelListResponse"
    "\020\2257\022\033\n\026k_EMsgGCRequestMatches\020\2307\022#\n\036k_EM"
    "sgGCRequestMatchesResponse\020\2317\022#\n\036k_EMsgG"
    "CRequestPlayerResources\020\2347\022+\n&k_EMsgGCRe"
    "questPlayerResourcesResponse\020\2357\022\024\n\017k_EMs"
    "gGCReadyUp\020\2367\022\'\n\"k_EMsgGCKickedFromMatch"
    "makingQueue\020\2377\022\033\n\026k_EMsgGCLeaverDetected"
    "\020\2407\022\037\n\032k_EMsgGCSpectateFriendGame\020\2417\022\'\n\""
    "k_EMsgGCSpectateFriendGameResponse\020\2427\022\032\n"
    "\025k_EMsgGCPlayerReports\020\2437\022$\n\037k_EMsgGCRep"
    "ortsRemainingRequest\020\2447\022%\n k_EMsgGCRepor"
    "tsRemainingResponse\020\2457\022\037\n\032k_EMsgGCSubmit"
    "PlayerReport\020\2467\022\'\n\"k_EMsgGCSubmitPlayerR"
    "eportResponse\020\2477\022\030\n\023k_EMsgGCGameChatLog\020"
    "\2507\022\036\n\031k_EMsgGCPracticeLobbyKick\020\2517\022 \n\033k_"
    "EMsgGCReportCountsRequest\020\2527\022!\n\034k_EMsgGC"
    "ReportCountsResponse\020\2537\022\035\n\030k_EMsgGCReque"
    "stSaveGames\020\2547\022#\n\036k_EMsgGCRequestSaveGam"
    "esServer\020\2557\022%\n k_EMsgGCRequestSaveGamesR"
    "esponse\020\2567\022#\n\036k_EMsgGCLeaverDetectedResp"
    "onse\020\2577\022\"\n\035k_EMsgGCPlayerFailedToConnect"
    "\020\2607\022\035\n\030k_EMsgGCGCToRelayConnect\020\2617\022%\n k_"
    "EMsgGCGCToRelayConnectresponse\020\2627\022\026\n\021k_E"
    "MsgGCWatchGame\020\2637\022\036\n\031k_EMsgGCWatchGameRe"
    "sponse\020\2647\022\035\n\030k_EMsgGCBanStatusRequest\020\2657"
    "\022\036\n\031k_EMsgGCBanStatusResponse\020\2667\022 \n\033k_EM"
    "sgGCMatchDetailsRequest\020\2677\022!\n\034k_EMsgGCMa"
    "tchDetailsResponse\020\2707\022\034\n\027k_EMsgGCCancelW"
    "atchGame\020\2717\022\033\n\026k_EMsgGCProfileRequest\020\2727"
    "\022\034\n\027k_EMsgGCProfileResponse\020\2737\022\022\n\rk_EMsg"
    "GCPopup\020\2767\022,\n\'k_EMsgGCDOTAClearNotifySuc"
    "cessfulReport\020\3007\022\032\n\025k_EMsgGCGenericResul"
    "t\020\3047\022+\n&k_EMsgGCFriendPracticeLobbyListR"
    "equest\020\3077\022,\n\'k_EMsgGCFriendPracticeLobby"
    "ListResponse\020\3107\022&\n!k_EMsgGCPracticeLobby"
    "JoinResponse\020\3117\022%\n k_EMsgClientEconNotif"
    "ication_Job\020\3127\022\027\n\022k_EMsgGCCreateTeam\020\3137\022"
    "\037\n\032k_EMsgGCCreateTeamResponse\020\3147\022\030\n\023k_EM"
    "sgGCDisbandTeam\020\3157\022 \n\033k_EMsgGCDisbandTea"
    "mResponse\020\3167\022\034\n\027k_EMsgGCRequestTeamData\020"
    "\3177\022$\n\037k_EMsgGCRequestTeamDataResponse\020\3207"
    "\022\025\n\020k_EMsgGCTeamData\020\3217\022#\n\036k_EMsgGCTeamI"
    "nvite_InviterToGC\020\3227\0224\n/k_EMsgGCTeamInvi"
    "te_GCImmediateResponseToInviter\020\3237\022*\n%k_"
    "EMsgGCTeamInvite_GCRequestToInvitee\020\3247\022+"
    "\n&k_EMsgGCTeamInvite_InviteeResponseToGC"
    "\020\3257\022+\n&k_EMsgGCTeamInvite_GCResponseToIn"
    "viter\020\3267\022+\n&k_EMsgGCTeamInvite_GCRespons"
    "eToInvitee\020\3277\022\033\n\026k_EMsgGCKickTeamMember\020"
    "\3307\022#\n\036k_EMsgGCKickTeamMemberResponse\020\3317\022"
    "\026\n\021k_EMsgGCLeaveTeam\020\3327\022\036\n\031k_EMsgGCLeave"
    "TeamResponse\020\3337\022#\n\036k_EMsgGCSuggestTeamMa"
    "tchmaking\020\3347\022%\n k_EMsgGCPlayerHeroesFavo"
    "ritesAdd\020\3357\022(\n#k_EMsgGCPlayerHeroesFavor"
    "itesRemove\020\3367\022\031\n\024k_EMsgGCEditTeamLogo\020\3437"
    "\022!\n\034k_EMsgGCEditTeamLogoResponse\020\3447\022\034\n\027k"
    "_EMsgGCSetShowcaseHero\020\3457\022%\n k_EMsgGCApp"
    "lyTeamToPracticeLobby\020\3467\022+\n&k_EMsgGCRequ"
    "estInternatinalTicketEmail\020\3477\022\036\n\031k_EMsgG"
    "CTransferTeamAdmin\020\3507\022 \n\033k_EMsgGCClearTo"
    "urnamentGame\020\3517\022\034\n\027k_EMsgRequestLeagueIn"
    "fo\020\3537\022\035\n\030k_EMsgResponseLeagueInfo\020\3547\022.\n)"
    "k_EMsgGCPracticeLobbyJoinBroadcastChanne"
    "l\020\3557\022!\n\034k_EMsgGC_TournamentItemEvent\020\3567\022"
    ")\n$k_EMsgGC_TournamentItemEventResponse\020"
    "\3577\022\030\n\023k_EMsgCastMatchVote\020\3607\022 \n\033k_EMsgCa"
    "stMatchVoteResponse\020\3617\022\034\n\027k_EMsgRetrieve"
    "MatchVote\020\3627\022$\n\037k_EMsgRetrieveMatchVoteR"
    "esponse\020\3637\022\026\n\021k_EMsgTeamFanfare\020\3647\022\036\n\031k_"
    "EMsgResponseTeamFanfare\020\3657\022&\n!k_EMsgGC_G"
    "ameServerUploadSaveGame\020\3667\022&\n!k_EMsgGC_G"
    "ameServerSaveGameResult\020\3677\022#\n\036k_EMsgGC_G"
    "ameServerGetLoadGame\020\3707\022)\n$k_EMsgGC_Game"
    "ServerGetLoadGameResult\020\3717\022\037\n\032k_EMsgGCTe"
    "amProfileRequest\020\3747\022 \n\033k_EMsgGCTeamProfi"
    "leResponse\020\3757\022\034\n\027k_EMsgGCEditTeamDetails"
    "\020\3767\022$\n\037k_EMsgGCEditTeamDetailsResponse\020\377"
    "7\022\037\n\032k_EMsgGCProTeamListRequest\020\2008\022 \n\033k_"
    "EMsgGCProTeamListResponse\020\2018\022\032\n\025k_EMsgGC"
    "ReadyUpStatus\020\2028\022\027\n\022k_EMsgGCHallOfFame\020\203"
    "8\022\036\n\031k_EMsgGCHallOfFameRequest\020\2048\022\037\n\032k_E"
    "MsgGCHallOfFameResponse\020\2058\022&\n!k_EMsgGCGe"
    "nerateDiretidePrizeList\020\2068\022!\n\034k_EMsgGCRe"
    "wardDiretidePrizes\020\2108\022+\n&k_EMsgGCDiretid"
    "ePrizesRewardedResponse\020\2118\022&\n!k_EMsgGCHa"
    "lloweenHighScoreRequest\020\2128\022\'\n\"k_EMsgGCHa"
    "lloweenHighScoreResponse\020\2138\022.\n)k_EMsgGCG"
    "enerateDiretidePrizeListResponse\020\2148\022#\n\036k"
    "_EMsgGCStorePromoPagesRequest\020\2168\022$\n\037k_EM"
    "sgGCStorePromoPagesResponse\020\2178\022\035\n\030k_EMsg"
    "GCSpawnLootGreevil\020\2208\022\037\n\032k_EMsgGCDismiss"
    "LootGreevil\020\2218\022\037\n\032k_EMsgGCToGCMatchCompl"
    "eted\020\2228\022\'\n\"k_EMsgGCDismissLootGreevilRes"
    "ponse\020\2238\022!\n\034k_EMsgGCBalancedShuffleLobby"
    "\020\2248\022&\n!k_EMsgGCToGCCheckLeaguePermission"
    "\020\2258\022.\n)k_EMsgGCToGCCheckLeaguePermission"
    "Response\020\2268\022\"\n\035k_EMsgGCLeagueScheduleReq"
    "uest\020\2278\022#\n\036k_EMsgGCLeagueScheduleRespons"
    "e\020\2308\022\037\n\032k_EMsgGCLeagueScheduleEdit\020\2318\022\'\n"
    "\"k_EMsgGCLeagueScheduleEditResponse\020\2328\022\""
    "\n\035k_EMsgGCLeaguesInMonthRequest\020\2338\022#\n\036k_"
    "EMsgGCLeaguesInMonthResponse\020\2348\022$\n\037k_EMs"
    "gGCMatchmakingStatsRequest\020\2358\022%\n k_EMsgG"
    "CMatchmakingStatsResponse\020\2368\022\032\n\025k_EMsgGC"
    "BotGameCreate\020\2378\022\"\n\035k_EMsgGCSetMatchHist"
    "oryAccess\020\2408\022*\n%k_EMsgGCSetMatchHistoryA"
    "ccessResponse\020\2418\022\034\n\027k_EMsgUpgradeLeagueI"
    "tem\020\2438\022$\n\037k_EMsgUpgradeLeagueItemRespons"
    "e\020\2448\022%\n k_EMsgGCTeamMemberProfileRequest"
    "\020\2458\022\"\n\035k_EMsgGCWatchDownloadedReplay\020\2468\022"
    " \n\033k_EMsgGCSetMapLocationState\020\2478\022(\n#k_E"
    "MsgGCSetMapLocationStateResponse\020\2508\022\036\n\031k"
    "_EMsgGCResetMapLocations\020\2518\022&\n!k_EMsgGCR"
    "esetMapLocationsResponse\020\2528\022\032\n\025k_EMsgGCT"
    "eamOnProfile\020\2538\022\035\n\030k_EMsgGCSetFeaturedIt"
    "ems\020\2548\022\032\n\025k_EMsgGCFeaturedItems\020\2578\022$\n\037k_"
    "EMsgRefreshPartnerAccountLink\020\2608\022$\n\037k_EM"
    "sgClientsRejoinChatChannels\020\2618\022 \n\033k_EMsg"
    "GCToGCGetUserChatInfo\020\2628\022(\n#k_EMsgGCToGC"
    "GetUserChatInfoResponse\020\2638\022%\n k_EMsgGCTo"
    "GCLeaveAllChatChannels\020\2648\022%\n k_EMsgGCToG"
    "CUpdateAccountChatBan\020\2658\022\037\n\032k_EMsgGCGuil"
    "dCreateRequest\020\2668\022 \n\033k_EMsgGCGuildCreate"
    "Response\020\2678\022\'\n\"k_EMsgGCGuildSetAccountRo"
    "leRequest\020\2708\022(\n#k_EMsgGCGuildSetAccountR"
    "oleResponse\020\2718\022\035\n\030k_EMsgGCRequestGuildDa"
    "ta\020\2728\022\026\n\021k_EMsgGCGuildData\020\2738\022&\n!k_EMsgG"
    "CGuildInviteAccountRequest\020\2748\022\'\n\"k_EMsgG"
    "CGuildInviteAccountResponse\020\2758\022%\n k_EMsg"
    "GCGuildCancelInviteRequest\020\2768\022&\n!k_EMsgG"
    "CGuildCancelInviteResponse\020\2778\022&\n!k_EMsgG"
    "CGuildUpdateDetailsRequest\020\3008\022\'\n\"k_EMsgG"
    "CGuildUpdateDetailsResponse\020\3018\022\036\n\031k_EMsg"
    "GCToGCCanInviteUser\020\3028\022&\n!k_EMsgGCToGCCa"
    "nInviteUserResponse\020\3038\022\034\n\027k_EMsgGCToGCGe"
    "tUserRank\020\3048\022$\n\037k_EMsgGCToGCGetUserRankR"
    "esponse\020\3058\022\"\n\035k_EMsgGCToGCGetTeamRankCha"
    "nge\020\3068\022*\n%k_EMsgGCToGCGetTeamRankChangeR"
    "esponse\020\3078\022 \n\033k_EMsgGCToGCUpdateTeamStat"
    "s\020\3108\022\034\n\027k_EMsgGCToGCGetTeamRank\020\3118\022$\n\037k_"
    "EMsgGCToGCGetTeamRankResponse\020\3128\022 \n\033k_EM"
    "sgGCTeamIDByNameRequest\020\3158\022!\n\034k_EMsgGCTe"
    "amIDByNameResponse\020\3168\022\025\n\020k_EMsgGCEditTea"
    "m\020\3178\022 \n\033k_EMsgGCPassportDataRequest\020\3208\022!"
    "\n\034k_EMsgGCPassportDataResponse\020\3218\022\033\n\026k_E"
    "MsgGCNotInGuildData\020\3238\022\031\n\024k_EMsgGCPasspo"
    "rtVote\020\3258\022\034\n\027k_EMsgGCGuildInviteData\020\3268\022"
    "\037\n\032k_EMsgGCToGCGetLeagueAdmin\020\3278\022\'\n\"k_EM"
    "sgGCToGCGetLeagueAdminResponse\020\3308\022\"\n\035k_E"
    "MsgGCPassportVoteSelection\020\3318\022#\n\036k_EMsgG"
    "CRequestLeaguePrizePool\020\3328\022+\n&k_EMsgGCRe"
    "questLeaguePrizePoolResponse\020\3338\022,\n\'k_EMs"
    "gGCToGCUpdateOpenGuildPartyRequest\020\3358\022-\n"
    "(k_EMsgGCToGCUpdateOpenGuildPartyRespons"
    "e\020\3368\022-\n(k_EMsgGCToGCDestroyOpenGuildPart"
    "yRequest\020\3378\022.\n)k_EMsgGCToGCDestroyOpenGu"
    "ildPartyResponse\020\3408\022\037\n\032k_EMsgGCGuildUpda"
    "teMessage\020\3418\022%\n k_EMsgGCPartySetOpenGuil"
    "dRequest\020\3428\022&\n!k_EMsgGCPartySetOpenGuild"
    "Response\020\3438\022\"\n\035k_EMsgGCGuildOpenPartyRef"
    "resh\020\3448\022&\n!k_EMsgGCJoinOpenGuildPartyReq"
    "uest\020\3458\022\'\n\"k_EMsgGCJoinOpenGuildPartyRes"
    "ponse\020\3468\022\035\n\030k_EMsgGCLeaveChatChannel\020\3508\022"
    "\030\n\023k_EMsgGCChatMessage\020\3518\022\035\n\030k_EMsgGCGet"
    "HeroStandings\020\3528\022%\n k_EMsgGCGetHeroStand"
    "ingsResponse\020\3538\022!\n\034k_EMsgGCGuildEditLogo"
    "Request\020\3578\022\"\n\035k_EMsgGCGuildEditLogoRespo"
    "nse\020\3608\022.\n)k_EMsgGCGuildmatePracticeLobby"
    "ListRequest\020\3618\022/\n*k_EMsgGCGuildmatePract"
    "iceLobbyListResponse\020\3628\022*\n%k_EMsgGCItemE"
    "ditorReservationsRequest\020\3638\022+\n&k_EMsgGCI"
    "temEditorReservationsResponse\020\3648\022%\n k_EM"
    "sgGCItemEditorReserveItemDef\020\3658\022-\n(k_EMs"
    "gGCItemEditorReserveItemDefResponse\020\3668\022)"
    "\n$k_EMsgGCItemEditorReleaseReservation\020\367"
    "8\0221\n,k_EMsgGCItemEditorReleaseReservatio"
    "nResponse\020\3708\022!\n\034k_EMsgGCRewardTutorialPr"
    "izes\020\3718\022*\n%k_EMsgGCLastHitChallengeHighS"
    "corePost\020\3728\022-\n(k_EMsgGCLastHitChallengeH"
    "ighScoreRequest\020\3738\022.\n)k_EMsgGCLastHitCha"
    "llengeHighScoreResponse\020\3748\022\'\n\"k_EMsgGCCr"
    "eateFantasyLeagueRequest\020\3758\022(\n#k_EMsgGCC"
    "reateFantasyLeagueResponse\020\3768\022%\n k_EMsgG"
    "CFantasyLeagueInfoRequest\020\2019\022&\n!k_EMsgGC"
    "FantasyLeagueInfoResponse\020\2029\022\036\n\031k_EMsgGC"
    "FantasyLeagueInfo\020\2039\022%\n k_EMsgGCCreateFa"
    "ntasyTeamRequest\020\2049\022&\n!k_EMsgGCCreateFan"
    "tasyTeamResponse\020\2059\022#\n\036k_EMsgGCEditFanta"
    "syTeamRequest\020\2069\022$\n\037k_EMsgGCEditFantasyT"
    "eamResponse\020\2079\0224\n/k_EMsgGCFantasyTeamInf"
    "oRequestByFantasyLeagueID\020\2109\0223\n.k_EMsgGC"
    "FantasyTeamInfoRequestByOwnerAccountID\020\211"
    "9\022$\n\037k_EMsgGCFantasyTeamInfoResponse\020\2129\022"
    "\034\n\027k_EMsgGCFantasyTeamInfo\020\2139\022#\n\036k_EMsgG"
    "CFantasyLivePlayerStats\020\2149\022$\n\037k_EMsgGCFa"
    "ntasyFinalPlayerStats\020\2159\022!\n\034k_EMsgGCFant"
    "asyMatchFinished\020\2169\022\037\n\032k_EMsgGCToGCReloa"
    "dVersions\020\2179\022$\n\037k_EMsgGCFantasyTeamScore"
    "Request\020\2209\022%\n k_EMsgGCFantasyTeamScoreRe"
    "sponse\020\2219\022(\n#k_EMsgGCFantasyTeamStanding"
    "sRequest\020\2229\022)\n$k_EMsgGCFantasyTeamStandi"
    "ngsResponse\020\2239\022&\n!k_EMsgGCFantasyPlayerS"
    "coreRequest\020\2249\022\'\n\"k_EMsgGCFantasyPlayerS"
    "coreResponse\020\2259\022*\n%k_EMsgGCFantasyPlayer"
    "StandingsRequest\020\2269\022+\n&k_EMsgGCFantasyPl"
    "ayerStandingsResponse\020\2279\022\033\n\026k_EMsgGCFlip"
    "LobbyTeams\020\2309\022\035\n\030k_EMsgGCCustomGameCreat"
    "e\020\2319\022%\n k_EMsgGCFantasyPlayerInfoRequest"
    "\020\2329\022&\n!k_EMsgGCFantasyPlayerInfoResponse"
    "\020\2339\022-\n(k_EMsgGCToGCProcessPlayerReportFo"
    "rTarget\020\2349\022%\n k_EMsgGCToGCProcessReportS"
    "uccess\020\2359\022%\n k_EMsgGCNotifyAccountFlagsC"
    "hange\020\2369\022\036\n\031k_EMsgGCSetProfilePrivacy\020\2379"
    "\022&\n!k_EMsgGCSetProfilePrivacyResponse\020\2409"
    "\022 \n\033k_EMsgGCSteamProfileRequest\020\2419\022(\n#k_"
    "EMsgGCSteamProfileRequestResponse\020\2429\022+\n&"
    "k_EMsgGCFantasyLeagueCreateInfoRequest\020\243"
    "9\022,\n\'k_EMsgGCFantasyLeagueCreateInfoResp"
    "onse\020\2449\022)\n$k_EMsgGCFantasyLeagueJoinInfo"
    "Request\020\2459\022*\n%k_EMsgGCFantasyLeagueJoinI"
    "nfoResponse\020\2469\022\036\n\031k_EMsgGCClientIgnoredU"
    "ser\020\2479\022\'\n\"k_EMsgGCFantasyLeagueCreateReq"
    "uest\020\2509\022(\n#k_EMsgGCFantasyLeagueCreateRe"
    "sponse\020\2519\022%\n k_EMsgGCFantasyTeamCreateRe"
    "quest\020\2529\022&\n!k_EMsgGCFantasyTeamCreateRes"
    "ponse\020\2539\022/\n*k_EMsgGCFantasyLeagueFriendJ"
    "oinListRequest\020\2549\0220\n+k_EMsgGCFantasyLeag"
    "ueFriendJoinListResponse\020\2559\022\034\n\027k_EMsgGCC"
    "lientSuspended\020\2569\022 \n\033k_EMsgGCPartyMember"
    "SetCoach\020\2579\022,\n\'k_EMsgGCFantasyLeagueEdit"
    "InvitesRequest\020\2609\022-\n(k_EMsgGCFantasyLeag"
    "ueEditInvitesResponse\020\2619\022\"\n\035k_EMsgGCPrac"
    "ticeLobbySetCoach\020\2629\022)\n$k_EMsgGCFantasyL"
    "eagueEditInfoRequest\020\2639\022*\n%k_EMsgGCFanta"
    "syLeagueEditInfoResponse\020\2649\022,\n\'k_EMsgGCF"
    "antasyLeagueDraftStatusRequest\020\2659\022%\n k_E"
    "MsgGCFantasyLeagueDraftStatus\020\2669\022,\n\'k_EM"
    "sgGCFantasyLeagueDraftPlayerRequest\020\2679\022-"
    "\n(k_EMsgGCFantasyLeagueDraftPlayerRespon"
    "se\020\2709\022)\n$k_EMsgGCFantasyLeagueMatchupsRe"
    "quest\020\2719\022*\n%k_EMsgGCFantasyLeagueMatchup"
    "sResponse\020\2729\022)\n$k_EMsgGCFantasyTeamRoste"
    "rSwapRequest\020\2739\022*\n%k_EMsgGCFantasyTeamRo"
    "sterSwapResponse\020\2749\022%\n k_EMsgGCFantasyTe"
    "amRosterRequest\020\2759\022&\n!k_EMsgGCFantasyTea"
    "mRosterResponse\020\2769\022\037\n\032k_EMsgGCNexonPartn"
    "erUpdate\020\2779\022*\n%k_EMsgGCToGCProcessPCBang"
    "RewardPoints\020\3009\022,\n\'k_EMsgGCFantasyTeamRo"
    "sterAddDropRequest\020\3019\022-\n(k_EMsgGCFantasy"
    "TeamRosterAddDropResponse\020\3029\022&\n!k_EMsgPr"
    "esentedClientTerminateDlg\020\3039\022/\n*k_EMsgGC"
    "FantasyPlayerHisoricalStatsRequest\020\3049\0220\n"
    "+k_EMsgGCFantasyPlayerHisoricalStatsResp"
    "onse\020\3059\022%\n k_EMsgGCPCBangTimedRewardMess"
    "age\020\3069\022,\n\'k_EMsgGCLobbyUpdateBroadcastCh"
    "annelInfo\020\3079\022%\n k_EMsgGCFantasyTeamTrade"
    "sRequest\020\3109\022&\n!k_EMsgGCFantasyTeamTrades"
    "Response\020\3119\022*\n%k_EMsgGCFantasyTeamTradeC"
    "ancelRequest\020\3129\022+\n&k_EMsgGCFantasyTeamTr"
    "adeCancelResponse\020\3139\022$\n\037k_EMsgGCToGCGran"
    "tTournamentItem\020\3149\022)\n$k_EMsgGCProcessFan"
    "tasyScheduledEvent\020\3159\022&\n!k_EMsgGCToGCGra"
    "ntPCBangRewardItem\020\3169\022)\n$k_EMsgGCToGCUpg"
    "radeTwitchViewerItems\020\3179\022\'\n\"k_EMsgGCToGC"
    "GetLiveMatchAffiliates\020\3209\022/\n*k_EMsgGCToG"
    "CGetLiveMatchAffiliatesResponse\020\3219\022*\n%k_"
    "EMsgGCToGCUpdatePlayerPennantCounts\020\3229\022\'"
    "\n\"k_EMsgGCToGCGetPlayerPennantCounts\020\3239\022"
    "/\n*k_EMsgGCToGCGetPlayerPennantCountsRes"
    "ponse\020\3249\022.\n)k_EMsgGCGameMatchSignOutPerm"
    "issionRequest\020\3259\022/\n*k_EMsgGCGameMatchSig"
    "nOutPermissionResponse\020\3269\022&\n!k_EMsgDOTAC"
    "hatChannelMemberUpdate\020\3279\022\037\n\032k_EMsgDOTAA"
    "wardEventPoints\020\3309\022\037\n\032k_EMsgDOTARedeemEv"
    "entPrize\020\3319\022\'\n\"k_EMsgDOTARedeemEventPriz"
    "eResponse\020\3329\022\035\n\030k_EMsgDOTAGetEventPoints"
    "\020\3339\022%\n k_EMsgDOTAGetEventPointsResponse\020"
    "\3349\022!\n\034k_EMsgGCToGCGrantEventReward\020\3359\022(\n"
    "#k_EMsgGCToGCSignoutAwardEventPoints\020\3369\022"
    "!\n\034k_EMsgDOTASendFriendRecruits\020\3419\022$\n\037k_"
    "EMsgDOTAFriendRecruitsRequest\020\3429\022%\n k_EM"
    "sgDOTAFriendRecruitsResponse\020\3439\022/\n*k_EMs"
    "gDOTAFriendRecruitInviteAcceptDecline\020\3449"
    "\022\'\n\"k_EMsgGCPartyLeaderWatchGamePrompt\020\345"
    "9\022#\n\036k_EMsgDOTAFrostivusTimeElapsed\020\3469\022#"
    "\n\036k_EMsgGCToGCGrantEarnedLicense\020\3479\022\"\n\035k"
    "_EMsgDOTAExchangeEventPoints\020\3509\022*\n%k_EMs"
    "gDOTAExchangeEventPointsResponse\020\3519\022#\n\036k"
    "_EMsgDOTALiveLeagueGameUpdate\020\3529\022\036\n\031k_EM"
    "sgDOTAChatGetUserList\020\3539\022&\n!k_EMsgDOTACh"
    "atGetUserListResponse\020\3549\022#\n\036k_EMsgGCComp"
    "endiumSetSelection\020\3559\022\"\n\035k_EMsgGCCompend"
    "iumDataRequest\020\3569\022#\n\036k_EMsgGCCompendiumD"
    "ataResponse\020\3579\022$\n\037k_EMsgDOTAGetPlayerMat"
    "chHistory\020\3609\022,\n\'k_EMsgDOTAGetPlayerMatch"
    "HistoryResponse\020\3619\022$\n\037k_EMsgGCToGCMatchm"
    "akingAddParty\020\3629\022\'\n\"k_EMsgGCToGCMatchmak"
    "ingRemoveParty\020\3639\022,\n\'k_EMsgGCToGCMatchma"
    "kingRemoveAllParties\020\3649\022&\n!k_EMsgGCToGCM"
    "atchmakingMatchFound\020\3659\022+\n&k_EMsgGCToGCU"
    "pdateMatchManagementStats\020\3669\022\'\n\"k_EMsgGC"
    "ToGCUpdateMatchmakingStats\020\3679\022 \n\033k_EMsgG"
    "CToServerPingRequest\020\3709\022!\n\034k_EMsgGCToSer"
    "verPingResponse\020\3719\022#\n\036k_EMsgGCToServerCo"
    "nsoleCommand\020\3729\022)\n$k_EMsgGCToGCUpdateLiv"
    "eLeagueGameInfo\020\3749\022\036\n\031k_EMsgGCNewBloomMo"
    "deState\020\3759\022&\n!k_EMsgGCNewBloomModeStateR"
    "esponse\020\3769\022\031\n\024k_EMsgGCMakeOffering\020\3779\022\035\n"
    "\030k_EMsgGCRequestOfferings\020\200:\022%\n k_EMsgGC"
    "RequestOfferingsResponse\020\201:\022#\n\036k_EMsgGCT"
    "oGCProcessMatchLeaver\020\202:\022!\n\034k_EMsgGCNoti"
    "ficationsRequest\020\203:\022\"\n\035k_EMsgGCNotificat"
    "ionsResponse\020\204:\022#\n\036k_EMsgGCToGCModifyNot"
    "ification\020\205:\022$\n\037k_EMsgGCToGCSetNewNotifi"
    "cations\020\206:\022!\n\034k_EMsgGCToGCSetIsLeagueAdm"
    "in\020\207:\022\035\n\030k_EMsgGCLeagueAdminState\020\210:\022%\n "
    "k_EMsgGCToGCSendLeagueAdminState\020\211:\022\034\n\027k"
    "_EMsgGCLeagueAdminList\020\212:\022(\n#k_EMsgGCNot"
    "ificationsDismissRequest\020\213:\022\036\n\031k_EMsgGCF"
    "antasyMessageAdd\020\214:\022#\n\036k_EMsgGCFantasyMe"
    "ssagesRequest\020\215:\022$\n\037k_EMsgGCFantasyMessa"
    "gesResponse\020\216:\022+\n&k_EMsgGCFantasySchedul"
    "edMatchesRequest\020\217:\022,\n\'k_EMsgGCFantasySc"
    "heduledMatchesResponse\020\220:\022\"\n\035k_EMsgGCToG"
    "CGrantLeagueAccess\020\221:\022#\n\036k_EMsgGCToGCGra"
    "ntFantasyAccess\020\222:\022\034\n\027k_EMsgGCEventGameC"
    "reate\020\223:\022*\n%k_EMsgGCPerfectWorldUserLook"
    "upRequest\020\224:\022+\n&k_EMsgGCPerfectWorldUser"
    "LookupResponse\020\225:\022(\n#k_EMsgGCToGCIncreme"
    "ntRecruitmentSDO\020\226:\022*\n%k_EMsgGCToGCIncre"
    "mentRecruitmentLevel\020\227:\022\037\n\032k_EMsgGCFanta"
    "syRemoveOwner\020\230:\022\'\n\"k_EMsgGCFantasyRemov"
    "eOwnerResponse\020\231:\022(\n#k_EMsgGCRequestBatc"
    "hPlayerResources\020\232:\0220\n+k_EMsgGCRequestBa"
    "tchPlayerResourcesResponse\020\233:\022\"\n\035k_EMsgG"
    "CToGCSendUpdateLeagues\020\234:\022+\n&k_EMsgGCCom"
    "pendiumSetSelectionResponse\020\235:\022\036\n\031k_EMsg"
    "GCPlayerInfoRequest\020\236:\022\027\n\022k_EMsgGCPlayer"
    "Info\020\237:\022\035\n\030k_EMsgGCPlayerInfoSubmit\020\240:\022%"
    "\n k_EMsgGCPlayerInfoSubmitResponse\020\241:\022 \n"
    "\033k_EMsgGCToGCGetAccountLevel\020\242:\022(\n#k_EMs"
    "gGCToGCGetAccountLevelResponse\020\243:\022\"\n\035k_E"
    "MsgGCToGCGetAccountPartner\020\244:\022*\n%k_EMsgG"
    "CToGCGetAccountPartnerResponse\020\245:\022\"\n\035k_E"
    "MsgGCToGCGetAccountProfile\020\246:\022*\n%k_EMsgG"
    "CToGCGetAccountProfileResponse\020\247:\022\035\n\030k_E"
    "MsgGCDev_GrantWarKill\020\301>*\361\003\n\rDOTA_GameMo"
    "de\022\026\n\022DOTA_GAMEMODE_NONE\020\000\022\024\n\020DOTA_GAMEM"
    "ODE_AP\020\001\022\024\n\020DOTA_GAMEMODE_CM\020\002\022\024\n\020DOTA_G"
    "AMEMODE_RD\020\003\022\024\n\020DOTA_GAMEMODE_SD\020\004\022\024\n\020DO"
    "TA_GAMEMODE_AR\020\005\022\027\n\023DOTA_GAMEMODE_INTRO\020"
    "\006\022\024\n\020DOTA_GAMEMODE_HW\020\007\022\034\n\030DOTA_GAMEMODE"
    "_REVERSE_CM\020\010\022\026\n\022DOTA_GAMEMODE_XMAS\020\t\022\032\n"
    "\026DOTA_GAMEMODE_TUTORIAL\020\n\022\024\n\020DOTA_GAMEMO"
    "DE_MO\020\013\022\024\n\020DOTA_GAMEMODE_LP\020\014\022\027\n\023DOTA_GA"
    "MEMODE_POOL1\020\r\022\024\n\020DOTA_GAMEMODE_FH\020\016\022\030\n\024"
    "DOTA_GAMEMODE_CUSTOM\020\017\022\024\n\020DOTA_GAMEMODE_"
    "CD\020\020\022\024\n\020DOTA_GAMEMODE_BD\020\021\022\037\n\033DOTA_GAMEM"
    "ODE_ABILITY_DRAFT\020\022\022\027\n\023DOTA_GAMEMODE_EVE"
    "NT\020\023*\351\002\n\016DOTA_GameState\022\035\n\031DOTA_GAMERULE"
    "S_STATE_INIT\020\000\0221\n-DOTA_GAMERULES_STATE_W"
    "AIT_FOR_PLAYERS_TO_LOAD\020\001\022\'\n#DOTA_GAMERU"
    "LES_STATE_HERO_SELECTION\020\002\022&\n\"DOTA_GAMER"
    "ULES_STATE_STRATEGY_TIME\020\003\022!\n\035DOTA_GAMER"
    "ULES_STATE_PRE_GAME\020\004\022)\n%DOTA_GAMERULES_"
    "STATE_GAME_IN_PROGRESS\020\005\022\"\n\036DOTA_GAMERUL"
    "ES_STATE_POST_GAME\020\006\022#\n\037DOTA_GAMERULES_S"
    "TATE_DISCONNECT\020\007\022\035\n\031DOTA_GAMERULES_STAT"
    "E_LAST\020\010*\266\001\n\014DOTA_GC_TEAM\022\032\n\026DOTA_GC_TEA"
    "M_GOOD_GUYS\020\000\022\031\n\025DOTA_GC_TEAM_BAD_GUYS\020\001"
    "\022\034\n\030DOTA_GC_TEAM_BROADCASTER\020\002\022\032\n\026DOTA_G"
    "C_TEAM_SPECTATOR\020\003\022\034\n\030DOTA_GC_TEAM_PLAYE"
    "R_POOL\020\004\022\027\n\023DOTA_GC_TEAM_NOTEAM\020\005*O\n\014DOT"
    "A_CM_PICK\022\022\n\016DOTA_CM_RANDOM\020\000\022\025\n\021DOTA_CM"
    "_GOOD_GUYS\020\001\022\024\n\020DOTA_CM_BAD_GUYS\020\002*\236\002\n\025D"
    "OTAConnectionState_t\022!\n\035DOTA_CONNECTION_"
    "STATE_UNKNOWN\020\000\022+\n\'DOTA_CONNECTION_STATE"
    "_NOT_YET_CONNECTED\020\001\022#\n\037DOTA_CONNECTION_"
    "STATE_CONNECTED\020\002\022&\n\"DOTA_CONNECTION_STA"
    "TE_DISCONNECTED\020\003\022#\n\037DOTA_CONNECTION_STA"
    "TE_ABANDONED\020\004\022!\n\035DOTA_CONNECTION_STATE_"
    "LOADING\020\005\022 \n\034DOTA_CONNECTION_STATE_FAILE"
    "D\020\006*\250\002\n\022DOTALeaverStatus_t\022\024\n\020DOTA_LEAVE"
    "R_NONE\020\000\022\034\n\030DOTA_LEAVER_DISCONNECTED\020\001\022%"
    "\n!DOTA_LEAVER_DISCONNECTED_TOO_LONG\020\002\022\031\n"
    "\025DOTA_LEAVER_ABANDONED\020\003\022\023\n\017DOTA_LEAVER_"
    "AFK\020\004\022\037\n\033DOTA_LEAVER_NEVER_CONNECTED\020\005\022("
    "\n$DOTA_LEAVER_NEVER_CONNECTED_TOO_LONG\020\006"
    "\022\"\n\036DOTA_LEAVER_FAILED_TO_READY_UP\020\007\022\030\n\024"
    "DOTA_LEAVER_DECLINED\020\010*\213\001\n\026DOTALowPriori"
    "tyBanType\022!\n\035DOTA_LOW_PRIORITY_BAN_ABAND"
    "ON\020\000\022!\n\035DOTA_LOW_PRIORITY_BAN_REPORTS\020\001\022"
    "+\n\'DOTA_LOW_PRIORITY_BAN_SECONDARY_ABAND"
    "ON\020\002*}\n\023DOTALobbyReadyState\022\"\n\036DOTALobby"
    "ReadyState_UNDECLARED\020\000\022 \n\034DOTALobbyRead"
    "yState_ACCEPTED\020\001\022 \n\034DOTALobbyReadyState"
    "_DECLINED\020\002*D\n\017DOTAGameVersion\022\030\n\024GAME_V"
    "ERSION_CURRENT\020\000\022\027\n\023GAME_VERSION_STABLE\020"
    "\001*\272\002\n\023DOTAJoinLobbyResult\022\034\n\030DOTA_JOIN_R"
    "ESULT_SUCCESS\020\000\022$\n DOTA_JOIN_RESULT_ALRE"
    "ADY_IN_GAME\020\001\022\"\n\036DOTA_JOIN_RESULT_INVALI"
    "D_LOBBY\020\002\022\'\n#DOTA_JOIN_RESULT_INCORRECT_"
    "PASSWORD\020\003\022\"\n\036DOTA_JOIN_RESULT_ACCESS_DE"
    "NIED\020\004\022\"\n\036DOTA_JOIN_RESULT_GENERIC_ERROR"
    "\020\005\022&\n\"DOTA_JOIN_RESULT_INCORRECT_VERSION"
    "\020\006\022\"\n\036DOTA_JOIN_RESULT_IN_TEAM_PARTY\020\007*b"
    "\n\rDOTAMatchVote\022\031\n\025DOTAMatchVote_INVALID"
    "\020\000\022\032\n\026DOTAMatchVote_POSITIVE\020\001\022\032\n\026DOTAMa"
    "tchVote_NEGATIVE\020\002*\203\002\n\027DOTA_LobbyMemberX"
    "PBonus\022#\n\037DOTA_LobbyMemberXPBonus_DEFAUL"
    "T\020\000\022*\n&DOTA_LobbyMemberXPBonus_BATTLE_BO"
    "OSTER\020\001\022\'\n#DOTA_LobbyMemberXPBonus_SHARE"
    "_BONUS\020\002\022!\n\035DOTA_LobbyMemberXPBonus_PART"
    "Y\020\003\022\'\n#DOTA_LobbyMemberXPBonus_RECRUITME"
    "NT\020\004\022\"\n\036DOTA_LobbyMemberXPBonus_PCBANG\020\005"
    "*P\n\020LobbyDotaTVDelay\022\022\n\016LobbyDotaTV_10\020\000"
    "\022\023\n\017LobbyDotaTV_120\020\001\022\023\n\017LobbyDotaTV_300"
    "\020\002*\355\003\n\022EDOTAGCSessionNeed\022 \n\034k_EDOTAGCSe"
    "ssionNeed_Unknown\020\000\022,\n(k_EDOTAGCSessionN"
    "eed_UserNoSessionNeeded\020d\022)\n%k_EDOTAGCSe"
    "ssionNeed_UserInOnlineGame\020e\022(\n$k_EDOTAG"
    "CSessionNeed_UserInLocalGame\020f\022-\n)k_EDOT"
    "AGCSessionNeed_UserInUIWasConnected\020g\022/\n"
    "+k_EDOTAGCSessionNeed_UserInUINeverConne"
    "cted\020h\022&\n\"k_EDOTAGCSessionNeed_UserTutor"
    "ials\020i\022*\n%k_EDOTAGCSessionNeed_GameServe"
    "rOnline\020\310\001\022)\n$k_EDOTAGCSessionNeed_GameS"
    "erverLocal\020\311\001\022(\n#k_EDOTAGCSessionNeed_Ga"
    "meServerIdle\020\312\001\022)\n$k_EDOTAGCSessionNeed_"
    "GameServerRelay\020\313\001*\\\n\rFantasy_Roles\022\032\n\026F"
    "ANTASY_ROLE_UNDEFINED\020\000\022\025\n\021FANTASY_ROLE_"
    "CORE\020\001\022\030\n\024FANTASY_ROLE_SUPPORT\020\002*\212\001\n\022Fan"
    "tasy_Team_Slots\022\025\n\021FANTASY_SLOT_NONE\020\000\022\025"
    "\n\021FANTASY_SLOT_CORE\020\001\022\030\n\024FANTASY_SLOT_SU"
    "PPORT\020\002\022\024\n\020FANTASY_SLOT_ANY\020\003\022\026\n\022FANTASY"
    "_SLOT_BENCH\020\004*\273\002\n\026Fantasy_Selection_Mode"
    "\022\035\n\031FANTASY_SELECTION_INVALID\020\000\022\034\n\030FANTA"
    "SY_SELECTION_LOCKED\020\001\022\035\n\031FANTASY_SELECTI"
    "ON_SHUFFLE\020\002\022\037\n\033FANTASY_SELECTION_FREE_P"
    "ICK\020\003\022\033\n\027FANTASY_SELECTION_ENDED\020\004\022 \n\034FA"
    "NTASY_SELECTION_PRE_SEASON\020\005\022\037\n\033FANTASY_"
    "SELECTION_PRE_DRAFT\020\006\022\036\n\032FANTASY_SELECTI"
    "ON_DRAFTING\020\007\022$\n FANTASY_SELECTION_REGUL"
    "AR_SEASON\020\010*S\n\030Fantasy_Matchup_Interval\022"
    "\032\n\026FANTASY_INTERVAL_DAILY\020\001\022\033\n\027FANTASY_I"
    "NTERVAL_WEEKLY\020\002*\343\001\n\025DOTA_TournamentEven"
    "ts\022\022\n\016TE_FIRST_BLOOD\020\000\022\017\n\013TE_GAME_END\020\001\022"
    "\021\n\rTE_MULTI_KILL\020\002\022\020\n\014TE_HERO_DENY\020\003\022\021\n\r"
    "TE_AEGIS_DENY\020\004\022\023\n\017TE_AEGIS_STOLEN\020\005\022\016\n\n"
    "TE_GODLIKE\020\006\022\023\n\017TE_COURIER_KILL\020\007\022\017\n\013TE_"
    "ECHOSLAM\020\010\022\r\n\tTE_RAPIER\020\t\022\023\n\017TE_EARLY_RO"
    "SHAN\020\n", 28846);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dota_gcmessages_common.proto", &protobuf_RegisterTypes);
  CSODOTAGameAccountClient::default_instance_ = new CSODOTAGameAccountClient();
  CSODOTAPartyMember::default_instance_ = new CSODOTAPartyMember();
  CSODOTAParty::default_instance_ = new CSODOTAParty();
  CSODOTAPartyInvite::default_instance_ = new CSODOTAPartyInvite();
  CSODOTAPartyInvite_PartyMember::default_instance_ = new CSODOTAPartyInvite_PartyMember();
  CMsgDOTAPartyMemberSetCoach::default_instance_ = new CMsgDOTAPartyMemberSetCoach();
  CDOTASaveGame::default_instance_ = new CDOTASaveGame();
  CDOTASaveGame_Player::default_instance_ = new CDOTASaveGame_Player();
  CDOTASaveGame_SaveInstance::default_instance_ = new CDOTASaveGame_SaveInstance();
  CDOTASaveGame_SaveInstance_PlayerPositions::default_instance_ = new CDOTASaveGame_SaveInstance_PlayerPositions();
  CMsgLeaverState::default_instance_ = new CMsgLeaverState();
  CDOTALobbyMember::default_instance_ = new CDOTALobbyMember();
  CDOTALobbyMember_CDOTALobbyMemberXPBonus::default_instance_ = new CDOTALobbyMember_CDOTALobbyMemberXPBonus();
  CDOTALobbyMemberPrivate::default_instance_ = new CDOTALobbyMemberPrivate();
  CLobbyTeamDetails::default_instance_ = new CLobbyTeamDetails();
  CLobbyTimedRewardDetails::default_instance_ = new CLobbyTimedRewardDetails();
  CLobbyBroadcastChannelInfo::default_instance_ = new CLobbyBroadcastChannelInfo();
  CSODOTALobby::default_instance_ = new CSODOTALobby();
  CSODOTALobby_CExtraMsg::default_instance_ = new CSODOTALobby_CExtraMsg();
  CSODOTALobbyInternal::default_instance_ = new CSODOTALobbyInternal();
  CMsgDOTAGenericResult::default_instance_ = new CMsgDOTAGenericResult();
  CMsgDOTABroadcastNotification::default_instance_ = new CMsgDOTABroadcastNotification();
  CMsgDOTAPCBangTimedReward::default_instance_ = new CMsgDOTAPCBangTimedReward();
  CAttribute_String::default_instance_ = new CAttribute_String();
  CAttribute_ItemDynamicRecipeComponent::default_instance_ = new CAttribute_ItemDynamicRecipeComponent();
  CProtoItemSocket::default_instance_ = new CProtoItemSocket();
  CProtoItemSocket_Empty::default_instance_ = new CProtoItemSocket_Empty();
  CProtoItemSocket_Effect::default_instance_ = new CProtoItemSocket_Effect();
  CProtoItemSocket_Color::default_instance_ = new CProtoItemSocket_Color();
  CProtoItemSocket_Strange::default_instance_ = new CProtoItemSocket_Strange();
  CProtoItemSocket_Spectator::default_instance_ = new CProtoItemSocket_Spectator();
  CProtoItemSocket_AnimModifier::default_instance_ = new CProtoItemSocket_AnimModifier();
  CProtoItemSocket_Autograph::default_instance_ = new CProtoItemSocket_Autograph();
  CProtoItemSocket_AbilityEffect::default_instance_ = new CProtoItemSocket_AbilityEffect();
  CProtoItemSocket_StaticVisuals::default_instance_ = new CProtoItemSocket_StaticVisuals();
  CMatchPlayerAbilityUpgrade::default_instance_ = new CMatchPlayerAbilityUpgrade();
  CMatchAdditionalUnitInventory::default_instance_ = new CMatchAdditionalUnitInventory();
  CMatchHeroSelectEvent::default_instance_ = new CMatchHeroSelectEvent();
  CMsgDOTAProcessFantasyScheduledEvent::default_instance_ = new CMsgDOTAProcessFantasyScheduledEvent();
  CSODOTAMapLocationState::default_instance_ = new CSODOTAMapLocationState();
  CMsgNexonPartnerUpdate::default_instance_ = new CMsgNexonPartnerUpdate();
  CMsgMakeOffering::default_instance_ = new CMsgMakeOffering();
  CMsgRequestOfferings::default_instance_ = new CMsgRequestOfferings();
  CMsgRequestOfferingsResponse::default_instance_ = new CMsgRequestOfferingsResponse();
  CMsgRequestOfferingsResponse_NewYearsOffering::default_instance_ = new CMsgRequestOfferingsResponse_NewYearsOffering();
  CMsgLeagueAdminList::default_instance_ = new CMsgLeagueAdminList();
  CMsgPerfectWorldUserLookupRequest::default_instance_ = new CMsgPerfectWorldUserLookupRequest();
  CMsgPerfectWorldUserLookupResponse::default_instance_ = new CMsgPerfectWorldUserLookupResponse();
  CSODOTAGameAccountClient::default_instance_->InitAsDefaultInstance();
  CSODOTAPartyMember::default_instance_->InitAsDefaultInstance();
  CSODOTAParty::default_instance_->InitAsDefaultInstance();
  CSODOTAPartyInvite::default_instance_->InitAsDefaultInstance();
  CSODOTAPartyInvite_PartyMember::default_instance_->InitAsDefaultInstance();
  CMsgDOTAPartyMemberSetCoach::default_instance_->InitAsDefaultInstance();
  CDOTASaveGame::default_instance_->InitAsDefaultInstance();
  CDOTASaveGame_Player::default_instance_->InitAsDefaultInstance();
  CDOTASaveGame_SaveInstance::default_instance_->InitAsDefaultInstance();
  CDOTASaveGame_SaveInstance_PlayerPositions::default_instance_->InitAsDefaultInstance();
  CMsgLeaverState::default_instance_->InitAsDefaultInstance();
  CDOTALobbyMember::default_instance_->InitAsDefaultInstance();
  CDOTALobbyMember_CDOTALobbyMemberXPBonus::default_instance_->InitAsDefaultInstance();
  CDOTALobbyMemberPrivate::default_instance_->InitAsDefaultInstance();
  CLobbyTeamDetails::default_instance_->InitAsDefaultInstance();
  CLobbyTimedRewardDetails::default_instance_->InitAsDefaultInstance();
  CLobbyBroadcastChannelInfo::default_instance_->InitAsDefaultInstance();
  CSODOTALobby::default_instance_->InitAsDefaultInstance();
  CSODOTALobby_CExtraMsg::default_instance_->InitAsDefaultInstance();
  CSODOTALobbyInternal::default_instance_->InitAsDefaultInstance();
  CMsgDOTAGenericResult::default_instance_->InitAsDefaultInstance();
  CMsgDOTABroadcastNotification::default_instance_->InitAsDefaultInstance();
  CMsgDOTAPCBangTimedReward::default_instance_->InitAsDefaultInstance();
  CAttribute_String::default_instance_->InitAsDefaultInstance();
  CAttribute_ItemDynamicRecipeComponent::default_instance_->InitAsDefaultInstance();
  CProtoItemSocket::default_instance_->InitAsDefaultInstance();
  CProtoItemSocket_Empty::default_instance_->InitAsDefaultInstance();
  CProtoItemSocket_Effect::default_instance_->InitAsDefaultInstance();
  CProtoItemSocket_Color::default_instance_->InitAsDefaultInstance();
  CProtoItemSocket_Strange::default_instance_->InitAsDefaultInstance();
  CProtoItemSocket_Spectator::default_instance_->InitAsDefaultInstance();
  CProtoItemSocket_AnimModifier::default_instance_->InitAsDefaultInstance();
  CProtoItemSocket_Autograph::default_instance_->InitAsDefaultInstance();
  CProtoItemSocket_AbilityEffect::default_instance_->InitAsDefaultInstance();
  CProtoItemSocket_StaticVisuals::default_instance_->InitAsDefaultInstance();
  CMatchPlayerAbilityUpgrade::default_instance_->InitAsDefaultInstance();
  CMatchAdditionalUnitInventory::default_instance_->InitAsDefaultInstance();
  CMatchHeroSelectEvent::default_instance_->InitAsDefaultInstance();
  CMsgDOTAProcessFantasyScheduledEvent::default_instance_->InitAsDefaultInstance();
  CSODOTAMapLocationState::default_instance_->InitAsDefaultInstance();
  CMsgNexonPartnerUpdate::default_instance_->InitAsDefaultInstance();
  CMsgMakeOffering::default_instance_->InitAsDefaultInstance();
  CMsgRequestOfferings::default_instance_->InitAsDefaultInstance();
  CMsgRequestOfferingsResponse::default_instance_->InitAsDefaultInstance();
  CMsgRequestOfferingsResponse_NewYearsOffering::default_instance_->InitAsDefaultInstance();
  CMsgLeagueAdminList::default_instance_->InitAsDefaultInstance();
  CMsgPerfectWorldUserLookupRequest::default_instance_->InitAsDefaultInstance();
  CMsgPerfectWorldUserLookupResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dota_5fgcmessages_5fcommon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dota_5fgcmessages_5fcommon_2eproto {
  StaticDescriptorInitializer_dota_5fgcmessages_5fcommon_2eproto() {
    protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  }
} static_descriptor_initializer_dota_5fgcmessages_5fcommon_2eproto_;

const ::google::protobuf::EnumDescriptor* EDOTAGCMsg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDOTAGCMsg_descriptor_;
}
bool EDOTAGCMsg_IsValid(int value) {
  switch(value) {
    case 7000:
    case 7001:
    case 7004:
    case 7005:
    case 7009:
    case 7010:
    case 7013:
    case 7014:
    case 7017:
    case 7026:
    case 7027:
    case 7028:
    case 7031:
    case 7032:
    case 7033:
    case 7034:
    case 7035:
    case 7036:
    case 7038:
    case 7040:
    case 7041:
    case 7042:
    case 7043:
    case 7044:
    case 7046:
    case 7047:
    case 7049:
    case 7051:
    case 7052:
    case 7055:
    case 7056:
    case 7057:
    case 7060:
    case 7061:
    case 7064:
    case 7065:
    case 7068:
    case 7069:
    case 7070:
    case 7071:
    case 7072:
    case 7073:
    case 7074:
    case 7075:
    case 7076:
    case 7077:
    case 7078:
    case 7079:
    case 7080:
    case 7081:
    case 7082:
    case 7083:
    case 7084:
    case 7085:
    case 7086:
    case 7087:
    case 7088:
    case 7089:
    case 7090:
    case 7091:
    case 7092:
    case 7093:
    case 7094:
    case 7095:
    case 7096:
    case 7097:
    case 7098:
    case 7099:
    case 7102:
    case 7104:
    case 7108:
    case 7111:
    case 7112:
    case 7113:
    case 7114:
    case 7115:
    case 7116:
    case 7117:
    case 7118:
    case 7119:
    case 7120:
    case 7121:
    case 7122:
    case 7123:
    case 7124:
    case 7125:
    case 7126:
    case 7127:
    case 7128:
    case 7129:
    case 7130:
    case 7131:
    case 7132:
    case 7133:
    case 7134:
    case 7139:
    case 7140:
    case 7141:
    case 7142:
    case 7143:
    case 7144:
    case 7145:
    case 7147:
    case 7148:
    case 7149:
    case 7150:
    case 7151:
    case 7152:
    case 7153:
    case 7154:
    case 7155:
    case 7156:
    case 7157:
    case 7158:
    case 7159:
    case 7160:
    case 7161:
    case 7164:
    case 7165:
    case 7166:
    case 7167:
    case 7168:
    case 7169:
    case 7170:
    case 7171:
    case 7172:
    case 7173:
    case 7174:
    case 7176:
    case 7177:
    case 7178:
    case 7179:
    case 7180:
    case 7182:
    case 7183:
    case 7184:
    case 7185:
    case 7186:
    case 7187:
    case 7188:
    case 7189:
    case 7190:
    case 7191:
    case 7192:
    case 7193:
    case 7194:
    case 7195:
    case 7196:
    case 7197:
    case 7198:
    case 7199:
    case 7200:
    case 7201:
    case 7203:
    case 7204:
    case 7205:
    case 7206:
    case 7207:
    case 7208:
    case 7209:
    case 7210:
    case 7211:
    case 7212:
    case 7215:
    case 7216:
    case 7217:
    case 7218:
    case 7219:
    case 7220:
    case 7221:
    case 7222:
    case 7223:
    case 7224:
    case 7225:
    case 7226:
    case 7227:
    case 7228:
    case 7229:
    case 7230:
    case 7231:
    case 7232:
    case 7233:
    case 7234:
    case 7235:
    case 7236:
    case 7237:
    case 7238:
    case 7239:
    case 7240:
    case 7241:
    case 7242:
    case 7245:
    case 7246:
    case 7247:
    case 7248:
    case 7249:
    case 7251:
    case 7253:
    case 7254:
    case 7255:
    case 7256:
    case 7257:
    case 7258:
    case 7259:
    case 7261:
    case 7262:
    case 7263:
    case 7264:
    case 7265:
    case 7266:
    case 7267:
    case 7268:
    case 7269:
    case 7270:
    case 7272:
    case 7273:
    case 7274:
    case 7275:
    case 7279:
    case 7280:
    case 7281:
    case 7282:
    case 7283:
    case 7284:
    case 7285:
    case 7286:
    case 7287:
    case 7288:
    case 7289:
    case 7290:
    case 7291:
    case 7292:
    case 7293:
    case 7294:
    case 7297:
    case 7298:
    case 7299:
    case 7300:
    case 7301:
    case 7302:
    case 7303:
    case 7304:
    case 7305:
    case 7306:
    case 7307:
    case 7308:
    case 7309:
    case 7310:
    case 7311:
    case 7312:
    case 7313:
    case 7314:
    case 7315:
    case 7316:
    case 7317:
    case 7318:
    case 7319:
    case 7320:
    case 7321:
    case 7322:
    case 7323:
    case 7324:
    case 7325:
    case 7326:
    case 7327:
    case 7328:
    case 7329:
    case 7330:
    case 7331:
    case 7332:
    case 7333:
    case 7334:
    case 7335:
    case 7336:
    case 7337:
    case 7338:
    case 7339:
    case 7340:
    case 7341:
    case 7342:
    case 7343:
    case 7344:
    case 7345:
    case 7346:
    case 7347:
    case 7348:
    case 7349:
    case 7350:
    case 7351:
    case 7352:
    case 7353:
    case 7354:
    case 7355:
    case 7356:
    case 7357:
    case 7358:
    case 7359:
    case 7360:
    case 7361:
    case 7362:
    case 7363:
    case 7364:
    case 7365:
    case 7366:
    case 7367:
    case 7368:
    case 7369:
    case 7370:
    case 7371:
    case 7372:
    case 7373:
    case 7374:
    case 7375:
    case 7376:
    case 7377:
    case 7378:
    case 7379:
    case 7380:
    case 7381:
    case 7382:
    case 7383:
    case 7384:
    case 7385:
    case 7386:
    case 7387:
    case 7388:
    case 7389:
    case 7390:
    case 7393:
    case 7394:
    case 7395:
    case 7396:
    case 7397:
    case 7398:
    case 7399:
    case 7400:
    case 7401:
    case 7402:
    case 7403:
    case 7404:
    case 7405:
    case 7406:
    case 7407:
    case 7408:
    case 7409:
    case 7410:
    case 7411:
    case 7412:
    case 7413:
    case 7414:
    case 7415:
    case 7416:
    case 7417:
    case 7418:
    case 7420:
    case 7421:
    case 7422:
    case 7423:
    case 7424:
    case 7425:
    case 7426:
    case 7427:
    case 7428:
    case 7429:
    case 7430:
    case 7431:
    case 7432:
    case 7433:
    case 7434:
    case 7435:
    case 7436:
    case 7437:
    case 7438:
    case 7439:
    case 7440:
    case 7441:
    case 7442:
    case 7443:
    case 7444:
    case 7445:
    case 7446:
    case 7447:
    case 7448:
    case 7449:
    case 7450:
    case 7451:
    case 7452:
    case 7453:
    case 7454:
    case 7455:
    case 7456:
    case 7457:
    case 7458:
    case 7459:
    case 7460:
    case 7461:
    case 7462:
    case 7463:
    case 8001:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_GameMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTA_GameMode_descriptor_;
}
bool DOTA_GameMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_GameState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTA_GameState_descriptor_;
}
bool DOTA_GameState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_GC_TEAM_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTA_GC_TEAM_descriptor_;
}
bool DOTA_GC_TEAM_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_CM_PICK_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTA_CM_PICK_descriptor_;
}
bool DOTA_CM_PICK_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTAConnectionState_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTAConnectionState_t_descriptor_;
}
bool DOTAConnectionState_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTALeaverStatus_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTALeaverStatus_t_descriptor_;
}
bool DOTALeaverStatus_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTALowPriorityBanType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTALowPriorityBanType_descriptor_;
}
bool DOTALowPriorityBanType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTALobbyReadyState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTALobbyReadyState_descriptor_;
}
bool DOTALobbyReadyState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTAGameVersion_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTAGameVersion_descriptor_;
}
bool DOTAGameVersion_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTAJoinLobbyResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTAJoinLobbyResult_descriptor_;
}
bool DOTAJoinLobbyResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTAMatchVote_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTAMatchVote_descriptor_;
}
bool DOTAMatchVote_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_LobbyMemberXPBonus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTA_LobbyMemberXPBonus_descriptor_;
}
bool DOTA_LobbyMemberXPBonus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LobbyDotaTVDelay_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LobbyDotaTVDelay_descriptor_;
}
bool LobbyDotaTVDelay_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDOTAGCSessionNeed_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDOTAGCSessionNeed_descriptor_;
}
bool EDOTAGCSessionNeed_IsValid(int value) {
  switch(value) {
    case 0:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 200:
    case 201:
    case 202:
    case 203:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Fantasy_Roles_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fantasy_Roles_descriptor_;
}
bool Fantasy_Roles_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Fantasy_Team_Slots_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fantasy_Team_Slots_descriptor_;
}
bool Fantasy_Team_Slots_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Fantasy_Selection_Mode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fantasy_Selection_Mode_descriptor_;
}
bool Fantasy_Selection_Mode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Fantasy_Matchup_Interval_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fantasy_Matchup_Interval_descriptor_;
}
bool Fantasy_Matchup_Interval_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_TournamentEvents_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTA_TournamentEvents_descriptor_;
}
bool DOTA_TournamentEvents_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CSODOTAGameAccountClient::kAccountIdFieldNumber;
const int CSODOTAGameAccountClient::kWinsFieldNumber;
const int CSODOTAGameAccountClient::kLossesFieldNumber;
const int CSODOTAGameAccountClient::kXpFieldNumber;
const int CSODOTAGameAccountClient::kLevelFieldNumber;
const int CSODOTAGameAccountClient::kInitialSkillFieldNumber;
const int CSODOTAGameAccountClient::kLeaverCountFieldNumber;
const int CSODOTAGameAccountClient::kSecondaryLeaverCountFieldNumber;
const int CSODOTAGameAccountClient::kLowPriorityUntilDateFieldNumber;
const int CSODOTAGameAccountClient::kPreventTextChatUntilDateFieldNumber;
const int CSODOTAGameAccountClient::kPreventVoiceUntilDateFieldNumber;
const int CSODOTAGameAccountClient::kLastAbandonedGameDateFieldNumber;
const int CSODOTAGameAccountClient::kLastSecondaryAbandonedGameDateFieldNumber;
const int CSODOTAGameAccountClient::kLeaverPenaltyCountFieldNumber;
const int CSODOTAGameAccountClient::kCompletedGameStreakFieldNumber;
const int CSODOTAGameAccountClient::kTeachingFieldNumber;
const int CSODOTAGameAccountClient::kLeadershipFieldNumber;
const int CSODOTAGameAccountClient::kFriendlyFieldNumber;
const int CSODOTAGameAccountClient::kForgivingFieldNumber;
const int CSODOTAGameAccountClient::kAccountDisabledUntilDateFieldNumber;
const int CSODOTAGameAccountClient::kAccountDisabledCountFieldNumber;
const int CSODOTAGameAccountClient::kShowcaseHeroIdFieldNumber;
const int CSODOTAGameAccountClient::kMatchDisabledUntilDateFieldNumber;
const int CSODOTAGameAccountClient::kMatchDisabledCountFieldNumber;
const int CSODOTAGameAccountClient::kPartnerAccountTypeFieldNumber;
const int CSODOTAGameAccountClient::kPartnerAccountStateFieldNumber;
const int CSODOTAGameAccountClient::kShutdownlawterminatetimestampFieldNumber;
const int CSODOTAGameAccountClient::kLowPriorityGamesRemainingFieldNumber;
const int CSODOTAGameAccountClient::kCompetitiveRankFieldNumber;
const int CSODOTAGameAccountClient::kCalibrationGamesRemainingFieldNumber;
const int CSODOTAGameAccountClient::kSoloCompetitiveRankFieldNumber;
const int CSODOTAGameAccountClient::kSoloCalibrationGamesRemainingFieldNumber;
const int CSODOTAGameAccountClient::kRecruitmentLevelFieldNumber;
const int CSODOTAGameAccountClient::kHasNewNotificationsFieldNumber;
const int CSODOTAGameAccountClient::kIsLeagueAdminFieldNumber;
const int CSODOTAGameAccountClient::kCasualGamesPlayedFieldNumber;
const int CSODOTAGameAccountClient::kSoloCompetitiveGamesPlayedFieldNumber;
const int CSODOTAGameAccountClient::kPartyCompetitiveGamesPlayedFieldNumber;
#endif  // !_MSC_VER

CSODOTAGameAccountClient::CSODOTAGameAccountClient()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSODOTAGameAccountClient::InitAsDefaultInstance() {
}

CSODOTAGameAccountClient::CSODOTAGameAccountClient(const CSODOTAGameAccountClient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSODOTAGameAccountClient::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  wins_ = 0u;
  losses_ = 0u;
  xp_ = 0u;
  level_ = 0u;
  initial_skill_ = 0u;
  leaver_count_ = 0u;
  secondary_leaver_count_ = 0u;
  low_priority_until_date_ = 0u;
  prevent_text_chat_until_date_ = 0u;
  prevent_voice_until_date_ = 0u;
  last_abandoned_game_date_ = 0u;
  last_secondary_abandoned_game_date_ = 0u;
  leaver_penalty_count_ = 0u;
  completed_game_streak_ = 0u;
  teaching_ = 0u;
  leadership_ = 0u;
  friendly_ = 0u;
  forgiving_ = 0u;
  account_disabled_until_date_ = 0u;
  account_disabled_count_ = 0u;
  showcase_hero_id_ = 0u;
  match_disabled_until_date_ = 0u;
  match_disabled_count_ = 0u;
  partner_account_type_ = 0;
  partner_account_state_ = 0u;
  shutdownlawterminatetimestamp_ = 0u;
  low_priority_games_remaining_ = 0u;
  competitive_rank_ = 0u;
  calibration_games_remaining_ = 0u;
  solo_competitive_rank_ = 0u;
  solo_calibration_games_remaining_ = 0u;
  recruitment_level_ = 0u;
  has_new_notifications_ = false;
  is_league_admin_ = false;
  casual_games_played_ = 0u;
  solo_competitive_games_played_ = 0u;
  party_competitive_games_played_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSODOTAGameAccountClient::~CSODOTAGameAccountClient() {
  SharedDtor();
}

void CSODOTAGameAccountClient::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSODOTAGameAccountClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSODOTAGameAccountClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSODOTAGameAccountClient_descriptor_;
}

const CSODOTAGameAccountClient& CSODOTAGameAccountClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CSODOTAGameAccountClient* CSODOTAGameAccountClient::default_instance_ = NULL;

CSODOTAGameAccountClient* CSODOTAGameAccountClient::New() const {
  return new CSODOTAGameAccountClient;
}

void CSODOTAGameAccountClient::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    wins_ = 0u;
    losses_ = 0u;
    xp_ = 0u;
    level_ = 0u;
    initial_skill_ = 0u;
    leaver_count_ = 0u;
    secondary_leaver_count_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    low_priority_until_date_ = 0u;
    prevent_text_chat_until_date_ = 0u;
    prevent_voice_until_date_ = 0u;
    last_abandoned_game_date_ = 0u;
    last_secondary_abandoned_game_date_ = 0u;
    leaver_penalty_count_ = 0u;
    completed_game_streak_ = 0u;
    teaching_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    leadership_ = 0u;
    friendly_ = 0u;
    forgiving_ = 0u;
    account_disabled_until_date_ = 0u;
    account_disabled_count_ = 0u;
    showcase_hero_id_ = 0u;
    match_disabled_until_date_ = 0u;
    match_disabled_count_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    partner_account_type_ = 0;
    partner_account_state_ = 0u;
    shutdownlawterminatetimestamp_ = 0u;
    low_priority_games_remaining_ = 0u;
    competitive_rank_ = 0u;
    calibration_games_remaining_ = 0u;
    solo_competitive_rank_ = 0u;
    solo_calibration_games_remaining_ = 0u;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    recruitment_level_ = 0u;
    has_new_notifications_ = false;
    is_league_admin_ = false;
    casual_games_played_ = 0u;
    solo_competitive_games_played_ = 0u;
    party_competitive_games_played_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSODOTAGameAccountClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wins;
        break;
      }
      
      // optional uint32 wins = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wins_)));
          set_has_wins();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_losses;
        break;
      }
      
      // optional uint32 losses = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_losses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &losses_)));
          set_has_losses();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_xp;
        break;
      }
      
      // optional uint32 xp = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xp_)));
          set_has_xp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_initial_skill;
        break;
      }
      
      // optional uint32 initial_skill = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_initial_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &initial_skill_)));
          set_has_initial_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_leaver_count;
        break;
      }
      
      // optional uint32 leaver_count = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leaver_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leaver_count_)));
          set_has_leaver_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_low_priority_until_date;
        break;
      }
      
      // optional uint32 low_priority_until_date = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_low_priority_until_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &low_priority_until_date_)));
          set_has_low_priority_until_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_prevent_text_chat_until_date;
        break;
      }
      
      // optional uint32 prevent_text_chat_until_date = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prevent_text_chat_until_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prevent_text_chat_until_date_)));
          set_has_prevent_text_chat_until_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_prevent_voice_until_date;
        break;
      }
      
      // optional uint32 prevent_voice_until_date = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prevent_voice_until_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prevent_voice_until_date_)));
          set_has_prevent_voice_until_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_last_abandoned_game_date;
        break;
      }
      
      // optional uint32 last_abandoned_game_date = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_abandoned_game_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_abandoned_game_date_)));
          set_has_last_abandoned_game_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_leaver_penalty_count;
        break;
      }
      
      // optional uint32 leaver_penalty_count = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leaver_penalty_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leaver_penalty_count_)));
          set_has_leaver_penalty_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_completed_game_streak;
        break;
      }
      
      // optional uint32 completed_game_streak = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_completed_game_streak:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &completed_game_streak_)));
          set_has_completed_game_streak();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_teaching;
        break;
      }
      
      // optional uint32 teaching = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teaching:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teaching_)));
          set_has_teaching();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_leadership;
        break;
      }
      
      // optional uint32 leadership = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leadership:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leadership_)));
          set_has_leadership();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_friendly;
        break;
      }
      
      // optional uint32 friendly = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friendly:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friendly_)));
          set_has_friendly();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_forgiving;
        break;
      }
      
      // optional uint32 forgiving = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forgiving:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forgiving_)));
          set_has_forgiving();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_account_disabled_until_date;
        break;
      }
      
      // optional uint32 account_disabled_until_date = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_disabled_until_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_disabled_until_date_)));
          set_has_account_disabled_until_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_account_disabled_count;
        break;
      }
      
      // optional uint32 account_disabled_count = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_disabled_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_disabled_count_)));
          set_has_account_disabled_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_showcase_hero_id;
        break;
      }
      
      // optional uint32 showcase_hero_id = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_showcase_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &showcase_hero_id_)));
          set_has_showcase_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_match_disabled_until_date;
        break;
      }
      
      // optional uint32 match_disabled_until_date = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_disabled_until_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_disabled_until_date_)));
          set_has_match_disabled_until_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_match_disabled_count;
        break;
      }
      
      // optional uint32 match_disabled_count = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_disabled_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_disabled_count_)));
          set_has_match_disabled_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_partner_account_type;
        break;
      }
      
      // optional .PartnerAccountType partner_account_type = 44 [default = PARTNER_NONE];
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partner_account_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (PartnerAccountType_IsValid(value)) {
            set_partner_account_type(static_cast< PartnerAccountType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(44, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_partner_account_state;
        break;
      }
      
      // optional uint32 partner_account_state = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partner_account_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &partner_account_state_)));
          set_has_partner_account_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(376)) goto parse_shutdownlawterminatetimestamp;
        break;
      }
      
      // optional uint32 shutdownlawterminatetimestamp = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shutdownlawterminatetimestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shutdownlawterminatetimestamp_)));
          set_has_shutdownlawterminatetimestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_low_priority_games_remaining;
        break;
      }
      
      // optional uint32 low_priority_games_remaining = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_low_priority_games_remaining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &low_priority_games_remaining_)));
          set_has_low_priority_games_remaining();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_competitive_rank;
        break;
      }
      
      // optional uint32 competitive_rank = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_competitive_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &competitive_rank_)));
          set_has_competitive_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_calibration_games_remaining;
        break;
      }
      
      // optional uint32 calibration_games_remaining = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_calibration_games_remaining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &calibration_games_remaining_)));
          set_has_calibration_games_remaining();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_solo_competitive_rank;
        break;
      }
      
      // optional uint32 solo_competitive_rank = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_solo_competitive_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &solo_competitive_rank_)));
          set_has_solo_competitive_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(432)) goto parse_solo_calibration_games_remaining;
        break;
      }
      
      // optional uint32 solo_calibration_games_remaining = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_solo_calibration_games_remaining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &solo_calibration_games_remaining_)));
          set_has_solo_calibration_games_remaining();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(440)) goto parse_recruitment_level;
        break;
      }
      
      // optional uint32 recruitment_level = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recruitment_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recruitment_level_)));
          set_has_recruitment_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(448)) goto parse_has_new_notifications;
        break;
      }
      
      // optional bool has_new_notifications = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_new_notifications:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_new_notifications_)));
          set_has_has_new_notifications();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(456)) goto parse_is_league_admin;
        break;
      }
      
      // optional bool is_league_admin = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_league_admin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_league_admin_)));
          set_has_is_league_admin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(464)) goto parse_secondary_leaver_count;
        break;
      }
      
      // optional uint32 secondary_leaver_count = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_secondary_leaver_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondary_leaver_count_)));
          set_has_secondary_leaver_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(472)) goto parse_last_secondary_abandoned_game_date;
        break;
      }
      
      // optional uint32 last_secondary_abandoned_game_date = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_secondary_abandoned_game_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_secondary_abandoned_game_date_)));
          set_has_last_secondary_abandoned_game_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_casual_games_played;
        break;
      }
      
      // optional uint32 casual_games_played = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_casual_games_played:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &casual_games_played_)));
          set_has_casual_games_played();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(488)) goto parse_solo_competitive_games_played;
        break;
      }
      
      // optional uint32 solo_competitive_games_played = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_solo_competitive_games_played:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &solo_competitive_games_played_)));
          set_has_solo_competitive_games_played();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(496)) goto parse_party_competitive_games_played;
        break;
      }
      
      // optional uint32 party_competitive_games_played = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_party_competitive_games_played:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &party_competitive_games_played_)));
          set_has_party_competitive_games_played();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSODOTAGameAccountClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }
  
  // optional uint32 wins = 3;
  if (has_wins()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->wins(), output);
  }
  
  // optional uint32 losses = 4;
  if (has_losses()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->losses(), output);
  }
  
  // optional uint32 xp = 12;
  if (has_xp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->xp(), output);
  }
  
  // optional uint32 level = 13;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->level(), output);
  }
  
  // optional uint32 initial_skill = 14;
  if (has_initial_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->initial_skill(), output);
  }
  
  // optional uint32 leaver_count = 15;
  if (has_leaver_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->leaver_count(), output);
  }
  
  // optional uint32 low_priority_until_date = 18;
  if (has_low_priority_until_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->low_priority_until_date(), output);
  }
  
  // optional uint32 prevent_text_chat_until_date = 20;
  if (has_prevent_text_chat_until_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->prevent_text_chat_until_date(), output);
  }
  
  // optional uint32 prevent_voice_until_date = 21;
  if (has_prevent_voice_until_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->prevent_voice_until_date(), output);
  }
  
  // optional uint32 last_abandoned_game_date = 22;
  if (has_last_abandoned_game_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->last_abandoned_game_date(), output);
  }
  
  // optional uint32 leaver_penalty_count = 23;
  if (has_leaver_penalty_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->leaver_penalty_count(), output);
  }
  
  // optional uint32 completed_game_streak = 24;
  if (has_completed_game_streak()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->completed_game_streak(), output);
  }
  
  // optional uint32 teaching = 28;
  if (has_teaching()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->teaching(), output);
  }
  
  // optional uint32 leadership = 29;
  if (has_leadership()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->leadership(), output);
  }
  
  // optional uint32 friendly = 30;
  if (has_friendly()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->friendly(), output);
  }
  
  // optional uint32 forgiving = 31;
  if (has_forgiving()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->forgiving(), output);
  }
  
  // optional uint32 account_disabled_until_date = 38;
  if (has_account_disabled_until_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->account_disabled_until_date(), output);
  }
  
  // optional uint32 account_disabled_count = 39;
  if (has_account_disabled_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->account_disabled_count(), output);
  }
  
  // optional uint32 showcase_hero_id = 40;
  if (has_showcase_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->showcase_hero_id(), output);
  }
  
  // optional uint32 match_disabled_until_date = 41;
  if (has_match_disabled_until_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->match_disabled_until_date(), output);
  }
  
  // optional uint32 match_disabled_count = 42;
  if (has_match_disabled_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->match_disabled_count(), output);
  }
  
  // optional .PartnerAccountType partner_account_type = 44 [default = PARTNER_NONE];
  if (has_partner_account_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      44, this->partner_account_type(), output);
  }
  
  // optional uint32 partner_account_state = 45;
  if (has_partner_account_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->partner_account_state(), output);
  }
  
  // optional uint32 shutdownlawterminatetimestamp = 47;
  if (has_shutdownlawterminatetimestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->shutdownlawterminatetimestamp(), output);
  }
  
  // optional uint32 low_priority_games_remaining = 48;
  if (has_low_priority_games_remaining()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(48, this->low_priority_games_remaining(), output);
  }
  
  // optional uint32 competitive_rank = 49;
  if (has_competitive_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->competitive_rank(), output);
  }
  
  // optional uint32 calibration_games_remaining = 51;
  if (has_calibration_games_remaining()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(51, this->calibration_games_remaining(), output);
  }
  
  // optional uint32 solo_competitive_rank = 52;
  if (has_solo_competitive_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(52, this->solo_competitive_rank(), output);
  }
  
  // optional uint32 solo_calibration_games_remaining = 54;
  if (has_solo_calibration_games_remaining()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(54, this->solo_calibration_games_remaining(), output);
  }
  
  // optional uint32 recruitment_level = 55;
  if (has_recruitment_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(55, this->recruitment_level(), output);
  }
  
  // optional bool has_new_notifications = 56;
  if (has_has_new_notifications()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(56, this->has_new_notifications(), output);
  }
  
  // optional bool is_league_admin = 57;
  if (has_is_league_admin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(57, this->is_league_admin(), output);
  }
  
  // optional uint32 secondary_leaver_count = 58;
  if (has_secondary_leaver_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(58, this->secondary_leaver_count(), output);
  }
  
  // optional uint32 last_secondary_abandoned_game_date = 59;
  if (has_last_secondary_abandoned_game_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(59, this->last_secondary_abandoned_game_date(), output);
  }
  
  // optional uint32 casual_games_played = 60;
  if (has_casual_games_played()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(60, this->casual_games_played(), output);
  }
  
  // optional uint32 solo_competitive_games_played = 61;
  if (has_solo_competitive_games_played()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(61, this->solo_competitive_games_played(), output);
  }
  
  // optional uint32 party_competitive_games_played = 62;
  if (has_party_competitive_games_played()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(62, this->party_competitive_games_played(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSODOTAGameAccountClient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }
  
  // optional uint32 wins = 3;
  if (has_wins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->wins(), target);
  }
  
  // optional uint32 losses = 4;
  if (has_losses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->losses(), target);
  }
  
  // optional uint32 xp = 12;
  if (has_xp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->xp(), target);
  }
  
  // optional uint32 level = 13;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->level(), target);
  }
  
  // optional uint32 initial_skill = 14;
  if (has_initial_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->initial_skill(), target);
  }
  
  // optional uint32 leaver_count = 15;
  if (has_leaver_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->leaver_count(), target);
  }
  
  // optional uint32 low_priority_until_date = 18;
  if (has_low_priority_until_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->low_priority_until_date(), target);
  }
  
  // optional uint32 prevent_text_chat_until_date = 20;
  if (has_prevent_text_chat_until_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->prevent_text_chat_until_date(), target);
  }
  
  // optional uint32 prevent_voice_until_date = 21;
  if (has_prevent_voice_until_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->prevent_voice_until_date(), target);
  }
  
  // optional uint32 last_abandoned_game_date = 22;
  if (has_last_abandoned_game_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->last_abandoned_game_date(), target);
  }
  
  // optional uint32 leaver_penalty_count = 23;
  if (has_leaver_penalty_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->leaver_penalty_count(), target);
  }
  
  // optional uint32 completed_game_streak = 24;
  if (has_completed_game_streak()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->completed_game_streak(), target);
  }
  
  // optional uint32 teaching = 28;
  if (has_teaching()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->teaching(), target);
  }
  
  // optional uint32 leadership = 29;
  if (has_leadership()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->leadership(), target);
  }
  
  // optional uint32 friendly = 30;
  if (has_friendly()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->friendly(), target);
  }
  
  // optional uint32 forgiving = 31;
  if (has_forgiving()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->forgiving(), target);
  }
  
  // optional uint32 account_disabled_until_date = 38;
  if (has_account_disabled_until_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->account_disabled_until_date(), target);
  }
  
  // optional uint32 account_disabled_count = 39;
  if (has_account_disabled_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->account_disabled_count(), target);
  }
  
  // optional uint32 showcase_hero_id = 40;
  if (has_showcase_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->showcase_hero_id(), target);
  }
  
  // optional uint32 match_disabled_until_date = 41;
  if (has_match_disabled_until_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(41, this->match_disabled_until_date(), target);
  }
  
  // optional uint32 match_disabled_count = 42;
  if (has_match_disabled_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->match_disabled_count(), target);
  }
  
  // optional .PartnerAccountType partner_account_type = 44 [default = PARTNER_NONE];
  if (has_partner_account_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      44, this->partner_account_type(), target);
  }
  
  // optional uint32 partner_account_state = 45;
  if (has_partner_account_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(45, this->partner_account_state(), target);
  }
  
  // optional uint32 shutdownlawterminatetimestamp = 47;
  if (has_shutdownlawterminatetimestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(47, this->shutdownlawterminatetimestamp(), target);
  }
  
  // optional uint32 low_priority_games_remaining = 48;
  if (has_low_priority_games_remaining()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(48, this->low_priority_games_remaining(), target);
  }
  
  // optional uint32 competitive_rank = 49;
  if (has_competitive_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(49, this->competitive_rank(), target);
  }
  
  // optional uint32 calibration_games_remaining = 51;
  if (has_calibration_games_remaining()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(51, this->calibration_games_remaining(), target);
  }
  
  // optional uint32 solo_competitive_rank = 52;
  if (has_solo_competitive_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(52, this->solo_competitive_rank(), target);
  }
  
  // optional uint32 solo_calibration_games_remaining = 54;
  if (has_solo_calibration_games_remaining()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(54, this->solo_calibration_games_remaining(), target);
  }
  
  // optional uint32 recruitment_level = 55;
  if (has_recruitment_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(55, this->recruitment_level(), target);
  }
  
  // optional bool has_new_notifications = 56;
  if (has_has_new_notifications()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(56, this->has_new_notifications(), target);
  }
  
  // optional bool is_league_admin = 57;
  if (has_is_league_admin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(57, this->is_league_admin(), target);
  }
  
  // optional uint32 secondary_leaver_count = 58;
  if (has_secondary_leaver_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(58, this->secondary_leaver_count(), target);
  }
  
  // optional uint32 last_secondary_abandoned_game_date = 59;
  if (has_last_secondary_abandoned_game_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(59, this->last_secondary_abandoned_game_date(), target);
  }
  
  // optional uint32 casual_games_played = 60;
  if (has_casual_games_played()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(60, this->casual_games_played(), target);
  }
  
  // optional uint32 solo_competitive_games_played = 61;
  if (has_solo_competitive_games_played()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(61, this->solo_competitive_games_played(), target);
  }
  
  // optional uint32 party_competitive_games_played = 62;
  if (has_party_competitive_games_played()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(62, this->party_competitive_games_played(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSODOTAGameAccountClient::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
    // optional uint32 wins = 3;
    if (has_wins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wins());
    }
    
    // optional uint32 losses = 4;
    if (has_losses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->losses());
    }
    
    // optional uint32 xp = 12;
    if (has_xp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xp());
    }
    
    // optional uint32 level = 13;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // optional uint32 initial_skill = 14;
    if (has_initial_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->initial_skill());
    }
    
    // optional uint32 leaver_count = 15;
    if (has_leaver_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leaver_count());
    }
    
    // optional uint32 secondary_leaver_count = 58;
    if (has_secondary_leaver_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->secondary_leaver_count());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 low_priority_until_date = 18;
    if (has_low_priority_until_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->low_priority_until_date());
    }
    
    // optional uint32 prevent_text_chat_until_date = 20;
    if (has_prevent_text_chat_until_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prevent_text_chat_until_date());
    }
    
    // optional uint32 prevent_voice_until_date = 21;
    if (has_prevent_voice_until_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prevent_voice_until_date());
    }
    
    // optional uint32 last_abandoned_game_date = 22;
    if (has_last_abandoned_game_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_abandoned_game_date());
    }
    
    // optional uint32 last_secondary_abandoned_game_date = 59;
    if (has_last_secondary_abandoned_game_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_secondary_abandoned_game_date());
    }
    
    // optional uint32 leaver_penalty_count = 23;
    if (has_leaver_penalty_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leaver_penalty_count());
    }
    
    // optional uint32 completed_game_streak = 24;
    if (has_completed_game_streak()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->completed_game_streak());
    }
    
    // optional uint32 teaching = 28;
    if (has_teaching()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teaching());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 leadership = 29;
    if (has_leadership()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leadership());
    }
    
    // optional uint32 friendly = 30;
    if (has_friendly()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friendly());
    }
    
    // optional uint32 forgiving = 31;
    if (has_forgiving()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forgiving());
    }
    
    // optional uint32 account_disabled_until_date = 38;
    if (has_account_disabled_until_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_disabled_until_date());
    }
    
    // optional uint32 account_disabled_count = 39;
    if (has_account_disabled_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_disabled_count());
    }
    
    // optional uint32 showcase_hero_id = 40;
    if (has_showcase_hero_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->showcase_hero_id());
    }
    
    // optional uint32 match_disabled_until_date = 41;
    if (has_match_disabled_until_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_disabled_until_date());
    }
    
    // optional uint32 match_disabled_count = 42;
    if (has_match_disabled_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_disabled_count());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .PartnerAccountType partner_account_type = 44 [default = PARTNER_NONE];
    if (has_partner_account_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->partner_account_type());
    }
    
    // optional uint32 partner_account_state = 45;
    if (has_partner_account_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->partner_account_state());
    }
    
    // optional uint32 shutdownlawterminatetimestamp = 47;
    if (has_shutdownlawterminatetimestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shutdownlawterminatetimestamp());
    }
    
    // optional uint32 low_priority_games_remaining = 48;
    if (has_low_priority_games_remaining()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->low_priority_games_remaining());
    }
    
    // optional uint32 competitive_rank = 49;
    if (has_competitive_rank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->competitive_rank());
    }
    
    // optional uint32 calibration_games_remaining = 51;
    if (has_calibration_games_remaining()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->calibration_games_remaining());
    }
    
    // optional uint32 solo_competitive_rank = 52;
    if (has_solo_competitive_rank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->solo_competitive_rank());
    }
    
    // optional uint32 solo_calibration_games_remaining = 54;
    if (has_solo_calibration_games_remaining()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->solo_calibration_games_remaining());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 recruitment_level = 55;
    if (has_recruitment_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recruitment_level());
    }
    
    // optional bool has_new_notifications = 56;
    if (has_has_new_notifications()) {
      total_size += 2 + 1;
    }
    
    // optional bool is_league_admin = 57;
    if (has_is_league_admin()) {
      total_size += 2 + 1;
    }
    
    // optional uint32 casual_games_played = 60;
    if (has_casual_games_played()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->casual_games_played());
    }
    
    // optional uint32 solo_competitive_games_played = 61;
    if (has_solo_competitive_games_played()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->solo_competitive_games_played());
    }
    
    // optional uint32 party_competitive_games_played = 62;
    if (has_party_competitive_games_played()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->party_competitive_games_played());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSODOTAGameAccountClient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSODOTAGameAccountClient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSODOTAGameAccountClient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSODOTAGameAccountClient::MergeFrom(const CSODOTAGameAccountClient& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_wins()) {
      set_wins(from.wins());
    }
    if (from.has_losses()) {
      set_losses(from.losses());
    }
    if (from.has_xp()) {
      set_xp(from.xp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_initial_skill()) {
      set_initial_skill(from.initial_skill());
    }
    if (from.has_leaver_count()) {
      set_leaver_count(from.leaver_count());
    }
    if (from.has_secondary_leaver_count()) {
      set_secondary_leaver_count(from.secondary_leaver_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_low_priority_until_date()) {
      set_low_priority_until_date(from.low_priority_until_date());
    }
    if (from.has_prevent_text_chat_until_date()) {
      set_prevent_text_chat_until_date(from.prevent_text_chat_until_date());
    }
    if (from.has_prevent_voice_until_date()) {
      set_prevent_voice_until_date(from.prevent_voice_until_date());
    }
    if (from.has_last_abandoned_game_date()) {
      set_last_abandoned_game_date(from.last_abandoned_game_date());
    }
    if (from.has_last_secondary_abandoned_game_date()) {
      set_last_secondary_abandoned_game_date(from.last_secondary_abandoned_game_date());
    }
    if (from.has_leaver_penalty_count()) {
      set_leaver_penalty_count(from.leaver_penalty_count());
    }
    if (from.has_completed_game_streak()) {
      set_completed_game_streak(from.completed_game_streak());
    }
    if (from.has_teaching()) {
      set_teaching(from.teaching());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_leadership()) {
      set_leadership(from.leadership());
    }
    if (from.has_friendly()) {
      set_friendly(from.friendly());
    }
    if (from.has_forgiving()) {
      set_forgiving(from.forgiving());
    }
    if (from.has_account_disabled_until_date()) {
      set_account_disabled_until_date(from.account_disabled_until_date());
    }
    if (from.has_account_disabled_count()) {
      set_account_disabled_count(from.account_disabled_count());
    }
    if (from.has_showcase_hero_id()) {
      set_showcase_hero_id(from.showcase_hero_id());
    }
    if (from.has_match_disabled_until_date()) {
      set_match_disabled_until_date(from.match_disabled_until_date());
    }
    if (from.has_match_disabled_count()) {
      set_match_disabled_count(from.match_disabled_count());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_partner_account_type()) {
      set_partner_account_type(from.partner_account_type());
    }
    if (from.has_partner_account_state()) {
      set_partner_account_state(from.partner_account_state());
    }
    if (from.has_shutdownlawterminatetimestamp()) {
      set_shutdownlawterminatetimestamp(from.shutdownlawterminatetimestamp());
    }
    if (from.has_low_priority_games_remaining()) {
      set_low_priority_games_remaining(from.low_priority_games_remaining());
    }
    if (from.has_competitive_rank()) {
      set_competitive_rank(from.competitive_rank());
    }
    if (from.has_calibration_games_remaining()) {
      set_calibration_games_remaining(from.calibration_games_remaining());
    }
    if (from.has_solo_competitive_rank()) {
      set_solo_competitive_rank(from.solo_competitive_rank());
    }
    if (from.has_solo_calibration_games_remaining()) {
      set_solo_calibration_games_remaining(from.solo_calibration_games_remaining());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_recruitment_level()) {
      set_recruitment_level(from.recruitment_level());
    }
    if (from.has_has_new_notifications()) {
      set_has_new_notifications(from.has_new_notifications());
    }
    if (from.has_is_league_admin()) {
      set_is_league_admin(from.is_league_admin());
    }
    if (from.has_casual_games_played()) {
      set_casual_games_played(from.casual_games_played());
    }
    if (from.has_solo_competitive_games_played()) {
      set_solo_competitive_games_played(from.solo_competitive_games_played());
    }
    if (from.has_party_competitive_games_played()) {
      set_party_competitive_games_played(from.party_competitive_games_played());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSODOTAGameAccountClient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTAGameAccountClient::CopyFrom(const CSODOTAGameAccountClient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAGameAccountClient::IsInitialized() const {
  
  return true;
}

void CSODOTAGameAccountClient::Swap(CSODOTAGameAccountClient* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(wins_, other->wins_);
    std::swap(losses_, other->losses_);
    std::swap(xp_, other->xp_);
    std::swap(level_, other->level_);
    std::swap(initial_skill_, other->initial_skill_);
    std::swap(leaver_count_, other->leaver_count_);
    std::swap(secondary_leaver_count_, other->secondary_leaver_count_);
    std::swap(low_priority_until_date_, other->low_priority_until_date_);
    std::swap(prevent_text_chat_until_date_, other->prevent_text_chat_until_date_);
    std::swap(prevent_voice_until_date_, other->prevent_voice_until_date_);
    std::swap(last_abandoned_game_date_, other->last_abandoned_game_date_);
    std::swap(last_secondary_abandoned_game_date_, other->last_secondary_abandoned_game_date_);
    std::swap(leaver_penalty_count_, other->leaver_penalty_count_);
    std::swap(completed_game_streak_, other->completed_game_streak_);
    std::swap(teaching_, other->teaching_);
    std::swap(leadership_, other->leadership_);
    std::swap(friendly_, other->friendly_);
    std::swap(forgiving_, other->forgiving_);
    std::swap(account_disabled_until_date_, other->account_disabled_until_date_);
    std::swap(account_disabled_count_, other->account_disabled_count_);
    std::swap(showcase_hero_id_, other->showcase_hero_id_);
    std::swap(match_disabled_until_date_, other->match_disabled_until_date_);
    std::swap(match_disabled_count_, other->match_disabled_count_);
    std::swap(partner_account_type_, other->partner_account_type_);
    std::swap(partner_account_state_, other->partner_account_state_);
    std::swap(shutdownlawterminatetimestamp_, other->shutdownlawterminatetimestamp_);
    std::swap(low_priority_games_remaining_, other->low_priority_games_remaining_);
    std::swap(competitive_rank_, other->competitive_rank_);
    std::swap(calibration_games_remaining_, other->calibration_games_remaining_);
    std::swap(solo_competitive_rank_, other->solo_competitive_rank_);
    std::swap(solo_calibration_games_remaining_, other->solo_calibration_games_remaining_);
    std::swap(recruitment_level_, other->recruitment_level_);
    std::swap(has_new_notifications_, other->has_new_notifications_);
    std::swap(is_league_admin_, other->is_league_admin_);
    std::swap(casual_games_played_, other->casual_games_played_);
    std::swap(solo_competitive_games_played_, other->solo_competitive_games_played_);
    std::swap(party_competitive_games_played_, other->party_competitive_games_played_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSODOTAGameAccountClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSODOTAGameAccountClient_descriptor_;
  metadata.reflection = CSODOTAGameAccountClient_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSODOTAPartyMember::kPartnerTypeFieldNumber;
const int CSODOTAPartyMember::kIsCoachFieldNumber;
#endif  // !_MSC_VER

CSODOTAPartyMember::CSODOTAPartyMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSODOTAPartyMember::InitAsDefaultInstance() {
}

CSODOTAPartyMember::CSODOTAPartyMember(const CSODOTAPartyMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSODOTAPartyMember::SharedCtor() {
  _cached_size_ = 0;
  partner_type_ = 0;
  is_coach_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSODOTAPartyMember::~CSODOTAPartyMember() {
  SharedDtor();
}

void CSODOTAPartyMember::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSODOTAPartyMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSODOTAPartyMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSODOTAPartyMember_descriptor_;
}

const CSODOTAPartyMember& CSODOTAPartyMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CSODOTAPartyMember* CSODOTAPartyMember::default_instance_ = NULL;

CSODOTAPartyMember* CSODOTAPartyMember::New() const {
  return new CSODOTAPartyMember;
}

void CSODOTAPartyMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    partner_type_ = 0;
    is_coach_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSODOTAPartyMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PartnerAccountType partner_type = 1 [default = PARTNER_NONE];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (PartnerAccountType_IsValid(value)) {
            set_partner_type(static_cast< PartnerAccountType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_coach;
        break;
      }
      
      // optional bool is_coach = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_coach:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_coach_)));
          set_has_is_coach();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSODOTAPartyMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PartnerAccountType partner_type = 1 [default = PARTNER_NONE];
  if (has_partner_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->partner_type(), output);
  }
  
  // optional bool is_coach = 2;
  if (has_is_coach()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_coach(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSODOTAPartyMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PartnerAccountType partner_type = 1 [default = PARTNER_NONE];
  if (has_partner_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->partner_type(), target);
  }
  
  // optional bool is_coach = 2;
  if (has_is_coach()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_coach(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSODOTAPartyMember::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PartnerAccountType partner_type = 1 [default = PARTNER_NONE];
    if (has_partner_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->partner_type());
    }
    
    // optional bool is_coach = 2;
    if (has_is_coach()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSODOTAPartyMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSODOTAPartyMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSODOTAPartyMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSODOTAPartyMember::MergeFrom(const CSODOTAPartyMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partner_type()) {
      set_partner_type(from.partner_type());
    }
    if (from.has_is_coach()) {
      set_is_coach(from.is_coach());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSODOTAPartyMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTAPartyMember::CopyFrom(const CSODOTAPartyMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAPartyMember::IsInitialized() const {
  
  return true;
}

void CSODOTAPartyMember::Swap(CSODOTAPartyMember* other) {
  if (other != this) {
    std::swap(partner_type_, other->partner_type_);
    std::swap(is_coach_, other->is_coach_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSODOTAPartyMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSODOTAPartyMember_descriptor_;
  metadata.reflection = CSODOTAPartyMember_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CSODOTAParty_State_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSODOTAParty_State_descriptor_;
}
bool CSODOTAParty_State_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CSODOTAParty_State CSODOTAParty::UI;
const CSODOTAParty_State CSODOTAParty::FINDING_MATCH;
const CSODOTAParty_State CSODOTAParty::IN_MATCH;
const CSODOTAParty_State CSODOTAParty::State_MIN;
const CSODOTAParty_State CSODOTAParty::State_MAX;
const int CSODOTAParty::State_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CSODOTAParty::kPartyIdFieldNumber;
const int CSODOTAParty::kLeaderIdFieldNumber;
const int CSODOTAParty::kMemberIdsFieldNumber;
const int CSODOTAParty::kGameModesFieldNumber;
const int CSODOTAParty::kPendingInvitesFieldNumber;
const int CSODOTAParty::kStateFieldNumber;
const int CSODOTAParty::kEffectiveStartedMatchmakingTimeFieldNumber;
const int CSODOTAParty::kRawStartedMatchmakingTimeFieldNumber;
const int CSODOTAParty::kAttemptStartTimeFieldNumber;
const int CSODOTAParty::kAttemptNumFieldNumber;
const int CSODOTAParty::kMatchgroupsFieldNumber;
const int CSODOTAParty::kLowPriorityAccountIdFieldNumber;
const int CSODOTAParty::kMatchTypeFieldNumber;
const int CSODOTAParty::kBotDifficultyFieldNumber;
const int CSODOTAParty::kTeamIdFieldNumber;
const int CSODOTAParty::kMatchDisabledUntilDateFieldNumber;
const int CSODOTAParty::kMatchDisabledAccountIdFieldNumber;
const int CSODOTAParty::kMatchmakingMaxRangeMinutesFieldNumber;
const int CSODOTAParty::kMatchlanguagesFieldNumber;
const int CSODOTAParty::kMapPreferenceFieldNumber;
const int CSODOTAParty::kMembersFieldNumber;
const int CSODOTAParty::kOpenGuildIdFieldNumber;
const int CSODOTAParty::kCommonGuildsFieldNumber;
const int CSODOTAParty::kLowPriorityGamesRemainingFieldNumber;
const int CSODOTAParty::kMinLevelFieldNumber;
const int CSODOTAParty::kMaxLevelFieldNumber;
#endif  // !_MSC_VER

CSODOTAParty::CSODOTAParty()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSODOTAParty::InitAsDefaultInstance() {
}

CSODOTAParty::CSODOTAParty(const CSODOTAParty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSODOTAParty::SharedCtor() {
  _cached_size_ = 0;
  party_id_ = GOOGLE_ULONGLONG(0);
  leader_id_ = GOOGLE_ULONGLONG(0);
  game_modes_ = 0u;
  state_ = 0;
  effective_started_matchmaking_time_ = 0u;
  raw_started_matchmaking_time_ = 0u;
  attempt_start_time_ = 0u;
  attempt_num_ = 0u;
  matchgroups_ = 0u;
  low_priority_account_id_ = 0u;
  match_type_ = 0;
  bot_difficulty_ = 0;
  team_id_ = 0u;
  match_disabled_until_date_ = 0u;
  match_disabled_account_id_ = 0u;
  matchmaking_max_range_minutes_ = 0u;
  matchlanguages_ = 0u;
  map_preference_ = 0u;
  open_guild_id_ = 0u;
  low_priority_games_remaining_ = 0u;
  min_level_ = 0u;
  max_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSODOTAParty::~CSODOTAParty() {
  SharedDtor();
}

void CSODOTAParty::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSODOTAParty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSODOTAParty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSODOTAParty_descriptor_;
}

const CSODOTAParty& CSODOTAParty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CSODOTAParty* CSODOTAParty::default_instance_ = NULL;

CSODOTAParty* CSODOTAParty::New() const {
  return new CSODOTAParty;
}

void CSODOTAParty::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    party_id_ = GOOGLE_ULONGLONG(0);
    leader_id_ = GOOGLE_ULONGLONG(0);
    game_modes_ = 0u;
    state_ = 0;
    effective_started_matchmaking_time_ = 0u;
    raw_started_matchmaking_time_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    attempt_start_time_ = 0u;
    attempt_num_ = 0u;
    matchgroups_ = 0u;
    low_priority_account_id_ = 0u;
    match_type_ = 0;
    bot_difficulty_ = 0;
    team_id_ = 0u;
    match_disabled_until_date_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    match_disabled_account_id_ = 0u;
    matchmaking_max_range_minutes_ = 0u;
    matchlanguages_ = 0u;
    map_preference_ = 0u;
    open_guild_id_ = 0u;
    low_priority_games_remaining_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    min_level_ = 0u;
    max_level_ = 0u;
  }
  member_ids_.Clear();
  pending_invites_.Clear();
  members_.Clear();
  common_guilds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSODOTAParty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 party_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &party_id_)));
          set_has_party_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_leader_id;
        break;
      }
      
      // optional fixed64 leader_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_leader_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &leader_id_)));
          set_has_leader_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_member_ids;
        break;
      }
      
      // repeated fixed64 member_ids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_member_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 25, input, this->mutable_member_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_member_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_member_ids;
        if (input->ExpectTag(32)) goto parse_game_modes;
        break;
      }
      
      // optional uint32 game_modes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_modes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_modes_)));
          set_has_game_modes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_pending_invites;
        break;
      }
      
      // repeated fixed64 pending_invites = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_pending_invites:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 41, input, this->mutable_pending_invites())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_pending_invites())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_pending_invites;
        if (input->ExpectTag(48)) goto parse_state;
        break;
      }
      
      // optional .CSODOTAParty.State state = 6 [default = UI];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSODOTAParty_State_IsValid(value)) {
            set_state(static_cast< ::CSODOTAParty_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_effective_started_matchmaking_time;
        break;
      }
      
      // optional uint32 effective_started_matchmaking_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effective_started_matchmaking_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effective_started_matchmaking_time_)));
          set_has_effective_started_matchmaking_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_matchgroups;
        break;
      }
      
      // optional uint32 matchgroups = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchgroups:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchgroups_)));
          set_has_matchgroups();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_low_priority_account_id;
        break;
      }
      
      // optional uint32 low_priority_account_id = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_low_priority_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &low_priority_account_id_)));
          set_has_low_priority_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_match_type;
        break;
      }
      
      // optional .MatchType match_type = 21 [default = MATCH_TYPE_CASUAL];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (MatchType_IsValid(value)) {
            set_match_type(static_cast< MatchType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(21, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_bot_difficulty;
        break;
      }
      
      // optional .DOTABotDifficulty bot_difficulty = 22 [default = BOT_DIFFICULTY_PASSIVE];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bot_difficulty:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (DOTABotDifficulty_IsValid(value)) {
            set_bot_difficulty(static_cast< DOTABotDifficulty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(22, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_team_id;
        break;
      }
      
      // optional uint32 team_id = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_match_disabled_until_date;
        break;
      }
      
      // optional uint32 match_disabled_until_date = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_disabled_until_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_disabled_until_date_)));
          set_has_match_disabled_until_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_match_disabled_account_id;
        break;
      }
      
      // optional uint32 match_disabled_account_id = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_disabled_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_disabled_account_id_)));
          set_has_match_disabled_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_matchmaking_max_range_minutes;
        break;
      }
      
      // optional uint32 matchmaking_max_range_minutes = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchmaking_max_range_minutes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchmaking_max_range_minutes_)));
          set_has_matchmaking_max_range_minutes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_matchlanguages;
        break;
      }
      
      // optional uint32 matchlanguages = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchlanguages:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchlanguages_)));
          set_has_matchlanguages();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_members;
        break;
      }
      
      // repeated .CSODOTAPartyMember members = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_members;
        if (input->ExpectTag(240)) goto parse_open_guild_id;
        break;
      }
      
      // optional uint32 open_guild_id = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &open_guild_id_)));
          set_has_open_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_common_guilds;
        break;
      }
      
      // repeated uint32 common_guilds = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_common_guilds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 248, input, this->mutable_common_guilds())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_common_guilds())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_common_guilds;
        if (input->ExpectTag(256)) goto parse_raw_started_matchmaking_time;
        break;
      }
      
      // optional uint32 raw_started_matchmaking_time = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raw_started_matchmaking_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raw_started_matchmaking_time_)));
          set_has_raw_started_matchmaking_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_attempt_start_time;
        break;
      }
      
      // optional uint32 attempt_start_time = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attempt_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attempt_start_time_)));
          set_has_attempt_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_attempt_num;
        break;
      }
      
      // optional uint32 attempt_num = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attempt_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attempt_num_)));
          set_has_attempt_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_low_priority_games_remaining;
        break;
      }
      
      // optional uint32 low_priority_games_remaining = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_low_priority_games_remaining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &low_priority_games_remaining_)));
          set_has_low_priority_games_remaining();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_min_level;
        break;
      }
      
      // optional uint32 min_level = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_level_)));
          set_has_min_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_max_level;
        break;
      }
      
      // optional uint32 max_level = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_level_)));
          set_has_max_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_map_preference;
        break;
      }
      
      // optional uint32 map_preference = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_preference:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_preference_)));
          set_has_map_preference();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSODOTAParty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 party_id = 1;
  if (has_party_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->party_id(), output);
  }
  
  // optional fixed64 leader_id = 2;
  if (has_leader_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->leader_id(), output);
  }
  
  // repeated fixed64 member_ids = 3;
  for (int i = 0; i < this->member_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      3, this->member_ids(i), output);
  }
  
  // optional uint32 game_modes = 4;
  if (has_game_modes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_modes(), output);
  }
  
  // repeated fixed64 pending_invites = 5;
  for (int i = 0; i < this->pending_invites_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      5, this->pending_invites(i), output);
  }
  
  // optional .CSODOTAParty.State state = 6 [default = UI];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->state(), output);
  }
  
  // optional uint32 effective_started_matchmaking_time = 7;
  if (has_effective_started_matchmaking_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->effective_started_matchmaking_time(), output);
  }
  
  // optional uint32 matchgroups = 11;
  if (has_matchgroups()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->matchgroups(), output);
  }
  
  // optional uint32 low_priority_account_id = 19;
  if (has_low_priority_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->low_priority_account_id(), output);
  }
  
  // optional .MatchType match_type = 21 [default = MATCH_TYPE_CASUAL];
  if (has_match_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->match_type(), output);
  }
  
  // optional .DOTABotDifficulty bot_difficulty = 22 [default = BOT_DIFFICULTY_PASSIVE];
  if (has_bot_difficulty()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->bot_difficulty(), output);
  }
  
  // optional uint32 team_id = 23;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->team_id(), output);
  }
  
  // optional uint32 match_disabled_until_date = 24;
  if (has_match_disabled_until_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->match_disabled_until_date(), output);
  }
  
  // optional uint32 match_disabled_account_id = 25;
  if (has_match_disabled_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->match_disabled_account_id(), output);
  }
  
  // optional uint32 matchmaking_max_range_minutes = 26;
  if (has_matchmaking_max_range_minutes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->matchmaking_max_range_minutes(), output);
  }
  
  // optional uint32 matchlanguages = 27;
  if (has_matchlanguages()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->matchlanguages(), output);
  }
  
  // repeated .CSODOTAPartyMember members = 29;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->members(i), output);
  }
  
  // optional uint32 open_guild_id = 30;
  if (has_open_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->open_guild_id(), output);
  }
  
  // repeated uint32 common_guilds = 31;
  for (int i = 0; i < this->common_guilds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      31, this->common_guilds(i), output);
  }
  
  // optional uint32 raw_started_matchmaking_time = 32;
  if (has_raw_started_matchmaking_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->raw_started_matchmaking_time(), output);
  }
  
  // optional uint32 attempt_start_time = 33;
  if (has_attempt_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->attempt_start_time(), output);
  }
  
  // optional uint32 attempt_num = 34;
  if (has_attempt_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->attempt_num(), output);
  }
  
  // optional uint32 low_priority_games_remaining = 35;
  if (has_low_priority_games_remaining()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->low_priority_games_remaining(), output);
  }
  
  // optional uint32 min_level = 36;
  if (has_min_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->min_level(), output);
  }
  
  // optional uint32 max_level = 37;
  if (has_max_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->max_level(), output);
  }
  
  // optional uint32 map_preference = 38;
  if (has_map_preference()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->map_preference(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSODOTAParty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 party_id = 1;
  if (has_party_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->party_id(), target);
  }
  
  // optional fixed64 leader_id = 2;
  if (has_leader_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->leader_id(), target);
  }
  
  // repeated fixed64 member_ids = 3;
  for (int i = 0; i < this->member_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(3, this->member_ids(i), target);
  }
  
  // optional uint32 game_modes = 4;
  if (has_game_modes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_modes(), target);
  }
  
  // repeated fixed64 pending_invites = 5;
  for (int i = 0; i < this->pending_invites_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(5, this->pending_invites(i), target);
  }
  
  // optional .CSODOTAParty.State state = 6 [default = UI];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->state(), target);
  }
  
  // optional uint32 effective_started_matchmaking_time = 7;
  if (has_effective_started_matchmaking_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->effective_started_matchmaking_time(), target);
  }
  
  // optional uint32 matchgroups = 11;
  if (has_matchgroups()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->matchgroups(), target);
  }
  
  // optional uint32 low_priority_account_id = 19;
  if (has_low_priority_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->low_priority_account_id(), target);
  }
  
  // optional .MatchType match_type = 21 [default = MATCH_TYPE_CASUAL];
  if (has_match_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->match_type(), target);
  }
  
  // optional .DOTABotDifficulty bot_difficulty = 22 [default = BOT_DIFFICULTY_PASSIVE];
  if (has_bot_difficulty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->bot_difficulty(), target);
  }
  
  // optional uint32 team_id = 23;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->team_id(), target);
  }
  
  // optional uint32 match_disabled_until_date = 24;
  if (has_match_disabled_until_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->match_disabled_until_date(), target);
  }
  
  // optional uint32 match_disabled_account_id = 25;
  if (has_match_disabled_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->match_disabled_account_id(), target);
  }
  
  // optional uint32 matchmaking_max_range_minutes = 26;
  if (has_matchmaking_max_range_minutes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->matchmaking_max_range_minutes(), target);
  }
  
  // optional uint32 matchlanguages = 27;
  if (has_matchlanguages()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->matchlanguages(), target);
  }
  
  // repeated .CSODOTAPartyMember members = 29;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->members(i), target);
  }
  
  // optional uint32 open_guild_id = 30;
  if (has_open_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->open_guild_id(), target);
  }
  
  // repeated uint32 common_guilds = 31;
  for (int i = 0; i < this->common_guilds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(31, this->common_guilds(i), target);
  }
  
  // optional uint32 raw_started_matchmaking_time = 32;
  if (has_raw_started_matchmaking_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->raw_started_matchmaking_time(), target);
  }
  
  // optional uint32 attempt_start_time = 33;
  if (has_attempt_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->attempt_start_time(), target);
  }
  
  // optional uint32 attempt_num = 34;
  if (has_attempt_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->attempt_num(), target);
  }
  
  // optional uint32 low_priority_games_remaining = 35;
  if (has_low_priority_games_remaining()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->low_priority_games_remaining(), target);
  }
  
  // optional uint32 min_level = 36;
  if (has_min_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->min_level(), target);
  }
  
  // optional uint32 max_level = 37;
  if (has_max_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(37, this->max_level(), target);
  }
  
  // optional uint32 map_preference = 38;
  if (has_map_preference()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->map_preference(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSODOTAParty::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 party_id = 1;
    if (has_party_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->party_id());
    }
    
    // optional fixed64 leader_id = 2;
    if (has_leader_id()) {
      total_size += 1 + 8;
    }
    
    // optional uint32 game_modes = 4;
    if (has_game_modes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_modes());
    }
    
    // optional .CSODOTAParty.State state = 6 [default = UI];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }
    
    // optional uint32 effective_started_matchmaking_time = 7;
    if (has_effective_started_matchmaking_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effective_started_matchmaking_time());
    }
    
    // optional uint32 raw_started_matchmaking_time = 32;
    if (has_raw_started_matchmaking_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raw_started_matchmaking_time());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 attempt_start_time = 33;
    if (has_attempt_start_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attempt_start_time());
    }
    
    // optional uint32 attempt_num = 34;
    if (has_attempt_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attempt_num());
    }
    
    // optional uint32 matchgroups = 11;
    if (has_matchgroups()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchgroups());
    }
    
    // optional uint32 low_priority_account_id = 19;
    if (has_low_priority_account_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->low_priority_account_id());
    }
    
    // optional .MatchType match_type = 21 [default = MATCH_TYPE_CASUAL];
    if (has_match_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->match_type());
    }
    
    // optional .DOTABotDifficulty bot_difficulty = 22 [default = BOT_DIFFICULTY_PASSIVE];
    if (has_bot_difficulty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bot_difficulty());
    }
    
    // optional uint32 team_id = 23;
    if (has_team_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }
    
    // optional uint32 match_disabled_until_date = 24;
    if (has_match_disabled_until_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_disabled_until_date());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 match_disabled_account_id = 25;
    if (has_match_disabled_account_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_disabled_account_id());
    }
    
    // optional uint32 matchmaking_max_range_minutes = 26;
    if (has_matchmaking_max_range_minutes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchmaking_max_range_minutes());
    }
    
    // optional uint32 matchlanguages = 27;
    if (has_matchlanguages()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchlanguages());
    }
    
    // optional uint32 map_preference = 38;
    if (has_map_preference()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_preference());
    }
    
    // optional uint32 open_guild_id = 30;
    if (has_open_guild_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->open_guild_id());
    }
    
    // optional uint32 low_priority_games_remaining = 35;
    if (has_low_priority_games_remaining()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->low_priority_games_remaining());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 min_level = 36;
    if (has_min_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_level());
    }
    
    // optional uint32 max_level = 37;
    if (has_max_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_level());
    }
    
  }
  // repeated fixed64 member_ids = 3;
  {
    int data_size = 0;
    data_size = 8 * this->member_ids_size();
    total_size += 1 * this->member_ids_size() + data_size;
  }
  
  // repeated fixed64 pending_invites = 5;
  {
    int data_size = 0;
    data_size = 8 * this->pending_invites_size();
    total_size += 1 * this->pending_invites_size() + data_size;
  }
  
  // repeated .CSODOTAPartyMember members = 29;
  total_size += 2 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }
  
  // repeated uint32 common_guilds = 31;
  {
    int data_size = 0;
    for (int i = 0; i < this->common_guilds_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->common_guilds(i));
    }
    total_size += 2 * this->common_guilds_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSODOTAParty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSODOTAParty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSODOTAParty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSODOTAParty::MergeFrom(const CSODOTAParty& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_ids_.MergeFrom(from.member_ids_);
  pending_invites_.MergeFrom(from.pending_invites_);
  members_.MergeFrom(from.members_);
  common_guilds_.MergeFrom(from.common_guilds_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_party_id()) {
      set_party_id(from.party_id());
    }
    if (from.has_leader_id()) {
      set_leader_id(from.leader_id());
    }
    if (from.has_game_modes()) {
      set_game_modes(from.game_modes());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_effective_started_matchmaking_time()) {
      set_effective_started_matchmaking_time(from.effective_started_matchmaking_time());
    }
    if (from.has_raw_started_matchmaking_time()) {
      set_raw_started_matchmaking_time(from.raw_started_matchmaking_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_attempt_start_time()) {
      set_attempt_start_time(from.attempt_start_time());
    }
    if (from.has_attempt_num()) {
      set_attempt_num(from.attempt_num());
    }
    if (from.has_matchgroups()) {
      set_matchgroups(from.matchgroups());
    }
    if (from.has_low_priority_account_id()) {
      set_low_priority_account_id(from.low_priority_account_id());
    }
    if (from.has_match_type()) {
      set_match_type(from.match_type());
    }
    if (from.has_bot_difficulty()) {
      set_bot_difficulty(from.bot_difficulty());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_match_disabled_until_date()) {
      set_match_disabled_until_date(from.match_disabled_until_date());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_match_disabled_account_id()) {
      set_match_disabled_account_id(from.match_disabled_account_id());
    }
    if (from.has_matchmaking_max_range_minutes()) {
      set_matchmaking_max_range_minutes(from.matchmaking_max_range_minutes());
    }
    if (from.has_matchlanguages()) {
      set_matchlanguages(from.matchlanguages());
    }
    if (from.has_map_preference()) {
      set_map_preference(from.map_preference());
    }
    if (from.has_open_guild_id()) {
      set_open_guild_id(from.open_guild_id());
    }
    if (from.has_low_priority_games_remaining()) {
      set_low_priority_games_remaining(from.low_priority_games_remaining());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_min_level()) {
      set_min_level(from.min_level());
    }
    if (from.has_max_level()) {
      set_max_level(from.max_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSODOTAParty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTAParty::CopyFrom(const CSODOTAParty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAParty::IsInitialized() const {
  
  return true;
}

void CSODOTAParty::Swap(CSODOTAParty* other) {
  if (other != this) {
    std::swap(party_id_, other->party_id_);
    std::swap(leader_id_, other->leader_id_);
    member_ids_.Swap(&other->member_ids_);
    std::swap(game_modes_, other->game_modes_);
    pending_invites_.Swap(&other->pending_invites_);
    std::swap(state_, other->state_);
    std::swap(effective_started_matchmaking_time_, other->effective_started_matchmaking_time_);
    std::swap(raw_started_matchmaking_time_, other->raw_started_matchmaking_time_);
    std::swap(attempt_start_time_, other->attempt_start_time_);
    std::swap(attempt_num_, other->attempt_num_);
    std::swap(matchgroups_, other->matchgroups_);
    std::swap(low_priority_account_id_, other->low_priority_account_id_);
    std::swap(match_type_, other->match_type_);
    std::swap(bot_difficulty_, other->bot_difficulty_);
    std::swap(team_id_, other->team_id_);
    std::swap(match_disabled_until_date_, other->match_disabled_until_date_);
    std::swap(match_disabled_account_id_, other->match_disabled_account_id_);
    std::swap(matchmaking_max_range_minutes_, other->matchmaking_max_range_minutes_);
    std::swap(matchlanguages_, other->matchlanguages_);
    std::swap(map_preference_, other->map_preference_);
    members_.Swap(&other->members_);
    std::swap(open_guild_id_, other->open_guild_id_);
    common_guilds_.Swap(&other->common_guilds_);
    std::swap(low_priority_games_remaining_, other->low_priority_games_remaining_);
    std::swap(min_level_, other->min_level_);
    std::swap(max_level_, other->max_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSODOTAParty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSODOTAParty_descriptor_;
  metadata.reflection = CSODOTAParty_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSODOTAPartyInvite_PartyMember::kNameFieldNumber;
const int CSODOTAPartyInvite_PartyMember::kSteamIdFieldNumber;
#endif  // !_MSC_VER

CSODOTAPartyInvite_PartyMember::CSODOTAPartyInvite_PartyMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSODOTAPartyInvite_PartyMember::InitAsDefaultInstance() {
}

CSODOTAPartyInvite_PartyMember::CSODOTAPartyInvite_PartyMember(const CSODOTAPartyInvite_PartyMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSODOTAPartyInvite_PartyMember::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  steam_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSODOTAPartyInvite_PartyMember::~CSODOTAPartyInvite_PartyMember() {
  SharedDtor();
}

void CSODOTAPartyInvite_PartyMember::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CSODOTAPartyInvite_PartyMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSODOTAPartyInvite_PartyMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSODOTAPartyInvite_PartyMember_descriptor_;
}

const CSODOTAPartyInvite_PartyMember& CSODOTAPartyInvite_PartyMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CSODOTAPartyInvite_PartyMember* CSODOTAPartyInvite_PartyMember::default_instance_ = NULL;

CSODOTAPartyInvite_PartyMember* CSODOTAPartyInvite_PartyMember::New() const {
  return new CSODOTAPartyInvite_PartyMember;
}

void CSODOTAPartyInvite_PartyMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    steam_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSODOTAPartyInvite_PartyMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_steam_id;
        break;
      }
      
      // optional fixed64 steam_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSODOTAPartyInvite_PartyMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional fixed64 steam_id = 2;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSODOTAPartyInvite_PartyMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional fixed64 steam_id = 2;
  if (has_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSODOTAPartyInvite_PartyMember::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional fixed64 steam_id = 2;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSODOTAPartyInvite_PartyMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSODOTAPartyInvite_PartyMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSODOTAPartyInvite_PartyMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSODOTAPartyInvite_PartyMember::MergeFrom(const CSODOTAPartyInvite_PartyMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSODOTAPartyInvite_PartyMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTAPartyInvite_PartyMember::CopyFrom(const CSODOTAPartyInvite_PartyMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAPartyInvite_PartyMember::IsInitialized() const {
  
  return true;
}

void CSODOTAPartyInvite_PartyMember::Swap(CSODOTAPartyInvite_PartyMember* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(steam_id_, other->steam_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSODOTAPartyInvite_PartyMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSODOTAPartyInvite_PartyMember_descriptor_;
  metadata.reflection = CSODOTAPartyInvite_PartyMember_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CSODOTAPartyInvite::kGroupIdFieldNumber;
const int CSODOTAPartyInvite::kSenderIdFieldNumber;
const int CSODOTAPartyInvite::kSenderNameFieldNumber;
const int CSODOTAPartyInvite::kMembersFieldNumber;
const int CSODOTAPartyInvite::kTeamIdFieldNumber;
const int CSODOTAPartyInvite::kLowPriorityStatusFieldNumber;
const int CSODOTAPartyInvite::kAsCoachFieldNumber;
#endif  // !_MSC_VER

CSODOTAPartyInvite::CSODOTAPartyInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSODOTAPartyInvite::InitAsDefaultInstance() {
}

CSODOTAPartyInvite::CSODOTAPartyInvite(const CSODOTAPartyInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSODOTAPartyInvite::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = GOOGLE_ULONGLONG(0);
  sender_id_ = GOOGLE_ULONGLONG(0);
  sender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  team_id_ = 0u;
  low_priority_status_ = false;
  as_coach_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSODOTAPartyInvite::~CSODOTAPartyInvite() {
  SharedDtor();
}

void CSODOTAPartyInvite::SharedDtor() {
  if (sender_name_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_name_;
  }
  if (this != default_instance_) {
  }
}

void CSODOTAPartyInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSODOTAPartyInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSODOTAPartyInvite_descriptor_;
}

const CSODOTAPartyInvite& CSODOTAPartyInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CSODOTAPartyInvite* CSODOTAPartyInvite::default_instance_ = NULL;

CSODOTAPartyInvite* CSODOTAPartyInvite::New() const {
  return new CSODOTAPartyInvite;
}

void CSODOTAPartyInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = GOOGLE_ULONGLONG(0);
    sender_id_ = GOOGLE_ULONGLONG(0);
    if (has_sender_name()) {
      if (sender_name_ != &::google::protobuf::internal::kEmptyString) {
        sender_name_->clear();
      }
    }
    team_id_ = 0u;
    low_priority_status_ = false;
    as_coach_ = false;
  }
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSODOTAPartyInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_sender_id;
        break;
      }
      
      // optional fixed64 sender_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sender_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sender_id_)));
          set_has_sender_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sender_name;
        break;
      }
      
      // optional string sender_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sender_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sender_name().data(), this->sender_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_members;
        break;
      }
      
      // repeated .CSODOTAPartyInvite.PartyMember members = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_members;
        if (input->ExpectTag(40)) goto parse_team_id;
        break;
      }
      
      // optional uint32 team_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_low_priority_status;
        break;
      }
      
      // optional bool low_priority_status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_low_priority_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_priority_status_)));
          set_has_low_priority_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_as_coach;
        break;
      }
      
      // optional bool as_coach = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_as_coach:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &as_coach_)));
          set_has_as_coach();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSODOTAPartyInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->group_id(), output);
  }
  
  // optional fixed64 sender_id = 2;
  if (has_sender_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->sender_id(), output);
  }
  
  // optional string sender_name = 3;
  if (has_sender_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender_name().data(), this->sender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sender_name(), output);
  }
  
  // repeated .CSODOTAPartyInvite.PartyMember members = 4;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->members(i), output);
  }
  
  // optional uint32 team_id = 5;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->team_id(), output);
  }
  
  // optional bool low_priority_status = 6;
  if (has_low_priority_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->low_priority_status(), output);
  }
  
  // optional bool as_coach = 7;
  if (has_as_coach()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->as_coach(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSODOTAPartyInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->group_id(), target);
  }
  
  // optional fixed64 sender_id = 2;
  if (has_sender_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->sender_id(), target);
  }
  
  // optional string sender_name = 3;
  if (has_sender_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender_name().data(), this->sender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sender_name(), target);
  }
  
  // repeated .CSODOTAPartyInvite.PartyMember members = 4;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->members(i), target);
  }
  
  // optional uint32 team_id = 5;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->team_id(), target);
  }
  
  // optional bool low_priority_status = 6;
  if (has_low_priority_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->low_priority_status(), target);
  }
  
  // optional bool as_coach = 7;
  if (has_as_coach()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->as_coach(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSODOTAPartyInvite::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }
    
    // optional fixed64 sender_id = 2;
    if (has_sender_id()) {
      total_size += 1 + 8;
    }
    
    // optional string sender_name = 3;
    if (has_sender_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender_name());
    }
    
    // optional uint32 team_id = 5;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }
    
    // optional bool low_priority_status = 6;
    if (has_low_priority_status()) {
      total_size += 1 + 1;
    }
    
    // optional bool as_coach = 7;
    if (has_as_coach()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .CSODOTAPartyInvite.PartyMember members = 4;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSODOTAPartyInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSODOTAPartyInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSODOTAPartyInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSODOTAPartyInvite::MergeFrom(const CSODOTAPartyInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_sender_id()) {
      set_sender_id(from.sender_id());
    }
    if (from.has_sender_name()) {
      set_sender_name(from.sender_name());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_low_priority_status()) {
      set_low_priority_status(from.low_priority_status());
    }
    if (from.has_as_coach()) {
      set_as_coach(from.as_coach());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSODOTAPartyInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTAPartyInvite::CopyFrom(const CSODOTAPartyInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAPartyInvite::IsInitialized() const {
  
  return true;
}

void CSODOTAPartyInvite::Swap(CSODOTAPartyInvite* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(sender_id_, other->sender_id_);
    std::swap(sender_name_, other->sender_name_);
    members_.Swap(&other->members_);
    std::swap(team_id_, other->team_id_);
    std::swap(low_priority_status_, other->low_priority_status_);
    std::swap(as_coach_, other->as_coach_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSODOTAPartyInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSODOTAPartyInvite_descriptor_;
  metadata.reflection = CSODOTAPartyInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAPartyMemberSetCoach::kWantsCoachFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAPartyMemberSetCoach::CMsgDOTAPartyMemberSetCoach()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgDOTAPartyMemberSetCoach::InitAsDefaultInstance() {
}

CMsgDOTAPartyMemberSetCoach::CMsgDOTAPartyMemberSetCoach(const CMsgDOTAPartyMemberSetCoach& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgDOTAPartyMemberSetCoach::SharedCtor() {
  _cached_size_ = 0;
  wants_coach_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAPartyMemberSetCoach::~CMsgDOTAPartyMemberSetCoach() {
  SharedDtor();
}

void CMsgDOTAPartyMemberSetCoach::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAPartyMemberSetCoach::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAPartyMemberSetCoach::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAPartyMemberSetCoach_descriptor_;
}

const CMsgDOTAPartyMemberSetCoach& CMsgDOTAPartyMemberSetCoach::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CMsgDOTAPartyMemberSetCoach* CMsgDOTAPartyMemberSetCoach::default_instance_ = NULL;

CMsgDOTAPartyMemberSetCoach* CMsgDOTAPartyMemberSetCoach::New() const {
  return new CMsgDOTAPartyMemberSetCoach;
}

void CMsgDOTAPartyMemberSetCoach::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wants_coach_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAPartyMemberSetCoach::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool wants_coach = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wants_coach_)));
          set_has_wants_coach();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgDOTAPartyMemberSetCoach::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool wants_coach = 1;
  if (has_wants_coach()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->wants_coach(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgDOTAPartyMemberSetCoach::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool wants_coach = 1;
  if (has_wants_coach()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->wants_coach(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgDOTAPartyMemberSetCoach::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool wants_coach = 1;
    if (has_wants_coach()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAPartyMemberSetCoach::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAPartyMemberSetCoach* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAPartyMemberSetCoach*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAPartyMemberSetCoach::MergeFrom(const CMsgDOTAPartyMemberSetCoach& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wants_coach()) {
      set_wants_coach(from.wants_coach());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAPartyMemberSetCoach::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAPartyMemberSetCoach::CopyFrom(const CMsgDOTAPartyMemberSetCoach& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPartyMemberSetCoach::IsInitialized() const {
  
  return true;
}

void CMsgDOTAPartyMemberSetCoach::Swap(CMsgDOTAPartyMemberSetCoach* other) {
  if (other != this) {
    std::swap(wants_coach_, other->wants_coach_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAPartyMemberSetCoach::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAPartyMemberSetCoach_descriptor_;
  metadata.reflection = CMsgDOTAPartyMemberSetCoach_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTASaveGame_Player::kTeamFieldNumber;
const int CDOTASaveGame_Player::kNameFieldNumber;
const int CDOTASaveGame_Player::kHeroFieldNumber;
#endif  // !_MSC_VER

CDOTASaveGame_Player::CDOTASaveGame_Player()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTASaveGame_Player::InitAsDefaultInstance() {
}

CDOTASaveGame_Player::CDOTASaveGame_Player(const CDOTASaveGame_Player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTASaveGame_Player::SharedCtor() {
  _cached_size_ = 0;
  team_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hero_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTASaveGame_Player::~CDOTASaveGame_Player() {
  SharedDtor();
}

void CDOTASaveGame_Player::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (hero_ != &::google::protobuf::internal::kEmptyString) {
    delete hero_;
  }
  if (this != default_instance_) {
  }
}

void CDOTASaveGame_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTASaveGame_Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTASaveGame_Player_descriptor_;
}

const CDOTASaveGame_Player& CDOTASaveGame_Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CDOTASaveGame_Player* CDOTASaveGame_Player::default_instance_ = NULL;

CDOTASaveGame_Player* CDOTASaveGame_Player::New() const {
  return new CDOTASaveGame_Player;
}

void CDOTASaveGame_Player::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    team_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_hero()) {
      if (hero_ != &::google::protobuf::internal::kEmptyString) {
        hero_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTASaveGame_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (DOTA_GC_TEAM_IsValid(value)) {
            set_team(static_cast< DOTA_GC_TEAM >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hero;
        break;
      }
      
      // optional string hero = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hero()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hero().data(), this->hero().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTASaveGame_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->team(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional string hero = 3;
  if (has_hero()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hero().data(), this->hero().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->hero(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTASaveGame_Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->team(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional string hero = 3;
  if (has_hero()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hero().data(), this->hero().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hero(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTASaveGame_Player::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string hero = 3;
    if (has_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hero());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTASaveGame_Player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTASaveGame_Player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTASaveGame_Player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTASaveGame_Player::MergeFrom(const CDOTASaveGame_Player& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_hero()) {
      set_hero(from.hero());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTASaveGame_Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTASaveGame_Player::CopyFrom(const CDOTASaveGame_Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTASaveGame_Player::IsInitialized() const {
  
  return true;
}

void CDOTASaveGame_Player::Swap(CDOTASaveGame_Player* other) {
  if (other != this) {
    std::swap(team_, other->team_);
    std::swap(name_, other->name_);
    std::swap(hero_, other->hero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTASaveGame_Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTASaveGame_Player_descriptor_;
  metadata.reflection = CDOTASaveGame_Player_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTASaveGame_SaveInstance_PlayerPositions::kXFieldNumber;
const int CDOTASaveGame_SaveInstance_PlayerPositions::kYFieldNumber;
#endif  // !_MSC_VER

CDOTASaveGame_SaveInstance_PlayerPositions::CDOTASaveGame_SaveInstance_PlayerPositions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTASaveGame_SaveInstance_PlayerPositions::InitAsDefaultInstance() {
}

CDOTASaveGame_SaveInstance_PlayerPositions::CDOTASaveGame_SaveInstance_PlayerPositions(const CDOTASaveGame_SaveInstance_PlayerPositions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTASaveGame_SaveInstance_PlayerPositions::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTASaveGame_SaveInstance_PlayerPositions::~CDOTASaveGame_SaveInstance_PlayerPositions() {
  SharedDtor();
}

void CDOTASaveGame_SaveInstance_PlayerPositions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTASaveGame_SaveInstance_PlayerPositions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTASaveGame_SaveInstance_PlayerPositions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTASaveGame_SaveInstance_PlayerPositions_descriptor_;
}

const CDOTASaveGame_SaveInstance_PlayerPositions& CDOTASaveGame_SaveInstance_PlayerPositions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CDOTASaveGame_SaveInstance_PlayerPositions* CDOTASaveGame_SaveInstance_PlayerPositions::default_instance_ = NULL;

CDOTASaveGame_SaveInstance_PlayerPositions* CDOTASaveGame_SaveInstance_PlayerPositions::New() const {
  return new CDOTASaveGame_SaveInstance_PlayerPositions;
}

void CDOTASaveGame_SaveInstance_PlayerPositions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTASaveGame_SaveInstance_PlayerPositions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }
      
      // optional float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTASaveGame_SaveInstance_PlayerPositions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }
  
  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTASaveGame_SaveInstance_PlayerPositions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }
  
  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTASaveGame_SaveInstance_PlayerPositions::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTASaveGame_SaveInstance_PlayerPositions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTASaveGame_SaveInstance_PlayerPositions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTASaveGame_SaveInstance_PlayerPositions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTASaveGame_SaveInstance_PlayerPositions::MergeFrom(const CDOTASaveGame_SaveInstance_PlayerPositions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTASaveGame_SaveInstance_PlayerPositions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTASaveGame_SaveInstance_PlayerPositions::CopyFrom(const CDOTASaveGame_SaveInstance_PlayerPositions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTASaveGame_SaveInstance_PlayerPositions::IsInitialized() const {
  
  return true;
}

void CDOTASaveGame_SaveInstance_PlayerPositions::Swap(CDOTASaveGame_SaveInstance_PlayerPositions* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTASaveGame_SaveInstance_PlayerPositions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTASaveGame_SaveInstance_PlayerPositions_descriptor_;
  metadata.reflection = CDOTASaveGame_SaveInstance_PlayerPositions_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTASaveGame_SaveInstance::kGameTimeFieldNumber;
const int CDOTASaveGame_SaveInstance::kTeam1ScoreFieldNumber;
const int CDOTASaveGame_SaveInstance::kTeam2ScoreFieldNumber;
const int CDOTASaveGame_SaveInstance::kPlayerPositionsFieldNumber;
const int CDOTASaveGame_SaveInstance::kSaveIdFieldNumber;
const int CDOTASaveGame_SaveInstance::kSaveTimeFieldNumber;
#endif  // !_MSC_VER

CDOTASaveGame_SaveInstance::CDOTASaveGame_SaveInstance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTASaveGame_SaveInstance::InitAsDefaultInstance() {
}

CDOTASaveGame_SaveInstance::CDOTASaveGame_SaveInstance(const CDOTASaveGame_SaveInstance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTASaveGame_SaveInstance::SharedCtor() {
  _cached_size_ = 0;
  game_time_ = 0u;
  team1_score_ = 0u;
  team2_score_ = 0u;
  save_id_ = 0u;
  save_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTASaveGame_SaveInstance::~CDOTASaveGame_SaveInstance() {
  SharedDtor();
}

void CDOTASaveGame_SaveInstance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTASaveGame_SaveInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTASaveGame_SaveInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTASaveGame_SaveInstance_descriptor_;
}

const CDOTASaveGame_SaveInstance& CDOTASaveGame_SaveInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CDOTASaveGame_SaveInstance* CDOTASaveGame_SaveInstance::default_instance_ = NULL;

CDOTASaveGame_SaveInstance* CDOTASaveGame_SaveInstance::New() const {
  return new CDOTASaveGame_SaveInstance;
}

void CDOTASaveGame_SaveInstance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_time_ = 0u;
    team1_score_ = 0u;
    team2_score_ = 0u;
    save_id_ = 0u;
    save_time_ = 0u;
  }
  player_positions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTASaveGame_SaveInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 game_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_time_)));
          set_has_game_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_team1_score;
        break;
      }
      
      // optional uint32 team1_score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team1_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team1_score_)));
          set_has_team1_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_team2_score;
        break;
      }
      
      // optional uint32 team2_score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team2_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team2_score_)));
          set_has_team2_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_player_positions;
        break;
      }
      
      // repeated .CDOTASaveGame.SaveInstance.PlayerPositions player_positions = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_positions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_positions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_player_positions;
        if (input->ExpectTag(48)) goto parse_save_id;
        break;
      }
      
      // optional uint32 save_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_save_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &save_id_)));
          set_has_save_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_save_time;
        break;
      }
      
      // optional uint32 save_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_save_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &save_time_)));
          set_has_save_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTASaveGame_SaveInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 game_time = 2;
  if (has_game_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_time(), output);
  }
  
  // optional uint32 team1_score = 3;
  if (has_team1_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->team1_score(), output);
  }
  
  // optional uint32 team2_score = 4;
  if (has_team2_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->team2_score(), output);
  }
  
  // repeated .CDOTASaveGame.SaveInstance.PlayerPositions player_positions = 5;
  for (int i = 0; i < this->player_positions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->player_positions(i), output);
  }
  
  // optional uint32 save_id = 6;
  if (has_save_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->save_id(), output);
  }
  
  // optional uint32 save_time = 7;
  if (has_save_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->save_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTASaveGame_SaveInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 game_time = 2;
  if (has_game_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_time(), target);
  }
  
  // optional uint32 team1_score = 3;
  if (has_team1_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->team1_score(), target);
  }
  
  // optional uint32 team2_score = 4;
  if (has_team2_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->team2_score(), target);
  }
  
  // repeated .CDOTASaveGame.SaveInstance.PlayerPositions player_positions = 5;
  for (int i = 0; i < this->player_positions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->player_positions(i), target);
  }
  
  // optional uint32 save_id = 6;
  if (has_save_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->save_id(), target);
  }
  
  // optional uint32 save_time = 7;
  if (has_save_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->save_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTASaveGame_SaveInstance::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 game_time = 2;
    if (has_game_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_time());
    }
    
    // optional uint32 team1_score = 3;
    if (has_team1_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team1_score());
    }
    
    // optional uint32 team2_score = 4;
    if (has_team2_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team2_score());
    }
    
    // optional uint32 save_id = 6;
    if (has_save_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->save_id());
    }
    
    // optional uint32 save_time = 7;
    if (has_save_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->save_time());
    }
    
  }
  // repeated .CDOTASaveGame.SaveInstance.PlayerPositions player_positions = 5;
  total_size += 1 * this->player_positions_size();
  for (int i = 0; i < this->player_positions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_positions(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTASaveGame_SaveInstance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTASaveGame_SaveInstance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTASaveGame_SaveInstance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTASaveGame_SaveInstance::MergeFrom(const CDOTASaveGame_SaveInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_positions_.MergeFrom(from.player_positions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_time()) {
      set_game_time(from.game_time());
    }
    if (from.has_team1_score()) {
      set_team1_score(from.team1_score());
    }
    if (from.has_team2_score()) {
      set_team2_score(from.team2_score());
    }
    if (from.has_save_id()) {
      set_save_id(from.save_id());
    }
    if (from.has_save_time()) {
      set_save_time(from.save_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTASaveGame_SaveInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTASaveGame_SaveInstance::CopyFrom(const CDOTASaveGame_SaveInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTASaveGame_SaveInstance::IsInitialized() const {
  
  return true;
}

void CDOTASaveGame_SaveInstance::Swap(CDOTASaveGame_SaveInstance* other) {
  if (other != this) {
    std::swap(game_time_, other->game_time_);
    std::swap(team1_score_, other->team1_score_);
    std::swap(team2_score_, other->team2_score_);
    player_positions_.Swap(&other->player_positions_);
    std::swap(save_id_, other->save_id_);
    std::swap(save_time_, other->save_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTASaveGame_SaveInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTASaveGame_SaveInstance_descriptor_;
  metadata.reflection = CDOTASaveGame_SaveInstance_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTASaveGame::kMatchIdFieldNumber;
const int CDOTASaveGame::kSaveTimeFieldNumber;
const int CDOTASaveGame::kPlayersFieldNumber;
const int CDOTASaveGame::kSaveInstancesFieldNumber;
#endif  // !_MSC_VER

CDOTASaveGame::CDOTASaveGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTASaveGame::InitAsDefaultInstance() {
}

CDOTASaveGame::CDOTASaveGame(const CDOTASaveGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTASaveGame::SharedCtor() {
  _cached_size_ = 0;
  match_id_ = 0u;
  save_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTASaveGame::~CDOTASaveGame() {
  SharedDtor();
}

void CDOTASaveGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTASaveGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTASaveGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTASaveGame_descriptor_;
}

const CDOTASaveGame& CDOTASaveGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CDOTASaveGame* CDOTASaveGame::default_instance_ = NULL;

CDOTASaveGame* CDOTASaveGame::New() const {
  return new CDOTASaveGame;
}

void CDOTASaveGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    match_id_ = 0u;
    save_time_ = 0u;
  }
  players_.Clear();
  save_instances_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTASaveGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 save_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &save_time_)));
          set_has_save_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_players;
        break;
      }
      
      // repeated .CDOTASaveGame.Player players = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_players;
        if (input->ExpectTag(34)) goto parse_save_instances;
        break;
      }
      
      // repeated .CDOTASaveGame.SaveInstance save_instances = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_save_instances:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_save_instances()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_save_instances;
        if (input->ExpectTag(40)) goto parse_match_id;
        break;
      }
      
      // optional uint32 match_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTASaveGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 save_time = 2;
  if (has_save_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->save_time(), output);
  }
  
  // repeated .CDOTASaveGame.Player players = 3;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->players(i), output);
  }
  
  // repeated .CDOTASaveGame.SaveInstance save_instances = 4;
  for (int i = 0; i < this->save_instances_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->save_instances(i), output);
  }
  
  // optional uint32 match_id = 5;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->match_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTASaveGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 save_time = 2;
  if (has_save_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->save_time(), target);
  }
  
  // repeated .CDOTASaveGame.Player players = 3;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->players(i), target);
  }
  
  // repeated .CDOTASaveGame.SaveInstance save_instances = 4;
  for (int i = 0; i < this->save_instances_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->save_instances(i), target);
  }
  
  // optional uint32 match_id = 5;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->match_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTASaveGame::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 match_id = 5;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_id());
    }
    
    // optional uint32 save_time = 2;
    if (has_save_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->save_time());
    }
    
  }
  // repeated .CDOTASaveGame.Player players = 3;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }
  
  // repeated .CDOTASaveGame.SaveInstance save_instances = 4;
  total_size += 1 * this->save_instances_size();
  for (int i = 0; i < this->save_instances_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->save_instances(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTASaveGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTASaveGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTASaveGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTASaveGame::MergeFrom(const CDOTASaveGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  save_instances_.MergeFrom(from.save_instances_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
    if (from.has_save_time()) {
      set_save_time(from.save_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTASaveGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTASaveGame::CopyFrom(const CDOTASaveGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTASaveGame::IsInitialized() const {
  
  return true;
}

void CDOTASaveGame::Swap(CDOTASaveGame* other) {
  if (other != this) {
    std::swap(match_id_, other->match_id_);
    std::swap(save_time_, other->save_time_);
    players_.Swap(&other->players_);
    save_instances_.Swap(&other->save_instances_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTASaveGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTASaveGame_descriptor_;
  metadata.reflection = CDOTASaveGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgLeaverState::kLobbyStateFieldNumber;
const int CMsgLeaverState::kGameStateFieldNumber;
const int CMsgLeaverState::kLeaverDetectedFieldNumber;
const int CMsgLeaverState::kFirstBloodHappenedFieldNumber;
const int CMsgLeaverState::kDiscardMatchResultsFieldNumber;
const int CMsgLeaverState::kMassDisconnectFieldNumber;
#endif  // !_MSC_VER

CMsgLeaverState::CMsgLeaverState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgLeaverState::InitAsDefaultInstance() {
}

CMsgLeaverState::CMsgLeaverState(const CMsgLeaverState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgLeaverState::SharedCtor() {
  _cached_size_ = 0;
  lobby_state_ = 0u;
  game_state_ = 0;
  leaver_detected_ = false;
  first_blood_happened_ = false;
  discard_match_results_ = false;
  mass_disconnect_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgLeaverState::~CMsgLeaverState() {
  SharedDtor();
}

void CMsgLeaverState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgLeaverState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLeaverState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLeaverState_descriptor_;
}

const CMsgLeaverState& CMsgLeaverState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CMsgLeaverState* CMsgLeaverState::default_instance_ = NULL;

CMsgLeaverState* CMsgLeaverState::New() const {
  return new CMsgLeaverState;
}

void CMsgLeaverState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lobby_state_ = 0u;
    game_state_ = 0;
    leaver_detected_ = false;
    first_blood_happened_ = false;
    discard_match_results_ = false;
    mass_disconnect_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgLeaverState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 lobby_state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lobby_state_)));
          set_has_lobby_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_state;
        break;
      }
      
      // optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (DOTA_GameState_IsValid(value)) {
            set_game_state(static_cast< DOTA_GameState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_leaver_detected;
        break;
      }
      
      // optional bool leaver_detected = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leaver_detected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &leaver_detected_)));
          set_has_leaver_detected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_first_blood_happened;
        break;
      }
      
      // optional bool first_blood_happened = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_blood_happened:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &first_blood_happened_)));
          set_has_first_blood_happened();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_discard_match_results;
        break;
      }
      
      // optional bool discard_match_results = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_discard_match_results:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &discard_match_results_)));
          set_has_discard_match_results();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_mass_disconnect;
        break;
      }
      
      // optional bool mass_disconnect = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mass_disconnect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mass_disconnect_)));
          set_has_mass_disconnect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgLeaverState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 lobby_state = 1;
  if (has_lobby_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->lobby_state(), output);
  }
  
  // optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
  if (has_game_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->game_state(), output);
  }
  
  // optional bool leaver_detected = 3;
  if (has_leaver_detected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->leaver_detected(), output);
  }
  
  // optional bool first_blood_happened = 4;
  if (has_first_blood_happened()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->first_blood_happened(), output);
  }
  
  // optional bool discard_match_results = 5;
  if (has_discard_match_results()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->discard_match_results(), output);
  }
  
  // optional bool mass_disconnect = 6;
  if (has_mass_disconnect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->mass_disconnect(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgLeaverState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 lobby_state = 1;
  if (has_lobby_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->lobby_state(), target);
  }
  
  // optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
  if (has_game_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->game_state(), target);
  }
  
  // optional bool leaver_detected = 3;
  if (has_leaver_detected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->leaver_detected(), target);
  }
  
  // optional bool first_blood_happened = 4;
  if (has_first_blood_happened()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->first_blood_happened(), target);
  }
  
  // optional bool discard_match_results = 5;
  if (has_discard_match_results()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->discard_match_results(), target);
  }
  
  // optional bool mass_disconnect = 6;
  if (has_mass_disconnect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->mass_disconnect(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgLeaverState::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 lobby_state = 1;
    if (has_lobby_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lobby_state());
    }
    
    // optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
    if (has_game_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_state());
    }
    
    // optional bool leaver_detected = 3;
    if (has_leaver_detected()) {
      total_size += 1 + 1;
    }
    
    // optional bool first_blood_happened = 4;
    if (has_first_blood_happened()) {
      total_size += 1 + 1;
    }
    
    // optional bool discard_match_results = 5;
    if (has_discard_match_results()) {
      total_size += 1 + 1;
    }
    
    // optional bool mass_disconnect = 6;
    if (has_mass_disconnect()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLeaverState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgLeaverState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgLeaverState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgLeaverState::MergeFrom(const CMsgLeaverState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lobby_state()) {
      set_lobby_state(from.lobby_state());
    }
    if (from.has_game_state()) {
      set_game_state(from.game_state());
    }
    if (from.has_leaver_detected()) {
      set_leaver_detected(from.leaver_detected());
    }
    if (from.has_first_blood_happened()) {
      set_first_blood_happened(from.first_blood_happened());
    }
    if (from.has_discard_match_results()) {
      set_discard_match_results(from.discard_match_results());
    }
    if (from.has_mass_disconnect()) {
      set_mass_disconnect(from.mass_disconnect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgLeaverState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLeaverState::CopyFrom(const CMsgLeaverState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLeaverState::IsInitialized() const {
  
  return true;
}

void CMsgLeaverState::Swap(CMsgLeaverState* other) {
  if (other != this) {
    std::swap(lobby_state_, other->lobby_state_);
    std::swap(game_state_, other->game_state_);
    std::swap(leaver_detected_, other->leaver_detected_);
    std::swap(first_blood_happened_, other->first_blood_happened_);
    std::swap(discard_match_results_, other->discard_match_results_);
    std::swap(mass_disconnect_, other->mass_disconnect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgLeaverState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgLeaverState_descriptor_;
  metadata.reflection = CMsgLeaverState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTALobbyMember_CDOTALobbyMemberXPBonus::kTypeFieldNumber;
const int CDOTALobbyMember_CDOTALobbyMemberXPBonus::kXpBonusFieldNumber;
#endif  // !_MSC_VER

CDOTALobbyMember_CDOTALobbyMemberXPBonus::CDOTALobbyMember_CDOTALobbyMemberXPBonus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::InitAsDefaultInstance() {
}

CDOTALobbyMember_CDOTALobbyMemberXPBonus::CDOTALobbyMember_CDOTALobbyMemberXPBonus(const CDOTALobbyMember_CDOTALobbyMemberXPBonus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  xp_bonus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTALobbyMember_CDOTALobbyMemberXPBonus::~CDOTALobbyMember_CDOTALobbyMemberXPBonus() {
  SharedDtor();
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTALobbyMember_CDOTALobbyMemberXPBonus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTALobbyMember_CDOTALobbyMemberXPBonus_descriptor_;
}

const CDOTALobbyMember_CDOTALobbyMemberXPBonus& CDOTALobbyMember_CDOTALobbyMemberXPBonus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CDOTALobbyMember_CDOTALobbyMemberXPBonus* CDOTALobbyMember_CDOTALobbyMemberXPBonus::default_instance_ = NULL;

CDOTALobbyMember_CDOTALobbyMemberXPBonus* CDOTALobbyMember_CDOTALobbyMemberXPBonus::New() const {
  return new CDOTALobbyMember_CDOTALobbyMemberXPBonus;
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    xp_bonus_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTALobbyMember_CDOTALobbyMemberXPBonus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_xp_bonus;
        break;
      }
      
      // optional float xp_bonus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_xp_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xp_bonus_)));
          set_has_xp_bonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // optional float xp_bonus = 2;
  if (has_xp_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->xp_bonus(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTALobbyMember_CDOTALobbyMemberXPBonus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional float xp_bonus = 2;
  if (has_xp_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->xp_bonus(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTALobbyMember_CDOTALobbyMemberXPBonus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional float xp_bonus = 2;
    if (has_xp_bonus()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTALobbyMember_CDOTALobbyMemberXPBonus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTALobbyMember_CDOTALobbyMemberXPBonus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::MergeFrom(const CDOTALobbyMember_CDOTALobbyMemberXPBonus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_xp_bonus()) {
      set_xp_bonus(from.xp_bonus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::CopyFrom(const CDOTALobbyMember_CDOTALobbyMemberXPBonus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTALobbyMember_CDOTALobbyMemberXPBonus::IsInitialized() const {
  
  return true;
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::Swap(CDOTALobbyMember_CDOTALobbyMemberXPBonus* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(xp_bonus_, other->xp_bonus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTALobbyMember_CDOTALobbyMemberXPBonus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTALobbyMember_CDOTALobbyMemberXPBonus_descriptor_;
  metadata.reflection = CDOTALobbyMember_CDOTALobbyMemberXPBonus_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTALobbyMember::kIdFieldNumber;
const int CDOTALobbyMember::kHeroIdFieldNumber;
const int CDOTALobbyMember::kTeamFieldNumber;
const int CDOTALobbyMember::kNameFieldNumber;
const int CDOTALobbyMember::kSlotFieldNumber;
const int CDOTALobbyMember::kPartyIdFieldNumber;
const int CDOTALobbyMember::kMetaLevelFieldNumber;
const int CDOTALobbyMember::kMetaXpFieldNumber;
const int CDOTALobbyMember::kMetaXpAwardedFieldNumber;
const int CDOTALobbyMember::kLeaverStatusFieldNumber;
const int CDOTALobbyMember::kLeaverActionsFieldNumber;
const int CDOTALobbyMember::kChannelFieldNumber;
const int CDOTALobbyMember::kPrizeDefIndexFieldNumber;
const int CDOTALobbyMember::kDisabledHeroIdFieldNumber;
const int CDOTALobbyMember::kPartnerAccountTypeFieldNumber;
const int CDOTALobbyMember::kEnabledHeroIdFieldNumber;
const int CDOTALobbyMember::kCoachTeamFieldNumber;
const int CDOTALobbyMember::kNexonPcBangNoFieldNumber;
const int CDOTALobbyMember::kNexonPcBangNameFieldNumber;
const int CDOTALobbyMember::kXpBonusesFieldNumber;
#endif  // !_MSC_VER

CDOTALobbyMember::CDOTALobbyMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTALobbyMember::InitAsDefaultInstance() {
}

CDOTALobbyMember::CDOTALobbyMember(const CDOTALobbyMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTALobbyMember::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  hero_id_ = 0u;
  team_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  slot_ = 0u;
  party_id_ = GOOGLE_ULONGLONG(0);
  meta_level_ = 0u;
  meta_xp_ = 0u;
  meta_xp_awarded_ = 0u;
  leaver_status_ = 0;
  leaver_actions_ = 0u;
  channel_ = 0u;
  prize_def_index_ = 0u;
  partner_account_type_ = 0;
  coach_team_ = 0;
  nexon_pc_bang_no_ = 0u;
  nexon_pc_bang_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTALobbyMember::~CDOTALobbyMember() {
  SharedDtor();
}

void CDOTALobbyMember::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (nexon_pc_bang_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nexon_pc_bang_name_;
  }
  if (this != default_instance_) {
  }
}

void CDOTALobbyMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTALobbyMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTALobbyMember_descriptor_;
}

const CDOTALobbyMember& CDOTALobbyMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CDOTALobbyMember* CDOTALobbyMember::default_instance_ = NULL;

CDOTALobbyMember* CDOTALobbyMember::New() const {
  return new CDOTALobbyMember;
}

void CDOTALobbyMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    hero_id_ = 0u;
    team_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    slot_ = 0u;
    party_id_ = GOOGLE_ULONGLONG(0);
    meta_level_ = 0u;
    meta_xp_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    meta_xp_awarded_ = 0u;
    leaver_status_ = 0;
    leaver_actions_ = 0u;
    channel_ = 0u;
    prize_def_index_ = 0u;
    partner_account_type_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    coach_team_ = 0;
    nexon_pc_bang_no_ = 0u;
    if (has_nexon_pc_bang_name()) {
      if (nexon_pc_bang_name_ != &::google::protobuf::internal::kEmptyString) {
        nexon_pc_bang_name_->clear();
      }
    }
  }
  disabled_hero_id_.Clear();
  enabled_hero_id_.Clear();
  xp_bonuses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTALobbyMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }
      
      // optional uint32 hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_team;
        break;
      }
      
      // optional .DOTA_GC_TEAM team = 3 [default = DOTA_GC_TEAM_GOOD_GUYS];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (DOTA_GC_TEAM_IsValid(value)) {
            set_team(static_cast< DOTA_GC_TEAM >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }
      
      // optional string name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_slot;
        break;
      }
      
      // optional uint32 slot = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_party_id;
        break;
      }
      
      // optional uint64 party_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_party_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &party_id_)));
          set_has_party_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_meta_level;
        break;
      }
      
      // optional uint32 meta_level = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_meta_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &meta_level_)));
          set_has_meta_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_meta_xp;
        break;
      }
      
      // optional uint32 meta_xp = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_meta_xp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &meta_xp_)));
          set_has_meta_xp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_meta_xp_awarded;
        break;
      }
      
      // optional uint32 meta_xp_awarded = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_meta_xp_awarded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &meta_xp_awarded_)));
          set_has_meta_xp_awarded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_leaver_status;
        break;
      }
      
      // optional .DOTALeaverStatus_t leaver_status = 16 [default = DOTA_LEAVER_NONE];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leaver_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (DOTALeaverStatus_t_IsValid(value)) {
            set_leaver_status(static_cast< DOTALeaverStatus_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_channel;
        break;
      }
      
      // optional uint32 channel = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_prize_def_index;
        break;
      }
      
      // optional uint32 prize_def_index = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prize_def_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prize_def_index_)));
          set_has_prize_def_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_disabled_hero_id;
        break;
      }
      
      // repeated uint32 disabled_hero_id = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_disabled_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 160, input, this->mutable_disabled_hero_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_disabled_hero_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_disabled_hero_id;
        if (input->ExpectTag(168)) goto parse_partner_account_type;
        break;
      }
      
      // optional .PartnerAccountType partner_account_type = 21 [default = PARTNER_NONE];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partner_account_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (PartnerAccountType_IsValid(value)) {
            set_partner_account_type(static_cast< PartnerAccountType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(21, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_enabled_hero_id;
        break;
      }
      
      // repeated uint32 enabled_hero_id = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enabled_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 176, input, this->mutable_enabled_hero_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_enabled_hero_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_enabled_hero_id;
        if (input->ExpectTag(184)) goto parse_coach_team;
        break;
      }
      
      // optional .DOTA_GC_TEAM coach_team = 23 [default = DOTA_GC_TEAM_GOOD_GUYS];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coach_team:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (DOTA_GC_TEAM_IsValid(value)) {
            set_coach_team(static_cast< DOTA_GC_TEAM >(value));
          } else {
            mutable_unknown_fields()->AddVarint(23, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_nexon_pc_bang_no;
        break;
      }
      
      // optional uint32 nexon_pc_bang_no = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nexon_pc_bang_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nexon_pc_bang_no_)));
          set_has_nexon_pc_bang_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_nexon_pc_bang_name;
        break;
      }
      
      // optional string nexon_pc_bang_name = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nexon_pc_bang_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nexon_pc_bang_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nexon_pc_bang_name().data(), this->nexon_pc_bang_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_xp_bonuses;
        break;
      }
      
      // repeated .CDOTALobbyMember.CDOTALobbyMemberXPBonus xp_bonuses = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xp_bonuses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_xp_bonuses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_xp_bonuses;
        if (input->ExpectTag(224)) goto parse_leaver_actions;
        break;
      }
      
      // optional uint32 leaver_actions = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leaver_actions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leaver_actions_)));
          set_has_leaver_actions();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTALobbyMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->id(), output);
  }
  
  // optional uint32 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_id(), output);
  }
  
  // optional .DOTA_GC_TEAM team = 3 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->team(), output);
  }
  
  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->name(), output);
  }
  
  // optional uint32 slot = 7;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->slot(), output);
  }
  
  // optional uint64 party_id = 12;
  if (has_party_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->party_id(), output);
  }
  
  // optional uint32 meta_level = 13;
  if (has_meta_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->meta_level(), output);
  }
  
  // optional uint32 meta_xp = 14;
  if (has_meta_xp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->meta_xp(), output);
  }
  
  // optional uint32 meta_xp_awarded = 15;
  if (has_meta_xp_awarded()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->meta_xp_awarded(), output);
  }
  
  // optional .DOTALeaverStatus_t leaver_status = 16 [default = DOTA_LEAVER_NONE];
  if (has_leaver_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->leaver_status(), output);
  }
  
  // optional uint32 channel = 17;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->channel(), output);
  }
  
  // optional uint32 prize_def_index = 18;
  if (has_prize_def_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->prize_def_index(), output);
  }
  
  // repeated uint32 disabled_hero_id = 20;
  for (int i = 0; i < this->disabled_hero_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      20, this->disabled_hero_id(i), output);
  }
  
  // optional .PartnerAccountType partner_account_type = 21 [default = PARTNER_NONE];
  if (has_partner_account_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->partner_account_type(), output);
  }
  
  // repeated uint32 enabled_hero_id = 22;
  for (int i = 0; i < this->enabled_hero_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      22, this->enabled_hero_id(i), output);
  }
  
  // optional .DOTA_GC_TEAM coach_team = 23 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (has_coach_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->coach_team(), output);
  }
  
  // optional uint32 nexon_pc_bang_no = 24;
  if (has_nexon_pc_bang_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->nexon_pc_bang_no(), output);
  }
  
  // optional string nexon_pc_bang_name = 25;
  if (has_nexon_pc_bang_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nexon_pc_bang_name().data(), this->nexon_pc_bang_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->nexon_pc_bang_name(), output);
  }
  
  // repeated .CDOTALobbyMember.CDOTALobbyMemberXPBonus xp_bonuses = 27;
  for (int i = 0; i < this->xp_bonuses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->xp_bonuses(i), output);
  }
  
  // optional uint32 leaver_actions = 28;
  if (has_leaver_actions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->leaver_actions(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTALobbyMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->id(), target);
  }
  
  // optional uint32 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_id(), target);
  }
  
  // optional .DOTA_GC_TEAM team = 3 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->team(), target);
  }
  
  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }
  
  // optional uint32 slot = 7;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->slot(), target);
  }
  
  // optional uint64 party_id = 12;
  if (has_party_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->party_id(), target);
  }
  
  // optional uint32 meta_level = 13;
  if (has_meta_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->meta_level(), target);
  }
  
  // optional uint32 meta_xp = 14;
  if (has_meta_xp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->meta_xp(), target);
  }
  
  // optional uint32 meta_xp_awarded = 15;
  if (has_meta_xp_awarded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->meta_xp_awarded(), target);
  }
  
  // optional .DOTALeaverStatus_t leaver_status = 16 [default = DOTA_LEAVER_NONE];
  if (has_leaver_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->leaver_status(), target);
  }
  
  // optional uint32 channel = 17;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->channel(), target);
  }
  
  // optional uint32 prize_def_index = 18;
  if (has_prize_def_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->prize_def_index(), target);
  }
  
  // repeated uint32 disabled_hero_id = 20;
  for (int i = 0; i < this->disabled_hero_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(20, this->disabled_hero_id(i), target);
  }
  
  // optional .PartnerAccountType partner_account_type = 21 [default = PARTNER_NONE];
  if (has_partner_account_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->partner_account_type(), target);
  }
  
  // repeated uint32 enabled_hero_id = 22;
  for (int i = 0; i < this->enabled_hero_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(22, this->enabled_hero_id(i), target);
  }
  
  // optional .DOTA_GC_TEAM coach_team = 23 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (has_coach_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      23, this->coach_team(), target);
  }
  
  // optional uint32 nexon_pc_bang_no = 24;
  if (has_nexon_pc_bang_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->nexon_pc_bang_no(), target);
  }
  
  // optional string nexon_pc_bang_name = 25;
  if (has_nexon_pc_bang_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nexon_pc_bang_name().data(), this->nexon_pc_bang_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->nexon_pc_bang_name(), target);
  }
  
  // repeated .CDOTALobbyMember.CDOTALobbyMemberXPBonus xp_bonuses = 27;
  for (int i = 0; i < this->xp_bonuses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->xp_bonuses(i), target);
  }
  
  // optional uint32 leaver_actions = 28;
  if (has_leaver_actions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->leaver_actions(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTALobbyMember::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 id = 1;
    if (has_id()) {
      total_size += 1 + 8;
    }
    
    // optional uint32 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }
    
    // optional .DOTA_GC_TEAM team = 3 [default = DOTA_GC_TEAM_GOOD_GUYS];
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team());
    }
    
    // optional string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional uint32 slot = 7;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot());
    }
    
    // optional uint64 party_id = 12;
    if (has_party_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->party_id());
    }
    
    // optional uint32 meta_level = 13;
    if (has_meta_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->meta_level());
    }
    
    // optional uint32 meta_xp = 14;
    if (has_meta_xp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->meta_xp());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 meta_xp_awarded = 15;
    if (has_meta_xp_awarded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->meta_xp_awarded());
    }
    
    // optional .DOTALeaverStatus_t leaver_status = 16 [default = DOTA_LEAVER_NONE];
    if (has_leaver_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->leaver_status());
    }
    
    // optional uint32 leaver_actions = 28;
    if (has_leaver_actions()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leaver_actions());
    }
    
    // optional uint32 channel = 17;
    if (has_channel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }
    
    // optional uint32 prize_def_index = 18;
    if (has_prize_def_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prize_def_index());
    }
    
    // optional .PartnerAccountType partner_account_type = 21 [default = PARTNER_NONE];
    if (has_partner_account_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->partner_account_type());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .DOTA_GC_TEAM coach_team = 23 [default = DOTA_GC_TEAM_GOOD_GUYS];
    if (has_coach_team()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->coach_team());
    }
    
    // optional uint32 nexon_pc_bang_no = 24;
    if (has_nexon_pc_bang_no()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nexon_pc_bang_no());
    }
    
    // optional string nexon_pc_bang_name = 25;
    if (has_nexon_pc_bang_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nexon_pc_bang_name());
    }
    
  }
  // repeated uint32 disabled_hero_id = 20;
  {
    int data_size = 0;
    for (int i = 0; i < this->disabled_hero_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->disabled_hero_id(i));
    }
    total_size += 2 * this->disabled_hero_id_size() + data_size;
  }
  
  // repeated uint32 enabled_hero_id = 22;
  {
    int data_size = 0;
    for (int i = 0; i < this->enabled_hero_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->enabled_hero_id(i));
    }
    total_size += 2 * this->enabled_hero_id_size() + data_size;
  }
  
  // repeated .CDOTALobbyMember.CDOTALobbyMemberXPBonus xp_bonuses = 27;
  total_size += 2 * this->xp_bonuses_size();
  for (int i = 0; i < this->xp_bonuses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->xp_bonuses(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTALobbyMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTALobbyMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTALobbyMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTALobbyMember::MergeFrom(const CDOTALobbyMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  disabled_hero_id_.MergeFrom(from.disabled_hero_id_);
  enabled_hero_id_.MergeFrom(from.enabled_hero_id_);
  xp_bonuses_.MergeFrom(from.xp_bonuses_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_slot()) {
      set_slot(from.slot());
    }
    if (from.has_party_id()) {
      set_party_id(from.party_id());
    }
    if (from.has_meta_level()) {
      set_meta_level(from.meta_level());
    }
    if (from.has_meta_xp()) {
      set_meta_xp(from.meta_xp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_meta_xp_awarded()) {
      set_meta_xp_awarded(from.meta_xp_awarded());
    }
    if (from.has_leaver_status()) {
      set_leaver_status(from.leaver_status());
    }
    if (from.has_leaver_actions()) {
      set_leaver_actions(from.leaver_actions());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_prize_def_index()) {
      set_prize_def_index(from.prize_def_index());
    }
    if (from.has_partner_account_type()) {
      set_partner_account_type(from.partner_account_type());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_coach_team()) {
      set_coach_team(from.coach_team());
    }
    if (from.has_nexon_pc_bang_no()) {
      set_nexon_pc_bang_no(from.nexon_pc_bang_no());
    }
    if (from.has_nexon_pc_bang_name()) {
      set_nexon_pc_bang_name(from.nexon_pc_bang_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTALobbyMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTALobbyMember::CopyFrom(const CDOTALobbyMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTALobbyMember::IsInitialized() const {
  
  return true;
}

void CDOTALobbyMember::Swap(CDOTALobbyMember* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(team_, other->team_);
    std::swap(name_, other->name_);
    std::swap(slot_, other->slot_);
    std::swap(party_id_, other->party_id_);
    std::swap(meta_level_, other->meta_level_);
    std::swap(meta_xp_, other->meta_xp_);
    std::swap(meta_xp_awarded_, other->meta_xp_awarded_);
    std::swap(leaver_status_, other->leaver_status_);
    std::swap(leaver_actions_, other->leaver_actions_);
    std::swap(channel_, other->channel_);
    std::swap(prize_def_index_, other->prize_def_index_);
    disabled_hero_id_.Swap(&other->disabled_hero_id_);
    std::swap(partner_account_type_, other->partner_account_type_);
    enabled_hero_id_.Swap(&other->enabled_hero_id_);
    std::swap(coach_team_, other->coach_team_);
    std::swap(nexon_pc_bang_no_, other->nexon_pc_bang_no_);
    std::swap(nexon_pc_bang_name_, other->nexon_pc_bang_name_);
    xp_bonuses_.Swap(&other->xp_bonuses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTALobbyMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTALobbyMember_descriptor_;
  metadata.reflection = CDOTALobbyMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTALobbyMemberPrivate::kIpFieldNumber;
const int CDOTALobbyMemberPrivate::kReadyStateFieldNumber;
const int CDOTALobbyMemberPrivate::kLeaverStateFieldNumber;
#endif  // !_MSC_VER

CDOTALobbyMemberPrivate::CDOTALobbyMemberPrivate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTALobbyMemberPrivate::InitAsDefaultInstance() {
  leaver_state_ = const_cast< ::CMsgLeaverState*>(&::CMsgLeaverState::default_instance());
}

CDOTALobbyMemberPrivate::CDOTALobbyMemberPrivate(const CDOTALobbyMemberPrivate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTALobbyMemberPrivate::SharedCtor() {
  _cached_size_ = 0;
  ip_ = 0u;
  ready_state_ = 0;
  leaver_state_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTALobbyMemberPrivate::~CDOTALobbyMemberPrivate() {
  SharedDtor();
}

void CDOTALobbyMemberPrivate::SharedDtor() {
  if (this != default_instance_) {
    delete leaver_state_;
  }
}

void CDOTALobbyMemberPrivate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTALobbyMemberPrivate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTALobbyMemberPrivate_descriptor_;
}

const CDOTALobbyMemberPrivate& CDOTALobbyMemberPrivate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CDOTALobbyMemberPrivate* CDOTALobbyMemberPrivate::default_instance_ = NULL;

CDOTALobbyMemberPrivate* CDOTALobbyMemberPrivate::New() const {
  return new CDOTALobbyMemberPrivate;
}

void CDOTALobbyMemberPrivate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ip_ = 0u;
    ready_state_ = 0;
    if (has_leaver_state()) {
      if (leaver_state_ != NULL) leaver_state_->::CMsgLeaverState::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTALobbyMemberPrivate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ready_state;
        break;
      }
      
      // optional .DOTALobbyReadyState ready_state = 2 [default = DOTALobbyReadyState_UNDECLARED];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ready_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (DOTALobbyReadyState_IsValid(value)) {
            set_ready_state(static_cast< DOTALobbyReadyState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_leaver_state;
        break;
      }
      
      // optional .CMsgLeaverState leaver_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leaver_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leaver_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTALobbyMemberPrivate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ip(), output);
  }
  
  // optional .DOTALobbyReadyState ready_state = 2 [default = DOTALobbyReadyState_UNDECLARED];
  if (has_ready_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ready_state(), output);
  }
  
  // optional .CMsgLeaverState leaver_state = 3;
  if (has_leaver_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->leaver_state(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTALobbyMemberPrivate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ip = 1;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ip(), target);
  }
  
  // optional .DOTALobbyReadyState ready_state = 2 [default = DOTALobbyReadyState_UNDECLARED];
  if (has_ready_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ready_state(), target);
  }
  
  // optional .CMsgLeaverState leaver_state = 3;
  if (has_leaver_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->leaver_state(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTALobbyMemberPrivate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }
    
    // optional .DOTALobbyReadyState ready_state = 2 [default = DOTALobbyReadyState_UNDECLARED];
    if (has_ready_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ready_state());
    }
    
    // optional .CMsgLeaverState leaver_state = 3;
    if (has_leaver_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leaver_state());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTALobbyMemberPrivate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTALobbyMemberPrivate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTALobbyMemberPrivate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTALobbyMemberPrivate::MergeFrom(const CDOTALobbyMemberPrivate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_ready_state()) {
      set_ready_state(from.ready_state());
    }
    if (from.has_leaver_state()) {
      mutable_leaver_state()->::CMsgLeaverState::MergeFrom(from.leaver_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTALobbyMemberPrivate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTALobbyMemberPrivate::CopyFrom(const CDOTALobbyMemberPrivate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTALobbyMemberPrivate::IsInitialized() const {
  
  return true;
}

void CDOTALobbyMemberPrivate::Swap(CDOTALobbyMemberPrivate* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(ready_state_, other->ready_state_);
    std::swap(leaver_state_, other->leaver_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTALobbyMemberPrivate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTALobbyMemberPrivate_descriptor_;
  metadata.reflection = CDOTALobbyMemberPrivate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLobbyTeamDetails::kTeamNameFieldNumber;
const int CLobbyTeamDetails::kTeamTagFieldNumber;
const int CLobbyTeamDetails::kTeamIdFieldNumber;
const int CLobbyTeamDetails::kTeamLogoFieldNumber;
const int CLobbyTeamDetails::kTeamBaseLogoFieldNumber;
const int CLobbyTeamDetails::kTeamBannerLogoFieldNumber;
const int CLobbyTeamDetails::kTeamCompleteFieldNumber;
const int CLobbyTeamDetails::kGuildNameFieldNumber;
const int CLobbyTeamDetails::kGuildTagFieldNumber;
const int CLobbyTeamDetails::kGuildIdFieldNumber;
const int CLobbyTeamDetails::kGuildLogoFieldNumber;
const int CLobbyTeamDetails::kGuildBaseLogoFieldNumber;
const int CLobbyTeamDetails::kGuildBannerLogoFieldNumber;
#endif  // !_MSC_VER

CLobbyTeamDetails::CLobbyTeamDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLobbyTeamDetails::InitAsDefaultInstance() {
}

CLobbyTeamDetails::CLobbyTeamDetails(const CLobbyTeamDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLobbyTeamDetails::SharedCtor() {
  _cached_size_ = 0;
  team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  team_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  team_id_ = 0u;
  team_logo_ = GOOGLE_ULONGLONG(0);
  team_base_logo_ = GOOGLE_ULONGLONG(0);
  team_banner_logo_ = GOOGLE_ULONGLONG(0);
  team_complete_ = false;
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guild_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guild_id_ = 0u;
  guild_logo_ = GOOGLE_ULONGLONG(0);
  guild_base_logo_ = GOOGLE_ULONGLONG(0);
  guild_banner_logo_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLobbyTeamDetails::~CLobbyTeamDetails() {
  SharedDtor();
}

void CLobbyTeamDetails::SharedDtor() {
  if (team_name_ != &::google::protobuf::internal::kEmptyString) {
    delete team_name_;
  }
  if (team_tag_ != &::google::protobuf::internal::kEmptyString) {
    delete team_tag_;
  }
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (guild_tag_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_tag_;
  }
  if (this != default_instance_) {
  }
}

void CLobbyTeamDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLobbyTeamDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLobbyTeamDetails_descriptor_;
}

const CLobbyTeamDetails& CLobbyTeamDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CLobbyTeamDetails* CLobbyTeamDetails::default_instance_ = NULL;

CLobbyTeamDetails* CLobbyTeamDetails::New() const {
  return new CLobbyTeamDetails;
}

void CLobbyTeamDetails::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_team_name()) {
      if (team_name_ != &::google::protobuf::internal::kEmptyString) {
        team_name_->clear();
      }
    }
    if (has_team_tag()) {
      if (team_tag_ != &::google::protobuf::internal::kEmptyString) {
        team_tag_->clear();
      }
    }
    team_id_ = 0u;
    team_logo_ = GOOGLE_ULONGLONG(0);
    team_base_logo_ = GOOGLE_ULONGLONG(0);
    team_banner_logo_ = GOOGLE_ULONGLONG(0);
    team_complete_ = false;
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
        guild_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_guild_tag()) {
      if (guild_tag_ != &::google::protobuf::internal::kEmptyString) {
        guild_tag_->clear();
      }
    }
    guild_id_ = 0u;
    guild_logo_ = GOOGLE_ULONGLONG(0);
    guild_base_logo_ = GOOGLE_ULONGLONG(0);
    guild_banner_logo_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLobbyTeamDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string team_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_team_tag;
        break;
      }
      
      // optional string team_tag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->team_tag().data(), this->team_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_team_id;
        break;
      }
      
      // optional uint32 team_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_team_logo;
        break;
      }
      
      // optional uint64 team_logo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_logo_)));
          set_has_team_logo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_team_base_logo;
        break;
      }
      
      // optional uint64 team_base_logo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_base_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_base_logo_)));
          set_has_team_base_logo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_team_banner_logo;
        break;
      }
      
      // optional uint64 team_banner_logo = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_banner_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_banner_logo_)));
          set_has_team_banner_logo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_team_complete;
        break;
      }
      
      // optional bool team_complete = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_complete:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &team_complete_)));
          set_has_team_complete();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_guild_name;
        break;
      }
      
      // optional string guild_name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_guild_tag;
        break;
      }
      
      // optional string guild_tag = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guild_tag().data(), this->guild_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_guild_id;
        break;
      }
      
      // optional uint32 guild_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_guild_logo;
        break;
      }
      
      // optional uint64 guild_logo = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guild_logo_)));
          set_has_guild_logo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_guild_base_logo;
        break;
      }
      
      // optional uint64 guild_base_logo = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_base_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guild_base_logo_)));
          set_has_guild_base_logo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_guild_banner_logo;
        break;
      }
      
      // optional uint64 guild_banner_logo = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_banner_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guild_banner_logo_)));
          set_has_guild_banner_logo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLobbyTeamDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string team_name = 1;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->team_name(), output);
  }
  
  // optional string team_tag = 3;
  if (has_team_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_tag().data(), this->team_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->team_tag(), output);
  }
  
  // optional uint32 team_id = 4;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->team_id(), output);
  }
  
  // optional uint64 team_logo = 5;
  if (has_team_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->team_logo(), output);
  }
  
  // optional uint64 team_base_logo = 6;
  if (has_team_base_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->team_base_logo(), output);
  }
  
  // optional uint64 team_banner_logo = 7;
  if (has_team_banner_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->team_banner_logo(), output);
  }
  
  // optional bool team_complete = 8;
  if (has_team_complete()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->team_complete(), output);
  }
  
  // optional string guild_name = 9;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->guild_name(), output);
  }
  
  // optional string guild_tag = 10;
  if (has_guild_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_tag().data(), this->guild_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->guild_tag(), output);
  }
  
  // optional uint32 guild_id = 11;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->guild_id(), output);
  }
  
  // optional uint64 guild_logo = 12;
  if (has_guild_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->guild_logo(), output);
  }
  
  // optional uint64 guild_base_logo = 13;
  if (has_guild_base_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->guild_base_logo(), output);
  }
  
  // optional uint64 guild_banner_logo = 14;
  if (has_guild_banner_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->guild_banner_logo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLobbyTeamDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string team_name = 1;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->team_name(), target);
  }
  
  // optional string team_tag = 3;
  if (has_team_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_tag().data(), this->team_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->team_tag(), target);
  }
  
  // optional uint32 team_id = 4;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->team_id(), target);
  }
  
  // optional uint64 team_logo = 5;
  if (has_team_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->team_logo(), target);
  }
  
  // optional uint64 team_base_logo = 6;
  if (has_team_base_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->team_base_logo(), target);
  }
  
  // optional uint64 team_banner_logo = 7;
  if (has_team_banner_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->team_banner_logo(), target);
  }
  
  // optional bool team_complete = 8;
  if (has_team_complete()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->team_complete(), target);
  }
  
  // optional string guild_name = 9;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->guild_name(), target);
  }
  
  // optional string guild_tag = 10;
  if (has_guild_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_tag().data(), this->guild_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->guild_tag(), target);
  }
  
  // optional uint32 guild_id = 11;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->guild_id(), target);
  }
  
  // optional uint64 guild_logo = 12;
  if (has_guild_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->guild_logo(), target);
  }
  
  // optional uint64 guild_base_logo = 13;
  if (has_guild_base_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->guild_base_logo(), target);
  }
  
  // optional uint64 guild_banner_logo = 14;
  if (has_guild_banner_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->guild_banner_logo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLobbyTeamDetails::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string team_name = 1;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }
    
    // optional string team_tag = 3;
    if (has_team_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_tag());
    }
    
    // optional uint32 team_id = 4;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }
    
    // optional uint64 team_logo = 5;
    if (has_team_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_logo());
    }
    
    // optional uint64 team_base_logo = 6;
    if (has_team_base_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_base_logo());
    }
    
    // optional uint64 team_banner_logo = 7;
    if (has_team_banner_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_banner_logo());
    }
    
    // optional bool team_complete = 8;
    if (has_team_complete()) {
      total_size += 1 + 1;
    }
    
    // optional string guild_name = 9;
    if (has_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string guild_tag = 10;
    if (has_guild_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_tag());
    }
    
    // optional uint32 guild_id = 11;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }
    
    // optional uint64 guild_logo = 12;
    if (has_guild_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guild_logo());
    }
    
    // optional uint64 guild_base_logo = 13;
    if (has_guild_base_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guild_base_logo());
    }
    
    // optional uint64 guild_banner_logo = 14;
    if (has_guild_banner_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guild_banner_logo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLobbyTeamDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLobbyTeamDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLobbyTeamDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLobbyTeamDetails::MergeFrom(const CLobbyTeamDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_name()) {
      set_team_name(from.team_name());
    }
    if (from.has_team_tag()) {
      set_team_tag(from.team_tag());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_team_logo()) {
      set_team_logo(from.team_logo());
    }
    if (from.has_team_base_logo()) {
      set_team_base_logo(from.team_base_logo());
    }
    if (from.has_team_banner_logo()) {
      set_team_banner_logo(from.team_banner_logo());
    }
    if (from.has_team_complete()) {
      set_team_complete(from.team_complete());
    }
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_guild_tag()) {
      set_guild_tag(from.guild_tag());
    }
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_guild_logo()) {
      set_guild_logo(from.guild_logo());
    }
    if (from.has_guild_base_logo()) {
      set_guild_base_logo(from.guild_base_logo());
    }
    if (from.has_guild_banner_logo()) {
      set_guild_banner_logo(from.guild_banner_logo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLobbyTeamDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLobbyTeamDetails::CopyFrom(const CLobbyTeamDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLobbyTeamDetails::IsInitialized() const {
  
  return true;
}

void CLobbyTeamDetails::Swap(CLobbyTeamDetails* other) {
  if (other != this) {
    std::swap(team_name_, other->team_name_);
    std::swap(team_tag_, other->team_tag_);
    std::swap(team_id_, other->team_id_);
    std::swap(team_logo_, other->team_logo_);
    std::swap(team_base_logo_, other->team_base_logo_);
    std::swap(team_banner_logo_, other->team_banner_logo_);
    std::swap(team_complete_, other->team_complete_);
    std::swap(guild_name_, other->guild_name_);
    std::swap(guild_tag_, other->guild_tag_);
    std::swap(guild_id_, other->guild_id_);
    std::swap(guild_logo_, other->guild_logo_);
    std::swap(guild_base_logo_, other->guild_base_logo_);
    std::swap(guild_banner_logo_, other->guild_banner_logo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLobbyTeamDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLobbyTeamDetails_descriptor_;
  metadata.reflection = CLobbyTeamDetails_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLobbyTimedRewardDetails::kItemIdFieldNumber;
const int CLobbyTimedRewardDetails::kItemDefIndexFieldNumber;
const int CLobbyTimedRewardDetails::kIsSupplyCrateFieldNumber;
const int CLobbyTimedRewardDetails::kIsTimedDropFieldNumber;
const int CLobbyTimedRewardDetails::kAccountIdFieldNumber;
#endif  // !_MSC_VER

CLobbyTimedRewardDetails::CLobbyTimedRewardDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLobbyTimedRewardDetails::InitAsDefaultInstance() {
}

CLobbyTimedRewardDetails::CLobbyTimedRewardDetails(const CLobbyTimedRewardDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLobbyTimedRewardDetails::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_ULONGLONG(0);
  item_def_index_ = 0u;
  is_supply_crate_ = false;
  is_timed_drop_ = false;
  account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLobbyTimedRewardDetails::~CLobbyTimedRewardDetails() {
  SharedDtor();
}

void CLobbyTimedRewardDetails::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLobbyTimedRewardDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLobbyTimedRewardDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLobbyTimedRewardDetails_descriptor_;
}

const CLobbyTimedRewardDetails& CLobbyTimedRewardDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CLobbyTimedRewardDetails* CLobbyTimedRewardDetails::default_instance_ = NULL;

CLobbyTimedRewardDetails* CLobbyTimedRewardDetails::New() const {
  return new CLobbyTimedRewardDetails;
}

void CLobbyTimedRewardDetails::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = GOOGLE_ULONGLONG(0);
    item_def_index_ = 0u;
    is_supply_crate_ = false;
    is_timed_drop_ = false;
    account_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLobbyTimedRewardDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_def_index;
        break;
      }
      
      // optional uint32 item_def_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_def_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_def_index_)));
          set_has_item_def_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_supply_crate;
        break;
      }
      
      // optional bool is_supply_crate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_supply_crate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_supply_crate_)));
          set_has_is_supply_crate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_timed_drop;
        break;
      }
      
      // optional bool is_timed_drop = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_timed_drop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_timed_drop_)));
          set_has_is_timed_drop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_account_id;
        break;
      }
      
      // optional uint32 account_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLobbyTimedRewardDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_id(), output);
  }
  
  // optional uint32 item_def_index = 2;
  if (has_item_def_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_def_index(), output);
  }
  
  // optional bool is_supply_crate = 3;
  if (has_is_supply_crate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_supply_crate(), output);
  }
  
  // optional bool is_timed_drop = 4;
  if (has_is_timed_drop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_timed_drop(), output);
  }
  
  // optional uint32 account_id = 5;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->account_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLobbyTimedRewardDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_id(), target);
  }
  
  // optional uint32 item_def_index = 2;
  if (has_item_def_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_def_index(), target);
  }
  
  // optional bool is_supply_crate = 3;
  if (has_is_supply_crate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_supply_crate(), target);
  }
  
  // optional bool is_timed_drop = 4;
  if (has_is_timed_drop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_timed_drop(), target);
  }
  
  // optional uint32 account_id = 5;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->account_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLobbyTimedRewardDetails::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }
    
    // optional uint32 item_def_index = 2;
    if (has_item_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_def_index());
    }
    
    // optional bool is_supply_crate = 3;
    if (has_is_supply_crate()) {
      total_size += 1 + 1;
    }
    
    // optional bool is_timed_drop = 4;
    if (has_is_timed_drop()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 account_id = 5;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLobbyTimedRewardDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLobbyTimedRewardDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLobbyTimedRewardDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLobbyTimedRewardDetails::MergeFrom(const CLobbyTimedRewardDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_def_index()) {
      set_item_def_index(from.item_def_index());
    }
    if (from.has_is_supply_crate()) {
      set_is_supply_crate(from.is_supply_crate());
    }
    if (from.has_is_timed_drop()) {
      set_is_timed_drop(from.is_timed_drop());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLobbyTimedRewardDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLobbyTimedRewardDetails::CopyFrom(const CLobbyTimedRewardDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLobbyTimedRewardDetails::IsInitialized() const {
  
  return true;
}

void CLobbyTimedRewardDetails::Swap(CLobbyTimedRewardDetails* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_def_index_, other->item_def_index_);
    std::swap(is_supply_crate_, other->is_supply_crate_);
    std::swap(is_timed_drop_, other->is_timed_drop_);
    std::swap(account_id_, other->account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLobbyTimedRewardDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLobbyTimedRewardDetails_descriptor_;
  metadata.reflection = CLobbyTimedRewardDetails_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLobbyBroadcastChannelInfo::kChannelIdFieldNumber;
const int CLobbyBroadcastChannelInfo::kCountryCodeFieldNumber;
const int CLobbyBroadcastChannelInfo::kDescriptionFieldNumber;
#endif  // !_MSC_VER

CLobbyBroadcastChannelInfo::CLobbyBroadcastChannelInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLobbyBroadcastChannelInfo::InitAsDefaultInstance() {
}

CLobbyBroadcastChannelInfo::CLobbyBroadcastChannelInfo(const CLobbyBroadcastChannelInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLobbyBroadcastChannelInfo::SharedCtor() {
  _cached_size_ = 0;
  channel_id_ = 0u;
  country_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLobbyBroadcastChannelInfo::~CLobbyBroadcastChannelInfo() {
  SharedDtor();
}

void CLobbyBroadcastChannelInfo::SharedDtor() {
  if (country_code_ != &::google::protobuf::internal::kEmptyString) {
    delete country_code_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void CLobbyBroadcastChannelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLobbyBroadcastChannelInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLobbyBroadcastChannelInfo_descriptor_;
}

const CLobbyBroadcastChannelInfo& CLobbyBroadcastChannelInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CLobbyBroadcastChannelInfo* CLobbyBroadcastChannelInfo::default_instance_ = NULL;

CLobbyBroadcastChannelInfo* CLobbyBroadcastChannelInfo::New() const {
  return new CLobbyBroadcastChannelInfo;
}

void CLobbyBroadcastChannelInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channel_id_ = 0u;
    if (has_country_code()) {
      if (country_code_ != &::google::protobuf::internal::kEmptyString) {
        country_code_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLobbyBroadcastChannelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 channel_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_country_code;
        break;
      }
      
      // optional string country_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_country_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->country_code().data(), this->country_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_description;
        break;
      }
      
      // optional string description = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLobbyBroadcastChannelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 channel_id = 1;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel_id(), output);
  }
  
  // optional string country_code = 2;
  if (has_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->country_code(), output);
  }
  
  // optional string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->description(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLobbyBroadcastChannelInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 channel_id = 1;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel_id(), target);
  }
  
  // optional string country_code = 2;
  if (has_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->country_code(), target);
  }
  
  // optional string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLobbyBroadcastChannelInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 channel_id = 1;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
    // optional string country_code = 2;
    if (has_country_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_code());
    }
    
    // optional string description = 3;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLobbyBroadcastChannelInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLobbyBroadcastChannelInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLobbyBroadcastChannelInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLobbyBroadcastChannelInfo::MergeFrom(const CLobbyBroadcastChannelInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_country_code()) {
      set_country_code(from.country_code());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLobbyBroadcastChannelInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLobbyBroadcastChannelInfo::CopyFrom(const CLobbyBroadcastChannelInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLobbyBroadcastChannelInfo::IsInitialized() const {
  
  return true;
}

void CLobbyBroadcastChannelInfo::Swap(CLobbyBroadcastChannelInfo* other) {
  if (other != this) {
    std::swap(channel_id_, other->channel_id_);
    std::swap(country_code_, other->country_code_);
    std::swap(description_, other->description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLobbyBroadcastChannelInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLobbyBroadcastChannelInfo_descriptor_;
  metadata.reflection = CLobbyBroadcastChannelInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CSODOTALobby_State_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSODOTALobby_State_descriptor_;
}
bool CSODOTALobby_State_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CSODOTALobby_State CSODOTALobby::UI;
const CSODOTALobby_State CSODOTALobby::READYUP;
const CSODOTALobby_State CSODOTALobby::SERVERSETUP;
const CSODOTALobby_State CSODOTALobby::RUN;
const CSODOTALobby_State CSODOTALobby::POSTGAME;
const CSODOTALobby_State CSODOTALobby::NOTREADY;
const CSODOTALobby_State CSODOTALobby::SERVERASSIGN;
const CSODOTALobby_State CSODOTALobby::State_MIN;
const CSODOTALobby_State CSODOTALobby::State_MAX;
const int CSODOTALobby::State_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CSODOTALobby_LobbyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSODOTALobby_LobbyType_descriptor_;
}
bool CSODOTALobby_LobbyType_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CSODOTALobby_LobbyType CSODOTALobby::INVALID;
const CSODOTALobby_LobbyType CSODOTALobby::CASUAL_MATCH;
const CSODOTALobby_LobbyType CSODOTALobby::PRACTICE;
const CSODOTALobby_LobbyType CSODOTALobby::TOURNAMENT;
const CSODOTALobby_LobbyType CSODOTALobby::COOP_BOT_MATCH;
const CSODOTALobby_LobbyType CSODOTALobby::TEAM_MATCH;
const CSODOTALobby_LobbyType CSODOTALobby::SOLO_QUEUE_MATCH;
const CSODOTALobby_LobbyType CSODOTALobby::COMPETITIVE_MATCH;
const CSODOTALobby_LobbyType CSODOTALobby::LobbyType_MIN;
const CSODOTALobby_LobbyType CSODOTALobby::LobbyType_MAX;
const int CSODOTALobby::LobbyType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CSODOTALobby_CExtraMsg::kIdFieldNumber;
const int CSODOTALobby_CExtraMsg::kContentsFieldNumber;
#endif  // !_MSC_VER

CSODOTALobby_CExtraMsg::CSODOTALobby_CExtraMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSODOTALobby_CExtraMsg::InitAsDefaultInstance() {
}

CSODOTALobby_CExtraMsg::CSODOTALobby_CExtraMsg(const CSODOTALobby_CExtraMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSODOTALobby_CExtraMsg::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSODOTALobby_CExtraMsg::~CSODOTALobby_CExtraMsg() {
  SharedDtor();
}

void CSODOTALobby_CExtraMsg::SharedDtor() {
  if (contents_ != &::google::protobuf::internal::kEmptyString) {
    delete contents_;
  }
  if (this != default_instance_) {
  }
}

void CSODOTALobby_CExtraMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSODOTALobby_CExtraMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSODOTALobby_CExtraMsg_descriptor_;
}

const CSODOTALobby_CExtraMsg& CSODOTALobby_CExtraMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CSODOTALobby_CExtraMsg* CSODOTALobby_CExtraMsg::default_instance_ = NULL;

CSODOTALobby_CExtraMsg* CSODOTALobby_CExtraMsg::New() const {
  return new CSODOTALobby_CExtraMsg;
}

void CSODOTALobby_CExtraMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_contents()) {
      if (contents_ != &::google::protobuf::internal::kEmptyString) {
        contents_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSODOTALobby_CExtraMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_contents;
        break;
      }
      
      // optional bytes contents = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_contents()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSODOTALobby_CExtraMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional bytes contents = 2;
  if (has_contents()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->contents(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSODOTALobby_CExtraMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional bytes contents = 2;
  if (has_contents()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->contents(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSODOTALobby_CExtraMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional bytes contents = 2;
    if (has_contents()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->contents());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSODOTALobby_CExtraMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSODOTALobby_CExtraMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSODOTALobby_CExtraMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSODOTALobby_CExtraMsg::MergeFrom(const CSODOTALobby_CExtraMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_contents()) {
      set_contents(from.contents());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSODOTALobby_CExtraMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTALobby_CExtraMsg::CopyFrom(const CSODOTALobby_CExtraMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTALobby_CExtraMsg::IsInitialized() const {
  
  return true;
}

void CSODOTALobby_CExtraMsg::Swap(CSODOTALobby_CExtraMsg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(contents_, other->contents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSODOTALobby_CExtraMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSODOTALobby_CExtraMsg_descriptor_;
  metadata.reflection = CSODOTALobby_CExtraMsg_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CSODOTALobby::kLobbyIdFieldNumber;
const int CSODOTALobby::kMembersFieldNumber;
const int CSODOTALobby::kLeftMembersFieldNumber;
const int CSODOTALobby::kLeaderIdFieldNumber;
const int CSODOTALobby::kServerIdFieldNumber;
const int CSODOTALobby::kGameModeFieldNumber;
const int CSODOTALobby::kPendingInvitesFieldNumber;
const int CSODOTALobby::kStateFieldNumber;
const int CSODOTALobby::kConnectFieldNumber;
const int CSODOTALobby::kLobbyTypeFieldNumber;
const int CSODOTALobby::kAllowCheatsFieldNumber;
const int CSODOTALobby::kFillWithBotsFieldNumber;
const int CSODOTALobby::kIntroModeFieldNumber;
const int CSODOTALobby::kGameNameFieldNumber;
const int CSODOTALobby::kTeamDetailsFieldNumber;
const int CSODOTALobby::kTutorialLessonFieldNumber;
const int CSODOTALobby::kTournamentIdFieldNumber;
const int CSODOTALobby::kTournamentGameIdFieldNumber;
const int CSODOTALobby::kServerRegionFieldNumber;
const int CSODOTALobby::kGameStateFieldNumber;
const int CSODOTALobby::kNumSpectatorsFieldNumber;
const int CSODOTALobby::kTowerStateFieldNumber;
const int CSODOTALobby::kMatchgroupFieldNumber;
const int CSODOTALobby::kCmPickFieldNumber;
const int CSODOTALobby::kMatchIdFieldNumber;
const int CSODOTALobby::kAllowSpectatingFieldNumber;
const int CSODOTALobby::kBotDifficultyFieldNumber;
const int CSODOTALobby::kGameVersionFieldNumber;
const int CSODOTALobby::kTimedRewardDetailsFieldNumber;
const int CSODOTALobby::kPassKeyFieldNumber;
const int CSODOTALobby::kBotSlotDifficultyFieldNumber;
const int CSODOTALobby::kLeagueidFieldNumber;
const int CSODOTALobby::kPenaltyLevelRadiantFieldNumber;
const int CSODOTALobby::kPenaltyLevelDireFieldNumber;
const int CSODOTALobby::kLoadGameIdFieldNumber;
const int CSODOTALobby::kSeriesTypeFieldNumber;
const int CSODOTALobby::kRadiantSeriesWinsFieldNumber;
const int CSODOTALobby::kDireSeriesWinsFieldNumber;
const int CSODOTALobby::kLootGeneratedFieldNumber;
const int CSODOTALobby::kLootAwardedFieldNumber;
const int CSODOTALobby::kAllchatFieldNumber;
const int CSODOTALobby::kRankChangeFieldNumber;
const int CSODOTALobby::kDotaTvDelayFieldNumber;
const int CSODOTALobby::kCustomGameModeFieldNumber;
const int CSODOTALobby::kCustomMapNameFieldNumber;
const int CSODOTALobby::kCustomDifficultyFieldNumber;
const int CSODOTALobby::kLanFieldNumber;
const int CSODOTALobby::kBroadcastChannelInfoFieldNumber;
const int CSODOTALobby::kFirstLeaverAccountidFieldNumber;
const int CSODOTALobby::kSeriesIdFieldNumber;
const int CSODOTALobby::kLowPriorityFieldNumber;
const int CSODOTALobby::kExtraMessagesFieldNumber;
const int CSODOTALobby::kSaveGameFieldNumber;
const int CSODOTALobby::kCustomGameIdFieldNumber;
const int CSODOTALobby::kFirstBloodHappenedFieldNumber;
const int CSODOTALobby::kDiscardMatchResultsFieldNumber;
const int CSODOTALobby::kMassDisconnectFieldNumber;
#endif  // !_MSC_VER

CSODOTALobby::CSODOTALobby()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSODOTALobby::InitAsDefaultInstance() {
  save_game_ = const_cast< ::CDOTASaveGame*>(&::CDOTASaveGame::default_instance());
}

CSODOTALobby::CSODOTALobby(const CSODOTALobby& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSODOTALobby::SharedCtor() {
  _cached_size_ = 0;
  lobby_id_ = GOOGLE_ULONGLONG(0);
  leader_id_ = GOOGLE_ULONGLONG(0);
  server_id_ = GOOGLE_ULONGLONG(0);
  game_mode_ = 0u;
  state_ = 0;
  connect_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lobby_type_ = -1;
  allow_cheats_ = false;
  fill_with_bots_ = false;
  intro_mode_ = false;
  game_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tutorial_lesson_ = 0u;
  tournament_id_ = 0u;
  tournament_game_id_ = 0u;
  server_region_ = 0u;
  game_state_ = 0;
  num_spectators_ = 0u;
  tower_state_ = 0u;
  matchgroup_ = 0u;
  cm_pick_ = 0;
  match_id_ = 0u;
  allow_spectating_ = true;
  bot_difficulty_ = 3;
  game_version_ = 0;
  pass_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leagueid_ = 0u;
  penalty_level_radiant_ = 0u;
  penalty_level_dire_ = 0u;
  load_game_id_ = 0u;
  series_type_ = 0u;
  radiant_series_wins_ = 0u;
  dire_series_wins_ = 0u;
  loot_generated_ = 0u;
  loot_awarded_ = 0u;
  allchat_ = false;
  rank_change_ = 0u;
  dota_tv_delay_ = 0;
  custom_game_mode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  custom_map_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  custom_difficulty_ = 0u;
  lan_ = false;
  first_leaver_accountid_ = 0u;
  series_id_ = 0u;
  low_priority_ = false;
  save_game_ = NULL;
  custom_game_id_ = 0u;
  first_blood_happened_ = false;
  discard_match_results_ = false;
  mass_disconnect_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSODOTALobby::~CSODOTALobby() {
  SharedDtor();
}

void CSODOTALobby::SharedDtor() {
  if (connect_ != &::google::protobuf::internal::kEmptyString) {
    delete connect_;
  }
  if (game_name_ != &::google::protobuf::internal::kEmptyString) {
    delete game_name_;
  }
  if (pass_key_ != &::google::protobuf::internal::kEmptyString) {
    delete pass_key_;
  }
  if (custom_game_mode_ != &::google::protobuf::internal::kEmptyString) {
    delete custom_game_mode_;
  }
  if (custom_map_name_ != &::google::protobuf::internal::kEmptyString) {
    delete custom_map_name_;
  }
  if (this != default_instance_) {
    delete save_game_;
  }
}

void CSODOTALobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSODOTALobby::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSODOTALobby_descriptor_;
}

const CSODOTALobby& CSODOTALobby::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CSODOTALobby* CSODOTALobby::default_instance_ = NULL;

CSODOTALobby* CSODOTALobby::New() const {
  return new CSODOTALobby;
}

void CSODOTALobby::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lobby_id_ = GOOGLE_ULONGLONG(0);
    leader_id_ = GOOGLE_ULONGLONG(0);
    server_id_ = GOOGLE_ULONGLONG(0);
    game_mode_ = 0u;
    state_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_connect()) {
      if (connect_ != &::google::protobuf::internal::kEmptyString) {
        connect_->clear();
      }
    }
    lobby_type_ = -1;
    allow_cheats_ = false;
    fill_with_bots_ = false;
    intro_mode_ = false;
    if (has_game_name()) {
      if (game_name_ != &::google::protobuf::internal::kEmptyString) {
        game_name_->clear();
      }
    }
    tutorial_lesson_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    tournament_id_ = 0u;
    tournament_game_id_ = 0u;
    server_region_ = 0u;
    game_state_ = 0;
    num_spectators_ = 0u;
    tower_state_ = 0u;
    matchgroup_ = 0u;
    cm_pick_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    match_id_ = 0u;
    allow_spectating_ = true;
    bot_difficulty_ = 3;
    game_version_ = 0;
    if (has_pass_key()) {
      if (pass_key_ != &::google::protobuf::internal::kEmptyString) {
        pass_key_->clear();
      }
    }
    leagueid_ = 0u;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    penalty_level_radiant_ = 0u;
    penalty_level_dire_ = 0u;
    load_game_id_ = 0u;
    series_type_ = 0u;
    radiant_series_wins_ = 0u;
    dire_series_wins_ = 0u;
    loot_generated_ = 0u;
    loot_awarded_ = 0u;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    allchat_ = false;
    rank_change_ = 0u;
    dota_tv_delay_ = 0;
    if (has_custom_game_mode()) {
      if (custom_game_mode_ != &::google::protobuf::internal::kEmptyString) {
        custom_game_mode_->clear();
      }
    }
    if (has_custom_map_name()) {
      if (custom_map_name_ != &::google::protobuf::internal::kEmptyString) {
        custom_map_name_->clear();
      }
    }
    custom_difficulty_ = 0u;
    lan_ = false;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    first_leaver_accountid_ = 0u;
    series_id_ = 0u;
    low_priority_ = false;
    if (has_save_game()) {
      if (save_game_ != NULL) save_game_->::CDOTASaveGame::Clear();
    }
    custom_game_id_ = 0u;
    first_blood_happened_ = false;
    discard_match_results_ = false;
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    mass_disconnect_ = false;
  }
  members_.Clear();
  left_members_.Clear();
  pending_invites_.Clear();
  team_details_.Clear();
  timed_reward_details_.Clear();
  bot_slot_difficulty_.Clear();
  broadcast_channel_info_.Clear();
  extra_messages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSODOTALobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 lobby_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lobby_id_)));
          set_has_lobby_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_members;
        break;
      }
      
      // repeated .CDOTALobbyMember members = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_members;
        if (input->ExpectTag(24)) goto parse_game_mode;
        break;
      }
      
      // optional uint32 game_mode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_mode_)));
          set_has_game_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }
      
      // optional .CSODOTALobby.State state = 4 [default = UI];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSODOTALobby_State_IsValid(value)) {
            set_state(static_cast< ::CSODOTALobby_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_connect;
        break;
      }
      
      // optional string connect = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->connect().data(), this->connect().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_server_id;
        break;
      }
      
      // optional fixed64 server_id = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_left_members;
        break;
      }
      
      // repeated .CDOTALobbyMember left_members = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_left_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_left_members()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_left_members;
        if (input->ExpectTag(81)) goto parse_pending_invites;
        break;
      }
      
      // repeated fixed64 pending_invites = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_pending_invites:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 81, input, this->mutable_pending_invites())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_pending_invites())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_pending_invites;
        if (input->ExpectTag(89)) goto parse_leader_id;
        break;
      }
      
      // optional fixed64 leader_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_leader_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &leader_id_)));
          set_has_leader_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_lobby_type;
        break;
      }
      
      // optional .CSODOTALobby.LobbyType lobby_type = 12 [default = INVALID];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lobby_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSODOTALobby_LobbyType_IsValid(value)) {
            set_lobby_type(static_cast< ::CSODOTALobby_LobbyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_allow_cheats;
        break;
      }
      
      // optional bool allow_cheats = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allow_cheats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_cheats_)));
          set_has_allow_cheats();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_fill_with_bots;
        break;
      }
      
      // optional bool fill_with_bots = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fill_with_bots:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fill_with_bots_)));
          set_has_fill_with_bots();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_intro_mode;
        break;
      }
      
      // optional bool intro_mode = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intro_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &intro_mode_)));
          set_has_intro_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_game_name;
        break;
      }
      
      // optional string game_name = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->game_name().data(), this->game_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_team_details;
        break;
      }
      
      // repeated .CLobbyTeamDetails team_details = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_team_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_team_details;
        if (input->ExpectTag(144)) goto parse_tutorial_lesson;
        break;
      }
      
      // optional uint32 tutorial_lesson = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tutorial_lesson:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tutorial_lesson_)));
          set_has_tutorial_lesson();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_tournament_id;
        break;
      }
      
      // optional uint32 tournament_id = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tournament_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_id_)));
          set_has_tournament_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_tournament_game_id;
        break;
      }
      
      // optional uint32 tournament_game_id = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tournament_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_game_id_)));
          set_has_tournament_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_server_region;
        break;
      }
      
      // optional uint32 server_region = 21 [default = 0];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_region:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_region_)));
          set_has_server_region();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_game_state;
        break;
      }
      
      // optional .DOTA_GameState game_state = 22 [default = DOTA_GAMERULES_STATE_INIT];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (DOTA_GameState_IsValid(value)) {
            set_game_state(static_cast< DOTA_GameState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(22, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_num_spectators;
        break;
      }
      
      // optional uint32 num_spectators = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_spectators:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_spectators_)));
          set_has_num_spectators();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_tower_state;
        break;
      }
      
      // optional uint32 tower_state = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tower_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tower_state_)));
          set_has_tower_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_matchgroup;
        break;
      }
      
      // optional uint32 matchgroup = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchgroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchgroup_)));
          set_has_matchgroup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_cm_pick;
        break;
      }
      
      // optional .DOTA_CM_PICK cm_pick = 28 [default = DOTA_CM_RANDOM];
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cm_pick:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (DOTA_CM_PICK_IsValid(value)) {
            set_cm_pick(static_cast< DOTA_CM_PICK >(value));
          } else {
            mutable_unknown_fields()->AddVarint(28, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_match_id;
        break;
      }
      
      // optional uint32 match_id = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_allow_spectating;
        break;
      }
      
      // optional bool allow_spectating = 31 [default = true];
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allow_spectating:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_spectating_)));
          set_has_allow_spectating();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_bot_difficulty;
        break;
      }
      
      // optional .DOTABotDifficulty bot_difficulty = 36 [default = BOT_DIFFICULTY_HARD];
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bot_difficulty:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (DOTABotDifficulty_IsValid(value)) {
            set_bot_difficulty(static_cast< DOTABotDifficulty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(36, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_game_version;
        break;
      }
      
      // optional .DOTAGameVersion game_version = 37 [default = GAME_VERSION_CURRENT];
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_version:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (DOTAGameVersion_IsValid(value)) {
            set_game_version(static_cast< DOTAGameVersion >(value));
          } else {
            mutable_unknown_fields()->AddVarint(37, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_timed_reward_details;
        break;
      }
      
      // repeated .CLobbyTimedRewardDetails timed_reward_details = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timed_reward_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_timed_reward_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_timed_reward_details;
        if (input->ExpectTag(314)) goto parse_pass_key;
        break;
      }
      
      // optional string pass_key = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pass_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pass_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pass_key().data(), this->pass_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_bot_slot_difficulty;
        break;
      }
      
      // repeated .DOTABotDifficulty bot_slot_difficulty = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bot_slot_difficulty:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (DOTABotDifficulty_IsValid(value)) {
            add_bot_slot_difficulty(static_cast< DOTABotDifficulty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(41, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &DOTABotDifficulty_IsValid,
                 this->mutable_bot_slot_difficulty())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_bot_slot_difficulty;
        if (input->ExpectTag(336)) goto parse_leagueid;
        break;
      }
      
      // optional uint32 leagueid = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leagueid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leagueid_)));
          set_has_leagueid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_penalty_level_radiant;
        break;
      }
      
      // optional uint32 penalty_level_radiant = 43 [default = 0];
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_penalty_level_radiant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &penalty_level_radiant_)));
          set_has_penalty_level_radiant();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_penalty_level_dire;
        break;
      }
      
      // optional uint32 penalty_level_dire = 44 [default = 0];
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_penalty_level_dire:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &penalty_level_dire_)));
          set_has_penalty_level_dire();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_load_game_id;
        break;
      }
      
      // optional uint32 load_game_id = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_load_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &load_game_id_)));
          set_has_load_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_series_type;
        break;
      }
      
      // optional uint32 series_type = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_series_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_type_)));
          set_has_series_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(376)) goto parse_radiant_series_wins;
        break;
      }
      
      // optional uint32 radiant_series_wins = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_radiant_series_wins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radiant_series_wins_)));
          set_has_radiant_series_wins();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_dire_series_wins;
        break;
      }
      
      // optional uint32 dire_series_wins = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dire_series_wins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dire_series_wins_)));
          set_has_dire_series_wins();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_loot_generated;
        break;
      }
      
      // optional uint32 loot_generated = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loot_generated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loot_generated_)));
          set_has_loot_generated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_loot_awarded;
        break;
      }
      
      // optional uint32 loot_awarded = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loot_awarded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loot_awarded_)));
          set_has_loot_awarded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_allchat;
        break;
      }
      
      // optional bool allchat = 51 [default = false];
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allchat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allchat_)));
          set_has_allchat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_rank_change;
        break;
      }
      
      // optional uint32 rank_change = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_change:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_change_)));
          set_has_rank_change();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(424)) goto parse_dota_tv_delay;
        break;
      }
      
      // optional .LobbyDotaTVDelay dota_tv_delay = 53 [default = LobbyDotaTV_10];
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dota_tv_delay:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (LobbyDotaTVDelay_IsValid(value)) {
            set_dota_tv_delay(static_cast< LobbyDotaTVDelay >(value));
          } else {
            mutable_unknown_fields()->AddVarint(53, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(434)) goto parse_custom_game_mode;
        break;
      }
      
      // optional string custom_game_mode = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_custom_game_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_game_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->custom_game_mode().data(), this->custom_game_mode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(442)) goto parse_custom_map_name;
        break;
      }
      
      // optional string custom_map_name = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_custom_map_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_map_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->custom_map_name().data(), this->custom_map_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(448)) goto parse_custom_difficulty;
        break;
      }
      
      // optional uint32 custom_difficulty = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_custom_difficulty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &custom_difficulty_)));
          set_has_custom_difficulty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(456)) goto parse_lan;
        break;
      }
      
      // optional bool lan = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lan_)));
          set_has_lan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(466)) goto parse_broadcast_channel_info;
        break;
      }
      
      // repeated .CLobbyBroadcastChannelInfo broadcast_channel_info = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_broadcast_channel_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_broadcast_channel_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(466)) goto parse_broadcast_channel_info;
        if (input->ExpectTag(472)) goto parse_first_leaver_accountid;
        break;
      }
      
      // optional uint32 first_leaver_accountid = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_leaver_accountid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_leaver_accountid_)));
          set_has_first_leaver_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_series_id;
        break;
      }
      
      // optional uint32 series_id = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_series_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_id_)));
          set_has_series_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(488)) goto parse_low_priority;
        break;
      }
      
      // optional bool low_priority = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_low_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_priority_)));
          set_has_low_priority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(498)) goto parse_extra_messages;
        break;
      }
      
      // repeated .CSODOTALobby.CExtraMsg extra_messages = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extra_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extra_messages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(498)) goto parse_extra_messages;
        if (input->ExpectTag(506)) goto parse_save_game;
        break;
      }
      
      // optional .CDOTASaveGame save_game = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_save_game:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_save_game()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(512)) goto parse_custom_game_id;
        break;
      }
      
      // optional uint32 custom_game_id = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_custom_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &custom_game_id_)));
          set_has_custom_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(520)) goto parse_first_blood_happened;
        break;
      }
      
      // optional bool first_blood_happened = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_blood_happened:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &first_blood_happened_)));
          set_has_first_blood_happened();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(528)) goto parse_discard_match_results;
        break;
      }
      
      // optional bool discard_match_results = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_discard_match_results:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &discard_match_results_)));
          set_has_discard_match_results();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(536)) goto parse_mass_disconnect;
        break;
      }
      
      // optional bool mass_disconnect = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mass_disconnect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mass_disconnect_)));
          set_has_mass_disconnect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSODOTALobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 lobby_id = 1;
  if (has_lobby_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->lobby_id(), output);
  }
  
  // repeated .CDOTALobbyMember members = 2;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->members(i), output);
  }
  
  // optional uint32 game_mode = 3;
  if (has_game_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_mode(), output);
  }
  
  // optional .CSODOTALobby.State state = 4 [default = UI];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->state(), output);
  }
  
  // optional string connect = 5;
  if (has_connect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connect().data(), this->connect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->connect(), output);
  }
  
  // optional fixed64 server_id = 6 [default = 0];
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->server_id(), output);
  }
  
  // repeated .CDOTALobbyMember left_members = 7;
  for (int i = 0; i < this->left_members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->left_members(i), output);
  }
  
  // repeated fixed64 pending_invites = 10;
  for (int i = 0; i < this->pending_invites_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      10, this->pending_invites(i), output);
  }
  
  // optional fixed64 leader_id = 11;
  if (has_leader_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(11, this->leader_id(), output);
  }
  
  // optional .CSODOTALobby.LobbyType lobby_type = 12 [default = INVALID];
  if (has_lobby_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->lobby_type(), output);
  }
  
  // optional bool allow_cheats = 13;
  if (has_allow_cheats()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->allow_cheats(), output);
  }
  
  // optional bool fill_with_bots = 14;
  if (has_fill_with_bots()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->fill_with_bots(), output);
  }
  
  // optional bool intro_mode = 15;
  if (has_intro_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->intro_mode(), output);
  }
  
  // optional string game_name = 16;
  if (has_game_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->game_name().data(), this->game_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->game_name(), output);
  }
  
  // repeated .CLobbyTeamDetails team_details = 17;
  for (int i = 0; i < this->team_details_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->team_details(i), output);
  }
  
  // optional uint32 tutorial_lesson = 18;
  if (has_tutorial_lesson()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->tutorial_lesson(), output);
  }
  
  // optional uint32 tournament_id = 19;
  if (has_tournament_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->tournament_id(), output);
  }
  
  // optional uint32 tournament_game_id = 20;
  if (has_tournament_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->tournament_game_id(), output);
  }
  
  // optional uint32 server_region = 21 [default = 0];
  if (has_server_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->server_region(), output);
  }
  
  // optional .DOTA_GameState game_state = 22 [default = DOTA_GAMERULES_STATE_INIT];
  if (has_game_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->game_state(), output);
  }
  
  // optional uint32 num_spectators = 23;
  if (has_num_spectators()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->num_spectators(), output);
  }
  
  // optional uint32 tower_state = 24;
  if (has_tower_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->tower_state(), output);
  }
  
  // optional uint32 matchgroup = 25;
  if (has_matchgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->matchgroup(), output);
  }
  
  // optional .DOTA_CM_PICK cm_pick = 28 [default = DOTA_CM_RANDOM];
  if (has_cm_pick()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      28, this->cm_pick(), output);
  }
  
  // optional uint32 match_id = 30;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->match_id(), output);
  }
  
  // optional bool allow_spectating = 31 [default = true];
  if (has_allow_spectating()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->allow_spectating(), output);
  }
  
  // optional .DOTABotDifficulty bot_difficulty = 36 [default = BOT_DIFFICULTY_HARD];
  if (has_bot_difficulty()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      36, this->bot_difficulty(), output);
  }
  
  // optional .DOTAGameVersion game_version = 37 [default = GAME_VERSION_CURRENT];
  if (has_game_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      37, this->game_version(), output);
  }
  
  // repeated .CLobbyTimedRewardDetails timed_reward_details = 38;
  for (int i = 0; i < this->timed_reward_details_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->timed_reward_details(i), output);
  }
  
  // optional string pass_key = 39;
  if (has_pass_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pass_key().data(), this->pass_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      39, this->pass_key(), output);
  }
  
  // repeated .DOTABotDifficulty bot_slot_difficulty = 41;
  for (int i = 0; i < this->bot_slot_difficulty_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      41, this->bot_slot_difficulty(i), output);
  }
  
  // optional uint32 leagueid = 42;
  if (has_leagueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->leagueid(), output);
  }
  
  // optional uint32 penalty_level_radiant = 43 [default = 0];
  if (has_penalty_level_radiant()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->penalty_level_radiant(), output);
  }
  
  // optional uint32 penalty_level_dire = 44 [default = 0];
  if (has_penalty_level_dire()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->penalty_level_dire(), output);
  }
  
  // optional uint32 load_game_id = 45;
  if (has_load_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->load_game_id(), output);
  }
  
  // optional uint32 series_type = 46;
  if (has_series_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(46, this->series_type(), output);
  }
  
  // optional uint32 radiant_series_wins = 47;
  if (has_radiant_series_wins()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->radiant_series_wins(), output);
  }
  
  // optional uint32 dire_series_wins = 48;
  if (has_dire_series_wins()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(48, this->dire_series_wins(), output);
  }
  
  // optional uint32 loot_generated = 49;
  if (has_loot_generated()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->loot_generated(), output);
  }
  
  // optional uint32 loot_awarded = 50;
  if (has_loot_awarded()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->loot_awarded(), output);
  }
  
  // optional bool allchat = 51 [default = false];
  if (has_allchat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(51, this->allchat(), output);
  }
  
  // optional uint32 rank_change = 52;
  if (has_rank_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(52, this->rank_change(), output);
  }
  
  // optional .LobbyDotaTVDelay dota_tv_delay = 53 [default = LobbyDotaTV_10];
  if (has_dota_tv_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      53, this->dota_tv_delay(), output);
  }
  
  // optional string custom_game_mode = 54;
  if (has_custom_game_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custom_game_mode().data(), this->custom_game_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      54, this->custom_game_mode(), output);
  }
  
  // optional string custom_map_name = 55;
  if (has_custom_map_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custom_map_name().data(), this->custom_map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      55, this->custom_map_name(), output);
  }
  
  // optional uint32 custom_difficulty = 56;
  if (has_custom_difficulty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(56, this->custom_difficulty(), output);
  }
  
  // optional bool lan = 57;
  if (has_lan()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(57, this->lan(), output);
  }
  
  // repeated .CLobbyBroadcastChannelInfo broadcast_channel_info = 58;
  for (int i = 0; i < this->broadcast_channel_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      58, this->broadcast_channel_info(i), output);
  }
  
  // optional uint32 first_leaver_accountid = 59;
  if (has_first_leaver_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(59, this->first_leaver_accountid(), output);
  }
  
  // optional uint32 series_id = 60;
  if (has_series_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(60, this->series_id(), output);
  }
  
  // optional bool low_priority = 61;
  if (has_low_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(61, this->low_priority(), output);
  }
  
  // repeated .CSODOTALobby.CExtraMsg extra_messages = 62;
  for (int i = 0; i < this->extra_messages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      62, this->extra_messages(i), output);
  }
  
  // optional .CDOTASaveGame save_game = 63;
  if (has_save_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      63, this->save_game(), output);
  }
  
  // optional uint32 custom_game_id = 64;
  if (has_custom_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(64, this->custom_game_id(), output);
  }
  
  // optional bool first_blood_happened = 65;
  if (has_first_blood_happened()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(65, this->first_blood_happened(), output);
  }
  
  // optional bool discard_match_results = 66;
  if (has_discard_match_results()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(66, this->discard_match_results(), output);
  }
  
  // optional bool mass_disconnect = 67;
  if (has_mass_disconnect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(67, this->mass_disconnect(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSODOTALobby::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 lobby_id = 1;
  if (has_lobby_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->lobby_id(), target);
  }
  
  // repeated .CDOTALobbyMember members = 2;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->members(i), target);
  }
  
  // optional uint32 game_mode = 3;
  if (has_game_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_mode(), target);
  }
  
  // optional .CSODOTALobby.State state = 4 [default = UI];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->state(), target);
  }
  
  // optional string connect = 5;
  if (has_connect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connect().data(), this->connect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->connect(), target);
  }
  
  // optional fixed64 server_id = 6 [default = 0];
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->server_id(), target);
  }
  
  // repeated .CDOTALobbyMember left_members = 7;
  for (int i = 0; i < this->left_members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->left_members(i), target);
  }
  
  // repeated fixed64 pending_invites = 10;
  for (int i = 0; i < this->pending_invites_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(10, this->pending_invites(i), target);
  }
  
  // optional fixed64 leader_id = 11;
  if (has_leader_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(11, this->leader_id(), target);
  }
  
  // optional .CSODOTALobby.LobbyType lobby_type = 12 [default = INVALID];
  if (has_lobby_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->lobby_type(), target);
  }
  
  // optional bool allow_cheats = 13;
  if (has_allow_cheats()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->allow_cheats(), target);
  }
  
  // optional bool fill_with_bots = 14;
  if (has_fill_with_bots()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->fill_with_bots(), target);
  }
  
  // optional bool intro_mode = 15;
  if (has_intro_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->intro_mode(), target);
  }
  
  // optional string game_name = 16;
  if (has_game_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->game_name().data(), this->game_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->game_name(), target);
  }
  
  // repeated .CLobbyTeamDetails team_details = 17;
  for (int i = 0; i < this->team_details_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->team_details(i), target);
  }
  
  // optional uint32 tutorial_lesson = 18;
  if (has_tutorial_lesson()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->tutorial_lesson(), target);
  }
  
  // optional uint32 tournament_id = 19;
  if (has_tournament_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->tournament_id(), target);
  }
  
  // optional uint32 tournament_game_id = 20;
  if (has_tournament_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->tournament_game_id(), target);
  }
  
  // optional uint32 server_region = 21 [default = 0];
  if (has_server_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->server_region(), target);
  }
  
  // optional .DOTA_GameState game_state = 22 [default = DOTA_GAMERULES_STATE_INIT];
  if (has_game_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->game_state(), target);
  }
  
  // optional uint32 num_spectators = 23;
  if (has_num_spectators()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->num_spectators(), target);
  }
  
  // optional uint32 tower_state = 24;
  if (has_tower_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->tower_state(), target);
  }
  
  // optional uint32 matchgroup = 25;
  if (has_matchgroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->matchgroup(), target);
  }
  
  // optional .DOTA_CM_PICK cm_pick = 28 [default = DOTA_CM_RANDOM];
  if (has_cm_pick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      28, this->cm_pick(), target);
  }
  
  // optional uint32 match_id = 30;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->match_id(), target);
  }
  
  // optional bool allow_spectating = 31 [default = true];
  if (has_allow_spectating()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->allow_spectating(), target);
  }
  
  // optional .DOTABotDifficulty bot_difficulty = 36 [default = BOT_DIFFICULTY_HARD];
  if (has_bot_difficulty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      36, this->bot_difficulty(), target);
  }
  
  // optional .DOTAGameVersion game_version = 37 [default = GAME_VERSION_CURRENT];
  if (has_game_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      37, this->game_version(), target);
  }
  
  // repeated .CLobbyTimedRewardDetails timed_reward_details = 38;
  for (int i = 0; i < this->timed_reward_details_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->timed_reward_details(i), target);
  }
  
  // optional string pass_key = 39;
  if (has_pass_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pass_key().data(), this->pass_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        39, this->pass_key(), target);
  }
  
  // repeated .DOTABotDifficulty bot_slot_difficulty = 41;
  for (int i = 0; i < this->bot_slot_difficulty_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      41, this->bot_slot_difficulty(i), target);
  }
  
  // optional uint32 leagueid = 42;
  if (has_leagueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->leagueid(), target);
  }
  
  // optional uint32 penalty_level_radiant = 43 [default = 0];
  if (has_penalty_level_radiant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->penalty_level_radiant(), target);
  }
  
  // optional uint32 penalty_level_dire = 44 [default = 0];
  if (has_penalty_level_dire()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(44, this->penalty_level_dire(), target);
  }
  
  // optional uint32 load_game_id = 45;
  if (has_load_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(45, this->load_game_id(), target);
  }
  
  // optional uint32 series_type = 46;
  if (has_series_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(46, this->series_type(), target);
  }
  
  // optional uint32 radiant_series_wins = 47;
  if (has_radiant_series_wins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(47, this->radiant_series_wins(), target);
  }
  
  // optional uint32 dire_series_wins = 48;
  if (has_dire_series_wins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(48, this->dire_series_wins(), target);
  }
  
  // optional uint32 loot_generated = 49;
  if (has_loot_generated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(49, this->loot_generated(), target);
  }
  
  // optional uint32 loot_awarded = 50;
  if (has_loot_awarded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->loot_awarded(), target);
  }
  
  // optional bool allchat = 51 [default = false];
  if (has_allchat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(51, this->allchat(), target);
  }
  
  // optional uint32 rank_change = 52;
  if (has_rank_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(52, this->rank_change(), target);
  }
  
  // optional .LobbyDotaTVDelay dota_tv_delay = 53 [default = LobbyDotaTV_10];
  if (has_dota_tv_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      53, this->dota_tv_delay(), target);
  }
  
  // optional string custom_game_mode = 54;
  if (has_custom_game_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custom_game_mode().data(), this->custom_game_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        54, this->custom_game_mode(), target);
  }
  
  // optional string custom_map_name = 55;
  if (has_custom_map_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custom_map_name().data(), this->custom_map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        55, this->custom_map_name(), target);
  }
  
  // optional uint32 custom_difficulty = 56;
  if (has_custom_difficulty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(56, this->custom_difficulty(), target);
  }
  
  // optional bool lan = 57;
  if (has_lan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(57, this->lan(), target);
  }
  
  // repeated .CLobbyBroadcastChannelInfo broadcast_channel_info = 58;
  for (int i = 0; i < this->broadcast_channel_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        58, this->broadcast_channel_info(i), target);
  }
  
  // optional uint32 first_leaver_accountid = 59;
  if (has_first_leaver_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(59, this->first_leaver_accountid(), target);
  }
  
  // optional uint32 series_id = 60;
  if (has_series_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(60, this->series_id(), target);
  }
  
  // optional bool low_priority = 61;
  if (has_low_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(61, this->low_priority(), target);
  }
  
  // repeated .CSODOTALobby.CExtraMsg extra_messages = 62;
  for (int i = 0; i < this->extra_messages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        62, this->extra_messages(i), target);
  }
  
  // optional .CDOTASaveGame save_game = 63;
  if (has_save_game()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        63, this->save_game(), target);
  }
  
  // optional uint32 custom_game_id = 64;
  if (has_custom_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(64, this->custom_game_id(), target);
  }
  
  // optional bool first_blood_happened = 65;
  if (has_first_blood_happened()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(65, this->first_blood_happened(), target);
  }
  
  // optional bool discard_match_results = 66;
  if (has_discard_match_results()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(66, this->discard_match_results(), target);
  }
  
  // optional bool mass_disconnect = 67;
  if (has_mass_disconnect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(67, this->mass_disconnect(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSODOTALobby::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 lobby_id = 1;
    if (has_lobby_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lobby_id());
    }
    
    // optional fixed64 leader_id = 11;
    if (has_leader_id()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 server_id = 6 [default = 0];
    if (has_server_id()) {
      total_size += 1 + 8;
    }
    
    // optional uint32 game_mode = 3;
    if (has_game_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_mode());
    }
    
    // optional .CSODOTALobby.State state = 4 [default = UI];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string connect = 5;
    if (has_connect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connect());
    }
    
    // optional .CSODOTALobby.LobbyType lobby_type = 12 [default = INVALID];
    if (has_lobby_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lobby_type());
    }
    
    // optional bool allow_cheats = 13;
    if (has_allow_cheats()) {
      total_size += 1 + 1;
    }
    
    // optional bool fill_with_bots = 14;
    if (has_fill_with_bots()) {
      total_size += 1 + 1;
    }
    
    // optional bool intro_mode = 15;
    if (has_intro_mode()) {
      total_size += 1 + 1;
    }
    
    // optional string game_name = 16;
    if (has_game_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_name());
    }
    
    // optional uint32 tutorial_lesson = 18;
    if (has_tutorial_lesson()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tutorial_lesson());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 tournament_id = 19;
    if (has_tournament_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_id());
    }
    
    // optional uint32 tournament_game_id = 20;
    if (has_tournament_game_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_game_id());
    }
    
    // optional uint32 server_region = 21 [default = 0];
    if (has_server_region()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_region());
    }
    
    // optional .DOTA_GameState game_state = 22 [default = DOTA_GAMERULES_STATE_INIT];
    if (has_game_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_state());
    }
    
    // optional uint32 num_spectators = 23;
    if (has_num_spectators()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_spectators());
    }
    
    // optional uint32 tower_state = 24;
    if (has_tower_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tower_state());
    }
    
    // optional uint32 matchgroup = 25;
    if (has_matchgroup()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchgroup());
    }
    
    // optional .DOTA_CM_PICK cm_pick = 28 [default = DOTA_CM_RANDOM];
    if (has_cm_pick()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cm_pick());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 match_id = 30;
    if (has_match_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_id());
    }
    
    // optional bool allow_spectating = 31 [default = true];
    if (has_allow_spectating()) {
      total_size += 2 + 1;
    }
    
    // optional .DOTABotDifficulty bot_difficulty = 36 [default = BOT_DIFFICULTY_HARD];
    if (has_bot_difficulty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bot_difficulty());
    }
    
    // optional .DOTAGameVersion game_version = 37 [default = GAME_VERSION_CURRENT];
    if (has_game_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_version());
    }
    
    // optional string pass_key = 39;
    if (has_pass_key()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pass_key());
    }
    
    // optional uint32 leagueid = 42;
    if (has_leagueid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leagueid());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 penalty_level_radiant = 43 [default = 0];
    if (has_penalty_level_radiant()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->penalty_level_radiant());
    }
    
    // optional uint32 penalty_level_dire = 44 [default = 0];
    if (has_penalty_level_dire()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->penalty_level_dire());
    }
    
    // optional uint32 load_game_id = 45;
    if (has_load_game_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->load_game_id());
    }
    
    // optional uint32 series_type = 46;
    if (has_series_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_type());
    }
    
    // optional uint32 radiant_series_wins = 47;
    if (has_radiant_series_wins()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radiant_series_wins());
    }
    
    // optional uint32 dire_series_wins = 48;
    if (has_dire_series_wins()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dire_series_wins());
    }
    
    // optional uint32 loot_generated = 49;
    if (has_loot_generated()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loot_generated());
    }
    
    // optional uint32 loot_awarded = 50;
    if (has_loot_awarded()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loot_awarded());
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional bool allchat = 51 [default = false];
    if (has_allchat()) {
      total_size += 2 + 1;
    }
    
    // optional uint32 rank_change = 52;
    if (has_rank_change()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank_change());
    }
    
    // optional .LobbyDotaTVDelay dota_tv_delay = 53 [default = LobbyDotaTV_10];
    if (has_dota_tv_delay()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dota_tv_delay());
    }
    
    // optional string custom_game_mode = 54;
    if (has_custom_game_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom_game_mode());
    }
    
    // optional string custom_map_name = 55;
    if (has_custom_map_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom_map_name());
    }
    
    // optional uint32 custom_difficulty = 56;
    if (has_custom_difficulty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->custom_difficulty());
    }
    
    // optional bool lan = 57;
    if (has_lan()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional uint32 first_leaver_accountid = 59;
    if (has_first_leaver_accountid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first_leaver_accountid());
    }
    
    // optional uint32 series_id = 60;
    if (has_series_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_id());
    }
    
    // optional bool low_priority = 61;
    if (has_low_priority()) {
      total_size += 2 + 1;
    }
    
    // optional .CDOTASaveGame save_game = 63;
    if (has_save_game()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->save_game());
    }
    
    // optional uint32 custom_game_id = 64;
    if (has_custom_game_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->custom_game_id());
    }
    
    // optional bool first_blood_happened = 65;
    if (has_first_blood_happened()) {
      total_size += 2 + 1;
    }
    
    // optional bool discard_match_results = 66;
    if (has_discard_match_results()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional bool mass_disconnect = 67;
    if (has_mass_disconnect()) {
      total_size += 2 + 1;
    }
    
  }
  // repeated .CDOTALobbyMember members = 2;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }
  
  // repeated .CDOTALobbyMember left_members = 7;
  total_size += 1 * this->left_members_size();
  for (int i = 0; i < this->left_members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->left_members(i));
  }
  
  // repeated fixed64 pending_invites = 10;
  {
    int data_size = 0;
    data_size = 8 * this->pending_invites_size();
    total_size += 1 * this->pending_invites_size() + data_size;
  }
  
  // repeated .CLobbyTeamDetails team_details = 17;
  total_size += 2 * this->team_details_size();
  for (int i = 0; i < this->team_details_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->team_details(i));
  }
  
  // repeated .CLobbyTimedRewardDetails timed_reward_details = 38;
  total_size += 2 * this->timed_reward_details_size();
  for (int i = 0; i < this->timed_reward_details_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->timed_reward_details(i));
  }
  
  // repeated .DOTABotDifficulty bot_slot_difficulty = 41;
  {
    int data_size = 0;
    for (int i = 0; i < this->bot_slot_difficulty_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->bot_slot_difficulty(i));
    }
    total_size += 2 * this->bot_slot_difficulty_size() + data_size;
  }
  
  // repeated .CLobbyBroadcastChannelInfo broadcast_channel_info = 58;
  total_size += 2 * this->broadcast_channel_info_size();
  for (int i = 0; i < this->broadcast_channel_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->broadcast_channel_info(i));
  }
  
  // repeated .CSODOTALobby.CExtraMsg extra_messages = 62;
  total_size += 2 * this->extra_messages_size();
  for (int i = 0; i < this->extra_messages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extra_messages(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSODOTALobby::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSODOTALobby* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSODOTALobby*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSODOTALobby::MergeFrom(const CSODOTALobby& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  left_members_.MergeFrom(from.left_members_);
  pending_invites_.MergeFrom(from.pending_invites_);
  team_details_.MergeFrom(from.team_details_);
  timed_reward_details_.MergeFrom(from.timed_reward_details_);
  bot_slot_difficulty_.MergeFrom(from.bot_slot_difficulty_);
  broadcast_channel_info_.MergeFrom(from.broadcast_channel_info_);
  extra_messages_.MergeFrom(from.extra_messages_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lobby_id()) {
      set_lobby_id(from.lobby_id());
    }
    if (from.has_leader_id()) {
      set_leader_id(from.leader_id());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_game_mode()) {
      set_game_mode(from.game_mode());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_connect()) {
      set_connect(from.connect());
    }
    if (from.has_lobby_type()) {
      set_lobby_type(from.lobby_type());
    }
    if (from.has_allow_cheats()) {
      set_allow_cheats(from.allow_cheats());
    }
    if (from.has_fill_with_bots()) {
      set_fill_with_bots(from.fill_with_bots());
    }
    if (from.has_intro_mode()) {
      set_intro_mode(from.intro_mode());
    }
    if (from.has_game_name()) {
      set_game_name(from.game_name());
    }
    if (from.has_tutorial_lesson()) {
      set_tutorial_lesson(from.tutorial_lesson());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_tournament_id()) {
      set_tournament_id(from.tournament_id());
    }
    if (from.has_tournament_game_id()) {
      set_tournament_game_id(from.tournament_game_id());
    }
    if (from.has_server_region()) {
      set_server_region(from.server_region());
    }
    if (from.has_game_state()) {
      set_game_state(from.game_state());
    }
    if (from.has_num_spectators()) {
      set_num_spectators(from.num_spectators());
    }
    if (from.has_tower_state()) {
      set_tower_state(from.tower_state());
    }
    if (from.has_matchgroup()) {
      set_matchgroup(from.matchgroup());
    }
    if (from.has_cm_pick()) {
      set_cm_pick(from.cm_pick());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
    if (from.has_allow_spectating()) {
      set_allow_spectating(from.allow_spectating());
    }
    if (from.has_bot_difficulty()) {
      set_bot_difficulty(from.bot_difficulty());
    }
    if (from.has_game_version()) {
      set_game_version(from.game_version());
    }
    if (from.has_pass_key()) {
      set_pass_key(from.pass_key());
    }
    if (from.has_leagueid()) {
      set_leagueid(from.leagueid());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_penalty_level_radiant()) {
      set_penalty_level_radiant(from.penalty_level_radiant());
    }
    if (from.has_penalty_level_dire()) {
      set_penalty_level_dire(from.penalty_level_dire());
    }
    if (from.has_load_game_id()) {
      set_load_game_id(from.load_game_id());
    }
    if (from.has_series_type()) {
      set_series_type(from.series_type());
    }
    if (from.has_radiant_series_wins()) {
      set_radiant_series_wins(from.radiant_series_wins());
    }
    if (from.has_dire_series_wins()) {
      set_dire_series_wins(from.dire_series_wins());
    }
    if (from.has_loot_generated()) {
      set_loot_generated(from.loot_generated());
    }
    if (from.has_loot_awarded()) {
      set_loot_awarded(from.loot_awarded());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_allchat()) {
      set_allchat(from.allchat());
    }
    if (from.has_rank_change()) {
      set_rank_change(from.rank_change());
    }
    if (from.has_dota_tv_delay()) {
      set_dota_tv_delay(from.dota_tv_delay());
    }
    if (from.has_custom_game_mode()) {
      set_custom_game_mode(from.custom_game_mode());
    }
    if (from.has_custom_map_name()) {
      set_custom_map_name(from.custom_map_name());
    }
    if (from.has_custom_difficulty()) {
      set_custom_difficulty(from.custom_difficulty());
    }
    if (from.has_lan()) {
      set_lan(from.lan());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_first_leaver_accountid()) {
      set_first_leaver_accountid(from.first_leaver_accountid());
    }
    if (from.has_series_id()) {
      set_series_id(from.series_id());
    }
    if (from.has_low_priority()) {
      set_low_priority(from.low_priority());
    }
    if (from.has_save_game()) {
      mutable_save_game()->::CDOTASaveGame::MergeFrom(from.save_game());
    }
    if (from.has_custom_game_id()) {
      set_custom_game_id(from.custom_game_id());
    }
    if (from.has_first_blood_happened()) {
      set_first_blood_happened(from.first_blood_happened());
    }
    if (from.has_discard_match_results()) {
      set_discard_match_results(from.discard_match_results());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_mass_disconnect()) {
      set_mass_disconnect(from.mass_disconnect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSODOTALobby::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTALobby::CopyFrom(const CSODOTALobby& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTALobby::IsInitialized() const {
  
  return true;
}

void CSODOTALobby::Swap(CSODOTALobby* other) {
  if (other != this) {
    std::swap(lobby_id_, other->lobby_id_);
    members_.Swap(&other->members_);
    left_members_.Swap(&other->left_members_);
    std::swap(leader_id_, other->leader_id_);
    std::swap(server_id_, other->server_id_);
    std::swap(game_mode_, other->game_mode_);
    pending_invites_.Swap(&other->pending_invites_);
    std::swap(state_, other->state_);
    std::swap(connect_, other->connect_);
    std::swap(lobby_type_, other->lobby_type_);
    std::swap(allow_cheats_, other->allow_cheats_);
    std::swap(fill_with_bots_, other->fill_with_bots_);
    std::swap(intro_mode_, other->intro_mode_);
    std::swap(game_name_, other->game_name_);
    team_details_.Swap(&other->team_details_);
    std::swap(tutorial_lesson_, other->tutorial_lesson_);
    std::swap(tournament_id_, other->tournament_id_);
    std::swap(tournament_game_id_, other->tournament_game_id_);
    std::swap(server_region_, other->server_region_);
    std::swap(game_state_, other->game_state_);
    std::swap(num_spectators_, other->num_spectators_);
    std::swap(tower_state_, other->tower_state_);
    std::swap(matchgroup_, other->matchgroup_);
    std::swap(cm_pick_, other->cm_pick_);
    std::swap(match_id_, other->match_id_);
    std::swap(allow_spectating_, other->allow_spectating_);
    std::swap(bot_difficulty_, other->bot_difficulty_);
    std::swap(game_version_, other->game_version_);
    timed_reward_details_.Swap(&other->timed_reward_details_);
    std::swap(pass_key_, other->pass_key_);
    bot_slot_difficulty_.Swap(&other->bot_slot_difficulty_);
    std::swap(leagueid_, other->leagueid_);
    std::swap(penalty_level_radiant_, other->penalty_level_radiant_);
    std::swap(penalty_level_dire_, other->penalty_level_dire_);
    std::swap(load_game_id_, other->load_game_id_);
    std::swap(series_type_, other->series_type_);
    std::swap(radiant_series_wins_, other->radiant_series_wins_);
    std::swap(dire_series_wins_, other->dire_series_wins_);
    std::swap(loot_generated_, other->loot_generated_);
    std::swap(loot_awarded_, other->loot_awarded_);
    std::swap(allchat_, other->allchat_);
    std::swap(rank_change_, other->rank_change_);
    std::swap(dota_tv_delay_, other->dota_tv_delay_);
    std::swap(custom_game_mode_, other->custom_game_mode_);
    std::swap(custom_map_name_, other->custom_map_name_);
    std::swap(custom_difficulty_, other->custom_difficulty_);
    std::swap(lan_, other->lan_);
    broadcast_channel_info_.Swap(&other->broadcast_channel_info_);
    std::swap(first_leaver_accountid_, other->first_leaver_accountid_);
    std::swap(series_id_, other->series_id_);
    std::swap(low_priority_, other->low_priority_);
    extra_messages_.Swap(&other->extra_messages_);
    std::swap(save_game_, other->save_game_);
    std::swap(custom_game_id_, other->custom_game_id_);
    std::swap(first_blood_happened_, other->first_blood_happened_);
    std::swap(discard_match_results_, other->discard_match_results_);
    std::swap(mass_disconnect_, other->mass_disconnect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSODOTALobby::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSODOTALobby_descriptor_;
  metadata.reflection = CSODOTALobby_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSODOTALobbyInternal::kSearchKeyFieldNumber;
const int CSODOTALobbyInternal::kAverageRankFieldNumber;
const int CSODOTALobbyInternal::kReplaySaltFieldNumber;
const int CSODOTALobbyInternal::kDisableRadiantAutomaticTeamDetectionFieldNumber;
const int CSODOTALobbyInternal::kDisableDireAutomaticTeamDetectionFieldNumber;
const int CSODOTALobbyInternal::kSubmittedMatchHistoryFieldNumber;
const int CSODOTALobbyInternal::kMembersFieldNumber;
const int CSODOTALobbyInternal::kLeftMembersFieldNumber;
const int CSODOTALobbyInternal::kSaveGameDataFieldNumber;
const int CSODOTALobbyInternal::kServerRunTimeFieldNumber;
const int CSODOTALobbyInternal::kLastStateChangeTimeFieldNumber;
#endif  // !_MSC_VER

CSODOTALobbyInternal::CSODOTALobbyInternal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSODOTALobbyInternal::InitAsDefaultInstance() {
}

CSODOTALobbyInternal::CSODOTALobbyInternal(const CSODOTALobbyInternal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSODOTALobbyInternal::SharedCtor() {
  _cached_size_ = 0;
  search_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  average_rank_ = 0u;
  replay_salt_ = 0u;
  disable_radiant_automatic_team_detection_ = false;
  disable_dire_automatic_team_detection_ = false;
  submitted_match_history_ = false;
  save_game_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_run_time_ = 0u;
  last_state_change_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSODOTALobbyInternal::~CSODOTALobbyInternal() {
  SharedDtor();
}

void CSODOTALobbyInternal::SharedDtor() {
  if (search_key_ != &::google::protobuf::internal::kEmptyString) {
    delete search_key_;
  }
  if (save_game_data_ != &::google::protobuf::internal::kEmptyString) {
    delete save_game_data_;
  }
  if (this != default_instance_) {
  }
}

void CSODOTALobbyInternal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSODOTALobbyInternal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSODOTALobbyInternal_descriptor_;
}

const CSODOTALobbyInternal& CSODOTALobbyInternal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CSODOTALobbyInternal* CSODOTALobbyInternal::default_instance_ = NULL;

CSODOTALobbyInternal* CSODOTALobbyInternal::New() const {
  return new CSODOTALobbyInternal;
}

void CSODOTALobbyInternal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_search_key()) {
      if (search_key_ != &::google::protobuf::internal::kEmptyString) {
        search_key_->clear();
      }
    }
    average_rank_ = 0u;
    replay_salt_ = 0u;
    disable_radiant_automatic_team_detection_ = false;
    disable_dire_automatic_team_detection_ = false;
    submitted_match_history_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_save_game_data()) {
      if (save_game_data_ != &::google::protobuf::internal::kEmptyString) {
        save_game_data_->clear();
      }
    }
    server_run_time_ = 0u;
    last_state_change_time_ = 0u;
  }
  members_.Clear();
  left_members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSODOTALobbyInternal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string search_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->search_key().data(), this->search_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_average_rank;
        break;
      }
      
      // optional uint32 average_rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_average_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &average_rank_)));
          set_has_average_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_replay_salt;
        break;
      }
      
      // optional fixed32 replay_salt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_replay_salt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &replay_salt_)));
          set_has_replay_salt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_disable_radiant_automatic_team_detection;
        break;
      }
      
      // optional bool disable_radiant_automatic_team_detection = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_disable_radiant_automatic_team_detection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_radiant_automatic_team_detection_)));
          set_has_disable_radiant_automatic_team_detection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_disable_dire_automatic_team_detection;
        break;
      }
      
      // optional bool disable_dire_automatic_team_detection = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_disable_dire_automatic_team_detection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_dire_automatic_team_detection_)));
          set_has_disable_dire_automatic_team_detection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_submitted_match_history;
        break;
      }
      
      // optional bool submitted_match_history = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_submitted_match_history:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &submitted_match_history_)));
          set_has_submitted_match_history();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_members;
        break;
      }
      
      // repeated .CDOTALobbyMemberPrivate members = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_members;
        if (input->ExpectTag(82)) goto parse_left_members;
        break;
      }
      
      // repeated .CDOTALobbyMemberPrivate left_members = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_left_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_left_members()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_left_members;
        if (input->ExpectTag(90)) goto parse_save_game_data;
        break;
      }
      
      // optional bytes save_game_data = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_save_game_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_save_game_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_server_run_time;
        break;
      }
      
      // optional uint32 server_run_time = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_run_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_run_time_)));
          set_has_server_run_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_last_state_change_time;
        break;
      }
      
      // optional uint32 last_state_change_time = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_state_change_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_state_change_time_)));
          set_has_last_state_change_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSODOTALobbyInternal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string search_key = 1;
  if (has_search_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->search_key().data(), this->search_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->search_key(), output);
  }
  
  // optional uint32 average_rank = 3;
  if (has_average_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->average_rank(), output);
  }
  
  // optional fixed32 replay_salt = 4;
  if (has_replay_salt()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->replay_salt(), output);
  }
  
  // optional bool disable_radiant_automatic_team_detection = 5;
  if (has_disable_radiant_automatic_team_detection()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->disable_radiant_automatic_team_detection(), output);
  }
  
  // optional bool disable_dire_automatic_team_detection = 6;
  if (has_disable_dire_automatic_team_detection()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->disable_dire_automatic_team_detection(), output);
  }
  
  // optional bool submitted_match_history = 8;
  if (has_submitted_match_history()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->submitted_match_history(), output);
  }
  
  // repeated .CDOTALobbyMemberPrivate members = 9;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->members(i), output);
  }
  
  // repeated .CDOTALobbyMemberPrivate left_members = 10;
  for (int i = 0; i < this->left_members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->left_members(i), output);
  }
  
  // optional bytes save_game_data = 11;
  if (has_save_game_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->save_game_data(), output);
  }
  
  // optional uint32 server_run_time = 12;
  if (has_server_run_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->server_run_time(), output);
  }
  
  // optional uint32 last_state_change_time = 13;
  if (has_last_state_change_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->last_state_change_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSODOTALobbyInternal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string search_key = 1;
  if (has_search_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->search_key().data(), this->search_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->search_key(), target);
  }
  
  // optional uint32 average_rank = 3;
  if (has_average_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->average_rank(), target);
  }
  
  // optional fixed32 replay_salt = 4;
  if (has_replay_salt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->replay_salt(), target);
  }
  
  // optional bool disable_radiant_automatic_team_detection = 5;
  if (has_disable_radiant_automatic_team_detection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->disable_radiant_automatic_team_detection(), target);
  }
  
  // optional bool disable_dire_automatic_team_detection = 6;
  if (has_disable_dire_automatic_team_detection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->disable_dire_automatic_team_detection(), target);
  }
  
  // optional bool submitted_match_history = 8;
  if (has_submitted_match_history()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->submitted_match_history(), target);
  }
  
  // repeated .CDOTALobbyMemberPrivate members = 9;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->members(i), target);
  }
  
  // repeated .CDOTALobbyMemberPrivate left_members = 10;
  for (int i = 0; i < this->left_members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->left_members(i), target);
  }
  
  // optional bytes save_game_data = 11;
  if (has_save_game_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->save_game_data(), target);
  }
  
  // optional uint32 server_run_time = 12;
  if (has_server_run_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->server_run_time(), target);
  }
  
  // optional uint32 last_state_change_time = 13;
  if (has_last_state_change_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->last_state_change_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSODOTALobbyInternal::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string search_key = 1;
    if (has_search_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->search_key());
    }
    
    // optional uint32 average_rank = 3;
    if (has_average_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->average_rank());
    }
    
    // optional fixed32 replay_salt = 4;
    if (has_replay_salt()) {
      total_size += 1 + 4;
    }
    
    // optional bool disable_radiant_automatic_team_detection = 5;
    if (has_disable_radiant_automatic_team_detection()) {
      total_size += 1 + 1;
    }
    
    // optional bool disable_dire_automatic_team_detection = 6;
    if (has_disable_dire_automatic_team_detection()) {
      total_size += 1 + 1;
    }
    
    // optional bool submitted_match_history = 8;
    if (has_submitted_match_history()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes save_game_data = 11;
    if (has_save_game_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->save_game_data());
    }
    
    // optional uint32 server_run_time = 12;
    if (has_server_run_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_run_time());
    }
    
    // optional uint32 last_state_change_time = 13;
    if (has_last_state_change_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_state_change_time());
    }
    
  }
  // repeated .CDOTALobbyMemberPrivate members = 9;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }
  
  // repeated .CDOTALobbyMemberPrivate left_members = 10;
  total_size += 1 * this->left_members_size();
  for (int i = 0; i < this->left_members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->left_members(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSODOTALobbyInternal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSODOTALobbyInternal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSODOTALobbyInternal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSODOTALobbyInternal::MergeFrom(const CSODOTALobbyInternal& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  left_members_.MergeFrom(from.left_members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_search_key()) {
      set_search_key(from.search_key());
    }
    if (from.has_average_rank()) {
      set_average_rank(from.average_rank());
    }
    if (from.has_replay_salt()) {
      set_replay_salt(from.replay_salt());
    }
    if (from.has_disable_radiant_automatic_team_detection()) {
      set_disable_radiant_automatic_team_detection(from.disable_radiant_automatic_team_detection());
    }
    if (from.has_disable_dire_automatic_team_detection()) {
      set_disable_dire_automatic_team_detection(from.disable_dire_automatic_team_detection());
    }
    if (from.has_submitted_match_history()) {
      set_submitted_match_history(from.submitted_match_history());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_save_game_data()) {
      set_save_game_data(from.save_game_data());
    }
    if (from.has_server_run_time()) {
      set_server_run_time(from.server_run_time());
    }
    if (from.has_last_state_change_time()) {
      set_last_state_change_time(from.last_state_change_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSODOTALobbyInternal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTALobbyInternal::CopyFrom(const CSODOTALobbyInternal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTALobbyInternal::IsInitialized() const {
  
  return true;
}

void CSODOTALobbyInternal::Swap(CSODOTALobbyInternal* other) {
  if (other != this) {
    std::swap(search_key_, other->search_key_);
    std::swap(average_rank_, other->average_rank_);
    std::swap(replay_salt_, other->replay_salt_);
    std::swap(disable_radiant_automatic_team_detection_, other->disable_radiant_automatic_team_detection_);
    std::swap(disable_dire_automatic_team_detection_, other->disable_dire_automatic_team_detection_);
    std::swap(submitted_match_history_, other->submitted_match_history_);
    members_.Swap(&other->members_);
    left_members_.Swap(&other->left_members_);
    std::swap(save_game_data_, other->save_game_data_);
    std::swap(server_run_time_, other->server_run_time_);
    std::swap(last_state_change_time_, other->last_state_change_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSODOTALobbyInternal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSODOTALobbyInternal_descriptor_;
  metadata.reflection = CSODOTALobbyInternal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAGenericResult::kEresultFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAGenericResult::CMsgDOTAGenericResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgDOTAGenericResult::InitAsDefaultInstance() {
}

CMsgDOTAGenericResult::CMsgDOTAGenericResult(const CMsgDOTAGenericResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgDOTAGenericResult::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAGenericResult::~CMsgDOTAGenericResult() {
  SharedDtor();
}

void CMsgDOTAGenericResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAGenericResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGenericResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAGenericResult_descriptor_;
}

const CMsgDOTAGenericResult& CMsgDOTAGenericResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CMsgDOTAGenericResult* CMsgDOTAGenericResult::default_instance_ = NULL;

CMsgDOTAGenericResult* CMsgDOTAGenericResult::New() const {
  return new CMsgDOTAGenericResult;
}

void CMsgDOTAGenericResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAGenericResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgDOTAGenericResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgDOTAGenericResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 eresult = 1 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgDOTAGenericResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGenericResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAGenericResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAGenericResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAGenericResult::MergeFrom(const CMsgDOTAGenericResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAGenericResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGenericResult::CopyFrom(const CMsgDOTAGenericResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGenericResult::IsInitialized() const {
  
  return true;
}

void CMsgDOTAGenericResult::Swap(CMsgDOTAGenericResult* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAGenericResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAGenericResult_descriptor_;
  metadata.reflection = CMsgDOTAGenericResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTABroadcastNotification::kMessageFieldNumber;
#endif  // !_MSC_VER

CMsgDOTABroadcastNotification::CMsgDOTABroadcastNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgDOTABroadcastNotification::InitAsDefaultInstance() {
}

CMsgDOTABroadcastNotification::CMsgDOTABroadcastNotification(const CMsgDOTABroadcastNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgDOTABroadcastNotification::SharedCtor() {
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTABroadcastNotification::~CMsgDOTABroadcastNotification() {
  SharedDtor();
}

void CMsgDOTABroadcastNotification::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTABroadcastNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTABroadcastNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTABroadcastNotification_descriptor_;
}

const CMsgDOTABroadcastNotification& CMsgDOTABroadcastNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CMsgDOTABroadcastNotification* CMsgDOTABroadcastNotification::default_instance_ = NULL;

CMsgDOTABroadcastNotification* CMsgDOTABroadcastNotification::New() const {
  return new CMsgDOTABroadcastNotification;
}

void CMsgDOTABroadcastNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTABroadcastNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgDOTABroadcastNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgDOTABroadcastNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgDOTABroadcastNotification::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTABroadcastNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTABroadcastNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTABroadcastNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTABroadcastNotification::MergeFrom(const CMsgDOTABroadcastNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTABroadcastNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTABroadcastNotification::CopyFrom(const CMsgDOTABroadcastNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTABroadcastNotification::IsInitialized() const {
  
  return true;
}

void CMsgDOTABroadcastNotification::Swap(CMsgDOTABroadcastNotification* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTABroadcastNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTABroadcastNotification_descriptor_;
  metadata.reflection = CMsgDOTABroadcastNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAPCBangTimedReward::kPersonaFieldNumber;
const int CMsgDOTAPCBangTimedReward::kItemdefFieldNumber;
const int CMsgDOTAPCBangTimedReward::kPcbangnameFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAPCBangTimedReward::CMsgDOTAPCBangTimedReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgDOTAPCBangTimedReward::InitAsDefaultInstance() {
}

CMsgDOTAPCBangTimedReward::CMsgDOTAPCBangTimedReward(const CMsgDOTAPCBangTimedReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgDOTAPCBangTimedReward::SharedCtor() {
  _cached_size_ = 0;
  persona_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  itemdef_ = 0u;
  pcbangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAPCBangTimedReward::~CMsgDOTAPCBangTimedReward() {
  SharedDtor();
}

void CMsgDOTAPCBangTimedReward::SharedDtor() {
  if (persona_ != &::google::protobuf::internal::kEmptyString) {
    delete persona_;
  }
  if (pcbangname_ != &::google::protobuf::internal::kEmptyString) {
    delete pcbangname_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTAPCBangTimedReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAPCBangTimedReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAPCBangTimedReward_descriptor_;
}

const CMsgDOTAPCBangTimedReward& CMsgDOTAPCBangTimedReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CMsgDOTAPCBangTimedReward* CMsgDOTAPCBangTimedReward::default_instance_ = NULL;

CMsgDOTAPCBangTimedReward* CMsgDOTAPCBangTimedReward::New() const {
  return new CMsgDOTAPCBangTimedReward;
}

void CMsgDOTAPCBangTimedReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_persona()) {
      if (persona_ != &::google::protobuf::internal::kEmptyString) {
        persona_->clear();
      }
    }
    itemdef_ = 0u;
    if (has_pcbangname()) {
      if (pcbangname_ != &::google::protobuf::internal::kEmptyString) {
        pcbangname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAPCBangTimedReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string persona = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->persona().data(), this->persona().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemdef;
        break;
      }
      
      // optional uint32 itemdef = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemdef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemdef_)));
          set_has_itemdef();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pcbangname;
        break;
      }
      
      // optional string pcbangname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pcbangname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pcbangname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pcbangname().data(), this->pcbangname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgDOTAPCBangTimedReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string persona = 1;
  if (has_persona()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->persona().data(), this->persona().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->persona(), output);
  }
  
  // optional uint32 itemdef = 2;
  if (has_itemdef()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemdef(), output);
  }
  
  // optional string pcbangname = 3;
  if (has_pcbangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pcbangname().data(), this->pcbangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pcbangname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgDOTAPCBangTimedReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string persona = 1;
  if (has_persona()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->persona().data(), this->persona().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->persona(), target);
  }
  
  // optional uint32 itemdef = 2;
  if (has_itemdef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemdef(), target);
  }
  
  // optional string pcbangname = 3;
  if (has_pcbangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pcbangname().data(), this->pcbangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pcbangname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgDOTAPCBangTimedReward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string persona = 1;
    if (has_persona()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona());
    }
    
    // optional uint32 itemdef = 2;
    if (has_itemdef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemdef());
    }
    
    // optional string pcbangname = 3;
    if (has_pcbangname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pcbangname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAPCBangTimedReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAPCBangTimedReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAPCBangTimedReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAPCBangTimedReward::MergeFrom(const CMsgDOTAPCBangTimedReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_persona()) {
      set_persona(from.persona());
    }
    if (from.has_itemdef()) {
      set_itemdef(from.itemdef());
    }
    if (from.has_pcbangname()) {
      set_pcbangname(from.pcbangname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAPCBangTimedReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAPCBangTimedReward::CopyFrom(const CMsgDOTAPCBangTimedReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPCBangTimedReward::IsInitialized() const {
  
  return true;
}

void CMsgDOTAPCBangTimedReward::Swap(CMsgDOTAPCBangTimedReward* other) {
  if (other != this) {
    std::swap(persona_, other->persona_);
    std::swap(itemdef_, other->itemdef_);
    std::swap(pcbangname_, other->pcbangname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAPCBangTimedReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAPCBangTimedReward_descriptor_;
  metadata.reflection = CMsgDOTAPCBangTimedReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CAttribute_String::kValueFieldNumber;
#endif  // !_MSC_VER

CAttribute_String::CAttribute_String()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CAttribute_String::InitAsDefaultInstance() {
}

CAttribute_String::CAttribute_String(const CAttribute_String& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CAttribute_String::SharedCtor() {
  _cached_size_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CAttribute_String::~CAttribute_String() {
  SharedDtor();
}

void CAttribute_String::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void CAttribute_String::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAttribute_String::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAttribute_String_descriptor_;
}

const CAttribute_String& CAttribute_String::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CAttribute_String* CAttribute_String::default_instance_ = NULL;

CAttribute_String* CAttribute_String::New() const {
  return new CAttribute_String;
}

void CAttribute_String::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CAttribute_String::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CAttribute_String::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CAttribute_String::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CAttribute_String::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAttribute_String::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CAttribute_String* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CAttribute_String*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CAttribute_String::MergeFrom(const CAttribute_String& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CAttribute_String::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAttribute_String::CopyFrom(const CAttribute_String& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAttribute_String::IsInitialized() const {
  
  return true;
}

void CAttribute_String::Swap(CAttribute_String* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CAttribute_String::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAttribute_String_descriptor_;
  metadata.reflection = CAttribute_String_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CAttribute_ItemDynamicRecipeComponent::kItemDefFieldNumber;
const int CAttribute_ItemDynamicRecipeComponent::kItemQualityFieldNumber;
const int CAttribute_ItemDynamicRecipeComponent::kItemFlagsFieldNumber;
const int CAttribute_ItemDynamicRecipeComponent::kAttributesStringFieldNumber;
const int CAttribute_ItemDynamicRecipeComponent::kItemCountFieldNumber;
const int CAttribute_ItemDynamicRecipeComponent::kItemsFulfilledFieldNumber;
const int CAttribute_ItemDynamicRecipeComponent::kItemRarityFieldNumber;
const int CAttribute_ItemDynamicRecipeComponent::kLootlistFieldNumber;
const int CAttribute_ItemDynamicRecipeComponent::kFulfilledItemIdFieldNumber;
#endif  // !_MSC_VER

CAttribute_ItemDynamicRecipeComponent::CAttribute_ItemDynamicRecipeComponent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CAttribute_ItemDynamicRecipeComponent::InitAsDefaultInstance() {
}

CAttribute_ItemDynamicRecipeComponent::CAttribute_ItemDynamicRecipeComponent(const CAttribute_ItemDynamicRecipeComponent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CAttribute_ItemDynamicRecipeComponent::SharedCtor() {
  _cached_size_ = 0;
  item_def_ = 0u;
  item_quality_ = 0u;
  item_flags_ = 0u;
  attributes_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  item_count_ = 0u;
  items_fulfilled_ = 0u;
  item_rarity_ = 0u;
  lootlist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fulfilled_item_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CAttribute_ItemDynamicRecipeComponent::~CAttribute_ItemDynamicRecipeComponent() {
  SharedDtor();
}

void CAttribute_ItemDynamicRecipeComponent::SharedDtor() {
  if (attributes_string_ != &::google::protobuf::internal::kEmptyString) {
    delete attributes_string_;
  }
  if (lootlist_ != &::google::protobuf::internal::kEmptyString) {
    delete lootlist_;
  }
  if (this != default_instance_) {
  }
}

void CAttribute_ItemDynamicRecipeComponent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAttribute_ItemDynamicRecipeComponent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAttribute_ItemDynamicRecipeComponent_descriptor_;
}

const CAttribute_ItemDynamicRecipeComponent& CAttribute_ItemDynamicRecipeComponent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CAttribute_ItemDynamicRecipeComponent* CAttribute_ItemDynamicRecipeComponent::default_instance_ = NULL;

CAttribute_ItemDynamicRecipeComponent* CAttribute_ItemDynamicRecipeComponent::New() const {
  return new CAttribute_ItemDynamicRecipeComponent;
}

void CAttribute_ItemDynamicRecipeComponent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_def_ = 0u;
    item_quality_ = 0u;
    item_flags_ = 0u;
    if (has_attributes_string()) {
      if (attributes_string_ != &::google::protobuf::internal::kEmptyString) {
        attributes_string_->clear();
      }
    }
    item_count_ = 0u;
    items_fulfilled_ = 0u;
    item_rarity_ = 0u;
    if (has_lootlist()) {
      if (lootlist_ != &::google::protobuf::internal::kEmptyString) {
        lootlist_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    fulfilled_item_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CAttribute_ItemDynamicRecipeComponent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_def = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_def_)));
          set_has_item_def();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_quality;
        break;
      }
      
      // optional uint32 item_quality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_quality_)));
          set_has_item_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_flags;
        break;
      }
      
      // optional uint32 item_flags = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_flags_)));
          set_has_item_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_attributes_string;
        break;
      }
      
      // optional string attributes_string = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attributes_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attributes_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attributes_string().data(), this->attributes_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_item_count;
        break;
      }
      
      // optional uint32 item_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_items_fulfilled;
        break;
      }
      
      // optional uint32 items_fulfilled = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_items_fulfilled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &items_fulfilled_)));
          set_has_items_fulfilled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_item_rarity;
        break;
      }
      
      // optional uint32 item_rarity = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_rarity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_rarity_)));
          set_has_item_rarity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_lootlist;
        break;
      }
      
      // optional string lootlist = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lootlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lootlist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lootlist().data(), this->lootlist().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_fulfilled_item_id;
        break;
      }
      
      // optional uint64 fulfilled_item_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fulfilled_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fulfilled_item_id_)));
          set_has_fulfilled_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CAttribute_ItemDynamicRecipeComponent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 item_def = 1;
  if (has_item_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_def(), output);
  }
  
  // optional uint32 item_quality = 2;
  if (has_item_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_quality(), output);
  }
  
  // optional uint32 item_flags = 3;
  if (has_item_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_flags(), output);
  }
  
  // optional string attributes_string = 4;
  if (has_attributes_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attributes_string().data(), this->attributes_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->attributes_string(), output);
  }
  
  // optional uint32 item_count = 5;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->item_count(), output);
  }
  
  // optional uint32 items_fulfilled = 6;
  if (has_items_fulfilled()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->items_fulfilled(), output);
  }
  
  // optional uint32 item_rarity = 7;
  if (has_item_rarity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->item_rarity(), output);
  }
  
  // optional string lootlist = 8;
  if (has_lootlist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lootlist().data(), this->lootlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->lootlist(), output);
  }
  
  // optional uint64 fulfilled_item_id = 9;
  if (has_fulfilled_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->fulfilled_item_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CAttribute_ItemDynamicRecipeComponent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 item_def = 1;
  if (has_item_def()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_def(), target);
  }
  
  // optional uint32 item_quality = 2;
  if (has_item_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_quality(), target);
  }
  
  // optional uint32 item_flags = 3;
  if (has_item_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_flags(), target);
  }
  
  // optional string attributes_string = 4;
  if (has_attributes_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attributes_string().data(), this->attributes_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->attributes_string(), target);
  }
  
  // optional uint32 item_count = 5;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->item_count(), target);
  }
  
  // optional uint32 items_fulfilled = 6;
  if (has_items_fulfilled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->items_fulfilled(), target);
  }
  
  // optional uint32 item_rarity = 7;
  if (has_item_rarity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->item_rarity(), target);
  }
  
  // optional string lootlist = 8;
  if (has_lootlist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lootlist().data(), this->lootlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->lootlist(), target);
  }
  
  // optional uint64 fulfilled_item_id = 9;
  if (has_fulfilled_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->fulfilled_item_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CAttribute_ItemDynamicRecipeComponent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 item_def = 1;
    if (has_item_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_def());
    }
    
    // optional uint32 item_quality = 2;
    if (has_item_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_quality());
    }
    
    // optional uint32 item_flags = 3;
    if (has_item_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_flags());
    }
    
    // optional string attributes_string = 4;
    if (has_attributes_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attributes_string());
    }
    
    // optional uint32 item_count = 5;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_count());
    }
    
    // optional uint32 items_fulfilled = 6;
    if (has_items_fulfilled()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->items_fulfilled());
    }
    
    // optional uint32 item_rarity = 7;
    if (has_item_rarity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_rarity());
    }
    
    // optional string lootlist = 8;
    if (has_lootlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lootlist());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 fulfilled_item_id = 9;
    if (has_fulfilled_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fulfilled_item_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAttribute_ItemDynamicRecipeComponent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CAttribute_ItemDynamicRecipeComponent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CAttribute_ItemDynamicRecipeComponent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CAttribute_ItemDynamicRecipeComponent::MergeFrom(const CAttribute_ItemDynamicRecipeComponent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_def()) {
      set_item_def(from.item_def());
    }
    if (from.has_item_quality()) {
      set_item_quality(from.item_quality());
    }
    if (from.has_item_flags()) {
      set_item_flags(from.item_flags());
    }
    if (from.has_attributes_string()) {
      set_attributes_string(from.attributes_string());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
    if (from.has_items_fulfilled()) {
      set_items_fulfilled(from.items_fulfilled());
    }
    if (from.has_item_rarity()) {
      set_item_rarity(from.item_rarity());
    }
    if (from.has_lootlist()) {
      set_lootlist(from.lootlist());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fulfilled_item_id()) {
      set_fulfilled_item_id(from.fulfilled_item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CAttribute_ItemDynamicRecipeComponent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAttribute_ItemDynamicRecipeComponent::CopyFrom(const CAttribute_ItemDynamicRecipeComponent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAttribute_ItemDynamicRecipeComponent::IsInitialized() const {
  
  return true;
}

void CAttribute_ItemDynamicRecipeComponent::Swap(CAttribute_ItemDynamicRecipeComponent* other) {
  if (other != this) {
    std::swap(item_def_, other->item_def_);
    std::swap(item_quality_, other->item_quality_);
    std::swap(item_flags_, other->item_flags_);
    std::swap(attributes_string_, other->attributes_string_);
    std::swap(item_count_, other->item_count_);
    std::swap(items_fulfilled_, other->items_fulfilled_);
    std::swap(item_rarity_, other->item_rarity_);
    std::swap(lootlist_, other->lootlist_);
    std::swap(fulfilled_item_id_, other->fulfilled_item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CAttribute_ItemDynamicRecipeComponent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAttribute_ItemDynamicRecipeComponent_descriptor_;
  metadata.reflection = CAttribute_ItemDynamicRecipeComponent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CProtoItemSocket::kItemIdFieldNumber;
const int CProtoItemSocket::kAttrDefIndexFieldNumber;
const int CProtoItemSocket::kRequiredTypeFieldNumber;
const int CProtoItemSocket::kRequiredHeroFieldNumber;
const int CProtoItemSocket::kGemDefIndexFieldNumber;
const int CProtoItemSocket::kNotTradableFieldNumber;
const int CProtoItemSocket::kRequiredItemSlotFieldNumber;
#endif  // !_MSC_VER

CProtoItemSocket::CProtoItemSocket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CProtoItemSocket::InitAsDefaultInstance() {
}

CProtoItemSocket::CProtoItemSocket(const CProtoItemSocket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CProtoItemSocket::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_ULONGLONG(0);
  attr_def_index_ = 0u;
  required_type_ = 0u;
  required_hero_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gem_def_index_ = 0u;
  not_tradable_ = false;
  required_item_slot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CProtoItemSocket::~CProtoItemSocket() {
  SharedDtor();
}

void CProtoItemSocket::SharedDtor() {
  if (required_hero_ != &::google::protobuf::internal::kEmptyString) {
    delete required_hero_;
  }
  if (required_item_slot_ != &::google::protobuf::internal::kEmptyString) {
    delete required_item_slot_;
  }
  if (this != default_instance_) {
  }
}

void CProtoItemSocket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProtoItemSocket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CProtoItemSocket_descriptor_;
}

const CProtoItemSocket& CProtoItemSocket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CProtoItemSocket* CProtoItemSocket::default_instance_ = NULL;

CProtoItemSocket* CProtoItemSocket::New() const {
  return new CProtoItemSocket;
}

void CProtoItemSocket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = GOOGLE_ULONGLONG(0);
    attr_def_index_ = 0u;
    required_type_ = 0u;
    if (has_required_hero()) {
      if (required_hero_ != &::google::protobuf::internal::kEmptyString) {
        required_hero_->clear();
      }
    }
    gem_def_index_ = 0u;
    not_tradable_ = false;
    if (has_required_item_slot()) {
      if (required_item_slot_ != &::google::protobuf::internal::kEmptyString) {
        required_item_slot_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CProtoItemSocket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attr_def_index;
        break;
      }
      
      // optional uint32 attr_def_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attr_def_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attr_def_index_)));
          set_has_attr_def_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_required_type;
        break;
      }
      
      // optional uint32 required_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_required_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &required_type_)));
          set_has_required_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_required_hero;
        break;
      }
      
      // optional string required_hero = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_required_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_required_hero()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->required_hero().data(), this->required_hero().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gem_def_index;
        break;
      }
      
      // optional uint32 gem_def_index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gem_def_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gem_def_index_)));
          set_has_gem_def_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_not_tradable;
        break;
      }
      
      // optional bool not_tradable = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_not_tradable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &not_tradable_)));
          set_has_not_tradable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_required_item_slot;
        break;
      }
      
      // optional string required_item_slot = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_required_item_slot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_required_item_slot()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->required_item_slot().data(), this->required_item_slot().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CProtoItemSocket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_id(), output);
  }
  
  // optional uint32 attr_def_index = 2;
  if (has_attr_def_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attr_def_index(), output);
  }
  
  // optional uint32 required_type = 3;
  if (has_required_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->required_type(), output);
  }
  
  // optional string required_hero = 4;
  if (has_required_hero()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->required_hero().data(), this->required_hero().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->required_hero(), output);
  }
  
  // optional uint32 gem_def_index = 5;
  if (has_gem_def_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->gem_def_index(), output);
  }
  
  // optional bool not_tradable = 6;
  if (has_not_tradable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->not_tradable(), output);
  }
  
  // optional string required_item_slot = 7;
  if (has_required_item_slot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->required_item_slot().data(), this->required_item_slot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->required_item_slot(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CProtoItemSocket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_id(), target);
  }
  
  // optional uint32 attr_def_index = 2;
  if (has_attr_def_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attr_def_index(), target);
  }
  
  // optional uint32 required_type = 3;
  if (has_required_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->required_type(), target);
  }
  
  // optional string required_hero = 4;
  if (has_required_hero()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->required_hero().data(), this->required_hero().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->required_hero(), target);
  }
  
  // optional uint32 gem_def_index = 5;
  if (has_gem_def_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->gem_def_index(), target);
  }
  
  // optional bool not_tradable = 6;
  if (has_not_tradable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->not_tradable(), target);
  }
  
  // optional string required_item_slot = 7;
  if (has_required_item_slot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->required_item_slot().data(), this->required_item_slot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->required_item_slot(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CProtoItemSocket::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }
    
    // optional uint32 attr_def_index = 2;
    if (has_attr_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attr_def_index());
    }
    
    // optional uint32 required_type = 3;
    if (has_required_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->required_type());
    }
    
    // optional string required_hero = 4;
    if (has_required_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->required_hero());
    }
    
    // optional uint32 gem_def_index = 5;
    if (has_gem_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gem_def_index());
    }
    
    // optional bool not_tradable = 6;
    if (has_not_tradable()) {
      total_size += 1 + 1;
    }
    
    // optional string required_item_slot = 7;
    if (has_required_item_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->required_item_slot());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProtoItemSocket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CProtoItemSocket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CProtoItemSocket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CProtoItemSocket::MergeFrom(const CProtoItemSocket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_attr_def_index()) {
      set_attr_def_index(from.attr_def_index());
    }
    if (from.has_required_type()) {
      set_required_type(from.required_type());
    }
    if (from.has_required_hero()) {
      set_required_hero(from.required_hero());
    }
    if (from.has_gem_def_index()) {
      set_gem_def_index(from.gem_def_index());
    }
    if (from.has_not_tradable()) {
      set_not_tradable(from.not_tradable());
    }
    if (from.has_required_item_slot()) {
      set_required_item_slot(from.required_item_slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CProtoItemSocket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProtoItemSocket::CopyFrom(const CProtoItemSocket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemSocket::IsInitialized() const {
  
  return true;
}

void CProtoItemSocket::Swap(CProtoItemSocket* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(attr_def_index_, other->attr_def_index_);
    std::swap(required_type_, other->required_type_);
    std::swap(required_hero_, other->required_hero_);
    std::swap(gem_def_index_, other->gem_def_index_);
    std::swap(not_tradable_, other->not_tradable_);
    std::swap(required_item_slot_, other->required_item_slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CProtoItemSocket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CProtoItemSocket_descriptor_;
  metadata.reflection = CProtoItemSocket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CProtoItemSocket_Empty::kSocketFieldNumber;
#endif  // !_MSC_VER

CProtoItemSocket_Empty::CProtoItemSocket_Empty()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CProtoItemSocket_Empty::InitAsDefaultInstance() {
  socket_ = const_cast< ::CProtoItemSocket*>(&::CProtoItemSocket::default_instance());
}

CProtoItemSocket_Empty::CProtoItemSocket_Empty(const CProtoItemSocket_Empty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CProtoItemSocket_Empty::SharedCtor() {
  _cached_size_ = 0;
  socket_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CProtoItemSocket_Empty::~CProtoItemSocket_Empty() {
  SharedDtor();
}

void CProtoItemSocket_Empty::SharedDtor() {
  if (this != default_instance_) {
    delete socket_;
  }
}

void CProtoItemSocket_Empty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProtoItemSocket_Empty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CProtoItemSocket_Empty_descriptor_;
}

const CProtoItemSocket_Empty& CProtoItemSocket_Empty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CProtoItemSocket_Empty* CProtoItemSocket_Empty::default_instance_ = NULL;

CProtoItemSocket_Empty* CProtoItemSocket_Empty::New() const {
  return new CProtoItemSocket_Empty;
}

void CProtoItemSocket_Empty::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_socket()) {
      if (socket_ != NULL) socket_->::CProtoItemSocket::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CProtoItemSocket_Empty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CProtoItemSocket socket = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_socket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CProtoItemSocket_Empty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CProtoItemSocket socket = 1;
  if (has_socket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->socket(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CProtoItemSocket_Empty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CProtoItemSocket socket = 1;
  if (has_socket()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->socket(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CProtoItemSocket_Empty::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CProtoItemSocket socket = 1;
    if (has_socket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->socket());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProtoItemSocket_Empty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CProtoItemSocket_Empty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CProtoItemSocket_Empty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CProtoItemSocket_Empty::MergeFrom(const CProtoItemSocket_Empty& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_socket()) {
      mutable_socket()->::CProtoItemSocket::MergeFrom(from.socket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CProtoItemSocket_Empty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProtoItemSocket_Empty::CopyFrom(const CProtoItemSocket_Empty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemSocket_Empty::IsInitialized() const {
  
  return true;
}

void CProtoItemSocket_Empty::Swap(CProtoItemSocket_Empty* other) {
  if (other != this) {
    std::swap(socket_, other->socket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CProtoItemSocket_Empty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CProtoItemSocket_Empty_descriptor_;
  metadata.reflection = CProtoItemSocket_Empty_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CProtoItemSocket_Effect::kSocketFieldNumber;
const int CProtoItemSocket_Effect::kEffectFieldNumber;
#endif  // !_MSC_VER

CProtoItemSocket_Effect::CProtoItemSocket_Effect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CProtoItemSocket_Effect::InitAsDefaultInstance() {
  socket_ = const_cast< ::CProtoItemSocket*>(&::CProtoItemSocket::default_instance());
}

CProtoItemSocket_Effect::CProtoItemSocket_Effect(const CProtoItemSocket_Effect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CProtoItemSocket_Effect::SharedCtor() {
  _cached_size_ = 0;
  socket_ = NULL;
  effect_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CProtoItemSocket_Effect::~CProtoItemSocket_Effect() {
  SharedDtor();
}

void CProtoItemSocket_Effect::SharedDtor() {
  if (this != default_instance_) {
    delete socket_;
  }
}

void CProtoItemSocket_Effect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProtoItemSocket_Effect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CProtoItemSocket_Effect_descriptor_;
}

const CProtoItemSocket_Effect& CProtoItemSocket_Effect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CProtoItemSocket_Effect* CProtoItemSocket_Effect::default_instance_ = NULL;

CProtoItemSocket_Effect* CProtoItemSocket_Effect::New() const {
  return new CProtoItemSocket_Effect;
}

void CProtoItemSocket_Effect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_socket()) {
      if (socket_ != NULL) socket_->::CProtoItemSocket::Clear();
    }
    effect_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CProtoItemSocket_Effect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CProtoItemSocket socket = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_socket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_effect;
        break;
      }
      
      // optional uint32 effect = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_)));
          set_has_effect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CProtoItemSocket_Effect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CProtoItemSocket socket = 1;
  if (has_socket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->socket(), output);
  }
  
  // optional uint32 effect = 2;
  if (has_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->effect(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CProtoItemSocket_Effect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CProtoItemSocket socket = 1;
  if (has_socket()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->socket(), target);
  }
  
  // optional uint32 effect = 2;
  if (has_effect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->effect(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CProtoItemSocket_Effect::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CProtoItemSocket socket = 1;
    if (has_socket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->socket());
    }
    
    // optional uint32 effect = 2;
    if (has_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effect());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProtoItemSocket_Effect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CProtoItemSocket_Effect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CProtoItemSocket_Effect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CProtoItemSocket_Effect::MergeFrom(const CProtoItemSocket_Effect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_socket()) {
      mutable_socket()->::CProtoItemSocket::MergeFrom(from.socket());
    }
    if (from.has_effect()) {
      set_effect(from.effect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CProtoItemSocket_Effect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProtoItemSocket_Effect::CopyFrom(const CProtoItemSocket_Effect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemSocket_Effect::IsInitialized() const {
  
  return true;
}

void CProtoItemSocket_Effect::Swap(CProtoItemSocket_Effect* other) {
  if (other != this) {
    std::swap(socket_, other->socket_);
    std::swap(effect_, other->effect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CProtoItemSocket_Effect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CProtoItemSocket_Effect_descriptor_;
  metadata.reflection = CProtoItemSocket_Effect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CProtoItemSocket_Color::kSocketFieldNumber;
const int CProtoItemSocket_Color::kRedFieldNumber;
const int CProtoItemSocket_Color::kGreenFieldNumber;
const int CProtoItemSocket_Color::kBlueFieldNumber;
#endif  // !_MSC_VER

CProtoItemSocket_Color::CProtoItemSocket_Color()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CProtoItemSocket_Color::InitAsDefaultInstance() {
  socket_ = const_cast< ::CProtoItemSocket*>(&::CProtoItemSocket::default_instance());
}

CProtoItemSocket_Color::CProtoItemSocket_Color(const CProtoItemSocket_Color& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CProtoItemSocket_Color::SharedCtor() {
  _cached_size_ = 0;
  socket_ = NULL;
  red_ = 0u;
  green_ = 0u;
  blue_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CProtoItemSocket_Color::~CProtoItemSocket_Color() {
  SharedDtor();
}

void CProtoItemSocket_Color::SharedDtor() {
  if (this != default_instance_) {
    delete socket_;
  }
}

void CProtoItemSocket_Color::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProtoItemSocket_Color::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CProtoItemSocket_Color_descriptor_;
}

const CProtoItemSocket_Color& CProtoItemSocket_Color::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CProtoItemSocket_Color* CProtoItemSocket_Color::default_instance_ = NULL;

CProtoItemSocket_Color* CProtoItemSocket_Color::New() const {
  return new CProtoItemSocket_Color;
}

void CProtoItemSocket_Color::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_socket()) {
      if (socket_ != NULL) socket_->::CProtoItemSocket::Clear();
    }
    red_ = 0u;
    green_ = 0u;
    blue_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CProtoItemSocket_Color::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CProtoItemSocket socket = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_socket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_red;
        break;
      }
      
      // optional uint32 red = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_red:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &red_)));
          set_has_red();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_green;
        break;
      }
      
      // optional uint32 green = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_green:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &green_)));
          set_has_green();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_blue;
        break;
      }
      
      // optional uint32 blue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blue_)));
          set_has_blue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CProtoItemSocket_Color::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CProtoItemSocket socket = 1;
  if (has_socket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->socket(), output);
  }
  
  // optional uint32 red = 2;
  if (has_red()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->red(), output);
  }
  
  // optional uint32 green = 3;
  if (has_green()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->green(), output);
  }
  
  // optional uint32 blue = 4;
  if (has_blue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->blue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CProtoItemSocket_Color::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CProtoItemSocket socket = 1;
  if (has_socket()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->socket(), target);
  }
  
  // optional uint32 red = 2;
  if (has_red()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->red(), target);
  }
  
  // optional uint32 green = 3;
  if (has_green()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->green(), target);
  }
  
  // optional uint32 blue = 4;
  if (has_blue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->blue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CProtoItemSocket_Color::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CProtoItemSocket socket = 1;
    if (has_socket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->socket());
    }
    
    // optional uint32 red = 2;
    if (has_red()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->red());
    }
    
    // optional uint32 green = 3;
    if (has_green()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->green());
    }
    
    // optional uint32 blue = 4;
    if (has_blue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blue());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProtoItemSocket_Color::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CProtoItemSocket_Color* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CProtoItemSocket_Color*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CProtoItemSocket_Color::MergeFrom(const CProtoItemSocket_Color& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_socket()) {
      mutable_socket()->::CProtoItemSocket::MergeFrom(from.socket());
    }
    if (from.has_red()) {
      set_red(from.red());
    }
    if (from.has_green()) {
      set_green(from.green());
    }
    if (from.has_blue()) {
      set_blue(from.blue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CProtoItemSocket_Color::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProtoItemSocket_Color::CopyFrom(const CProtoItemSocket_Color& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemSocket_Color::IsInitialized() const {
  
  return true;
}

void CProtoItemSocket_Color::Swap(CProtoItemSocket_Color* other) {
  if (other != this) {
    std::swap(socket_, other->socket_);
    std::swap(red_, other->red_);
    std::swap(green_, other->green_);
    std::swap(blue_, other->blue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CProtoItemSocket_Color::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CProtoItemSocket_Color_descriptor_;
  metadata.reflection = CProtoItemSocket_Color_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CProtoItemSocket_Strange::kSocketFieldNumber;
const int CProtoItemSocket_Strange::kStrangeTypeFieldNumber;
const int CProtoItemSocket_Strange::kStrangeValueFieldNumber;
#endif  // !_MSC_VER

CProtoItemSocket_Strange::CProtoItemSocket_Strange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CProtoItemSocket_Strange::InitAsDefaultInstance() {
  socket_ = const_cast< ::CProtoItemSocket*>(&::CProtoItemSocket::default_instance());
}

CProtoItemSocket_Strange::CProtoItemSocket_Strange(const CProtoItemSocket_Strange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CProtoItemSocket_Strange::SharedCtor() {
  _cached_size_ = 0;
  socket_ = NULL;
  strange_type_ = 0u;
  strange_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CProtoItemSocket_Strange::~CProtoItemSocket_Strange() {
  SharedDtor();
}

void CProtoItemSocket_Strange::SharedDtor() {
  if (this != default_instance_) {
    delete socket_;
  }
}

void CProtoItemSocket_Strange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProtoItemSocket_Strange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CProtoItemSocket_Strange_descriptor_;
}

const CProtoItemSocket_Strange& CProtoItemSocket_Strange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CProtoItemSocket_Strange* CProtoItemSocket_Strange::default_instance_ = NULL;

CProtoItemSocket_Strange* CProtoItemSocket_Strange::New() const {
  return new CProtoItemSocket_Strange;
}

void CProtoItemSocket_Strange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_socket()) {
      if (socket_ != NULL) socket_->::CProtoItemSocket::Clear();
    }
    strange_type_ = 0u;
    strange_value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CProtoItemSocket_Strange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CProtoItemSocket socket = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_socket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_strange_type;
        break;
      }
      
      // optional uint32 strange_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strange_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strange_type_)));
          set_has_strange_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_strange_value;
        break;
      }
      
      // optional uint32 strange_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strange_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strange_value_)));
          set_has_strange_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CProtoItemSocket_Strange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CProtoItemSocket socket = 1;
  if (has_socket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->socket(), output);
  }
  
  // optional uint32 strange_type = 2;
  if (has_strange_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->strange_type(), output);
  }
  
  // optional uint32 strange_value = 3;
  if (has_strange_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->strange_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CProtoItemSocket_Strange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CProtoItemSocket socket = 1;
  if (has_socket()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->socket(), target);
  }
  
  // optional uint32 strange_type = 2;
  if (has_strange_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->strange_type(), target);
  }
  
  // optional uint32 strange_value = 3;
  if (has_strange_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->strange_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CProtoItemSocket_Strange::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CProtoItemSocket socket = 1;
    if (has_socket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->socket());
    }
    
    // optional uint32 strange_type = 2;
    if (has_strange_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strange_type());
    }
    
    // optional uint32 strange_value = 3;
    if (has_strange_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strange_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProtoItemSocket_Strange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CProtoItemSocket_Strange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CProtoItemSocket_Strange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CProtoItemSocket_Strange::MergeFrom(const CProtoItemSocket_Strange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_socket()) {
      mutable_socket()->::CProtoItemSocket::MergeFrom(from.socket());
    }
    if (from.has_strange_type()) {
      set_strange_type(from.strange_type());
    }
    if (from.has_strange_value()) {
      set_strange_value(from.strange_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CProtoItemSocket_Strange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProtoItemSocket_Strange::CopyFrom(const CProtoItemSocket_Strange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemSocket_Strange::IsInitialized() const {
  
  return true;
}

void CProtoItemSocket_Strange::Swap(CProtoItemSocket_Strange* other) {
  if (other != this) {
    std::swap(socket_, other->socket_);
    std::swap(strange_type_, other->strange_type_);
    std::swap(strange_value_, other->strange_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CProtoItemSocket_Strange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CProtoItemSocket_Strange_descriptor_;
  metadata.reflection = CProtoItemSocket_Strange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CProtoItemSocket_Spectator::kSocketFieldNumber;
const int CProtoItemSocket_Spectator::kGamesViewedFieldNumber;
const int CProtoItemSocket_Spectator::kCorporationIdFieldNumber;
const int CProtoItemSocket_Spectator::kLeagueIdFieldNumber;
const int CProtoItemSocket_Spectator::kTeamIdFieldNumber;
#endif  // !_MSC_VER

CProtoItemSocket_Spectator::CProtoItemSocket_Spectator()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CProtoItemSocket_Spectator::InitAsDefaultInstance() {
  socket_ = const_cast< ::CProtoItemSocket*>(&::CProtoItemSocket::default_instance());
}

CProtoItemSocket_Spectator::CProtoItemSocket_Spectator(const CProtoItemSocket_Spectator& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CProtoItemSocket_Spectator::SharedCtor() {
  _cached_size_ = 0;
  socket_ = NULL;
  games_viewed_ = 0u;
  corporation_id_ = 0u;
  league_id_ = 0u;
  team_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CProtoItemSocket_Spectator::~CProtoItemSocket_Spectator() {
  SharedDtor();
}

void CProtoItemSocket_Spectator::SharedDtor() {
  if (this != default_instance_) {
    delete socket_;
  }
}

void CProtoItemSocket_Spectator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProtoItemSocket_Spectator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CProtoItemSocket_Spectator_descriptor_;
}

const CProtoItemSocket_Spectator& CProtoItemSocket_Spectator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CProtoItemSocket_Spectator* CProtoItemSocket_Spectator::default_instance_ = NULL;

CProtoItemSocket_Spectator* CProtoItemSocket_Spectator::New() const {
  return new CProtoItemSocket_Spectator;
}

void CProtoItemSocket_Spectator::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_socket()) {
      if (socket_ != NULL) socket_->::CProtoItemSocket::Clear();
    }
    games_viewed_ = 0u;
    corporation_id_ = 0u;
    league_id_ = 0u;
    team_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CProtoItemSocket_Spectator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CProtoItemSocket socket = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_socket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_games_viewed;
        break;
      }
      
      // optional uint32 games_viewed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_games_viewed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &games_viewed_)));
          set_has_games_viewed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_corporation_id;
        break;
      }
      
      // optional uint32 corporation_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_corporation_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &corporation_id_)));
          set_has_corporation_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_league_id;
        break;
      }
      
      // optional uint32 league_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_league_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
          set_has_league_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_team_id;
        break;
      }
      
      // optional uint32 team_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CProtoItemSocket_Spectator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CProtoItemSocket socket = 1;
  if (has_socket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->socket(), output);
  }
  
  // optional uint32 games_viewed = 2;
  if (has_games_viewed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->games_viewed(), output);
  }
  
  // optional uint32 corporation_id = 3;
  if (has_corporation_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->corporation_id(), output);
  }
  
  // optional uint32 league_id = 4;
  if (has_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->league_id(), output);
  }
  
  // optional uint32 team_id = 5;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->team_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CProtoItemSocket_Spectator::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CProtoItemSocket socket = 1;
  if (has_socket()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->socket(), target);
  }
  
  // optional uint32 games_viewed = 2;
  if (has_games_viewed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->games_viewed(), target);
  }
  
  // optional uint32 corporation_id = 3;
  if (has_corporation_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->corporation_id(), target);
  }
  
  // optional uint32 league_id = 4;
  if (has_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->league_id(), target);
  }
  
  // optional uint32 team_id = 5;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->team_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CProtoItemSocket_Spectator::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CProtoItemSocket socket = 1;
    if (has_socket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->socket());
    }
    
    // optional uint32 games_viewed = 2;
    if (has_games_viewed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->games_viewed());
    }
    
    // optional uint32 corporation_id = 3;
    if (has_corporation_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->corporation_id());
    }
    
    // optional uint32 league_id = 4;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }
    
    // optional uint32 team_id = 5;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProtoItemSocket_Spectator::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CProtoItemSocket_Spectator* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CProtoItemSocket_Spectator*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CProtoItemSocket_Spectator::MergeFrom(const CProtoItemSocket_Spectator& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_socket()) {
      mutable_socket()->::CProtoItemSocket::MergeFrom(from.socket());
    }
    if (from.has_games_viewed()) {
      set_games_viewed(from.games_viewed());
    }
    if (from.has_corporation_id()) {
      set_corporation_id(from.corporation_id());
    }
    if (from.has_league_id()) {
      set_league_id(from.league_id());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CProtoItemSocket_Spectator::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProtoItemSocket_Spectator::CopyFrom(const CProtoItemSocket_Spectator& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemSocket_Spectator::IsInitialized() const {
  
  return true;
}

void CProtoItemSocket_Spectator::Swap(CProtoItemSocket_Spectator* other) {
  if (other != this) {
    std::swap(socket_, other->socket_);
    std::swap(games_viewed_, other->games_viewed_);
    std::swap(corporation_id_, other->corporation_id_);
    std::swap(league_id_, other->league_id_);
    std::swap(team_id_, other->team_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CProtoItemSocket_Spectator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CProtoItemSocket_Spectator_descriptor_;
  metadata.reflection = CProtoItemSocket_Spectator_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CProtoItemSocket_AnimModifier::kSocketFieldNumber;
const int CProtoItemSocket_AnimModifier::kAnimModifierFieldNumber;
#endif  // !_MSC_VER

CProtoItemSocket_AnimModifier::CProtoItemSocket_AnimModifier()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CProtoItemSocket_AnimModifier::InitAsDefaultInstance() {
  socket_ = const_cast< ::CProtoItemSocket*>(&::CProtoItemSocket::default_instance());
}

CProtoItemSocket_AnimModifier::CProtoItemSocket_AnimModifier(const CProtoItemSocket_AnimModifier& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CProtoItemSocket_AnimModifier::SharedCtor() {
  _cached_size_ = 0;
  socket_ = NULL;
  anim_modifier_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CProtoItemSocket_AnimModifier::~CProtoItemSocket_AnimModifier() {
  SharedDtor();
}

void CProtoItemSocket_AnimModifier::SharedDtor() {
  if (this != default_instance_) {
    delete socket_;
  }
}

void CProtoItemSocket_AnimModifier::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProtoItemSocket_AnimModifier::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CProtoItemSocket_AnimModifier_descriptor_;
}

const CProtoItemSocket_AnimModifier& CProtoItemSocket_AnimModifier::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CProtoItemSocket_AnimModifier* CProtoItemSocket_AnimModifier::default_instance_ = NULL;

CProtoItemSocket_AnimModifier* CProtoItemSocket_AnimModifier::New() const {
  return new CProtoItemSocket_AnimModifier;
}

void CProtoItemSocket_AnimModifier::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_socket()) {
      if (socket_ != NULL) socket_->::CProtoItemSocket::Clear();
    }
    anim_modifier_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CProtoItemSocket_AnimModifier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CProtoItemSocket socket = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_socket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_anim_modifier;
        break;
      }
      
      // optional uint32 anim_modifier = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_anim_modifier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &anim_modifier_)));
          set_has_anim_modifier();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CProtoItemSocket_AnimModifier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CProtoItemSocket socket = 1;
  if (has_socket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->socket(), output);
  }
  
  // optional uint32 anim_modifier = 2;
  if (has_anim_modifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->anim_modifier(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CProtoItemSocket_AnimModifier::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CProtoItemSocket socket = 1;
  if (has_socket()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->socket(), target);
  }
  
  // optional uint32 anim_modifier = 2;
  if (has_anim_modifier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->anim_modifier(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CProtoItemSocket_AnimModifier::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CProtoItemSocket socket = 1;
    if (has_socket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->socket());
    }
    
    // optional uint32 anim_modifier = 2;
    if (has_anim_modifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->anim_modifier());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProtoItemSocket_AnimModifier::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CProtoItemSocket_AnimModifier* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CProtoItemSocket_AnimModifier*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CProtoItemSocket_AnimModifier::MergeFrom(const CProtoItemSocket_AnimModifier& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_socket()) {
      mutable_socket()->::CProtoItemSocket::MergeFrom(from.socket());
    }
    if (from.has_anim_modifier()) {
      set_anim_modifier(from.anim_modifier());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CProtoItemSocket_AnimModifier::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProtoItemSocket_AnimModifier::CopyFrom(const CProtoItemSocket_AnimModifier& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemSocket_AnimModifier::IsInitialized() const {
  
  return true;
}

void CProtoItemSocket_AnimModifier::Swap(CProtoItemSocket_AnimModifier* other) {
  if (other != this) {
    std::swap(socket_, other->socket_);
    std::swap(anim_modifier_, other->anim_modifier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CProtoItemSocket_AnimModifier::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CProtoItemSocket_AnimModifier_descriptor_;
  metadata.reflection = CProtoItemSocket_AnimModifier_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CProtoItemSocket_Autograph::kSocketFieldNumber;
const int CProtoItemSocket_Autograph::kAutographFieldNumber;
#endif  // !_MSC_VER

CProtoItemSocket_Autograph::CProtoItemSocket_Autograph()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CProtoItemSocket_Autograph::InitAsDefaultInstance() {
  socket_ = const_cast< ::CProtoItemSocket*>(&::CProtoItemSocket::default_instance());
}

CProtoItemSocket_Autograph::CProtoItemSocket_Autograph(const CProtoItemSocket_Autograph& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CProtoItemSocket_Autograph::SharedCtor() {
  _cached_size_ = 0;
  socket_ = NULL;
  autograph_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CProtoItemSocket_Autograph::~CProtoItemSocket_Autograph() {
  SharedDtor();
}

void CProtoItemSocket_Autograph::SharedDtor() {
  if (autograph_ != &::google::protobuf::internal::kEmptyString) {
    delete autograph_;
  }
  if (this != default_instance_) {
    delete socket_;
  }
}

void CProtoItemSocket_Autograph::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProtoItemSocket_Autograph::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CProtoItemSocket_Autograph_descriptor_;
}

const CProtoItemSocket_Autograph& CProtoItemSocket_Autograph::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CProtoItemSocket_Autograph* CProtoItemSocket_Autograph::default_instance_ = NULL;

CProtoItemSocket_Autograph* CProtoItemSocket_Autograph::New() const {
  return new CProtoItemSocket_Autograph;
}

void CProtoItemSocket_Autograph::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_socket()) {
      if (socket_ != NULL) socket_->::CProtoItemSocket::Clear();
    }
    if (has_autograph()) {
      if (autograph_ != &::google::protobuf::internal::kEmptyString) {
        autograph_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CProtoItemSocket_Autograph::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CProtoItemSocket socket = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_socket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_autograph;
        break;
      }
      
      // optional string autograph = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_autograph:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_autograph()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->autograph().data(), this->autograph().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CProtoItemSocket_Autograph::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CProtoItemSocket socket = 1;
  if (has_socket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->socket(), output);
  }
  
  // optional string autograph = 2;
  if (has_autograph()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->autograph().data(), this->autograph().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->autograph(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CProtoItemSocket_Autograph::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CProtoItemSocket socket = 1;
  if (has_socket()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->socket(), target);
  }
  
  // optional string autograph = 2;
  if (has_autograph()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->autograph().data(), this->autograph().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->autograph(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CProtoItemSocket_Autograph::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CProtoItemSocket socket = 1;
    if (has_socket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->socket());
    }
    
    // optional string autograph = 2;
    if (has_autograph()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->autograph());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProtoItemSocket_Autograph::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CProtoItemSocket_Autograph* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CProtoItemSocket_Autograph*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CProtoItemSocket_Autograph::MergeFrom(const CProtoItemSocket_Autograph& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_socket()) {
      mutable_socket()->::CProtoItemSocket::MergeFrom(from.socket());
    }
    if (from.has_autograph()) {
      set_autograph(from.autograph());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CProtoItemSocket_Autograph::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProtoItemSocket_Autograph::CopyFrom(const CProtoItemSocket_Autograph& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemSocket_Autograph::IsInitialized() const {
  
  return true;
}

void CProtoItemSocket_Autograph::Swap(CProtoItemSocket_Autograph* other) {
  if (other != this) {
    std::swap(socket_, other->socket_);
    std::swap(autograph_, other->autograph_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CProtoItemSocket_Autograph::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CProtoItemSocket_Autograph_descriptor_;
  metadata.reflection = CProtoItemSocket_Autograph_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CProtoItemSocket_AbilityEffect::kSocketFieldNumber;
const int CProtoItemSocket_AbilityEffect::kAbilityEffectFieldNumber;
#endif  // !_MSC_VER

CProtoItemSocket_AbilityEffect::CProtoItemSocket_AbilityEffect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CProtoItemSocket_AbilityEffect::InitAsDefaultInstance() {
  socket_ = const_cast< ::CProtoItemSocket*>(&::CProtoItemSocket::default_instance());
}

CProtoItemSocket_AbilityEffect::CProtoItemSocket_AbilityEffect(const CProtoItemSocket_AbilityEffect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CProtoItemSocket_AbilityEffect::SharedCtor() {
  _cached_size_ = 0;
  socket_ = NULL;
  ability_effect_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CProtoItemSocket_AbilityEffect::~CProtoItemSocket_AbilityEffect() {
  SharedDtor();
}

void CProtoItemSocket_AbilityEffect::SharedDtor() {
  if (this != default_instance_) {
    delete socket_;
  }
}

void CProtoItemSocket_AbilityEffect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProtoItemSocket_AbilityEffect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CProtoItemSocket_AbilityEffect_descriptor_;
}

const CProtoItemSocket_AbilityEffect& CProtoItemSocket_AbilityEffect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CProtoItemSocket_AbilityEffect* CProtoItemSocket_AbilityEffect::default_instance_ = NULL;

CProtoItemSocket_AbilityEffect* CProtoItemSocket_AbilityEffect::New() const {
  return new CProtoItemSocket_AbilityEffect;
}

void CProtoItemSocket_AbilityEffect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_socket()) {
      if (socket_ != NULL) socket_->::CProtoItemSocket::Clear();
    }
    ability_effect_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CProtoItemSocket_AbilityEffect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CProtoItemSocket socket = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_socket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ability_effect;
        break;
      }
      
      // optional uint32 ability_effect = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ability_effect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_effect_)));
          set_has_ability_effect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CProtoItemSocket_AbilityEffect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CProtoItemSocket socket = 1;
  if (has_socket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->socket(), output);
  }
  
  // optional uint32 ability_effect = 2;
  if (has_ability_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ability_effect(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CProtoItemSocket_AbilityEffect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CProtoItemSocket socket = 1;
  if (has_socket()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->socket(), target);
  }
  
  // optional uint32 ability_effect = 2;
  if (has_ability_effect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ability_effect(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CProtoItemSocket_AbilityEffect::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CProtoItemSocket socket = 1;
    if (has_socket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->socket());
    }
    
    // optional uint32 ability_effect = 2;
    if (has_ability_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability_effect());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProtoItemSocket_AbilityEffect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CProtoItemSocket_AbilityEffect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CProtoItemSocket_AbilityEffect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CProtoItemSocket_AbilityEffect::MergeFrom(const CProtoItemSocket_AbilityEffect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_socket()) {
      mutable_socket()->::CProtoItemSocket::MergeFrom(from.socket());
    }
    if (from.has_ability_effect()) {
      set_ability_effect(from.ability_effect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CProtoItemSocket_AbilityEffect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProtoItemSocket_AbilityEffect::CopyFrom(const CProtoItemSocket_AbilityEffect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemSocket_AbilityEffect::IsInitialized() const {
  
  return true;
}

void CProtoItemSocket_AbilityEffect::Swap(CProtoItemSocket_AbilityEffect* other) {
  if (other != this) {
    std::swap(socket_, other->socket_);
    std::swap(ability_effect_, other->ability_effect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CProtoItemSocket_AbilityEffect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CProtoItemSocket_AbilityEffect_descriptor_;
  metadata.reflection = CProtoItemSocket_AbilityEffect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CProtoItemSocket_StaticVisuals::kSocketFieldNumber;
#endif  // !_MSC_VER

CProtoItemSocket_StaticVisuals::CProtoItemSocket_StaticVisuals()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CProtoItemSocket_StaticVisuals::InitAsDefaultInstance() {
  socket_ = const_cast< ::CProtoItemSocket*>(&::CProtoItemSocket::default_instance());
}

CProtoItemSocket_StaticVisuals::CProtoItemSocket_StaticVisuals(const CProtoItemSocket_StaticVisuals& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CProtoItemSocket_StaticVisuals::SharedCtor() {
  _cached_size_ = 0;
  socket_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CProtoItemSocket_StaticVisuals::~CProtoItemSocket_StaticVisuals() {
  SharedDtor();
}

void CProtoItemSocket_StaticVisuals::SharedDtor() {
  if (this != default_instance_) {
    delete socket_;
  }
}

void CProtoItemSocket_StaticVisuals::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProtoItemSocket_StaticVisuals::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CProtoItemSocket_StaticVisuals_descriptor_;
}

const CProtoItemSocket_StaticVisuals& CProtoItemSocket_StaticVisuals::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CProtoItemSocket_StaticVisuals* CProtoItemSocket_StaticVisuals::default_instance_ = NULL;

CProtoItemSocket_StaticVisuals* CProtoItemSocket_StaticVisuals::New() const {
  return new CProtoItemSocket_StaticVisuals;
}

void CProtoItemSocket_StaticVisuals::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_socket()) {
      if (socket_ != NULL) socket_->::CProtoItemSocket::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CProtoItemSocket_StaticVisuals::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CProtoItemSocket socket = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_socket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CProtoItemSocket_StaticVisuals::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CProtoItemSocket socket = 1;
  if (has_socket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->socket(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CProtoItemSocket_StaticVisuals::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CProtoItemSocket socket = 1;
  if (has_socket()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->socket(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CProtoItemSocket_StaticVisuals::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CProtoItemSocket socket = 1;
    if (has_socket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->socket());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProtoItemSocket_StaticVisuals::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CProtoItemSocket_StaticVisuals* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CProtoItemSocket_StaticVisuals*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CProtoItemSocket_StaticVisuals::MergeFrom(const CProtoItemSocket_StaticVisuals& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_socket()) {
      mutable_socket()->::CProtoItemSocket::MergeFrom(from.socket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CProtoItemSocket_StaticVisuals::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProtoItemSocket_StaticVisuals::CopyFrom(const CProtoItemSocket_StaticVisuals& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemSocket_StaticVisuals::IsInitialized() const {
  
  return true;
}

void CProtoItemSocket_StaticVisuals::Swap(CProtoItemSocket_StaticVisuals* other) {
  if (other != this) {
    std::swap(socket_, other->socket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CProtoItemSocket_StaticVisuals::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CProtoItemSocket_StaticVisuals_descriptor_;
  metadata.reflection = CProtoItemSocket_StaticVisuals_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMatchPlayerAbilityUpgrade::kAbilityFieldNumber;
const int CMatchPlayerAbilityUpgrade::kTimeFieldNumber;
#endif  // !_MSC_VER

CMatchPlayerAbilityUpgrade::CMatchPlayerAbilityUpgrade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMatchPlayerAbilityUpgrade::InitAsDefaultInstance() {
}

CMatchPlayerAbilityUpgrade::CMatchPlayerAbilityUpgrade(const CMatchPlayerAbilityUpgrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMatchPlayerAbilityUpgrade::SharedCtor() {
  _cached_size_ = 0;
  ability_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMatchPlayerAbilityUpgrade::~CMatchPlayerAbilityUpgrade() {
  SharedDtor();
}

void CMatchPlayerAbilityUpgrade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMatchPlayerAbilityUpgrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMatchPlayerAbilityUpgrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMatchPlayerAbilityUpgrade_descriptor_;
}

const CMatchPlayerAbilityUpgrade& CMatchPlayerAbilityUpgrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CMatchPlayerAbilityUpgrade* CMatchPlayerAbilityUpgrade::default_instance_ = NULL;

CMatchPlayerAbilityUpgrade* CMatchPlayerAbilityUpgrade::New() const {
  return new CMatchPlayerAbilityUpgrade;
}

void CMatchPlayerAbilityUpgrade::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ability_ = 0u;
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMatchPlayerAbilityUpgrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ability = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_)));
          set_has_ability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }
      
      // optional uint32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMatchPlayerAbilityUpgrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ability = 1;
  if (has_ability()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ability(), output);
  }
  
  // optional uint32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMatchPlayerAbilityUpgrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ability = 1;
  if (has_ability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ability(), target);
  }
  
  // optional uint32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMatchPlayerAbilityUpgrade::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ability = 1;
    if (has_ability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability());
    }
    
    // optional uint32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMatchPlayerAbilityUpgrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMatchPlayerAbilityUpgrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMatchPlayerAbilityUpgrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMatchPlayerAbilityUpgrade::MergeFrom(const CMatchPlayerAbilityUpgrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ability()) {
      set_ability(from.ability());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMatchPlayerAbilityUpgrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMatchPlayerAbilityUpgrade::CopyFrom(const CMatchPlayerAbilityUpgrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMatchPlayerAbilityUpgrade::IsInitialized() const {
  
  return true;
}

void CMatchPlayerAbilityUpgrade::Swap(CMatchPlayerAbilityUpgrade* other) {
  if (other != this) {
    std::swap(ability_, other->ability_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMatchPlayerAbilityUpgrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMatchPlayerAbilityUpgrade_descriptor_;
  metadata.reflection = CMatchPlayerAbilityUpgrade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMatchAdditionalUnitInventory::kUnitNameFieldNumber;
const int CMatchAdditionalUnitInventory::kItemsFieldNumber;
#endif  // !_MSC_VER

CMatchAdditionalUnitInventory::CMatchAdditionalUnitInventory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMatchAdditionalUnitInventory::InitAsDefaultInstance() {
}

CMatchAdditionalUnitInventory::CMatchAdditionalUnitInventory(const CMatchAdditionalUnitInventory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMatchAdditionalUnitInventory::SharedCtor() {
  _cached_size_ = 0;
  unit_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMatchAdditionalUnitInventory::~CMatchAdditionalUnitInventory() {
  SharedDtor();
}

void CMatchAdditionalUnitInventory::SharedDtor() {
  if (unit_name_ != &::google::protobuf::internal::kEmptyString) {
    delete unit_name_;
  }
  if (this != default_instance_) {
  }
}

void CMatchAdditionalUnitInventory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMatchAdditionalUnitInventory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMatchAdditionalUnitInventory_descriptor_;
}

const CMatchAdditionalUnitInventory& CMatchAdditionalUnitInventory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CMatchAdditionalUnitInventory* CMatchAdditionalUnitInventory::default_instance_ = NULL;

CMatchAdditionalUnitInventory* CMatchAdditionalUnitInventory::New() const {
  return new CMatchAdditionalUnitInventory;
}

void CMatchAdditionalUnitInventory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_unit_name()) {
      if (unit_name_ != &::google::protobuf::internal::kEmptyString) {
        unit_name_->clear();
      }
    }
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMatchAdditionalUnitInventory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string unit_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unit_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unit_name().data(), this->unit_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_items;
        break;
      }
      
      // repeated uint32 items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_items:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_items())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_items())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMatchAdditionalUnitInventory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string unit_name = 1;
  if (has_unit_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unit_name().data(), this->unit_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->unit_name(), output);
  }
  
  // repeated uint32 items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMatchAdditionalUnitInventory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string unit_name = 1;
  if (has_unit_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unit_name().data(), this->unit_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->unit_name(), target);
  }
  
  // repeated uint32 items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMatchAdditionalUnitInventory::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string unit_name = 1;
    if (has_unit_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unit_name());
    }
    
  }
  // repeated uint32 items = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->items_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->items(i));
    }
    total_size += 1 * this->items_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMatchAdditionalUnitInventory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMatchAdditionalUnitInventory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMatchAdditionalUnitInventory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMatchAdditionalUnitInventory::MergeFrom(const CMatchAdditionalUnitInventory& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unit_name()) {
      set_unit_name(from.unit_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMatchAdditionalUnitInventory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMatchAdditionalUnitInventory::CopyFrom(const CMatchAdditionalUnitInventory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMatchAdditionalUnitInventory::IsInitialized() const {
  
  return true;
}

void CMatchAdditionalUnitInventory::Swap(CMatchAdditionalUnitInventory* other) {
  if (other != this) {
    std::swap(unit_name_, other->unit_name_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMatchAdditionalUnitInventory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMatchAdditionalUnitInventory_descriptor_;
  metadata.reflection = CMatchAdditionalUnitInventory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMatchHeroSelectEvent::kIsPickFieldNumber;
const int CMatchHeroSelectEvent::kTeamFieldNumber;
const int CMatchHeroSelectEvent::kHeroIdFieldNumber;
#endif  // !_MSC_VER

CMatchHeroSelectEvent::CMatchHeroSelectEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMatchHeroSelectEvent::InitAsDefaultInstance() {
}

CMatchHeroSelectEvent::CMatchHeroSelectEvent(const CMatchHeroSelectEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMatchHeroSelectEvent::SharedCtor() {
  _cached_size_ = 0;
  is_pick_ = false;
  team_ = 0u;
  hero_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMatchHeroSelectEvent::~CMatchHeroSelectEvent() {
  SharedDtor();
}

void CMatchHeroSelectEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMatchHeroSelectEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMatchHeroSelectEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMatchHeroSelectEvent_descriptor_;
}

const CMatchHeroSelectEvent& CMatchHeroSelectEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CMatchHeroSelectEvent* CMatchHeroSelectEvent::default_instance_ = NULL;

CMatchHeroSelectEvent* CMatchHeroSelectEvent::New() const {
  return new CMatchHeroSelectEvent;
}

void CMatchHeroSelectEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_pick_ = false;
    team_ = 0u;
    hero_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMatchHeroSelectEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_pick = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pick_)));
          set_has_is_pick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team;
        break;
      }
      
      // optional uint32 team = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hero_id;
        break;
      }
      
      // optional uint32 hero_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMatchHeroSelectEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool is_pick = 1;
  if (has_is_pick()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_pick(), output);
  }
  
  // optional uint32 team = 2;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team(), output);
  }
  
  // optional uint32 hero_id = 3;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hero_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMatchHeroSelectEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool is_pick = 1;
  if (has_is_pick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_pick(), target);
  }
  
  // optional uint32 team = 2;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team(), target);
  }
  
  // optional uint32 hero_id = 3;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hero_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMatchHeroSelectEvent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_pick = 1;
    if (has_is_pick()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 team = 2;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }
    
    // optional uint32 hero_id = 3;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMatchHeroSelectEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMatchHeroSelectEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMatchHeroSelectEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMatchHeroSelectEvent::MergeFrom(const CMatchHeroSelectEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_pick()) {
      set_is_pick(from.is_pick());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMatchHeroSelectEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMatchHeroSelectEvent::CopyFrom(const CMatchHeroSelectEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMatchHeroSelectEvent::IsInitialized() const {
  
  return true;
}

void CMatchHeroSelectEvent::Swap(CMatchHeroSelectEvent* other) {
  if (other != this) {
    std::swap(is_pick_, other->is_pick_);
    std::swap(team_, other->team_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMatchHeroSelectEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMatchHeroSelectEvent_descriptor_;
  metadata.reflection = CMatchHeroSelectEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAProcessFantasyScheduledEvent::kEventFieldNumber;
const int CMsgDOTAProcessFantasyScheduledEvent::kTimestampFieldNumber;
const int CMsgDOTAProcessFantasyScheduledEvent::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAProcessFantasyScheduledEvent::kReferenceDataFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAProcessFantasyScheduledEvent::CMsgDOTAProcessFantasyScheduledEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgDOTAProcessFantasyScheduledEvent::InitAsDefaultInstance() {
}

CMsgDOTAProcessFantasyScheduledEvent::CMsgDOTAProcessFantasyScheduledEvent(const CMsgDOTAProcessFantasyScheduledEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgDOTAProcessFantasyScheduledEvent::SharedCtor() {
  _cached_size_ = 0;
  event_ = 0u;
  timestamp_ = 0u;
  fantasy_league_id_ = 0u;
  reference_data_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAProcessFantasyScheduledEvent::~CMsgDOTAProcessFantasyScheduledEvent() {
  SharedDtor();
}

void CMsgDOTAProcessFantasyScheduledEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAProcessFantasyScheduledEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAProcessFantasyScheduledEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAProcessFantasyScheduledEvent_descriptor_;
}

const CMsgDOTAProcessFantasyScheduledEvent& CMsgDOTAProcessFantasyScheduledEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CMsgDOTAProcessFantasyScheduledEvent* CMsgDOTAProcessFantasyScheduledEvent::default_instance_ = NULL;

CMsgDOTAProcessFantasyScheduledEvent* CMsgDOTAProcessFantasyScheduledEvent::New() const {
  return new CMsgDOTAProcessFantasyScheduledEvent;
}

void CMsgDOTAProcessFantasyScheduledEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_ = 0u;
    timestamp_ = 0u;
    fantasy_league_id_ = 0u;
    reference_data_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAProcessFantasyScheduledEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_)));
          set_has_event();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }
      
      // optional uint32 timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fantasy_league_id;
        break;
      }
      
      // optional uint32 fantasy_league_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fantasy_league_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
          set_has_fantasy_league_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reference_data;
        break;
      }
      
      // optional uint32 reference_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reference_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reference_data_)));
          set_has_reference_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgDOTAProcessFantasyScheduledEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 event = 1;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event(), output);
  }
  
  // optional uint32 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timestamp(), output);
  }
  
  // optional uint32 fantasy_league_id = 3;
  if (has_fantasy_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fantasy_league_id(), output);
  }
  
  // optional uint32 reference_data = 4;
  if (has_reference_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->reference_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgDOTAProcessFantasyScheduledEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 event = 1;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event(), target);
  }
  
  // optional uint32 timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timestamp(), target);
  }
  
  // optional uint32 fantasy_league_id = 3;
  if (has_fantasy_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fantasy_league_id(), target);
  }
  
  // optional uint32 reference_data = 4;
  if (has_reference_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->reference_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgDOTAProcessFantasyScheduledEvent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 event = 1;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event());
    }
    
    // optional uint32 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }
    
    // optional uint32 fantasy_league_id = 3;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }
    
    // optional uint32 reference_data = 4;
    if (has_reference_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reference_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAProcessFantasyScheduledEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAProcessFantasyScheduledEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAProcessFantasyScheduledEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAProcessFantasyScheduledEvent::MergeFrom(const CMsgDOTAProcessFantasyScheduledEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event()) {
      set_event(from.event());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_fantasy_league_id()) {
      set_fantasy_league_id(from.fantasy_league_id());
    }
    if (from.has_reference_data()) {
      set_reference_data(from.reference_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAProcessFantasyScheduledEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProcessFantasyScheduledEvent::CopyFrom(const CMsgDOTAProcessFantasyScheduledEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProcessFantasyScheduledEvent::IsInitialized() const {
  
  return true;
}

void CMsgDOTAProcessFantasyScheduledEvent::Swap(CMsgDOTAProcessFantasyScheduledEvent* other) {
  if (other != this) {
    std::swap(event_, other->event_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(fantasy_league_id_, other->fantasy_league_id_);
    std::swap(reference_data_, other->reference_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAProcessFantasyScheduledEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAProcessFantasyScheduledEvent_descriptor_;
  metadata.reflection = CMsgDOTAProcessFantasyScheduledEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSODOTAMapLocationState::kAccountIdFieldNumber;
const int CSODOTAMapLocationState::kLocationIdFieldNumber;
const int CSODOTAMapLocationState::kCompletedFieldNumber;
#endif  // !_MSC_VER

CSODOTAMapLocationState::CSODOTAMapLocationState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSODOTAMapLocationState::InitAsDefaultInstance() {
}

CSODOTAMapLocationState::CSODOTAMapLocationState(const CSODOTAMapLocationState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSODOTAMapLocationState::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  location_id_ = 0;
  completed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSODOTAMapLocationState::~CSODOTAMapLocationState() {
  SharedDtor();
}

void CSODOTAMapLocationState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSODOTAMapLocationState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSODOTAMapLocationState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSODOTAMapLocationState_descriptor_;
}

const CSODOTAMapLocationState& CSODOTAMapLocationState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CSODOTAMapLocationState* CSODOTAMapLocationState::default_instance_ = NULL;

CSODOTAMapLocationState* CSODOTAMapLocationState::New() const {
  return new CSODOTAMapLocationState;
}

void CSODOTAMapLocationState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    location_id_ = 0;
    completed_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSODOTAMapLocationState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_location_id;
        break;
      }
      
      // optional int32 location_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_location_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &location_id_)));
          set_has_location_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_completed;
        break;
      }
      
      // optional bool completed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_completed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &completed_)));
          set_has_completed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSODOTAMapLocationState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }
  
  // optional int32 location_id = 2;
  if (has_location_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->location_id(), output);
  }
  
  // optional bool completed = 3;
  if (has_completed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->completed(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSODOTAMapLocationState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }
  
  // optional int32 location_id = 2;
  if (has_location_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->location_id(), target);
  }
  
  // optional bool completed = 3;
  if (has_completed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->completed(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSODOTAMapLocationState::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
    // optional int32 location_id = 2;
    if (has_location_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->location_id());
    }
    
    // optional bool completed = 3;
    if (has_completed()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSODOTAMapLocationState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSODOTAMapLocationState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSODOTAMapLocationState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSODOTAMapLocationState::MergeFrom(const CSODOTAMapLocationState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_location_id()) {
      set_location_id(from.location_id());
    }
    if (from.has_completed()) {
      set_completed(from.completed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSODOTAMapLocationState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTAMapLocationState::CopyFrom(const CSODOTAMapLocationState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAMapLocationState::IsInitialized() const {
  
  return true;
}

void CSODOTAMapLocationState::Swap(CSODOTAMapLocationState* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(location_id_, other->location_id_);
    std::swap(completed_, other->completed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSODOTAMapLocationState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSODOTAMapLocationState_descriptor_;
  metadata.reflection = CSODOTAMapLocationState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgNexonPartnerUpdate::kMessagetypeFieldNumber;
const int CMsgNexonPartnerUpdate::kTimeremainingFieldNumber;
#endif  // !_MSC_VER

CMsgNexonPartnerUpdate::CMsgNexonPartnerUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgNexonPartnerUpdate::InitAsDefaultInstance() {
}

CMsgNexonPartnerUpdate::CMsgNexonPartnerUpdate(const CMsgNexonPartnerUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgNexonPartnerUpdate::SharedCtor() {
  _cached_size_ = 0;
  messagetype_ = 0u;
  timeremaining_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgNexonPartnerUpdate::~CMsgNexonPartnerUpdate() {
  SharedDtor();
}

void CMsgNexonPartnerUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgNexonPartnerUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgNexonPartnerUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgNexonPartnerUpdate_descriptor_;
}

const CMsgNexonPartnerUpdate& CMsgNexonPartnerUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CMsgNexonPartnerUpdate* CMsgNexonPartnerUpdate::default_instance_ = NULL;

CMsgNexonPartnerUpdate* CMsgNexonPartnerUpdate::New() const {
  return new CMsgNexonPartnerUpdate;
}

void CMsgNexonPartnerUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    messagetype_ = 0u;
    timeremaining_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgNexonPartnerUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 messagetype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &messagetype_)));
          set_has_messagetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timeremaining;
        break;
      }
      
      // optional uint32 timeremaining = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeremaining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeremaining_)));
          set_has_timeremaining();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgNexonPartnerUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 messagetype = 1;
  if (has_messagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->messagetype(), output);
  }
  
  // optional uint32 timeremaining = 2;
  if (has_timeremaining()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timeremaining(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgNexonPartnerUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 messagetype = 1;
  if (has_messagetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->messagetype(), target);
  }
  
  // optional uint32 timeremaining = 2;
  if (has_timeremaining()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timeremaining(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgNexonPartnerUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 messagetype = 1;
    if (has_messagetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->messagetype());
    }
    
    // optional uint32 timeremaining = 2;
    if (has_timeremaining()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeremaining());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgNexonPartnerUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgNexonPartnerUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgNexonPartnerUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgNexonPartnerUpdate::MergeFrom(const CMsgNexonPartnerUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messagetype()) {
      set_messagetype(from.messagetype());
    }
    if (from.has_timeremaining()) {
      set_timeremaining(from.timeremaining());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgNexonPartnerUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgNexonPartnerUpdate::CopyFrom(const CMsgNexonPartnerUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgNexonPartnerUpdate::IsInitialized() const {
  
  return true;
}

void CMsgNexonPartnerUpdate::Swap(CMsgNexonPartnerUpdate* other) {
  if (other != this) {
    std::swap(messagetype_, other->messagetype_);
    std::swap(timeremaining_, other->timeremaining_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgNexonPartnerUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgNexonPartnerUpdate_descriptor_;
  metadata.reflection = CMsgNexonPartnerUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgMakeOffering::kItemIdFieldNumber;
#endif  // !_MSC_VER

CMsgMakeOffering::CMsgMakeOffering()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgMakeOffering::InitAsDefaultInstance() {
}

CMsgMakeOffering::CMsgMakeOffering(const CMsgMakeOffering& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgMakeOffering::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgMakeOffering::~CMsgMakeOffering() {
  SharedDtor();
}

void CMsgMakeOffering::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgMakeOffering::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgMakeOffering::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgMakeOffering_descriptor_;
}

const CMsgMakeOffering& CMsgMakeOffering::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CMsgMakeOffering* CMsgMakeOffering::default_instance_ = NULL;

CMsgMakeOffering* CMsgMakeOffering::New() const {
  return new CMsgMakeOffering;
}

void CMsgMakeOffering::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgMakeOffering::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgMakeOffering::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgMakeOffering::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgMakeOffering::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgMakeOffering::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgMakeOffering* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgMakeOffering*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgMakeOffering::MergeFrom(const CMsgMakeOffering& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgMakeOffering::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMakeOffering::CopyFrom(const CMsgMakeOffering& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMakeOffering::IsInitialized() const {
  
  return true;
}

void CMsgMakeOffering::Swap(CMsgMakeOffering* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgMakeOffering::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgMakeOffering_descriptor_;
  metadata.reflection = CMsgMakeOffering_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgRequestOfferings::CMsgRequestOfferings()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgRequestOfferings::InitAsDefaultInstance() {
}

CMsgRequestOfferings::CMsgRequestOfferings(const CMsgRequestOfferings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgRequestOfferings::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgRequestOfferings::~CMsgRequestOfferings() {
  SharedDtor();
}

void CMsgRequestOfferings::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgRequestOfferings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRequestOfferings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgRequestOfferings_descriptor_;
}

const CMsgRequestOfferings& CMsgRequestOfferings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CMsgRequestOfferings* CMsgRequestOfferings::default_instance_ = NULL;

CMsgRequestOfferings* CMsgRequestOfferings::New() const {
  return new CMsgRequestOfferings;
}

void CMsgRequestOfferings::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgRequestOfferings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgRequestOfferings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgRequestOfferings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgRequestOfferings::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRequestOfferings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgRequestOfferings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgRequestOfferings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgRequestOfferings::MergeFrom(const CMsgRequestOfferings& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgRequestOfferings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRequestOfferings::CopyFrom(const CMsgRequestOfferings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRequestOfferings::IsInitialized() const {
  
  return true;
}

void CMsgRequestOfferings::Swap(CMsgRequestOfferings* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgRequestOfferings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgRequestOfferings_descriptor_;
  metadata.reflection = CMsgRequestOfferings_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgRequestOfferingsResponse_NewYearsOffering::kDefIndexFieldNumber;
const int CMsgRequestOfferingsResponse_NewYearsOffering::kItemIdFieldNumber;
#endif  // !_MSC_VER

CMsgRequestOfferingsResponse_NewYearsOffering::CMsgRequestOfferingsResponse_NewYearsOffering()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgRequestOfferingsResponse_NewYearsOffering::InitAsDefaultInstance() {
}

CMsgRequestOfferingsResponse_NewYearsOffering::CMsgRequestOfferingsResponse_NewYearsOffering(const CMsgRequestOfferingsResponse_NewYearsOffering& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgRequestOfferingsResponse_NewYearsOffering::SharedCtor() {
  _cached_size_ = 0;
  def_index_ = 0u;
  item_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgRequestOfferingsResponse_NewYearsOffering::~CMsgRequestOfferingsResponse_NewYearsOffering() {
  SharedDtor();
}

void CMsgRequestOfferingsResponse_NewYearsOffering::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgRequestOfferingsResponse_NewYearsOffering::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRequestOfferingsResponse_NewYearsOffering::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgRequestOfferingsResponse_NewYearsOffering_descriptor_;
}

const CMsgRequestOfferingsResponse_NewYearsOffering& CMsgRequestOfferingsResponse_NewYearsOffering::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CMsgRequestOfferingsResponse_NewYearsOffering* CMsgRequestOfferingsResponse_NewYearsOffering::default_instance_ = NULL;

CMsgRequestOfferingsResponse_NewYearsOffering* CMsgRequestOfferingsResponse_NewYearsOffering::New() const {
  return new CMsgRequestOfferingsResponse_NewYearsOffering;
}

void CMsgRequestOfferingsResponse_NewYearsOffering::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    def_index_ = 0u;
    item_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgRequestOfferingsResponse_NewYearsOffering::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 def_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_index_)));
          set_has_def_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }
      
      // optional uint64 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgRequestOfferingsResponse_NewYearsOffering::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 def_index = 1;
  if (has_def_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->def_index(), output);
  }
  
  // optional uint64 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgRequestOfferingsResponse_NewYearsOffering::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 def_index = 1;
  if (has_def_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->def_index(), target);
  }
  
  // optional uint64 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgRequestOfferingsResponse_NewYearsOffering::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 def_index = 1;
    if (has_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_index());
    }
    
    // optional uint64 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRequestOfferingsResponse_NewYearsOffering::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgRequestOfferingsResponse_NewYearsOffering* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgRequestOfferingsResponse_NewYearsOffering*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgRequestOfferingsResponse_NewYearsOffering::MergeFrom(const CMsgRequestOfferingsResponse_NewYearsOffering& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_def_index()) {
      set_def_index(from.def_index());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgRequestOfferingsResponse_NewYearsOffering::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRequestOfferingsResponse_NewYearsOffering::CopyFrom(const CMsgRequestOfferingsResponse_NewYearsOffering& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRequestOfferingsResponse_NewYearsOffering::IsInitialized() const {
  
  return true;
}

void CMsgRequestOfferingsResponse_NewYearsOffering::Swap(CMsgRequestOfferingsResponse_NewYearsOffering* other) {
  if (other != this) {
    std::swap(def_index_, other->def_index_);
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgRequestOfferingsResponse_NewYearsOffering::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgRequestOfferingsResponse_NewYearsOffering_descriptor_;
  metadata.reflection = CMsgRequestOfferingsResponse_NewYearsOffering_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgRequestOfferingsResponse::kOfferingsFieldNumber;
const int CMsgRequestOfferingsResponse::kCompletedFieldNumber;
#endif  // !_MSC_VER

CMsgRequestOfferingsResponse::CMsgRequestOfferingsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgRequestOfferingsResponse::InitAsDefaultInstance() {
}

CMsgRequestOfferingsResponse::CMsgRequestOfferingsResponse(const CMsgRequestOfferingsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgRequestOfferingsResponse::SharedCtor() {
  _cached_size_ = 0;
  completed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgRequestOfferingsResponse::~CMsgRequestOfferingsResponse() {
  SharedDtor();
}

void CMsgRequestOfferingsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgRequestOfferingsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRequestOfferingsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgRequestOfferingsResponse_descriptor_;
}

const CMsgRequestOfferingsResponse& CMsgRequestOfferingsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CMsgRequestOfferingsResponse* CMsgRequestOfferingsResponse::default_instance_ = NULL;

CMsgRequestOfferingsResponse* CMsgRequestOfferingsResponse::New() const {
  return new CMsgRequestOfferingsResponse;
}

void CMsgRequestOfferingsResponse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    completed_ = false;
  }
  offerings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgRequestOfferingsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgRequestOfferingsResponse.NewYearsOffering offerings = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_offerings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_offerings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_offerings;
        if (input->ExpectTag(16)) goto parse_completed;
        break;
      }
      
      // optional bool completed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_completed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &completed_)));
          set_has_completed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgRequestOfferingsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgRequestOfferingsResponse.NewYearsOffering offerings = 1;
  for (int i = 0; i < this->offerings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->offerings(i), output);
  }
  
  // optional bool completed = 2;
  if (has_completed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->completed(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgRequestOfferingsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgRequestOfferingsResponse.NewYearsOffering offerings = 1;
  for (int i = 0; i < this->offerings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->offerings(i), target);
  }
  
  // optional bool completed = 2;
  if (has_completed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->completed(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgRequestOfferingsResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool completed = 2;
    if (has_completed()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .CMsgRequestOfferingsResponse.NewYearsOffering offerings = 1;
  total_size += 1 * this->offerings_size();
  for (int i = 0; i < this->offerings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->offerings(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRequestOfferingsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgRequestOfferingsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgRequestOfferingsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgRequestOfferingsResponse::MergeFrom(const CMsgRequestOfferingsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  offerings_.MergeFrom(from.offerings_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_completed()) {
      set_completed(from.completed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgRequestOfferingsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRequestOfferingsResponse::CopyFrom(const CMsgRequestOfferingsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRequestOfferingsResponse::IsInitialized() const {
  
  return true;
}

void CMsgRequestOfferingsResponse::Swap(CMsgRequestOfferingsResponse* other) {
  if (other != this) {
    offerings_.Swap(&other->offerings_);
    std::swap(completed_, other->completed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgRequestOfferingsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgRequestOfferingsResponse_descriptor_;
  metadata.reflection = CMsgRequestOfferingsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgLeagueAdminList::kAccountIdsFieldNumber;
#endif  // !_MSC_VER

CMsgLeagueAdminList::CMsgLeagueAdminList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgLeagueAdminList::InitAsDefaultInstance() {
}

CMsgLeagueAdminList::CMsgLeagueAdminList(const CMsgLeagueAdminList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgLeagueAdminList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgLeagueAdminList::~CMsgLeagueAdminList() {
  SharedDtor();
}

void CMsgLeagueAdminList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgLeagueAdminList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLeagueAdminList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLeagueAdminList_descriptor_;
}

const CMsgLeagueAdminList& CMsgLeagueAdminList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CMsgLeagueAdminList* CMsgLeagueAdminList::default_instance_ = NULL;

CMsgLeagueAdminList* CMsgLeagueAdminList::New() const {
  return new CMsgLeagueAdminList;
}

void CMsgLeagueAdminList::Clear() {
  account_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgLeagueAdminList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 account_ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_account_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_account_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_account_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgLeagueAdminList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 account_ids = 1;
  for (int i = 0; i < this->account_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->account_ids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgLeagueAdminList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 account_ids = 1;
  for (int i = 0; i < this->account_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->account_ids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgLeagueAdminList::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 account_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->account_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->account_ids(i));
    }
    total_size += 1 * this->account_ids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLeagueAdminList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgLeagueAdminList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgLeagueAdminList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgLeagueAdminList::MergeFrom(const CMsgLeagueAdminList& from) {
  GOOGLE_CHECK_NE(&from, this);
  account_ids_.MergeFrom(from.account_ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgLeagueAdminList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLeagueAdminList::CopyFrom(const CMsgLeagueAdminList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLeagueAdminList::IsInitialized() const {
  
  return true;
}

void CMsgLeagueAdminList::Swap(CMsgLeagueAdminList* other) {
  if (other != this) {
    account_ids_.Swap(&other->account_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgLeagueAdminList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgLeagueAdminList_descriptor_;
  metadata.reflection = CMsgLeagueAdminList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPerfectWorldUserLookupRequest::kUserNameFieldNumber;
#endif  // !_MSC_VER

CMsgPerfectWorldUserLookupRequest::CMsgPerfectWorldUserLookupRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgPerfectWorldUserLookupRequest::InitAsDefaultInstance() {
}

CMsgPerfectWorldUserLookupRequest::CMsgPerfectWorldUserLookupRequest(const CMsgPerfectWorldUserLookupRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPerfectWorldUserLookupRequest::SharedCtor() {
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPerfectWorldUserLookupRequest::~CMsgPerfectWorldUserLookupRequest() {
  SharedDtor();
}

void CMsgPerfectWorldUserLookupRequest::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgPerfectWorldUserLookupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPerfectWorldUserLookupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPerfectWorldUserLookupRequest_descriptor_;
}

const CMsgPerfectWorldUserLookupRequest& CMsgPerfectWorldUserLookupRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CMsgPerfectWorldUserLookupRequest* CMsgPerfectWorldUserLookupRequest::default_instance_ = NULL;

CMsgPerfectWorldUserLookupRequest* CMsgPerfectWorldUserLookupRequest::New() const {
  return new CMsgPerfectWorldUserLookupRequest;
}

void CMsgPerfectWorldUserLookupRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPerfectWorldUserLookupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgPerfectWorldUserLookupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgPerfectWorldUserLookupRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgPerfectWorldUserLookupRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPerfectWorldUserLookupRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPerfectWorldUserLookupRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPerfectWorldUserLookupRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPerfectWorldUserLookupRequest::MergeFrom(const CMsgPerfectWorldUserLookupRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPerfectWorldUserLookupRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPerfectWorldUserLookupRequest::CopyFrom(const CMsgPerfectWorldUserLookupRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPerfectWorldUserLookupRequest::IsInitialized() const {
  
  return true;
}

void CMsgPerfectWorldUserLookupRequest::Swap(CMsgPerfectWorldUserLookupRequest* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPerfectWorldUserLookupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPerfectWorldUserLookupRequest_descriptor_;
  metadata.reflection = CMsgPerfectWorldUserLookupRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgPerfectWorldUserLookupResponse_EResultCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPerfectWorldUserLookupResponse_EResultCode_descriptor_;
}
bool CMsgPerfectWorldUserLookupResponse_EResultCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgPerfectWorldUserLookupResponse_EResultCode CMsgPerfectWorldUserLookupResponse::SUCCESS_ACCOUNT_FOUND;
const CMsgPerfectWorldUserLookupResponse_EResultCode CMsgPerfectWorldUserLookupResponse::ERROR_UNKNOWN;
const CMsgPerfectWorldUserLookupResponse_EResultCode CMsgPerfectWorldUserLookupResponse::ERROR_USER_NAME_WRONG_FORMAT;
const CMsgPerfectWorldUserLookupResponse_EResultCode CMsgPerfectWorldUserLookupResponse::ERROR_NO_PERFECT_WORLD_ACCOUNT_FOUND;
const CMsgPerfectWorldUserLookupResponse_EResultCode CMsgPerfectWorldUserLookupResponse::ERROR_NO_LINKED_STEAM_ACCOUNT_FOUND;
const CMsgPerfectWorldUserLookupResponse_EResultCode CMsgPerfectWorldUserLookupResponse::EResultCode_MIN;
const CMsgPerfectWorldUserLookupResponse_EResultCode CMsgPerfectWorldUserLookupResponse::EResultCode_MAX;
const int CMsgPerfectWorldUserLookupResponse::EResultCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgPerfectWorldUserLookupResponse::kResultCodeFieldNumber;
const int CMsgPerfectWorldUserLookupResponse::kAccountIdFieldNumber;
#endif  // !_MSC_VER

CMsgPerfectWorldUserLookupResponse::CMsgPerfectWorldUserLookupResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgPerfectWorldUserLookupResponse::InitAsDefaultInstance() {
}

CMsgPerfectWorldUserLookupResponse::CMsgPerfectWorldUserLookupResponse(const CMsgPerfectWorldUserLookupResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPerfectWorldUserLookupResponse::SharedCtor() {
  _cached_size_ = 0;
  result_code_ = 0;
  account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPerfectWorldUserLookupResponse::~CMsgPerfectWorldUserLookupResponse() {
  SharedDtor();
}

void CMsgPerfectWorldUserLookupResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPerfectWorldUserLookupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPerfectWorldUserLookupResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPerfectWorldUserLookupResponse_descriptor_;
}

const CMsgPerfectWorldUserLookupResponse& CMsgPerfectWorldUserLookupResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();  return *default_instance_;
}

CMsgPerfectWorldUserLookupResponse* CMsgPerfectWorldUserLookupResponse::default_instance_ = NULL;

CMsgPerfectWorldUserLookupResponse* CMsgPerfectWorldUserLookupResponse::New() const {
  return new CMsgPerfectWorldUserLookupResponse;
}

void CMsgPerfectWorldUserLookupResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_code_ = 0;
    account_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPerfectWorldUserLookupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgPerfectWorldUserLookupResponse.EResultCode result_code = 1 [default = SUCCESS_ACCOUNT_FOUND];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgPerfectWorldUserLookupResponse_EResultCode_IsValid(value)) {
            set_result_code(static_cast< ::CMsgPerfectWorldUserLookupResponse_EResultCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_account_id;
        break;
      }
      
      // optional uint32 account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgPerfectWorldUserLookupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CMsgPerfectWorldUserLookupResponse.EResultCode result_code = 1 [default = SUCCESS_ACCOUNT_FOUND];
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result_code(), output);
  }
  
  // optional uint32 account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->account_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgPerfectWorldUserLookupResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMsgPerfectWorldUserLookupResponse.EResultCode result_code = 1 [default = SUCCESS_ACCOUNT_FOUND];
  if (has_result_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result_code(), target);
  }
  
  // optional uint32 account_id = 2;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->account_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgPerfectWorldUserLookupResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgPerfectWorldUserLookupResponse.EResultCode result_code = 1 [default = SUCCESS_ACCOUNT_FOUND];
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_code());
    }
    
    // optional uint32 account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPerfectWorldUserLookupResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPerfectWorldUserLookupResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPerfectWorldUserLookupResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPerfectWorldUserLookupResponse::MergeFrom(const CMsgPerfectWorldUserLookupResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPerfectWorldUserLookupResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPerfectWorldUserLookupResponse::CopyFrom(const CMsgPerfectWorldUserLookupResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPerfectWorldUserLookupResponse::IsInitialized() const {
  
  return true;
}

void CMsgPerfectWorldUserLookupResponse::Swap(CMsgPerfectWorldUserLookupResponse* other) {
  if (other != this) {
    std::swap(result_code_, other->result_code_);
    std::swap(account_id_, other->account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPerfectWorldUserLookupResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPerfectWorldUserLookupResponse_descriptor_;
  metadata.reflection = CMsgPerfectWorldUserLookupResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
