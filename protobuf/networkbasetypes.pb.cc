// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "networkbasetypes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMsgVector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgVector_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgVector2D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgVector2D_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgQAngle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgQAngle_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSVCMsg_GameEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSVCMsg_GameEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSVCMsg_GameEvent_key_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSVCMsg_GameEvent_key_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSVCMsgList_GameEvents_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSVCMsgList_GameEvents_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSVCMsgList_GameEvents_event_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSVCMsgList_GameEvents_event_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSVCMsg_UserMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSVCMsg_UserMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSVCMsgList_UserMessages_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSVCMsgList_UserMessages_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSVCMsgList_UserMessages_usermsg_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSVCMsgList_UserMessages_usermsg_t_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SIGNONSTATE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_networkbasetypes_2eproto() {
  protobuf_AddDesc_networkbasetypes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "networkbasetypes.proto");
  GOOGLE_CHECK(file != NULL);
  CMsgVector_descriptor_ = file->message_type(0);
  static const int CMsgVector_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVector, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVector, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVector, z_),
  };
  CMsgVector_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgVector_descriptor_,
      CMsgVector::default_instance_,
      CMsgVector_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVector, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVector, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgVector));
  CMsgVector2D_descriptor_ = file->message_type(1);
  static const int CMsgVector2D_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVector2D, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVector2D, y_),
  };
  CMsgVector2D_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgVector2D_descriptor_,
      CMsgVector2D::default_instance_,
      CMsgVector2D_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVector2D, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVector2D, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgVector2D));
  CMsgQAngle_descriptor_ = file->message_type(2);
  static const int CMsgQAngle_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQAngle, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQAngle, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQAngle, z_),
  };
  CMsgQAngle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgQAngle_descriptor_,
      CMsgQAngle::default_instance_,
      CMsgQAngle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQAngle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQAngle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgQAngle));
  CSVCMsg_GameEvent_descriptor_ = file->message_type(3);
  static const int CSVCMsg_GameEvent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEvent, event_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEvent, eventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEvent, keys_),
  };
  CSVCMsg_GameEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSVCMsg_GameEvent_descriptor_,
      CSVCMsg_GameEvent::default_instance_,
      CSVCMsg_GameEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSVCMsg_GameEvent));
  CSVCMsg_GameEvent_key_t_descriptor_ = CSVCMsg_GameEvent_descriptor_->nested_type(0);
  static const int CSVCMsg_GameEvent_key_t_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEvent_key_t, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEvent_key_t, val_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEvent_key_t, val_float_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEvent_key_t, val_long_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEvent_key_t, val_short_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEvent_key_t, val_byte_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEvent_key_t, val_bool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEvent_key_t, val_uint64_),
  };
  CSVCMsg_GameEvent_key_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSVCMsg_GameEvent_key_t_descriptor_,
      CSVCMsg_GameEvent_key_t::default_instance_,
      CSVCMsg_GameEvent_key_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEvent_key_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEvent_key_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSVCMsg_GameEvent_key_t));
  CSVCMsgList_GameEvents_descriptor_ = file->message_type(4);
  static const int CSVCMsgList_GameEvents_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsgList_GameEvents, events_),
  };
  CSVCMsgList_GameEvents_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSVCMsgList_GameEvents_descriptor_,
      CSVCMsgList_GameEvents::default_instance_,
      CSVCMsgList_GameEvents_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsgList_GameEvents, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsgList_GameEvents, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSVCMsgList_GameEvents));
  CSVCMsgList_GameEvents_event_t_descriptor_ = CSVCMsgList_GameEvents_descriptor_->nested_type(0);
  static const int CSVCMsgList_GameEvents_event_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsgList_GameEvents_event_t, tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsgList_GameEvents_event_t, event_),
  };
  CSVCMsgList_GameEvents_event_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSVCMsgList_GameEvents_event_t_descriptor_,
      CSVCMsgList_GameEvents_event_t::default_instance_,
      CSVCMsgList_GameEvents_event_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsgList_GameEvents_event_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsgList_GameEvents_event_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSVCMsgList_GameEvents_event_t));
  CSVCMsg_UserMessage_descriptor_ = file->message_type(5);
  static const int CSVCMsg_UserMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_UserMessage, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_UserMessage, msg_data_),
  };
  CSVCMsg_UserMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSVCMsg_UserMessage_descriptor_,
      CSVCMsg_UserMessage::default_instance_,
      CSVCMsg_UserMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_UserMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_UserMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSVCMsg_UserMessage));
  CSVCMsgList_UserMessages_descriptor_ = file->message_type(6);
  static const int CSVCMsgList_UserMessages_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsgList_UserMessages, usermsgs_),
  };
  CSVCMsgList_UserMessages_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSVCMsgList_UserMessages_descriptor_,
      CSVCMsgList_UserMessages::default_instance_,
      CSVCMsgList_UserMessages_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsgList_UserMessages, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsgList_UserMessages, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSVCMsgList_UserMessages));
  CSVCMsgList_UserMessages_usermsg_t_descriptor_ = CSVCMsgList_UserMessages_descriptor_->nested_type(0);
  static const int CSVCMsgList_UserMessages_usermsg_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsgList_UserMessages_usermsg_t, tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsgList_UserMessages_usermsg_t, msg_),
  };
  CSVCMsgList_UserMessages_usermsg_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSVCMsgList_UserMessages_usermsg_t_descriptor_,
      CSVCMsgList_UserMessages_usermsg_t::default_instance_,
      CSVCMsgList_UserMessages_usermsg_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsgList_UserMessages_usermsg_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsgList_UserMessages_usermsg_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSVCMsgList_UserMessages_usermsg_t));
  SIGNONSTATE_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_networkbasetypes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgVector_descriptor_, &CMsgVector::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgVector2D_descriptor_, &CMsgVector2D::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgQAngle_descriptor_, &CMsgQAngle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSVCMsg_GameEvent_descriptor_, &CSVCMsg_GameEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSVCMsg_GameEvent_key_t_descriptor_, &CSVCMsg_GameEvent_key_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSVCMsgList_GameEvents_descriptor_, &CSVCMsgList_GameEvents::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSVCMsgList_GameEvents_event_t_descriptor_, &CSVCMsgList_GameEvents_event_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSVCMsg_UserMessage_descriptor_, &CSVCMsg_UserMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSVCMsgList_UserMessages_descriptor_, &CSVCMsgList_UserMessages::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSVCMsgList_UserMessages_usermsg_t_descriptor_, &CSVCMsgList_UserMessages_usermsg_t::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_networkbasetypes_2eproto() {
  delete CMsgVector::default_instance_;
  delete CMsgVector_reflection_;
  delete CMsgVector2D::default_instance_;
  delete CMsgVector2D_reflection_;
  delete CMsgQAngle::default_instance_;
  delete CMsgQAngle_reflection_;
  delete CSVCMsg_GameEvent::default_instance_;
  delete CSVCMsg_GameEvent_reflection_;
  delete CSVCMsg_GameEvent_key_t::default_instance_;
  delete CSVCMsg_GameEvent_key_t_reflection_;
  delete CSVCMsgList_GameEvents::default_instance_;
  delete CSVCMsgList_GameEvents_reflection_;
  delete CSVCMsgList_GameEvents_event_t::default_instance_;
  delete CSVCMsgList_GameEvents_event_t_reflection_;
  delete CSVCMsg_UserMessage::default_instance_;
  delete CSVCMsg_UserMessage_reflection_;
  delete CSVCMsgList_UserMessages::default_instance_;
  delete CSVCMsgList_UserMessages_reflection_;
  delete CSVCMsgList_UserMessages_usermsg_t::default_instance_;
  delete CSVCMsgList_UserMessages_usermsg_t_reflection_;
}

void protobuf_AddDesc_networkbasetypes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026networkbasetypes.proto\032 google/protobu"
    "f/descriptor.proto\"-\n\nCMsgVector\022\t\n\001x\030\001 "
    "\001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"$\n\014CMsgVector2"
    "D\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\"-\n\nCMsgQAngle\022\t\n"
    "\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"\374\001\n\021CSVCM"
    "sg_GameEvent\022\022\n\nevent_name\030\001 \001(\t\022\017\n\007even"
    "tid\030\002 \001(\005\022&\n\004keys\030\003 \003(\0132\030.CSVCMsg_GameEv"
    "ent.key_t\032\231\001\n\005key_t\022\014\n\004type\030\001 \001(\005\022\022\n\nval"
    "_string\030\002 \001(\t\022\021\n\tval_float\030\003 \001(\002\022\020\n\010val_"
    "long\030\004 \001(\005\022\021\n\tval_short\030\005 \001(\005\022\020\n\010val_byt"
    "e\030\006 \001(\005\022\020\n\010val_bool\030\007 \001(\010\022\022\n\nval_uint64\030"
    "\010 \001(\004\"\205\001\n\026CSVCMsgList_GameEvents\022/\n\006even"
    "ts\030\001 \003(\0132\037.CSVCMsgList_GameEvents.event_"
    "t\032:\n\007event_t\022\014\n\004tick\030\001 \001(\005\022!\n\005event\030\002 \001("
    "\0132\022.CSVCMsg_GameEvent\"9\n\023CSVCMsg_UserMes"
    "sage\022\020\n\010msg_type\030\001 \001(\005\022\020\n\010msg_data\030\002 \001(\014"
    "\"\217\001\n\030CSVCMsgList_UserMessages\0225\n\010usermsg"
    "s\030\001 \003(\0132#.CSVCMsgList_UserMessages.userm"
    "sg_t\032<\n\tusermsg_t\022\014\n\004tick\030\001 \001(\005\022!\n\003msg\030\002"
    " \001(\0132\024.CSVCMsg_UserMessage*\322\001\n\013SIGNONSTA"
    "TE\022\024\n\020SIGNONSTATE_NONE\020\000\022\031\n\025SIGNONSTATE_"
    "CHALLENGE\020\001\022\031\n\025SIGNONSTATE_CONNECTED\020\002\022\023"
    "\n\017SIGNONSTATE_NEW\020\003\022\030\n\024SIGNONSTATE_PRESP"
    "AWN\020\004\022\025\n\021SIGNONSTATE_SPAWN\020\005\022\024\n\020SIGNONST"
    "ATE_FULL\020\006\022\033\n\027SIGNONSTATE_CHANGELEVEL\020\007", 999);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "networkbasetypes.proto", &protobuf_RegisterTypes);
  CMsgVector::default_instance_ = new CMsgVector();
  CMsgVector2D::default_instance_ = new CMsgVector2D();
  CMsgQAngle::default_instance_ = new CMsgQAngle();
  CSVCMsg_GameEvent::default_instance_ = new CSVCMsg_GameEvent();
  CSVCMsg_GameEvent_key_t::default_instance_ = new CSVCMsg_GameEvent_key_t();
  CSVCMsgList_GameEvents::default_instance_ = new CSVCMsgList_GameEvents();
  CSVCMsgList_GameEvents_event_t::default_instance_ = new CSVCMsgList_GameEvents_event_t();
  CSVCMsg_UserMessage::default_instance_ = new CSVCMsg_UserMessage();
  CSVCMsgList_UserMessages::default_instance_ = new CSVCMsgList_UserMessages();
  CSVCMsgList_UserMessages_usermsg_t::default_instance_ = new CSVCMsgList_UserMessages_usermsg_t();
  CMsgVector::default_instance_->InitAsDefaultInstance();
  CMsgVector2D::default_instance_->InitAsDefaultInstance();
  CMsgQAngle::default_instance_->InitAsDefaultInstance();
  CSVCMsg_GameEvent::default_instance_->InitAsDefaultInstance();
  CSVCMsg_GameEvent_key_t::default_instance_->InitAsDefaultInstance();
  CSVCMsgList_GameEvents::default_instance_->InitAsDefaultInstance();
  CSVCMsgList_GameEvents_event_t::default_instance_->InitAsDefaultInstance();
  CSVCMsg_UserMessage::default_instance_->InitAsDefaultInstance();
  CSVCMsgList_UserMessages::default_instance_->InitAsDefaultInstance();
  CSVCMsgList_UserMessages_usermsg_t::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_networkbasetypes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_networkbasetypes_2eproto {
  StaticDescriptorInitializer_networkbasetypes_2eproto() {
    protobuf_AddDesc_networkbasetypes_2eproto();
  }
} static_descriptor_initializer_networkbasetypes_2eproto_;

const ::google::protobuf::EnumDescriptor* SIGNONSTATE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SIGNONSTATE_descriptor_;
}
bool SIGNONSTATE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgVector::kXFieldNumber;
const int CMsgVector::kYFieldNumber;
const int CMsgVector::kZFieldNumber;
#endif  // !_MSC_VER

CMsgVector::CMsgVector()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgVector::InitAsDefaultInstance() {
}

CMsgVector::CMsgVector(const CMsgVector& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgVector::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgVector::~CMsgVector() {
  SharedDtor();
}

void CMsgVector::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgVector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgVector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgVector_descriptor_;
}

const CMsgVector& CMsgVector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_networkbasetypes_2eproto();  return *default_instance_;
}

CMsgVector* CMsgVector::default_instance_ = NULL;

CMsgVector* CMsgVector::New() const {
  return new CMsgVector;
}

void CMsgVector::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgVector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }
      
      // optional float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }
      
      // optional float z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgVector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }
  
  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }
  
  // optional float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgVector::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }
  
  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }
  
  // optional float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgVector::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgVector::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgVector* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgVector*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgVector::MergeFrom(const CMsgVector& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgVector::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgVector::CopyFrom(const CMsgVector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgVector::IsInitialized() const {
  
  return true;
}

void CMsgVector::Swap(CMsgVector* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgVector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgVector_descriptor_;
  metadata.reflection = CMsgVector_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgVector2D::kXFieldNumber;
const int CMsgVector2D::kYFieldNumber;
#endif  // !_MSC_VER

CMsgVector2D::CMsgVector2D()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgVector2D::InitAsDefaultInstance() {
}

CMsgVector2D::CMsgVector2D(const CMsgVector2D& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgVector2D::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgVector2D::~CMsgVector2D() {
  SharedDtor();
}

void CMsgVector2D::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgVector2D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgVector2D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgVector2D_descriptor_;
}

const CMsgVector2D& CMsgVector2D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_networkbasetypes_2eproto();  return *default_instance_;
}

CMsgVector2D* CMsgVector2D::default_instance_ = NULL;

CMsgVector2D* CMsgVector2D::New() const {
  return new CMsgVector2D;
}

void CMsgVector2D::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgVector2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }
      
      // optional float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgVector2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }
  
  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgVector2D::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }
  
  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgVector2D::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgVector2D::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgVector2D* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgVector2D*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgVector2D::MergeFrom(const CMsgVector2D& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgVector2D::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgVector2D::CopyFrom(const CMsgVector2D& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgVector2D::IsInitialized() const {
  
  return true;
}

void CMsgVector2D::Swap(CMsgVector2D* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgVector2D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgVector2D_descriptor_;
  metadata.reflection = CMsgVector2D_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgQAngle::kXFieldNumber;
const int CMsgQAngle::kYFieldNumber;
const int CMsgQAngle::kZFieldNumber;
#endif  // !_MSC_VER

CMsgQAngle::CMsgQAngle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgQAngle::InitAsDefaultInstance() {
}

CMsgQAngle::CMsgQAngle(const CMsgQAngle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgQAngle::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgQAngle::~CMsgQAngle() {
  SharedDtor();
}

void CMsgQAngle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgQAngle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgQAngle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgQAngle_descriptor_;
}

const CMsgQAngle& CMsgQAngle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_networkbasetypes_2eproto();  return *default_instance_;
}

CMsgQAngle* CMsgQAngle::default_instance_ = NULL;

CMsgQAngle* CMsgQAngle::New() const {
  return new CMsgQAngle;
}

void CMsgQAngle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgQAngle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }
      
      // optional float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }
      
      // optional float z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgQAngle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }
  
  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }
  
  // optional float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgQAngle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }
  
  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }
  
  // optional float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgQAngle::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgQAngle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgQAngle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgQAngle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgQAngle::MergeFrom(const CMsgQAngle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgQAngle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQAngle::CopyFrom(const CMsgQAngle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQAngle::IsInitialized() const {
  
  return true;
}

void CMsgQAngle::Swap(CMsgQAngle* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgQAngle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgQAngle_descriptor_;
  metadata.reflection = CMsgQAngle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSVCMsg_GameEvent_key_t::kTypeFieldNumber;
const int CSVCMsg_GameEvent_key_t::kValStringFieldNumber;
const int CSVCMsg_GameEvent_key_t::kValFloatFieldNumber;
const int CSVCMsg_GameEvent_key_t::kValLongFieldNumber;
const int CSVCMsg_GameEvent_key_t::kValShortFieldNumber;
const int CSVCMsg_GameEvent_key_t::kValByteFieldNumber;
const int CSVCMsg_GameEvent_key_t::kValBoolFieldNumber;
const int CSVCMsg_GameEvent_key_t::kValUint64FieldNumber;
#endif  // !_MSC_VER

CSVCMsg_GameEvent_key_t::CSVCMsg_GameEvent_key_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSVCMsg_GameEvent_key_t::InitAsDefaultInstance() {
}

CSVCMsg_GameEvent_key_t::CSVCMsg_GameEvent_key_t(const CSVCMsg_GameEvent_key_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSVCMsg_GameEvent_key_t::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  val_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  val_float_ = 0;
  val_long_ = 0;
  val_short_ = 0;
  val_byte_ = 0;
  val_bool_ = false;
  val_uint64_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSVCMsg_GameEvent_key_t::~CSVCMsg_GameEvent_key_t() {
  SharedDtor();
}

void CSVCMsg_GameEvent_key_t::SharedDtor() {
  if (val_string_ != &::google::protobuf::internal::kEmptyString) {
    delete val_string_;
  }
  if (this != default_instance_) {
  }
}

void CSVCMsg_GameEvent_key_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_GameEvent_key_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSVCMsg_GameEvent_key_t_descriptor_;
}

const CSVCMsg_GameEvent_key_t& CSVCMsg_GameEvent_key_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_networkbasetypes_2eproto();  return *default_instance_;
}

CSVCMsg_GameEvent_key_t* CSVCMsg_GameEvent_key_t::default_instance_ = NULL;

CSVCMsg_GameEvent_key_t* CSVCMsg_GameEvent_key_t::New() const {
  return new CSVCMsg_GameEvent_key_t;
}

void CSVCMsg_GameEvent_key_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_val_string()) {
      if (val_string_ != &::google::protobuf::internal::kEmptyString) {
        val_string_->clear();
      }
    }
    val_float_ = 0;
    val_long_ = 0;
    val_short_ = 0;
    val_byte_ = 0;
    val_bool_ = false;
    val_uint64_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSVCMsg_GameEvent_key_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_val_string;
        break;
      }
      
      // optional string val_string = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_val_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_val_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->val_string().data(), this->val_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_val_float;
        break;
      }
      
      // optional float val_float = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_val_float:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &val_float_)));
          set_has_val_float();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_val_long;
        break;
      }
      
      // optional int32 val_long = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_val_long:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &val_long_)));
          set_has_val_long();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_val_short;
        break;
      }
      
      // optional int32 val_short = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_val_short:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &val_short_)));
          set_has_val_short();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_val_byte;
        break;
      }
      
      // optional int32 val_byte = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_val_byte:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &val_byte_)));
          set_has_val_byte();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_val_bool;
        break;
      }
      
      // optional bool val_bool = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_val_bool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &val_bool_)));
          set_has_val_bool();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_val_uint64;
        break;
      }
      
      // optional uint64 val_uint64 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_val_uint64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &val_uint64_)));
          set_has_val_uint64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSVCMsg_GameEvent_key_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional string val_string = 2;
  if (has_val_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->val_string().data(), this->val_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->val_string(), output);
  }
  
  // optional float val_float = 3;
  if (has_val_float()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->val_float(), output);
  }
  
  // optional int32 val_long = 4;
  if (has_val_long()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->val_long(), output);
  }
  
  // optional int32 val_short = 5;
  if (has_val_short()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->val_short(), output);
  }
  
  // optional int32 val_byte = 6;
  if (has_val_byte()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->val_byte(), output);
  }
  
  // optional bool val_bool = 7;
  if (has_val_bool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->val_bool(), output);
  }
  
  // optional uint64 val_uint64 = 8;
  if (has_val_uint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->val_uint64(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSVCMsg_GameEvent_key_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional string val_string = 2;
  if (has_val_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->val_string().data(), this->val_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->val_string(), target);
  }
  
  // optional float val_float = 3;
  if (has_val_float()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->val_float(), target);
  }
  
  // optional int32 val_long = 4;
  if (has_val_long()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->val_long(), target);
  }
  
  // optional int32 val_short = 5;
  if (has_val_short()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->val_short(), target);
  }
  
  // optional int32 val_byte = 6;
  if (has_val_byte()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->val_byte(), target);
  }
  
  // optional bool val_bool = 7;
  if (has_val_bool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->val_bool(), target);
  }
  
  // optional uint64 val_uint64 = 8;
  if (has_val_uint64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->val_uint64(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSVCMsg_GameEvent_key_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional string val_string = 2;
    if (has_val_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->val_string());
    }
    
    // optional float val_float = 3;
    if (has_val_float()) {
      total_size += 1 + 4;
    }
    
    // optional int32 val_long = 4;
    if (has_val_long()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->val_long());
    }
    
    // optional int32 val_short = 5;
    if (has_val_short()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->val_short());
    }
    
    // optional int32 val_byte = 6;
    if (has_val_byte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->val_byte());
    }
    
    // optional bool val_bool = 7;
    if (has_val_bool()) {
      total_size += 1 + 1;
    }
    
    // optional uint64 val_uint64 = 8;
    if (has_val_uint64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->val_uint64());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_GameEvent_key_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSVCMsg_GameEvent_key_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSVCMsg_GameEvent_key_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSVCMsg_GameEvent_key_t::MergeFrom(const CSVCMsg_GameEvent_key_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_val_string()) {
      set_val_string(from.val_string());
    }
    if (from.has_val_float()) {
      set_val_float(from.val_float());
    }
    if (from.has_val_long()) {
      set_val_long(from.val_long());
    }
    if (from.has_val_short()) {
      set_val_short(from.val_short());
    }
    if (from.has_val_byte()) {
      set_val_byte(from.val_byte());
    }
    if (from.has_val_bool()) {
      set_val_bool(from.val_bool());
    }
    if (from.has_val_uint64()) {
      set_val_uint64(from.val_uint64());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSVCMsg_GameEvent_key_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_GameEvent_key_t::CopyFrom(const CSVCMsg_GameEvent_key_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_GameEvent_key_t::IsInitialized() const {
  
  return true;
}

void CSVCMsg_GameEvent_key_t::Swap(CSVCMsg_GameEvent_key_t* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(val_string_, other->val_string_);
    std::swap(val_float_, other->val_float_);
    std::swap(val_long_, other->val_long_);
    std::swap(val_short_, other->val_short_);
    std::swap(val_byte_, other->val_byte_);
    std::swap(val_bool_, other->val_bool_);
    std::swap(val_uint64_, other->val_uint64_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSVCMsg_GameEvent_key_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSVCMsg_GameEvent_key_t_descriptor_;
  metadata.reflection = CSVCMsg_GameEvent_key_t_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CSVCMsg_GameEvent::kEventNameFieldNumber;
const int CSVCMsg_GameEvent::kEventidFieldNumber;
const int CSVCMsg_GameEvent::kKeysFieldNumber;
#endif  // !_MSC_VER

CSVCMsg_GameEvent::CSVCMsg_GameEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSVCMsg_GameEvent::InitAsDefaultInstance() {
}

CSVCMsg_GameEvent::CSVCMsg_GameEvent(const CSVCMsg_GameEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSVCMsg_GameEvent::SharedCtor() {
  _cached_size_ = 0;
  event_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  eventid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSVCMsg_GameEvent::~CSVCMsg_GameEvent() {
  SharedDtor();
}

void CSVCMsg_GameEvent::SharedDtor() {
  if (event_name_ != &::google::protobuf::internal::kEmptyString) {
    delete event_name_;
  }
  if (this != default_instance_) {
  }
}

void CSVCMsg_GameEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_GameEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSVCMsg_GameEvent_descriptor_;
}

const CSVCMsg_GameEvent& CSVCMsg_GameEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_networkbasetypes_2eproto();  return *default_instance_;
}

CSVCMsg_GameEvent* CSVCMsg_GameEvent::default_instance_ = NULL;

CSVCMsg_GameEvent* CSVCMsg_GameEvent::New() const {
  return new CSVCMsg_GameEvent;
}

void CSVCMsg_GameEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_event_name()) {
      if (event_name_ != &::google::protobuf::internal::kEmptyString) {
        event_name_->clear();
      }
    }
    eventid_ = 0;
  }
  keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSVCMsg_GameEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string event_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->event_name().data(), this->event_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eventid;
        break;
      }
      
      // optional int32 eventid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eventid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eventid_)));
          set_has_eventid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_keys;
        break;
      }
      
      // repeated .CSVCMsg_GameEvent.key_t keys = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_keys;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSVCMsg_GameEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string event_name = 1;
  if (has_event_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_name().data(), this->event_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->event_name(), output);
  }
  
  // optional int32 eventid = 2;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->eventid(), output);
  }
  
  // repeated .CSVCMsg_GameEvent.key_t keys = 3;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->keys(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSVCMsg_GameEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string event_name = 1;
  if (has_event_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_name().data(), this->event_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->event_name(), target);
  }
  
  // optional int32 eventid = 2;
  if (has_eventid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->eventid(), target);
  }
  
  // repeated .CSVCMsg_GameEvent.key_t keys = 3;
  for (int i = 0; i < this->keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->keys(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSVCMsg_GameEvent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string event_name = 1;
    if (has_event_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_name());
    }
    
    // optional int32 eventid = 2;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eventid());
    }
    
  }
  // repeated .CSVCMsg_GameEvent.key_t keys = 3;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keys(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_GameEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSVCMsg_GameEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSVCMsg_GameEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSVCMsg_GameEvent::MergeFrom(const CSVCMsg_GameEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  keys_.MergeFrom(from.keys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_name()) {
      set_event_name(from.event_name());
    }
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSVCMsg_GameEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_GameEvent::CopyFrom(const CSVCMsg_GameEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_GameEvent::IsInitialized() const {
  
  return true;
}

void CSVCMsg_GameEvent::Swap(CSVCMsg_GameEvent* other) {
  if (other != this) {
    std::swap(event_name_, other->event_name_);
    std::swap(eventid_, other->eventid_);
    keys_.Swap(&other->keys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSVCMsg_GameEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSVCMsg_GameEvent_descriptor_;
  metadata.reflection = CSVCMsg_GameEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSVCMsgList_GameEvents_event_t::kTickFieldNumber;
const int CSVCMsgList_GameEvents_event_t::kEventFieldNumber;
#endif  // !_MSC_VER

CSVCMsgList_GameEvents_event_t::CSVCMsgList_GameEvents_event_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSVCMsgList_GameEvents_event_t::InitAsDefaultInstance() {
  event_ = const_cast< ::CSVCMsg_GameEvent*>(&::CSVCMsg_GameEvent::default_instance());
}

CSVCMsgList_GameEvents_event_t::CSVCMsgList_GameEvents_event_t(const CSVCMsgList_GameEvents_event_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSVCMsgList_GameEvents_event_t::SharedCtor() {
  _cached_size_ = 0;
  tick_ = 0;
  event_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSVCMsgList_GameEvents_event_t::~CSVCMsgList_GameEvents_event_t() {
  SharedDtor();
}

void CSVCMsgList_GameEvents_event_t::SharedDtor() {
  if (this != default_instance_) {
    delete event_;
  }
}

void CSVCMsgList_GameEvents_event_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsgList_GameEvents_event_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSVCMsgList_GameEvents_event_t_descriptor_;
}

const CSVCMsgList_GameEvents_event_t& CSVCMsgList_GameEvents_event_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_networkbasetypes_2eproto();  return *default_instance_;
}

CSVCMsgList_GameEvents_event_t* CSVCMsgList_GameEvents_event_t::default_instance_ = NULL;

CSVCMsgList_GameEvents_event_t* CSVCMsgList_GameEvents_event_t::New() const {
  return new CSVCMsgList_GameEvents_event_t;
}

void CSVCMsgList_GameEvents_event_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tick_ = 0;
    if (has_event()) {
      if (event_ != NULL) event_->::CSVCMsg_GameEvent::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSVCMsgList_GameEvents_event_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tick = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_event;
        break;
      }
      
      // optional .CSVCMsg_GameEvent event = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSVCMsgList_GameEvents_event_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tick = 1;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tick(), output);
  }
  
  // optional .CSVCMsg_GameEvent event = 2;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->event(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSVCMsgList_GameEvents_event_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tick = 1;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tick(), target);
  }
  
  // optional .CSVCMsg_GameEvent event = 2;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->event(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSVCMsgList_GameEvents_event_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tick = 1;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tick());
    }
    
    // optional .CSVCMsg_GameEvent event = 2;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->event());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsgList_GameEvents_event_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSVCMsgList_GameEvents_event_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSVCMsgList_GameEvents_event_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSVCMsgList_GameEvents_event_t::MergeFrom(const CSVCMsgList_GameEvents_event_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tick()) {
      set_tick(from.tick());
    }
    if (from.has_event()) {
      mutable_event()->::CSVCMsg_GameEvent::MergeFrom(from.event());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSVCMsgList_GameEvents_event_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsgList_GameEvents_event_t::CopyFrom(const CSVCMsgList_GameEvents_event_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsgList_GameEvents_event_t::IsInitialized() const {
  
  return true;
}

void CSVCMsgList_GameEvents_event_t::Swap(CSVCMsgList_GameEvents_event_t* other) {
  if (other != this) {
    std::swap(tick_, other->tick_);
    std::swap(event_, other->event_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSVCMsgList_GameEvents_event_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSVCMsgList_GameEvents_event_t_descriptor_;
  metadata.reflection = CSVCMsgList_GameEvents_event_t_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CSVCMsgList_GameEvents::kEventsFieldNumber;
#endif  // !_MSC_VER

CSVCMsgList_GameEvents::CSVCMsgList_GameEvents()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSVCMsgList_GameEvents::InitAsDefaultInstance() {
}

CSVCMsgList_GameEvents::CSVCMsgList_GameEvents(const CSVCMsgList_GameEvents& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSVCMsgList_GameEvents::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSVCMsgList_GameEvents::~CSVCMsgList_GameEvents() {
  SharedDtor();
}

void CSVCMsgList_GameEvents::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSVCMsgList_GameEvents::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsgList_GameEvents::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSVCMsgList_GameEvents_descriptor_;
}

const CSVCMsgList_GameEvents& CSVCMsgList_GameEvents::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_networkbasetypes_2eproto();  return *default_instance_;
}

CSVCMsgList_GameEvents* CSVCMsgList_GameEvents::default_instance_ = NULL;

CSVCMsgList_GameEvents* CSVCMsgList_GameEvents::New() const {
  return new CSVCMsgList_GameEvents;
}

void CSVCMsgList_GameEvents::Clear() {
  events_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSVCMsgList_GameEvents::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CSVCMsgList_GameEvents.event_t events = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_events()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_events;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSVCMsgList_GameEvents::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CSVCMsgList_GameEvents.event_t events = 1;
  for (int i = 0; i < this->events_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->events(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSVCMsgList_GameEvents::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CSVCMsgList_GameEvents.event_t events = 1;
  for (int i = 0; i < this->events_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->events(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSVCMsgList_GameEvents::ByteSize() const {
  int total_size = 0;
  
  // repeated .CSVCMsgList_GameEvents.event_t events = 1;
  total_size += 1 * this->events_size();
  for (int i = 0; i < this->events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->events(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsgList_GameEvents::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSVCMsgList_GameEvents* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSVCMsgList_GameEvents*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSVCMsgList_GameEvents::MergeFrom(const CSVCMsgList_GameEvents& from) {
  GOOGLE_CHECK_NE(&from, this);
  events_.MergeFrom(from.events_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSVCMsgList_GameEvents::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsgList_GameEvents::CopyFrom(const CSVCMsgList_GameEvents& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsgList_GameEvents::IsInitialized() const {
  
  return true;
}

void CSVCMsgList_GameEvents::Swap(CSVCMsgList_GameEvents* other) {
  if (other != this) {
    events_.Swap(&other->events_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSVCMsgList_GameEvents::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSVCMsgList_GameEvents_descriptor_;
  metadata.reflection = CSVCMsgList_GameEvents_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSVCMsg_UserMessage::kMsgTypeFieldNumber;
const int CSVCMsg_UserMessage::kMsgDataFieldNumber;
#endif  // !_MSC_VER

CSVCMsg_UserMessage::CSVCMsg_UserMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSVCMsg_UserMessage::InitAsDefaultInstance() {
}

CSVCMsg_UserMessage::CSVCMsg_UserMessage(const CSVCMsg_UserMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSVCMsg_UserMessage::SharedCtor() {
  _cached_size_ = 0;
  msg_type_ = 0;
  msg_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSVCMsg_UserMessage::~CSVCMsg_UserMessage() {
  SharedDtor();
}

void CSVCMsg_UserMessage::SharedDtor() {
  if (msg_data_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_data_;
  }
  if (this != default_instance_) {
  }
}

void CSVCMsg_UserMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_UserMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSVCMsg_UserMessage_descriptor_;
}

const CSVCMsg_UserMessage& CSVCMsg_UserMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_networkbasetypes_2eproto();  return *default_instance_;
}

CSVCMsg_UserMessage* CSVCMsg_UserMessage::default_instance_ = NULL;

CSVCMsg_UserMessage* CSVCMsg_UserMessage::New() const {
  return new CSVCMsg_UserMessage;
}

void CSVCMsg_UserMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_type_ = 0;
    if (has_msg_data()) {
      if (msg_data_ != &::google::protobuf::internal::kEmptyString) {
        msg_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSVCMsg_UserMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 msg_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_type_)));
          set_has_msg_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg_data;
        break;
      }
      
      // optional bytes msg_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSVCMsg_UserMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msg_type(), output);
  }
  
  // optional bytes msg_data = 2;
  if (has_msg_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->msg_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSVCMsg_UserMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 msg_type = 1;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msg_type(), target);
  }
  
  // optional bytes msg_data = 2;
  if (has_msg_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->msg_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSVCMsg_UserMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 msg_type = 1;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msg_type());
    }
    
    // optional bytes msg_data = 2;
    if (has_msg_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_UserMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSVCMsg_UserMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSVCMsg_UserMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSVCMsg_UserMessage::MergeFrom(const CSVCMsg_UserMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_msg_data()) {
      set_msg_data(from.msg_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSVCMsg_UserMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_UserMessage::CopyFrom(const CSVCMsg_UserMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_UserMessage::IsInitialized() const {
  
  return true;
}

void CSVCMsg_UserMessage::Swap(CSVCMsg_UserMessage* other) {
  if (other != this) {
    std::swap(msg_type_, other->msg_type_);
    std::swap(msg_data_, other->msg_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSVCMsg_UserMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSVCMsg_UserMessage_descriptor_;
  metadata.reflection = CSVCMsg_UserMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSVCMsgList_UserMessages_usermsg_t::kTickFieldNumber;
const int CSVCMsgList_UserMessages_usermsg_t::kMsgFieldNumber;
#endif  // !_MSC_VER

CSVCMsgList_UserMessages_usermsg_t::CSVCMsgList_UserMessages_usermsg_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSVCMsgList_UserMessages_usermsg_t::InitAsDefaultInstance() {
  msg_ = const_cast< ::CSVCMsg_UserMessage*>(&::CSVCMsg_UserMessage::default_instance());
}

CSVCMsgList_UserMessages_usermsg_t::CSVCMsgList_UserMessages_usermsg_t(const CSVCMsgList_UserMessages_usermsg_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSVCMsgList_UserMessages_usermsg_t::SharedCtor() {
  _cached_size_ = 0;
  tick_ = 0;
  msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSVCMsgList_UserMessages_usermsg_t::~CSVCMsgList_UserMessages_usermsg_t() {
  SharedDtor();
}

void CSVCMsgList_UserMessages_usermsg_t::SharedDtor() {
  if (this != default_instance_) {
    delete msg_;
  }
}

void CSVCMsgList_UserMessages_usermsg_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsgList_UserMessages_usermsg_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSVCMsgList_UserMessages_usermsg_t_descriptor_;
}

const CSVCMsgList_UserMessages_usermsg_t& CSVCMsgList_UserMessages_usermsg_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_networkbasetypes_2eproto();  return *default_instance_;
}

CSVCMsgList_UserMessages_usermsg_t* CSVCMsgList_UserMessages_usermsg_t::default_instance_ = NULL;

CSVCMsgList_UserMessages_usermsg_t* CSVCMsgList_UserMessages_usermsg_t::New() const {
  return new CSVCMsgList_UserMessages_usermsg_t;
}

void CSVCMsgList_UserMessages_usermsg_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tick_ = 0;
    if (has_msg()) {
      if (msg_ != NULL) msg_->::CSVCMsg_UserMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSVCMsgList_UserMessages_usermsg_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tick = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }
      
      // optional .CSVCMsg_UserMessage msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSVCMsgList_UserMessages_usermsg_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tick = 1;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tick(), output);
  }
  
  // optional .CSVCMsg_UserMessage msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSVCMsgList_UserMessages_usermsg_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tick = 1;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tick(), target);
  }
  
  // optional .CSVCMsg_UserMessage msg = 2;
  if (has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSVCMsgList_UserMessages_usermsg_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tick = 1;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tick());
    }
    
    // optional .CSVCMsg_UserMessage msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsgList_UserMessages_usermsg_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSVCMsgList_UserMessages_usermsg_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSVCMsgList_UserMessages_usermsg_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSVCMsgList_UserMessages_usermsg_t::MergeFrom(const CSVCMsgList_UserMessages_usermsg_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tick()) {
      set_tick(from.tick());
    }
    if (from.has_msg()) {
      mutable_msg()->::CSVCMsg_UserMessage::MergeFrom(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSVCMsgList_UserMessages_usermsg_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsgList_UserMessages_usermsg_t::CopyFrom(const CSVCMsgList_UserMessages_usermsg_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsgList_UserMessages_usermsg_t::IsInitialized() const {
  
  return true;
}

void CSVCMsgList_UserMessages_usermsg_t::Swap(CSVCMsgList_UserMessages_usermsg_t* other) {
  if (other != this) {
    std::swap(tick_, other->tick_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSVCMsgList_UserMessages_usermsg_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSVCMsgList_UserMessages_usermsg_t_descriptor_;
  metadata.reflection = CSVCMsgList_UserMessages_usermsg_t_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CSVCMsgList_UserMessages::kUsermsgsFieldNumber;
#endif  // !_MSC_VER

CSVCMsgList_UserMessages::CSVCMsgList_UserMessages()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSVCMsgList_UserMessages::InitAsDefaultInstance() {
}

CSVCMsgList_UserMessages::CSVCMsgList_UserMessages(const CSVCMsgList_UserMessages& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSVCMsgList_UserMessages::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSVCMsgList_UserMessages::~CSVCMsgList_UserMessages() {
  SharedDtor();
}

void CSVCMsgList_UserMessages::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSVCMsgList_UserMessages::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsgList_UserMessages::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSVCMsgList_UserMessages_descriptor_;
}

const CSVCMsgList_UserMessages& CSVCMsgList_UserMessages::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_networkbasetypes_2eproto();  return *default_instance_;
}

CSVCMsgList_UserMessages* CSVCMsgList_UserMessages::default_instance_ = NULL;

CSVCMsgList_UserMessages* CSVCMsgList_UserMessages::New() const {
  return new CSVCMsgList_UserMessages;
}

void CSVCMsgList_UserMessages::Clear() {
  usermsgs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSVCMsgList_UserMessages::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CSVCMsgList_UserMessages.usermsg_t usermsgs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_usermsgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_usermsgs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_usermsgs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSVCMsgList_UserMessages::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CSVCMsgList_UserMessages.usermsg_t usermsgs = 1;
  for (int i = 0; i < this->usermsgs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->usermsgs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSVCMsgList_UserMessages::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CSVCMsgList_UserMessages.usermsg_t usermsgs = 1;
  for (int i = 0; i < this->usermsgs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->usermsgs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSVCMsgList_UserMessages::ByteSize() const {
  int total_size = 0;
  
  // repeated .CSVCMsgList_UserMessages.usermsg_t usermsgs = 1;
  total_size += 1 * this->usermsgs_size();
  for (int i = 0; i < this->usermsgs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->usermsgs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsgList_UserMessages::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSVCMsgList_UserMessages* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSVCMsgList_UserMessages*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSVCMsgList_UserMessages::MergeFrom(const CSVCMsgList_UserMessages& from) {
  GOOGLE_CHECK_NE(&from, this);
  usermsgs_.MergeFrom(from.usermsgs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSVCMsgList_UserMessages::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsgList_UserMessages::CopyFrom(const CSVCMsgList_UserMessages& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsgList_UserMessages::IsInitialized() const {
  
  return true;
}

void CSVCMsgList_UserMessages::Swap(CSVCMsgList_UserMessages* other) {
  if (other != this) {
    usermsgs_.Swap(&other->usermsgs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSVCMsgList_UserMessages::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSVCMsgList_UserMessages_descriptor_;
  metadata.reflection = CSVCMsgList_UserMessages_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
