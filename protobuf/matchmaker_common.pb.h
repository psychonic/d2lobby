// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: matchmaker_common.proto

#ifndef PROTOBUF_matchmaker_5fcommon_2eproto__INCLUDED
#define PROTOBUF_matchmaker_5fcommon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_matchmaker_5fcommon_2eproto();
void protobuf_AssignDesc_matchmaker_5fcommon_2eproto();
void protobuf_ShutdownFile_matchmaker_5fcommon_2eproto();


enum MatchType {
  MATCH_TYPE_CASUAL = 0,
  MATCH_TYPE_COOP_BOTS = 1,
  MATCH_TYPE_TEAM_RANKED = 2,
  MATCH_TYPE_SOLO_QUEUE = 3,
  MATCH_TYPE_COMPETITIVE = 4
};
bool MatchType_IsValid(int value);
const MatchType MatchType_MIN = MATCH_TYPE_CASUAL;
const MatchType MatchType_MAX = MATCH_TYPE_COMPETITIVE;
const int MatchType_ARRAYSIZE = MatchType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MatchType_descriptor();
inline const ::std::string& MatchType_Name(MatchType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MatchType_descriptor(), value);
}
inline bool MatchType_Parse(
    const ::std::string& name, MatchType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MatchType>(
    MatchType_descriptor(), name, value);
}
enum DOTABotDifficulty {
  BOT_DIFFICULTY_PASSIVE = 0,
  BOT_DIFFICULTY_EASY = 1,
  BOT_DIFFICULTY_MEDIUM = 2,
  BOT_DIFFICULTY_HARD = 3,
  BOT_DIFFICULTY_UNFAIR = 4,
  BOT_DIFFICULTY_INVALID = 5,
  BOT_DIFFICULTY_EXTRA1 = 6,
  BOT_DIFFICULTY_EXTRA2 = 7,
  BOT_DIFFICULTY_EXTRA3 = 8
};
bool DOTABotDifficulty_IsValid(int value);
const DOTABotDifficulty DOTABotDifficulty_MIN = BOT_DIFFICULTY_PASSIVE;
const DOTABotDifficulty DOTABotDifficulty_MAX = BOT_DIFFICULTY_EXTRA3;
const int DOTABotDifficulty_ARRAYSIZE = DOTABotDifficulty_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTABotDifficulty_descriptor();
inline const ::std::string& DOTABotDifficulty_Name(DOTABotDifficulty value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTABotDifficulty_descriptor(), value);
}
inline bool DOTABotDifficulty_Parse(
    const ::std::string& name, DOTABotDifficulty* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTABotDifficulty>(
    DOTABotDifficulty_descriptor(), name, value);
}
enum MatchLanguages {
  MATCH_LANGUAGE_ENGLISH = 1,
  MATCH_LANGUAGE_RUSSIAN = 2,
  MATCH_LANGUAGE_CHINESE = 3,
  MATCH_LANGUAGE_KOREAN = 4,
  MATCH_LANGUAGE_SPANISH = 5,
  MATCH_LANGUAGE_PORTUGUESE = 6
};
bool MatchLanguages_IsValid(int value);
const MatchLanguages MatchLanguages_MIN = MATCH_LANGUAGE_ENGLISH;
const MatchLanguages MatchLanguages_MAX = MATCH_LANGUAGE_PORTUGUESE;
const int MatchLanguages_ARRAYSIZE = MatchLanguages_MAX + 1;

const ::google::protobuf::EnumDescriptor* MatchLanguages_descriptor();
inline const ::std::string& MatchLanguages_Name(MatchLanguages value) {
  return ::google::protobuf::internal::NameOfEnum(
    MatchLanguages_descriptor(), value);
}
inline bool MatchLanguages_Parse(
    const ::std::string& name, MatchLanguages* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MatchLanguages>(
    MatchLanguages_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< MatchType>() {
  return MatchType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< DOTABotDifficulty>() {
  return DOTABotDifficulty_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< MatchLanguages>() {
  return MatchLanguages_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_matchmaker_5fcommon_2eproto__INCLUDED
