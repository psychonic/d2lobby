// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dota_gcmessages_server.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMsgSpawnLootGreevil_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSpawnLootGreevil_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDismissLootGreevil_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDismissLootGreevil_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDismissLootGreevilResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDismissLootGreevilResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgConnectedPlayers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgConnectedPlayers_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgConnectedPlayers_Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgConnectedPlayers_Player_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgConnectedPlayers_SendReason_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgGameServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGameServerInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgGameServerInfo_ServerType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgLeaverDetected_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgLeaverDetected_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgLeaverDetectedResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgLeaverDetectedResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyPlayerStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGameMatchSignOut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGameMatchSignOut_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGameMatchSignOut_CTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGameMatchSignOut_CTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGameMatchSignOut_CTeam_CPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGameMatchSignOut_CTeam_CPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGameMatchSignOut_CAdditionalSignoutMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGameMatchSignOut_CAdditionalSignoutMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGameMatchSignoutResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGameMatchSignoutResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGameMatchSignOutPermissionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGameMatchSignOutPermissionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGameMatchSignOutPermissionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGameMatchSignOutPermissionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGameChatLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGameChatLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGameChatLog_CChatLine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGameChatLog_CChatLine_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTALiveScoreboardUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTALiveScoreboardUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTALiveScoreboardUpdate_Team_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTALiveScoreboardUpdate_Team_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTALiveScoreboardUpdate_Team_Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTALiveScoreboardUpdate_Team_Player_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARequestPlayerResources_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARequestPlayerResources_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARequestPlayerResourcesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARequestPlayerResourcesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARequestBatchPlayerResources_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARequestBatchPlayerResources_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARequestBatchPlayerResourcesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARequestBatchPlayerResourcesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARequestBatchPlayerResourcesResponse_Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARequestBatchPlayerResourcesResponse_Result_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAPlayerFailedToConnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAPlayerFailedToConnect_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToRelayConnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToRelayConnect_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToRelayConnectResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToRelayConnectResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCBanStatusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCBanStatusRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCBanStatusResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCBanStatusResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTournamentItemEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTournamentItemEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTournamentItemEventResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTournamentItemEventResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTeamFanfare_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTeamFanfare_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgResponseTeamFanfare_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgResponseTeamFanfare_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGameServerUploadSaveGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGameServerUploadSaveGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGameServerSaveGameResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGameServerSaveGameResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgGameServerSaveGameResult_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgGameServerGetLoadGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGameServerGetLoadGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGameServerGetLoadGameResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGameServerGetLoadGameResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAGenerateDiretidePrizeList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAGenerateDiretidePrizeList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAGenerateDiretidePrizeListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAGenerateDiretidePrizeListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARewardDiretidePrizes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARewardDiretidePrizes_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTADiretidePrizesRewardedResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTADiretidePrizesRewardedResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAAwardEventPoints_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAAwardEventPoints_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAAwardEventPoints_AwardPoints_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAAwardEventPoints_AwardPoints_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFrostivusTimeElapsed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFrostivusTimeElapsed_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFrostivusTimeElapsed_User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFrostivusTimeElapsed_User_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToServerPingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToServerPingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToServerPingResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToServerPingResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToServerConsoleCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToServerConsoleCommand_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto() {
  protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dota_gcmessages_server.proto");
  GOOGLE_CHECK(file != NULL);
  CMsgSpawnLootGreevil_descriptor_ = file->message_type(0);
  static const int CMsgSpawnLootGreevil_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpawnLootGreevil, rare_),
  };
  CMsgSpawnLootGreevil_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSpawnLootGreevil_descriptor_,
      CMsgSpawnLootGreevil::default_instance_,
      CMsgSpawnLootGreevil_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpawnLootGreevil, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpawnLootGreevil, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSpawnLootGreevil));
  CMsgDismissLootGreevil_descriptor_ = file->message_type(1);
  static const int CMsgDismissLootGreevil_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDismissLootGreevil, killed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDismissLootGreevil, rare_),
  };
  CMsgDismissLootGreevil_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDismissLootGreevil_descriptor_,
      CMsgDismissLootGreevil::default_instance_,
      CMsgDismissLootGreevil_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDismissLootGreevil, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDismissLootGreevil, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDismissLootGreevil));
  CMsgDismissLootGreevilResponse_descriptor_ = file->message_type(2);
  static const int CMsgDismissLootGreevilResponse_offsets_[1] = {
  };
  CMsgDismissLootGreevilResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDismissLootGreevilResponse_descriptor_,
      CMsgDismissLootGreevilResponse::default_instance_,
      CMsgDismissLootGreevilResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDismissLootGreevilResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDismissLootGreevilResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDismissLootGreevilResponse));
  CMsgConnectedPlayers_descriptor_ = file->message_type(3);
  static const int CMsgConnectedPlayers_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers, connected_players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers, disconnected_players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers, game_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers, num_spectators_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers, tower_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers, first_blood_happened_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers, send_reason_),
  };
  CMsgConnectedPlayers_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgConnectedPlayers_descriptor_,
      CMsgConnectedPlayers::default_instance_,
      CMsgConnectedPlayers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgConnectedPlayers));
  CMsgConnectedPlayers_Player_descriptor_ = CMsgConnectedPlayers_descriptor_->nested_type(0);
  static const int CMsgConnectedPlayers_Player_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers_Player, steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers_Player, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers_Player, leaver_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers_Player, disconnect_reason_),
  };
  CMsgConnectedPlayers_Player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgConnectedPlayers_Player_descriptor_,
      CMsgConnectedPlayers_Player::default_instance_,
      CMsgConnectedPlayers_Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers_Player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectedPlayers_Player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgConnectedPlayers_Player));
  CMsgConnectedPlayers_SendReason_descriptor_ = CMsgConnectedPlayers_descriptor_->enum_type(0);
  CMsgGameServerInfo_descriptor_ = file->message_type(4);
  static const int CMsgGameServerInfo_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_public_ip_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_private_ip_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_tv_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_hibernation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_loadavg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_tv_broadcast_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_game_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_relay_connected_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, relay_slots_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, relays_connected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, relay_clients_connected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, relayed_game_server_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, parent_relay_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, tv_secret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, server_cluster_),
  };
  CMsgGameServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGameServerInfo_descriptor_,
      CMsgGameServerInfo::default_instance_,
      CMsgGameServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGameServerInfo));
  CMsgGameServerInfo_ServerType_descriptor_ = CMsgGameServerInfo_descriptor_->enum_type(0);
  CMsgLeaverDetected_descriptor_ = file->message_type(5);
  static const int CMsgLeaverDetected_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverDetected, steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverDetected, leaver_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverDetected, obsolete_mass_disconnect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverDetected, leaver_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverDetected, server_cluster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverDetected, disconnect_reason_),
  };
  CMsgLeaverDetected_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgLeaverDetected_descriptor_,
      CMsgLeaverDetected::default_instance_,
      CMsgLeaverDetected_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverDetected, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverDetected, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgLeaverDetected));
  CMsgLeaverDetectedResponse_descriptor_ = file->message_type(6);
  static const int CMsgLeaverDetectedResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverDetectedResponse, result_),
  };
  CMsgLeaverDetectedResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgLeaverDetectedResponse_descriptor_,
      CMsgLeaverDetectedResponse::default_instance_,
      CMsgLeaverDetectedResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverDetectedResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverDetectedResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgLeaverDetectedResponse));
  CMsgDOTAFantasyPlayerStats_descriptor_ = file->message_type(7);
  static const int CMsgDOTAFantasyPlayerStats_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, player_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, match_completed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, deaths_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, assists_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, last_hits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, denies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, gpm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, xppm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, stuns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, healing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, tower_kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, roshan_kills_),
  };
  CMsgDOTAFantasyPlayerStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAFantasyPlayerStats_descriptor_,
      CMsgDOTAFantasyPlayerStats::default_instance_,
      CMsgDOTAFantasyPlayerStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAFantasyPlayerStats));
  CMsgGameMatchSignOut_descriptor_ = file->message_type(8);
  static const int CMsgGameMatchSignOut_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, good_guys_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, num_players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, teams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, tower_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, barracks_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, cluster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, server_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, first_blood_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, game_balance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, event_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, picks_bans_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, fantasy_stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, player_strange_count_adjustments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, automatic_surrender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, server_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, mass_disconnect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, additional_msgs_),
  };
  CMsgGameMatchSignOut_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGameMatchSignOut_descriptor_,
      CMsgGameMatchSignOut::default_instance_,
      CMsgGameMatchSignOut_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGameMatchSignOut));
  CMsgGameMatchSignOut_CTeam_descriptor_ = CMsgGameMatchSignOut_descriptor_->nested_type(0);
  static const int CMsgGameMatchSignOut_CTeam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam, players_),
  };
  CMsgGameMatchSignOut_CTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGameMatchSignOut_CTeam_descriptor_,
      CMsgGameMatchSignOut_CTeam::default_instance_,
      CMsgGameMatchSignOut_CTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGameMatchSignOut_CTeam));
  CMsgGameMatchSignOut_CTeam_CPlayer_descriptor_ = CMsgGameMatchSignOut_CTeam_descriptor_->nested_type(0);
  static const int CMsgGameMatchSignOut_CTeam_CPlayer_offsets_[30] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, deaths_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, assists_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, leaver_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, last_hits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, denies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, gold_per_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, xp_per_minute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, gold_spent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, hero_damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, tower_damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, hero_healing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, time_last_seen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, support_ability_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, party_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, scaled_kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, scaled_deaths_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, scaled_assists_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, claimed_farm_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, support_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, claimed_denies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, claimed_misses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, misses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, ability_upgrades_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, additional_units_inventory_),
  };
  CMsgGameMatchSignOut_CTeam_CPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGameMatchSignOut_CTeam_CPlayer_descriptor_,
      CMsgGameMatchSignOut_CTeam_CPlayer::default_instance_,
      CMsgGameMatchSignOut_CTeam_CPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGameMatchSignOut_CTeam_CPlayer));
  CMsgGameMatchSignOut_CAdditionalSignoutMsg_descriptor_ = CMsgGameMatchSignOut_descriptor_->nested_type(1);
  static const int CMsgGameMatchSignOut_CAdditionalSignoutMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CAdditionalSignoutMsg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CAdditionalSignoutMsg, contents_),
  };
  CMsgGameMatchSignOut_CAdditionalSignoutMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGameMatchSignOut_CAdditionalSignoutMsg_descriptor_,
      CMsgGameMatchSignOut_CAdditionalSignoutMsg::default_instance_,
      CMsgGameMatchSignOut_CAdditionalSignoutMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CAdditionalSignoutMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOut_CAdditionalSignoutMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGameMatchSignOut_CAdditionalSignoutMsg));
  CMsgGameMatchSignoutResponse_descriptor_ = file->message_type(9);
  static const int CMsgGameMatchSignoutResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse, replay_salt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse, timed_reward_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse, xp_reward_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse, leagueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse, additional_msgs_),
  };
  CMsgGameMatchSignoutResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGameMatchSignoutResponse_descriptor_,
      CMsgGameMatchSignoutResponse::default_instance_,
      CMsgGameMatchSignoutResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGameMatchSignoutResponse));
  CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg_descriptor_ = CMsgGameMatchSignoutResponse_descriptor_->nested_type(0);
  static const int CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg, contents_),
  };
  CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg_descriptor_,
      CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::default_instance_,
      CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg));
  CMsgGameMatchSignOutPermissionRequest_descriptor_ = file->message_type(10);
  static const int CMsgGameMatchSignOutPermissionRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOutPermissionRequest, server_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOutPermissionRequest, local_attempt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOutPermissionRequest, total_attempt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOutPermissionRequest, seconds_waited_),
  };
  CMsgGameMatchSignOutPermissionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGameMatchSignOutPermissionRequest_descriptor_,
      CMsgGameMatchSignOutPermissionRequest::default_instance_,
      CMsgGameMatchSignOutPermissionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOutPermissionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOutPermissionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGameMatchSignOutPermissionRequest));
  CMsgGameMatchSignOutPermissionResponse_descriptor_ = file->message_type(11);
  static const int CMsgGameMatchSignOutPermissionResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOutPermissionResponse, permission_granted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOutPermissionResponse, abandon_signout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOutPermissionResponse, retry_delay_seconds_),
  };
  CMsgGameMatchSignOutPermissionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGameMatchSignOutPermissionResponse_descriptor_,
      CMsgGameMatchSignOutPermissionResponse::default_instance_,
      CMsgGameMatchSignOutPermissionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOutPermissionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameMatchSignOutPermissionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGameMatchSignOutPermissionResponse));
  CMsgGameChatLog_descriptor_ = file->message_type(12);
  static const int CMsgGameChatLog_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameChatLog, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameChatLog, lines_),
  };
  CMsgGameChatLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGameChatLog_descriptor_,
      CMsgGameChatLog::default_instance_,
      CMsgGameChatLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameChatLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameChatLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGameChatLog));
  CMsgGameChatLog_CChatLine_descriptor_ = CMsgGameChatLog_descriptor_->nested_type(0);
  static const int CMsgGameChatLog_CChatLine_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameChatLog_CChatLine, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameChatLog_CChatLine, team_only_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameChatLog_CChatLine, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameChatLog_CChatLine, game_time_),
  };
  CMsgGameChatLog_CChatLine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGameChatLog_CChatLine_descriptor_,
      CMsgGameChatLog_CChatLine::default_instance_,
      CMsgGameChatLog_CChatLine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameChatLog_CChatLine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameChatLog_CChatLine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGameChatLog_CChatLine));
  CMsgDOTALiveScoreboardUpdate_descriptor_ = file->message_type(13);
  static const int CMsgDOTALiveScoreboardUpdate_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate, tournament_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate, tournament_game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate, hltv_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate, team_good_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate, team_bad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate, roshan_respawn_timer_),
  };
  CMsgDOTALiveScoreboardUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTALiveScoreboardUpdate_descriptor_,
      CMsgDOTALiveScoreboardUpdate::default_instance_,
      CMsgDOTALiveScoreboardUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTALiveScoreboardUpdate));
  CMsgDOTALiveScoreboardUpdate_Team_descriptor_ = CMsgDOTALiveScoreboardUpdate_descriptor_->nested_type(0);
  static const int CMsgDOTALiveScoreboardUpdate_Team_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team, score_),
  };
  CMsgDOTALiveScoreboardUpdate_Team_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTALiveScoreboardUpdate_Team_descriptor_,
      CMsgDOTALiveScoreboardUpdate_Team::default_instance_,
      CMsgDOTALiveScoreboardUpdate_Team_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTALiveScoreboardUpdate_Team));
  CMsgDOTALiveScoreboardUpdate_Team_Player_descriptor_ = CMsgDOTALiveScoreboardUpdate_Team_descriptor_->nested_type(0);
  static const int CMsgDOTALiveScoreboardUpdate_Team_Player_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, player_slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, hero_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, deaths_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, assists_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, last_hits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, denies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, gold_per_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, xp_per_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, ultimate_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, ultimate_cooldown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, item0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, item1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, item2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, item3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, item4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, item5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, respawn_timer_),
  };
  CMsgDOTALiveScoreboardUpdate_Team_Player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTALiveScoreboardUpdate_Team_Player_descriptor_,
      CMsgDOTALiveScoreboardUpdate_Team_Player::default_instance_,
      CMsgDOTALiveScoreboardUpdate_Team_Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTALiveScoreboardUpdate_Team_Player));
  CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_descriptor_ = CMsgDOTALiveScoreboardUpdate_Team_Player_descriptor_->enum_type(0);
  CMsgDOTARequestPlayerResources_descriptor_ = file->message_type(14);
  static const int CMsgDOTARequestPlayerResources_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestPlayerResources, steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestPlayerResources, player_id_),
  };
  CMsgDOTARequestPlayerResources_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTARequestPlayerResources_descriptor_,
      CMsgDOTARequestPlayerResources::default_instance_,
      CMsgDOTARequestPlayerResources_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestPlayerResources, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestPlayerResources, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTARequestPlayerResources));
  CMsgDOTARequestPlayerResourcesResponse_descriptor_ = file->message_type(15);
  static const int CMsgDOTARequestPlayerResourcesResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestPlayerResourcesResponse, steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestPlayerResourcesResponse, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestPlayerResourcesResponse, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestPlayerResourcesResponse, prevent_text_chat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestPlayerResourcesResponse, prevent_voice_chat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestPlayerResourcesResponse, low_priority_),
  };
  CMsgDOTARequestPlayerResourcesResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTARequestPlayerResourcesResponse_descriptor_,
      CMsgDOTARequestPlayerResourcesResponse::default_instance_,
      CMsgDOTARequestPlayerResourcesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestPlayerResourcesResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestPlayerResourcesResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTARequestPlayerResourcesResponse));
  CMsgDOTARequestBatchPlayerResources_descriptor_ = file->message_type(16);
  static const int CMsgDOTARequestBatchPlayerResources_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestBatchPlayerResources, account_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestBatchPlayerResources, rank_use_competitive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestBatchPlayerResources, rank_use_solo_),
  };
  CMsgDOTARequestBatchPlayerResources_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTARequestBatchPlayerResources_descriptor_,
      CMsgDOTARequestBatchPlayerResources::default_instance_,
      CMsgDOTARequestBatchPlayerResources_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestBatchPlayerResources, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestBatchPlayerResources, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTARequestBatchPlayerResources));
  CMsgDOTARequestBatchPlayerResourcesResponse_descriptor_ = file->message_type(17);
  static const int CMsgDOTARequestBatchPlayerResourcesResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestBatchPlayerResourcesResponse, results_),
  };
  CMsgDOTARequestBatchPlayerResourcesResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTARequestBatchPlayerResourcesResponse_descriptor_,
      CMsgDOTARequestBatchPlayerResourcesResponse::default_instance_,
      CMsgDOTARequestBatchPlayerResourcesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestBatchPlayerResourcesResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestBatchPlayerResourcesResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTARequestBatchPlayerResourcesResponse));
  CMsgDOTARequestBatchPlayerResourcesResponse_Result_descriptor_ = CMsgDOTARequestBatchPlayerResourcesResponse_descriptor_->nested_type(0);
  static const int CMsgDOTARequestBatchPlayerResourcesResponse_Result_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestBatchPlayerResourcesResponse_Result, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestBatchPlayerResourcesResponse_Result, prevent_text_chat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestBatchPlayerResourcesResponse_Result, prevent_voice_chat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestBatchPlayerResourcesResponse_Result, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestBatchPlayerResourcesResponse_Result, rank_calibrated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestBatchPlayerResourcesResponse_Result, low_priority_),
  };
  CMsgDOTARequestBatchPlayerResourcesResponse_Result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTARequestBatchPlayerResourcesResponse_Result_descriptor_,
      CMsgDOTARequestBatchPlayerResourcesResponse_Result::default_instance_,
      CMsgDOTARequestBatchPlayerResourcesResponse_Result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestBatchPlayerResourcesResponse_Result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestBatchPlayerResourcesResponse_Result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTARequestBatchPlayerResourcesResponse_Result));
  CMsgDOTAPlayerFailedToConnect_descriptor_ = file->message_type(18);
  static const int CMsgDOTAPlayerFailedToConnect_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPlayerFailedToConnect, failed_loaders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPlayerFailedToConnect, abandoned_loaders_),
  };
  CMsgDOTAPlayerFailedToConnect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAPlayerFailedToConnect_descriptor_,
      CMsgDOTAPlayerFailedToConnect::default_instance_,
      CMsgDOTAPlayerFailedToConnect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPlayerFailedToConnect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPlayerFailedToConnect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAPlayerFailedToConnect));
  CMsgGCToRelayConnect_descriptor_ = file->message_type(19);
  static const int CMsgGCToRelayConnect_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToRelayConnect, source_tv_public_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToRelayConnect, source_tv_private_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToRelayConnect, source_tv_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToRelayConnect, game_server_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToRelayConnect, parent_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToRelayConnect, tv_unique_secret_code_),
  };
  CMsgGCToRelayConnect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCToRelayConnect_descriptor_,
      CMsgGCToRelayConnect::default_instance_,
      CMsgGCToRelayConnect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToRelayConnect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToRelayConnect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCToRelayConnect));
  CMsgGCToRelayConnectResponse_descriptor_ = file->message_type(20);
  static const int CMsgGCToRelayConnectResponse_offsets_[1] = {
  };
  CMsgGCToRelayConnectResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCToRelayConnectResponse_descriptor_,
      CMsgGCToRelayConnectResponse::default_instance_,
      CMsgGCToRelayConnectResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToRelayConnectResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToRelayConnectResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCToRelayConnectResponse));
  CMsgGCBanStatusRequest_descriptor_ = file->message_type(21);
  static const int CMsgGCBanStatusRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCBanStatusRequest, account_id_),
  };
  CMsgGCBanStatusRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCBanStatusRequest_descriptor_,
      CMsgGCBanStatusRequest::default_instance_,
      CMsgGCBanStatusRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCBanStatusRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCBanStatusRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCBanStatusRequest));
  CMsgGCBanStatusResponse_descriptor_ = file->message_type(22);
  static const int CMsgGCBanStatusResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCBanStatusResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCBanStatusResponse, low_priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCBanStatusResponse, text_chat_banned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCBanStatusResponse, voice_chat_banned_),
  };
  CMsgGCBanStatusResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCBanStatusResponse_descriptor_,
      CMsgGCBanStatusResponse::default_instance_,
      CMsgGCBanStatusResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCBanStatusResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCBanStatusResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCBanStatusResponse));
  CMsgTournamentItemEvent_descriptor_ = file->message_type(23);
  static const int CMsgTournamentItemEvent_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEvent, killer_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEvent, victim_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEvent, event_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEvent, tv_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEvent, dota_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEvent, replay_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEvent, loot_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEvent, event_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEvent, multi_kill_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEvent, winner_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEvent, loser_score_),
  };
  CMsgTournamentItemEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTournamentItemEvent_descriptor_,
      CMsgTournamentItemEvent::default_instance_,
      CMsgTournamentItemEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTournamentItemEvent));
  CMsgTournamentItemEventResponse_descriptor_ = file->message_type(24);
  static const int CMsgTournamentItemEventResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEventResponse, event_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEventResponse, winner_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEventResponse, tv_delayed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEventResponse, inhall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEventResponse, itemdef_),
  };
  CMsgTournamentItemEventResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTournamentItemEventResponse_descriptor_,
      CMsgTournamentItemEventResponse::default_instance_,
      CMsgTournamentItemEventResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEventResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTournamentItemEventResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTournamentItemEventResponse));
  CMsgTeamFanfare_descriptor_ = file->message_type(25);
  static const int CMsgTeamFanfare_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTeamFanfare, match_id_),
  };
  CMsgTeamFanfare_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTeamFanfare_descriptor_,
      CMsgTeamFanfare::default_instance_,
      CMsgTeamFanfare_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTeamFanfare, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTeamFanfare, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTeamFanfare));
  CMsgResponseTeamFanfare_descriptor_ = file->message_type(26);
  static const int CMsgResponseTeamFanfare_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgResponseTeamFanfare, fanfare_goodguys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgResponseTeamFanfare, fanfare_badguys_),
  };
  CMsgResponseTeamFanfare_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgResponseTeamFanfare_descriptor_,
      CMsgResponseTeamFanfare::default_instance_,
      CMsgResponseTeamFanfare_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgResponseTeamFanfare, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgResponseTeamFanfare, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgResponseTeamFanfare));
  CMsgGameServerUploadSaveGame_descriptor_ = file->message_type(27);
  static const int CMsgGameServerUploadSaveGame_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerUploadSaveGame, game_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerUploadSaveGame, save_game_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerUploadSaveGame, lobby_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerUploadSaveGame, player_steam_ids_),
  };
  CMsgGameServerUploadSaveGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGameServerUploadSaveGame_descriptor_,
      CMsgGameServerUploadSaveGame::default_instance_,
      CMsgGameServerUploadSaveGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerUploadSaveGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerUploadSaveGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGameServerUploadSaveGame));
  CMsgGameServerSaveGameResult_descriptor_ = file->message_type(28);
  static const int CMsgGameServerSaveGameResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerSaveGameResult, result_),
  };
  CMsgGameServerSaveGameResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGameServerSaveGameResult_descriptor_,
      CMsgGameServerSaveGameResult::default_instance_,
      CMsgGameServerSaveGameResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerSaveGameResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerSaveGameResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGameServerSaveGameResult));
  CMsgGameServerSaveGameResult_Result_descriptor_ = CMsgGameServerSaveGameResult_descriptor_->enum_type(0);
  CMsgGameServerGetLoadGame_descriptor_ = file->message_type(29);
  static const int CMsgGameServerGetLoadGame_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerGetLoadGame, save_id_),
  };
  CMsgGameServerGetLoadGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGameServerGetLoadGame_descriptor_,
      CMsgGameServerGetLoadGame::default_instance_,
      CMsgGameServerGetLoadGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerGetLoadGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerGetLoadGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGameServerGetLoadGame));
  CMsgGameServerGetLoadGameResult_descriptor_ = file->message_type(30);
  static const int CMsgGameServerGetLoadGameResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerGetLoadGameResult, save_game_data_),
  };
  CMsgGameServerGetLoadGameResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGameServerGetLoadGameResult_descriptor_,
      CMsgGameServerGetLoadGameResult::default_instance_,
      CMsgGameServerGetLoadGameResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerGetLoadGameResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGameServerGetLoadGameResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGameServerGetLoadGameResult));
  CMsgDOTAGenerateDiretidePrizeList_descriptor_ = file->message_type(31);
  static const int CMsgDOTAGenerateDiretidePrizeList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGenerateDiretidePrizeList, prize_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGenerateDiretidePrizeList, highest_roshan_level_),
  };
  CMsgDOTAGenerateDiretidePrizeList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAGenerateDiretidePrizeList_descriptor_,
      CMsgDOTAGenerateDiretidePrizeList::default_instance_,
      CMsgDOTAGenerateDiretidePrizeList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGenerateDiretidePrizeList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGenerateDiretidePrizeList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAGenerateDiretidePrizeList));
  CMsgDOTAGenerateDiretidePrizeListResponse_descriptor_ = file->message_type(32);
  static const int CMsgDOTAGenerateDiretidePrizeListResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGenerateDiretidePrizeListResponse, item_defs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGenerateDiretidePrizeListResponse, steam_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGenerateDiretidePrizeListResponse, prize_list_),
  };
  CMsgDOTAGenerateDiretidePrizeListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAGenerateDiretidePrizeListResponse_descriptor_,
      CMsgDOTAGenerateDiretidePrizeListResponse::default_instance_,
      CMsgDOTAGenerateDiretidePrizeListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGenerateDiretidePrizeListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGenerateDiretidePrizeListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAGenerateDiretidePrizeListResponse));
  CMsgDOTARewardDiretidePrizes_descriptor_ = file->message_type(33);
  static const int CMsgDOTARewardDiretidePrizes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARewardDiretidePrizes, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARewardDiretidePrizes, prize_list_),
  };
  CMsgDOTARewardDiretidePrizes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTARewardDiretidePrizes_descriptor_,
      CMsgDOTARewardDiretidePrizes::default_instance_,
      CMsgDOTARewardDiretidePrizes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARewardDiretidePrizes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARewardDiretidePrizes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTARewardDiretidePrizes));
  CMsgDOTADiretidePrizesRewardedResponse_descriptor_ = file->message_type(34);
  static const int CMsgDOTADiretidePrizesRewardedResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTADiretidePrizesRewardedResponse, prize_list_),
  };
  CMsgDOTADiretidePrizesRewardedResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTADiretidePrizesRewardedResponse_descriptor_,
      CMsgDOTADiretidePrizesRewardedResponse::default_instance_,
      CMsgDOTADiretidePrizesRewardedResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTADiretidePrizesRewardedResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTADiretidePrizesRewardedResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTADiretidePrizesRewardedResponse));
  CMsgDOTAAwardEventPoints_descriptor_ = file->message_type(35);
  static const int CMsgDOTAAwardEventPoints_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAwardEventPoints, award_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAwardEventPoints, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAwardEventPoints, event_id_),
  };
  CMsgDOTAAwardEventPoints_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAAwardEventPoints_descriptor_,
      CMsgDOTAAwardEventPoints::default_instance_,
      CMsgDOTAAwardEventPoints_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAwardEventPoints, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAwardEventPoints, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAAwardEventPoints));
  CMsgDOTAAwardEventPoints_AwardPoints_descriptor_ = CMsgDOTAAwardEventPoints_descriptor_->nested_type(0);
  static const int CMsgDOTAAwardEventPoints_AwardPoints_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAwardEventPoints_AwardPoints, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAwardEventPoints_AwardPoints, points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAwardEventPoints_AwardPoints, premium_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAwardEventPoints_AwardPoints, rank_),
  };
  CMsgDOTAAwardEventPoints_AwardPoints_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAAwardEventPoints_AwardPoints_descriptor_,
      CMsgDOTAAwardEventPoints_AwardPoints::default_instance_,
      CMsgDOTAAwardEventPoints_AwardPoints_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAwardEventPoints_AwardPoints, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAwardEventPoints_AwardPoints, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAAwardEventPoints_AwardPoints));
  CMsgDOTAFrostivusTimeElapsed_descriptor_ = file->message_type(36);
  static const int CMsgDOTAFrostivusTimeElapsed_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFrostivusTimeElapsed, seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFrostivusTimeElapsed, users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFrostivusTimeElapsed, match_id_),
  };
  CMsgDOTAFrostivusTimeElapsed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAFrostivusTimeElapsed_descriptor_,
      CMsgDOTAFrostivusTimeElapsed::default_instance_,
      CMsgDOTAFrostivusTimeElapsed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFrostivusTimeElapsed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFrostivusTimeElapsed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAFrostivusTimeElapsed));
  CMsgDOTAFrostivusTimeElapsed_User_descriptor_ = CMsgDOTAFrostivusTimeElapsed_descriptor_->nested_type(0);
  static const int CMsgDOTAFrostivusTimeElapsed_User_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFrostivusTimeElapsed_User, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFrostivusTimeElapsed_User, time_elapsed_s_),
  };
  CMsgDOTAFrostivusTimeElapsed_User_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAFrostivusTimeElapsed_User_descriptor_,
      CMsgDOTAFrostivusTimeElapsed_User::default_instance_,
      CMsgDOTAFrostivusTimeElapsed_User_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFrostivusTimeElapsed_User, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFrostivusTimeElapsed_User, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAFrostivusTimeElapsed_User));
  CMsgGCToServerPingRequest_descriptor_ = file->message_type(37);
  static const int CMsgGCToServerPingRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPingRequest, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPingRequest, request_time_),
  };
  CMsgGCToServerPingRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCToServerPingRequest_descriptor_,
      CMsgGCToServerPingRequest::default_instance_,
      CMsgGCToServerPingRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPingRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPingRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCToServerPingRequest));
  CMsgGCToServerPingResponse_descriptor_ = file->message_type(38);
  static const int CMsgGCToServerPingResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPingResponse, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPingResponse, request_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPingResponse, cluster_),
  };
  CMsgGCToServerPingResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCToServerPingResponse_descriptor_,
      CMsgGCToServerPingResponse::default_instance_,
      CMsgGCToServerPingResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPingResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerPingResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCToServerPingResponse));
  CMsgGCToServerConsoleCommand_descriptor_ = file->message_type(39);
  static const int CMsgGCToServerConsoleCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerConsoleCommand, console_command_),
  };
  CMsgGCToServerConsoleCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCToServerConsoleCommand_descriptor_,
      CMsgGCToServerConsoleCommand::default_instance_,
      CMsgGCToServerConsoleCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerConsoleCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToServerConsoleCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCToServerConsoleCommand));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dota_5fgcmessages_5fserver_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSpawnLootGreevil_descriptor_, &CMsgSpawnLootGreevil::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDismissLootGreevil_descriptor_, &CMsgDismissLootGreevil::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDismissLootGreevilResponse_descriptor_, &CMsgDismissLootGreevilResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgConnectedPlayers_descriptor_, &CMsgConnectedPlayers::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgConnectedPlayers_Player_descriptor_, &CMsgConnectedPlayers_Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGameServerInfo_descriptor_, &CMsgGameServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgLeaverDetected_descriptor_, &CMsgLeaverDetected::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgLeaverDetectedResponse_descriptor_, &CMsgLeaverDetectedResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAFantasyPlayerStats_descriptor_, &CMsgDOTAFantasyPlayerStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGameMatchSignOut_descriptor_, &CMsgGameMatchSignOut::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGameMatchSignOut_CTeam_descriptor_, &CMsgGameMatchSignOut_CTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGameMatchSignOut_CTeam_CPlayer_descriptor_, &CMsgGameMatchSignOut_CTeam_CPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGameMatchSignOut_CAdditionalSignoutMsg_descriptor_, &CMsgGameMatchSignOut_CAdditionalSignoutMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGameMatchSignoutResponse_descriptor_, &CMsgGameMatchSignoutResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg_descriptor_, &CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGameMatchSignOutPermissionRequest_descriptor_, &CMsgGameMatchSignOutPermissionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGameMatchSignOutPermissionResponse_descriptor_, &CMsgGameMatchSignOutPermissionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGameChatLog_descriptor_, &CMsgGameChatLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGameChatLog_CChatLine_descriptor_, &CMsgGameChatLog_CChatLine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTALiveScoreboardUpdate_descriptor_, &CMsgDOTALiveScoreboardUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTALiveScoreboardUpdate_Team_descriptor_, &CMsgDOTALiveScoreboardUpdate_Team::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTALiveScoreboardUpdate_Team_Player_descriptor_, &CMsgDOTALiveScoreboardUpdate_Team_Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTARequestPlayerResources_descriptor_, &CMsgDOTARequestPlayerResources::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTARequestPlayerResourcesResponse_descriptor_, &CMsgDOTARequestPlayerResourcesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTARequestBatchPlayerResources_descriptor_, &CMsgDOTARequestBatchPlayerResources::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTARequestBatchPlayerResourcesResponse_descriptor_, &CMsgDOTARequestBatchPlayerResourcesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTARequestBatchPlayerResourcesResponse_Result_descriptor_, &CMsgDOTARequestBatchPlayerResourcesResponse_Result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAPlayerFailedToConnect_descriptor_, &CMsgDOTAPlayerFailedToConnect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCToRelayConnect_descriptor_, &CMsgGCToRelayConnect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCToRelayConnectResponse_descriptor_, &CMsgGCToRelayConnectResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCBanStatusRequest_descriptor_, &CMsgGCBanStatusRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCBanStatusResponse_descriptor_, &CMsgGCBanStatusResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTournamentItemEvent_descriptor_, &CMsgTournamentItemEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTournamentItemEventResponse_descriptor_, &CMsgTournamentItemEventResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTeamFanfare_descriptor_, &CMsgTeamFanfare::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgResponseTeamFanfare_descriptor_, &CMsgResponseTeamFanfare::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGameServerUploadSaveGame_descriptor_, &CMsgGameServerUploadSaveGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGameServerSaveGameResult_descriptor_, &CMsgGameServerSaveGameResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGameServerGetLoadGame_descriptor_, &CMsgGameServerGetLoadGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGameServerGetLoadGameResult_descriptor_, &CMsgGameServerGetLoadGameResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAGenerateDiretidePrizeList_descriptor_, &CMsgDOTAGenerateDiretidePrizeList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAGenerateDiretidePrizeListResponse_descriptor_, &CMsgDOTAGenerateDiretidePrizeListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTARewardDiretidePrizes_descriptor_, &CMsgDOTARewardDiretidePrizes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTADiretidePrizesRewardedResponse_descriptor_, &CMsgDOTADiretidePrizesRewardedResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAAwardEventPoints_descriptor_, &CMsgDOTAAwardEventPoints::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAAwardEventPoints_AwardPoints_descriptor_, &CMsgDOTAAwardEventPoints_AwardPoints::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAFrostivusTimeElapsed_descriptor_, &CMsgDOTAFrostivusTimeElapsed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAFrostivusTimeElapsed_User_descriptor_, &CMsgDOTAFrostivusTimeElapsed_User::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCToServerPingRequest_descriptor_, &CMsgGCToServerPingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCToServerPingResponse_descriptor_, &CMsgGCToServerPingResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCToServerConsoleCommand_descriptor_, &CMsgGCToServerConsoleCommand::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto() {
  delete CMsgSpawnLootGreevil::default_instance_;
  delete CMsgSpawnLootGreevil_reflection_;
  delete CMsgDismissLootGreevil::default_instance_;
  delete CMsgDismissLootGreevil_reflection_;
  delete CMsgDismissLootGreevilResponse::default_instance_;
  delete CMsgDismissLootGreevilResponse_reflection_;
  delete CMsgConnectedPlayers::default_instance_;
  delete CMsgConnectedPlayers_reflection_;
  delete CMsgConnectedPlayers_Player::default_instance_;
  delete CMsgConnectedPlayers_Player_reflection_;
  delete CMsgGameServerInfo::default_instance_;
  delete CMsgGameServerInfo_reflection_;
  delete CMsgLeaverDetected::default_instance_;
  delete CMsgLeaverDetected_reflection_;
  delete CMsgLeaverDetectedResponse::default_instance_;
  delete CMsgLeaverDetectedResponse_reflection_;
  delete CMsgDOTAFantasyPlayerStats::default_instance_;
  delete CMsgDOTAFantasyPlayerStats_reflection_;
  delete CMsgGameMatchSignOut::default_instance_;
  delete CMsgGameMatchSignOut_reflection_;
  delete CMsgGameMatchSignOut_CTeam::default_instance_;
  delete CMsgGameMatchSignOut_CTeam_reflection_;
  delete CMsgGameMatchSignOut_CTeam_CPlayer::default_instance_;
  delete CMsgGameMatchSignOut_CTeam_CPlayer_reflection_;
  delete CMsgGameMatchSignOut_CAdditionalSignoutMsg::default_instance_;
  delete CMsgGameMatchSignOut_CAdditionalSignoutMsg_reflection_;
  delete CMsgGameMatchSignoutResponse::default_instance_;
  delete CMsgGameMatchSignoutResponse_reflection_;
  delete CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::default_instance_;
  delete CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg_reflection_;
  delete CMsgGameMatchSignOutPermissionRequest::default_instance_;
  delete CMsgGameMatchSignOutPermissionRequest_reflection_;
  delete CMsgGameMatchSignOutPermissionResponse::default_instance_;
  delete CMsgGameMatchSignOutPermissionResponse_reflection_;
  delete CMsgGameChatLog::default_instance_;
  delete CMsgGameChatLog_reflection_;
  delete CMsgGameChatLog_CChatLine::default_instance_;
  delete CMsgGameChatLog_CChatLine_reflection_;
  delete CMsgDOTALiveScoreboardUpdate::default_instance_;
  delete CMsgDOTALiveScoreboardUpdate_reflection_;
  delete CMsgDOTALiveScoreboardUpdate_Team::default_instance_;
  delete CMsgDOTALiveScoreboardUpdate_Team_reflection_;
  delete CMsgDOTALiveScoreboardUpdate_Team_Player::default_instance_;
  delete CMsgDOTALiveScoreboardUpdate_Team_Player_reflection_;
  delete CMsgDOTARequestPlayerResources::default_instance_;
  delete CMsgDOTARequestPlayerResources_reflection_;
  delete CMsgDOTARequestPlayerResourcesResponse::default_instance_;
  delete CMsgDOTARequestPlayerResourcesResponse_reflection_;
  delete CMsgDOTARequestBatchPlayerResources::default_instance_;
  delete CMsgDOTARequestBatchPlayerResources_reflection_;
  delete CMsgDOTARequestBatchPlayerResourcesResponse::default_instance_;
  delete CMsgDOTARequestBatchPlayerResourcesResponse_reflection_;
  delete CMsgDOTARequestBatchPlayerResourcesResponse_Result::default_instance_;
  delete CMsgDOTARequestBatchPlayerResourcesResponse_Result_reflection_;
  delete CMsgDOTAPlayerFailedToConnect::default_instance_;
  delete CMsgDOTAPlayerFailedToConnect_reflection_;
  delete CMsgGCToRelayConnect::default_instance_;
  delete CMsgGCToRelayConnect_reflection_;
  delete CMsgGCToRelayConnectResponse::default_instance_;
  delete CMsgGCToRelayConnectResponse_reflection_;
  delete CMsgGCBanStatusRequest::default_instance_;
  delete CMsgGCBanStatusRequest_reflection_;
  delete CMsgGCBanStatusResponse::default_instance_;
  delete CMsgGCBanStatusResponse_reflection_;
  delete CMsgTournamentItemEvent::default_instance_;
  delete CMsgTournamentItemEvent_reflection_;
  delete CMsgTournamentItemEventResponse::default_instance_;
  delete CMsgTournamentItemEventResponse_reflection_;
  delete CMsgTeamFanfare::default_instance_;
  delete CMsgTeamFanfare_reflection_;
  delete CMsgResponseTeamFanfare::default_instance_;
  delete CMsgResponseTeamFanfare_reflection_;
  delete CMsgGameServerUploadSaveGame::default_instance_;
  delete CMsgGameServerUploadSaveGame_reflection_;
  delete CMsgGameServerSaveGameResult::default_instance_;
  delete CMsgGameServerSaveGameResult_reflection_;
  delete CMsgGameServerGetLoadGame::default_instance_;
  delete CMsgGameServerGetLoadGame_reflection_;
  delete CMsgGameServerGetLoadGameResult::default_instance_;
  delete CMsgGameServerGetLoadGameResult_reflection_;
  delete CMsgDOTAGenerateDiretidePrizeList::default_instance_;
  delete CMsgDOTAGenerateDiretidePrizeList_reflection_;
  delete CMsgDOTAGenerateDiretidePrizeListResponse::default_instance_;
  delete CMsgDOTAGenerateDiretidePrizeListResponse_reflection_;
  delete CMsgDOTARewardDiretidePrizes::default_instance_;
  delete CMsgDOTARewardDiretidePrizes_reflection_;
  delete CMsgDOTADiretidePrizesRewardedResponse::default_instance_;
  delete CMsgDOTADiretidePrizesRewardedResponse_reflection_;
  delete CMsgDOTAAwardEventPoints::default_instance_;
  delete CMsgDOTAAwardEventPoints_reflection_;
  delete CMsgDOTAAwardEventPoints_AwardPoints::default_instance_;
  delete CMsgDOTAAwardEventPoints_AwardPoints_reflection_;
  delete CMsgDOTAFrostivusTimeElapsed::default_instance_;
  delete CMsgDOTAFrostivusTimeElapsed_reflection_;
  delete CMsgDOTAFrostivusTimeElapsed_User::default_instance_;
  delete CMsgDOTAFrostivusTimeElapsed_User_reflection_;
  delete CMsgGCToServerPingRequest::default_instance_;
  delete CMsgGCToServerPingRequest_reflection_;
  delete CMsgGCToServerPingResponse::default_instance_;
  delete CMsgGCToServerPingResponse_reflection_;
  delete CMsgGCToServerConsoleCommand::default_instance_;
  delete CMsgGCToServerConsoleCommand_reflection_;
}

void protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_steammessages_2eproto();
  ::protobuf_AddDesc_matchmaker_5fcommon_2eproto();
  ::protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  ::protobuf_AddDesc_econ_5fgcmessages_2eproto();
  ::protobuf_AddDesc_network_5fconnection_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034dota_gcmessages_server.proto\032\023steammes"
    "sages.proto\032\027matchmaker_common.proto\032\034do"
    "ta_gcmessages_common.proto\032\025econ_gcmessa"
    "ges.proto\032\030network_connection.proto\"$\n\024C"
    "MsgSpawnLootGreevil\022\014\n\004rare\030\001 \001(\010\"6\n\026CMs"
    "gDismissLootGreevil\022\016\n\006killed\030\002 \001(\010\022\014\n\004r"
    "are\030\003 \001(\010\" \n\036CMsgDismissLootGreevilRespo"
    "nse\"\224\006\n\024CMsgConnectedPlayers\0227\n\021connecte"
    "d_players\030\001 \003(\0132\034.CMsgConnectedPlayers.P"
    "layer\022:\n\024disconnected_players\030\007 \003(\0132\034.CM"
    "sgConnectedPlayers.Player\022>\n\ngame_state\030"
    "\002 \001(\0162\017.DOTA_GameState:\031DOTA_GAMERULES_S"
    "TATE_INIT\022\026\n\016num_spectators\030\003 \001(\r\022\023\n\013tow"
    "er_state\030\004 \001(\r\022\034\n\024first_blood_happened\030\006"
    " \001(\010\022>\n\013send_reason\030\010 \001(\0162 .CMsgConnecte"
    "dPlayers.SendReason:\007INVALID\032\250\001\n\006Player\022"
    "\020\n\010steam_id\030\001 \001(\006\022\017\n\007hero_id\030\002 \001(\r\022&\n\014le"
    "aver_state\030\003 \001(\0132\020.CMsgLeaverState\022S\n\021di"
    "sconnect_reason\030\004 \001(\0162\034.ENetworkDisconne"
    "ctionReason:\032NETWORK_DISCONNECT_INVALID\""
    "\220\002\n\nSendReason\022\013\n\007INVALID\020\000\022\r\n\tHEARTBEAT"
    "\020\001\022\016\n\nGAME_STATE\020\002\022\017\n\013FIRST_BLOOD\020\003\022\024\n\020P"
    "LAYER_CONNECTED\020\004\022\017\n\013PLAYER_HERO\020\005\022$\n PL"
    "AYER_DISCONNECTED_CONSEQUENCES\020\006\022&\n\"PLAY"
    "ER_DISCONNECTED_NOCONSEQUENCES\020\007\022\023\n\017SPEC"
    "TATOR_COUNT\020\010\022\017\n\013TOWER_STATE\020\t\022\025\n\021GAMEST"
    "ATE_TIMEOUT\020\n\022\023\n\017MASS_DISCONNECT\020\013\"\230\005\n\022C"
    "MsgGameServerInfo\022\035\n\025server_public_ip_ad"
    "dr\030\001 \001(\007\022\036\n\026server_private_ip_addr\030\002 \001(\007"
    "\022\023\n\013server_port\030\003 \001(\r\022\026\n\016server_tv_port\030"
    "\004 \001(\r\022\022\n\nserver_key\030\005 \001(\t\022\032\n\022server_hibe"
    "rnation\030\006 \001(\010\022@\n\013server_type\030\007 \001(\0162\036.CMs"
    "gGameServerInfo.ServerType:\013UNSPECIFIED\022"
    "\025\n\rserver_region\030\010 \001(\r\022\026\n\016server_loadavg"
    "\030\t \001(\002\022 \n\030server_tv_broadcast_time\030\n \001(\002"
    "\022\030\n\020server_game_time\030\013 \001(\002\022\'\n\037server_rel"
    "ay_connected_steam_id\030\014 \001(\006\022\027\n\017relay_slo"
    "ts_max\030\r \001(\r\022\030\n\020relays_connected\030\016 \001(\005\022\037"
    "\n\027relay_clients_connected\030\017 \001(\005\022$\n\034relay"
    "ed_game_server_steam_id\030\020 \001(\006\022\032\n\022parent_"
    "relay_count\030\021 \001(\r\022\026\n\016tv_secret_code\030\022 \001("
    "\006\022\026\n\016server_version\030\023 \001(\r\022\026\n\016server_clus"
    "ter\030\024 \001(\r\"2\n\nServerType\022\017\n\013UNSPECIFIED\020\000"
    "\022\010\n\004GAME\020\001\022\t\n\005PROXY\020\002\"\233\002\n\022CMsgLeaverDete"
    "cted\022\020\n\010steam_id\030\001 \001(\006\022<\n\rleaver_status\030"
    "\002 \001(\0162\023.DOTALeaverStatus_t:\020DOTA_LEAVER_"
    "NONE\022 \n\030obsolete_mass_disconnect\030\003 \001(\010\022&"
    "\n\014leaver_state\030\004 \001(\0132\020.CMsgLeaverState\022\026"
    "\n\016server_cluster\030\005 \001(\r\022S\n\021disconnect_rea"
    "son\030\006 \001(\0162\034.ENetworkDisconnectionReason:"
    "\032NETWORK_DISCONNECT_INVALID\",\n\032CMsgLeave"
    "rDetectedResponse\022\016\n\006result\030\001 \001(\r\"\252\002\n\032CM"
    "sgDOTAFantasyPlayerStats\022\031\n\021player_accou"
    "nt_id\030\001 \001(\r\022\020\n\010match_id\030\002 \001(\r\022\027\n\017match_c"
    "ompleted\030\003 \001(\010\022\r\n\005level\030\004 \001(\r\022\r\n\005kills\030\005"
    " \001(\r\022\016\n\006deaths\030\006 \001(\r\022\017\n\007assists\030\007 \001(\r\022\021\n"
    "\tlast_hits\030\010 \001(\r\022\016\n\006denies\030\t \001(\r\022\013\n\003gpm\030"
    "\n \001(\002\022\014\n\004xppm\030\013 \001(\002\022\r\n\005stuns\030\014 \001(\002\022\017\n\007he"
    "aling\030\r \001(\002\022\023\n\013tower_kills\030\016 \001(\r\022\024\n\014rosh"
    "an_kills\030\017 \001(\r\"\277\013\n\024CMsgGameMatchSignOut\022"
    "\026\n\010match_id\030\001 \001(\rB\004\200\246\035\001\022\020\n\010duration\030\002 \001("
    "\r\022\025\n\rgood_guys_win\030\003 \001(\010\022\014\n\004date\030\004 \001(\007\022\023"
    "\n\013num_players\030\005 \003(\r\022*\n\005teams\030\006 \003(\0132\033.CMs"
    "gGameMatchSignOut.CTeam\022\024\n\014tower_status\030"
    "\010 \003(\r\022\027\n\017barracks_status\030\t \003(\r\022\017\n\007cluste"
    "r\030\n \001(\r\022\023\n\013server_addr\030\013 \001(\t\022\030\n\020first_bl"
    "ood_time\030\014 \001(\r\022\024\n\014game_balance\030\r \001(\002\022\023\n\013"
    "event_score\030\016 \001(\r\022*\n\npicks_bans\030\017 \003(\0132\026."
    "CMatchHeroSelectEvent\0222\n\rfantasy_stats\030\020"
    " \003(\0132\033.CMsgDOTAFantasyPlayerStats\022O\n pla"
    "yer_strange_count_adjustments\030\021 \003(\0132%.CM"
    "sgEconPlayerStrangeCountAdjustment\022\033\n\023au"
    "tomatic_surrender\030\022 \001(\010\022\026\n\016server_versio"
    "n\030\023 \001(\r\022\027\n\017mass_disconnect\030\025 \001(\010\022D\n\017addi"
    "tional_msgs\030\024 \003(\0132+.CMsgGameMatchSignOut"
    ".CAdditionalSignoutMsg\032\200\006\n\005CTeam\0224\n\007play"
    "ers\030\001 \003(\0132#.CMsgGameMatchSignOut.CTeam.C"
    "Player\032\300\005\n\007CPlayer\022\022\n\naccount_id\030\001 \001(\006\022\017"
    "\n\007hero_id\030\003 \001(\r\022\r\n\005items\030\004 \003(\r\022\014\n\004gold\030\005"
    " \001(\r\022\r\n\005kills\030\006 \001(\r\022\016\n\006deaths\030\007 \001(\r\022\017\n\007a"
    "ssists\030\010 \001(\r\022\025\n\rleaver_status\030\t \001(\r\022\021\n\tl"
    "ast_hits\030\n \001(\r\022\016\n\006denies\030\013 \001(\r\022\024\n\014gold_p"
    "er_min\030\014 \001(\r\022\025\n\rxp_per_minute\030\r \001(\r\022\022\n\ng"
    "old_spent\030\016 \001(\r\022\r\n\005level\030\017 \001(\r\022\023\n\013hero_d"
    "amage\030\020 \001(\r\022\024\n\014tower_damage\030\021 \001(\r\022\024\n\014her"
    "o_healing\030\022 \001(\r\022\026\n\016time_last_seen\030\023 \001(\r\022"
    "\035\n\025support_ability_value\030\024 \001(\r\022\020\n\010party_"
    "id\030\025 \001(\004\022\024\n\014scaled_kills\030\030 \001(\002\022\025\n\rscaled"
    "_deaths\030\031 \001(\002\022\026\n\016scaled_assists\030\032 \001(\002\022\031\n"
    "\021claimed_farm_gold\030\033 \001(\r\022\024\n\014support_gold"
    "\030\034 \001(\r\022\026\n\016claimed_denies\030\035 \001(\r\022\026\n\016claime"
    "d_misses\030\036 \001(\r\022\016\n\006misses\030\037 \001(\r\0225\n\020abilit"
    "y_upgrades\030  \003(\0132\033.CMatchPlayerAbilityUp"
    "grade\022B\n\032additional_units_inventory\030! \003("
    "\0132\036.CMatchAdditionalUnitInventory\0325\n\025CAd"
    "ditionalSignoutMsg\022\n\n\002id\030\001 \001(\r\022\020\n\010conten"
    "ts\030\002 \001(\014\"\303\002\n\034CMsgGameMatchSignoutRespons"
    "e\022\020\n\010match_id\030\001 \001(\r\022\023\n\013replay_salt\030\002 \001(\007"
    "\0227\n\024timed_reward_details\030\003 \003(\0132\031.CLobbyT"
    "imedRewardDetails\022,\n\021xp_reward_details\030\004"
    " \003(\0132\021.CDOTALobbyMember\022\020\n\010leagueid\030\005 \001("
    "\r\022L\n\017additional_msgs\030\006 \003(\01323.CMsgGameMat"
    "chSignoutResponse.CAdditionalSignoutMsg\032"
    "5\n\025CAdditionalSignoutMsg\022\n\n\002id\030\001 \001(\r\022\020\n\010"
    "contents\030\002 \001(\014\"\205\001\n%CMsgGameMatchSignOutP"
    "ermissionRequest\022\026\n\016server_version\030\001 \001(\r"
    "\022\025\n\rlocal_attempt\030\002 \001(\r\022\025\n\rtotal_attempt"
    "\030\003 \001(\r\022\026\n\016seconds_waited\030\004 \001(\r\"\213\001\n&CMsgG"
    "ameMatchSignOutPermissionResponse\022!\n\022per"
    "mission_granted\030\001 \001(\010:\005false\022\036\n\017abandon_"
    "signout\030\002 \001(\010:\005false\022\036\n\023retry_delay_seco"
    "nds\030\003 \001(\r:\0010\"\243\001\n\017CMsgGameChatLog\022\020\n\010matc"
    "h_id\030\001 \001(\r\022)\n\005lines\030\002 \003(\0132\032.CMsgGameChat"
    "Log.CChatLine\032S\n\tCChatLine\022\022\n\naccount_id"
    "\030\001 \001(\r\022\021\n\tteam_only\030\002 \001(\r\022\014\n\004text\030\003 \001(\t\022"
    "\021\n\tgame_time\030\004 \001(\r\"\350\007\n\034CMsgDOTALiveScore"
    "boardUpdate\022\025\n\rtournament_id\030\001 \001(\r\022\032\n\022to"
    "urnament_game_id\030\002 \001(\r\022\020\n\010duration\030\003 \001(\002"
    "\022\022\n\nhltv_delay\030\004 \001(\005\0225\n\tteam_good\030\005 \001(\0132"
    "\".CMsgDOTALiveScoreboardUpdate.Team\0224\n\010t"
    "eam_bad\030\006 \001(\0132\".CMsgDOTALiveScoreboardUp"
    "date.Team\022\034\n\024roshan_respawn_timer\030\007 \001(\r\032"
    "\343\005\n\004Team\022:\n\007players\030\001 \003(\0132).CMsgDOTALive"
    "ScoreboardUpdate.Team.Player\022\r\n\005score\030\002 "
    "\001(\r\032\217\005\n\006Player\022\023\n\013player_slot\030\001 \001(\r\022\023\n\013p"
    "layer_name\030\002 \001(\t\022\021\n\thero_name\030\003 \001(\t\022\017\n\007h"
    "ero_id\030\004 \001(\r\022\r\n\005kills\030\005 \001(\r\022\016\n\006deaths\030\006 "
    "\001(\r\022\017\n\007assists\030\007 \001(\r\022\021\n\tlast_hits\030\010 \001(\r\022"
    "\016\n\006denies\030\t \001(\r\022\014\n\004gold\030\n \001(\r\022\r\n\005level\030\013"
    " \001(\r\022\024\n\014gold_per_min\030\014 \001(\002\022\022\n\nxp_per_min"
    "\030\r \001(\002\022s\n\016ultimate_state\030\016 \001(\0162;.CMsgDOT"
    "ALiveScoreboardUpdate.Team.Player.DOTAUl"
    "timateState:\036k_EDOTAUltimateStateNotLear"
    "ned\022\031\n\021ultimate_cooldown\030\017 \001(\002\022\r\n\005item0\030"
    "\020 \001(\r\022\r\n\005item1\030\021 \001(\r\022\r\n\005item2\030\022 \001(\r\022\r\n\005i"
    "tem3\030\023 \001(\r\022\r\n\005item4\030\024 \001(\r\022\r\n\005item5\030\025 \001(\r"
    "\022\025\n\rrespawn_timer\030\026 \001(\r\"\233\001\n\021DOTAUltimate"
    "State\022\"\n\036k_EDOTAUltimateStateNotLearned\020"
    "\000\022 \n\034k_EDOTAUltimateStateCooldown\020\001\022!\n\035k"
    "_EDOTAUltimateStateNeedsMana\020\002\022\035\n\031k_EDOT"
    "AUltimateStateReady\020\003\"E\n\036CMsgDOTARequest"
    "PlayerResources\022\020\n\010steam_id\030\001 \001(\006\022\021\n\tpla"
    "yer_id\030\002 \001(\r\"\250\001\n&CMsgDOTARequestPlayerRe"
    "sourcesResponse\022\020\n\010steam_id\030\001 \001(\006\022\014\n\004ran"
    "k\030\002 \001(\r\022\021\n\tplayer_id\030\003 \001(\r\022\031\n\021prevent_te"
    "xt_chat\030\004 \001(\010\022\032\n\022prevent_voice_chat\030\005 \001("
    "\010\022\024\n\014low_priority\030\006 \001(\010\"w\n#CMsgDOTAReque"
    "stBatchPlayerResources\022\027\n\013account_ids\030\001 "
    "\003(\rB\002\020\001\022\034\n\024rank_use_competitive\030\002 \001(\010\022\031\n"
    "\rrank_use_solo\030\003 \003(\010B\002\020\001\"\206\002\n+CMsgDOTAReq"
    "uestBatchPlayerResourcesResponse\022D\n\007resu"
    "lts\030\006 \003(\01323.CMsgDOTARequestBatchPlayerRe"
    "sourcesResponse.Result\032\220\001\n\006Result\022\022\n\nacc"
    "ount_id\030\001 \001(\r\022\031\n\021prevent_text_chat\030\002 \001(\010"
    "\022\032\n\022prevent_voice_chat\030\003 \001(\010\022\014\n\004rank\030\004 \001"
    "(\r\022\027\n\017rank_calibrated\030\005 \001(\010\022\024\n\014low_prior"
    "ity\030\006 \001(\010\"R\n\035CMsgDOTAPlayerFailedToConne"
    "ct\022\026\n\016failed_loaders\030\001 \003(\006\022\031\n\021abandoned_"
    "loaders\030\002 \003(\006\"\300\001\n\024CMsgGCToRelayConnect\022\035"
    "\n\025source_tv_public_addr\030\001 \001(\r\022\036\n\026source_"
    "tv_private_addr\030\002 \001(\r\022\026\n\016source_tv_port\030"
    "\003 \001(\r\022\034\n\024game_server_steam_id\030\004 \001(\004\022\024\n\014p"
    "arent_count\030\005 \001(\r\022\035\n\025tv_unique_secret_co"
    "de\030\006 \001(\006\"\036\n\034CMsgGCToRelayConnectResponse"
    "\",\n\026CMsgGCBanStatusRequest\022\022\n\naccount_id"
    "\030\001 \001(\r\"t\n\027CMsgGCBanStatusResponse\022\016\n\006res"
    "ult\030\001 \001(\r\022\024\n\014low_priority\030\002 \001(\010\022\030\n\020text_"
    "chat_banned\030\003 \001(\010\022\031\n\021voice_chat_banned\030\004"
    " \001(\010\"\261\002\n\027CMsgTournamentItemEvent\022\031\n\021kill"
    "er_account_id\030\001 \001(\007\022\031\n\021victim_account_id"
    "\030\002 \001(\007\022:\n\nevent_type\030\003 \001(\0162\026.DOTA_Tourna"
    "mentEvents:\016TE_FIRST_BLOOD\022\020\n\010tv_delay\030\004"
    " \001(\005\022\021\n\tdota_time\030\005 \001(\005\022\023\n\013replay_time\030\006"
    " \001(\002\022\021\n\tloot_list\030\007 \001(\t\022\022\n\nevent_team\030\010 "
    "\001(\r\022\030\n\020multi_kill_count\030\t \001(\r\022\024\n\014winner_"
    "score\030\n \001(\r\022\023\n\013loser_score\030\013 \001(\r\"\247\001\n\037CMs"
    "gTournamentItemEventResponse\022:\n\nevent_ty"
    "pe\030\001 \001(\0162\026.DOTA_TournamentEvents:\016TE_FIR"
    "ST_BLOOD\022\023\n\013winner_name\030\002 \001(\t\022\022\n\ntv_dela"
    "yed\030\003 \001(\010\022\016\n\006inhall\030\004 \001(\010\022\017\n\007itemdef\030\005 \001"
    "(\r\"#\n\017CMsgTeamFanfare\022\020\n\010match_id\030\001 \001(\r\""
    "L\n\027CMsgResponseTeamFanfare\022\030\n\020fanfare_go"
    "odguys\030\001 \001(\r\022\027\n\017fanfare_badguys\030\002 \001(\r\"u\n"
    "\034CMsgGameServerUploadSaveGame\022\021\n\tgame_ti"
    "me\030\001 \001(\r\022\026\n\016save_game_data\030\002 \001(\014\022\020\n\010lobb"
    "y_id\030\003 \001(\004\022\030\n\020player_steam_ids\030\004 \003(\004\"\266\001\n"
    "\034CMsgGameServerSaveGameResult\022D\n\006result\030"
    "\001 \001(\0162$.CMsgGameServerSaveGameResult.Res"
    "ult:\016SaveSuccessful\"P\n\006Result\022\022\n\016SaveSuc"
    "cessful\020\000\022\023\n\017SessionNotFound\020\001\022\021\n\rDataba"
    "seError\020\002\022\n\n\006TooBig\020\003\",\n\031CMsgGameServerG"
    "etLoadGame\022\017\n\007save_id\030\001 \001(\r\"9\n\037CMsgGameS"
    "erverGetLoadGameResult\022\026\n\016save_game_data"
    "\030\001 \001(\014\"U\n!CMsgDOTAGenerateDiretidePrizeL"
    "ist\022\022\n\nprize_list\030\001 \001(\r\022\034\n\024highest_rosha"
    "n_level\030\002 \001(\r\"e\n)CMsgDOTAGenerateDiretid"
    "ePrizeListResponse\022\021\n\titem_defs\030\001 \003(\r\022\021\n"
    "\tsteam_ids\030\002 \003(\006\022\022\n\nprize_list\030\003 \001(\r\"@\n\034"
    "CMsgDOTARewardDiretidePrizes\022\014\n\004team\030\001 \001"
    "(\r\022\022\n\nprize_list\030\002 \001(\r\"<\n&CMsgDOTADireti"
    "dePrizesRewardedResponse\022\022\n\nprize_list\030\001"
    " \001(\r\"\324\001\n\030CMsgDOTAAwardEventPoints\022;\n\014awa"
    "rd_points\030\001 \003(\0132%.CMsgDOTAAwardEventPoin"
    "ts.AwardPoints\022\020\n\010match_id\030\002 \001(\004\022\020\n\010even"
    "t_id\030\004 \001(\r\032W\n\013AwardPoints\022\022\n\naccount_id\030"
    "\001 \001(\r\022\016\n\006points\030\002 \001(\005\022\026\n\016premium_points\030"
    "\003 \001(\005\022\014\n\004rank\030\004 \001(\005\"\250\001\n\034CMsgDOTAFrostivu"
    "sTimeElapsed\022\017\n\007seconds\030\001 \001(\r\0221\n\005users\030\002"
    " \003(\0132\".CMsgDOTAFrostivusTimeElapsed.User"
    "\022\020\n\010match_id\030\003 \001(\004\0322\n\004User\022\022\n\naccount_id"
    "\030\001 \001(\r\022\026\n\016time_elapsed_s\030\002 \001(\r\"E\n\031CMsgGC"
    "ToServerPingRequest\022\022\n\nrequest_id\030\001 \001(\006\022"
    "\024\n\014request_time\030\002 \001(\004\"W\n\032CMsgGCToServerP"
    "ingResponse\022\022\n\nrequest_id\030\001 \001(\006\022\024\n\014reque"
    "st_time\030\002 \001(\004\022\017\n\007cluster\030\003 \001(\r\"7\n\034CMsgGC"
    "ToServerConsoleCommand\022\027\n\017console_comman"
    "d\030\001 \001(\t", 8647);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dota_gcmessages_server.proto", &protobuf_RegisterTypes);
  CMsgSpawnLootGreevil::default_instance_ = new CMsgSpawnLootGreevil();
  CMsgDismissLootGreevil::default_instance_ = new CMsgDismissLootGreevil();
  CMsgDismissLootGreevilResponse::default_instance_ = new CMsgDismissLootGreevilResponse();
  CMsgConnectedPlayers::default_instance_ = new CMsgConnectedPlayers();
  CMsgConnectedPlayers_Player::default_instance_ = new CMsgConnectedPlayers_Player();
  CMsgGameServerInfo::default_instance_ = new CMsgGameServerInfo();
  CMsgLeaverDetected::default_instance_ = new CMsgLeaverDetected();
  CMsgLeaverDetectedResponse::default_instance_ = new CMsgLeaverDetectedResponse();
  CMsgDOTAFantasyPlayerStats::default_instance_ = new CMsgDOTAFantasyPlayerStats();
  CMsgGameMatchSignOut::default_instance_ = new CMsgGameMatchSignOut();
  CMsgGameMatchSignOut_CTeam::default_instance_ = new CMsgGameMatchSignOut_CTeam();
  CMsgGameMatchSignOut_CTeam_CPlayer::default_instance_ = new CMsgGameMatchSignOut_CTeam_CPlayer();
  CMsgGameMatchSignOut_CAdditionalSignoutMsg::default_instance_ = new CMsgGameMatchSignOut_CAdditionalSignoutMsg();
  CMsgGameMatchSignoutResponse::default_instance_ = new CMsgGameMatchSignoutResponse();
  CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::default_instance_ = new CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg();
  CMsgGameMatchSignOutPermissionRequest::default_instance_ = new CMsgGameMatchSignOutPermissionRequest();
  CMsgGameMatchSignOutPermissionResponse::default_instance_ = new CMsgGameMatchSignOutPermissionResponse();
  CMsgGameChatLog::default_instance_ = new CMsgGameChatLog();
  CMsgGameChatLog_CChatLine::default_instance_ = new CMsgGameChatLog_CChatLine();
  CMsgDOTALiveScoreboardUpdate::default_instance_ = new CMsgDOTALiveScoreboardUpdate();
  CMsgDOTALiveScoreboardUpdate_Team::default_instance_ = new CMsgDOTALiveScoreboardUpdate_Team();
  CMsgDOTALiveScoreboardUpdate_Team_Player::default_instance_ = new CMsgDOTALiveScoreboardUpdate_Team_Player();
  CMsgDOTARequestPlayerResources::default_instance_ = new CMsgDOTARequestPlayerResources();
  CMsgDOTARequestPlayerResourcesResponse::default_instance_ = new CMsgDOTARequestPlayerResourcesResponse();
  CMsgDOTARequestBatchPlayerResources::default_instance_ = new CMsgDOTARequestBatchPlayerResources();
  CMsgDOTARequestBatchPlayerResourcesResponse::default_instance_ = new CMsgDOTARequestBatchPlayerResourcesResponse();
  CMsgDOTARequestBatchPlayerResourcesResponse_Result::default_instance_ = new CMsgDOTARequestBatchPlayerResourcesResponse_Result();
  CMsgDOTAPlayerFailedToConnect::default_instance_ = new CMsgDOTAPlayerFailedToConnect();
  CMsgGCToRelayConnect::default_instance_ = new CMsgGCToRelayConnect();
  CMsgGCToRelayConnectResponse::default_instance_ = new CMsgGCToRelayConnectResponse();
  CMsgGCBanStatusRequest::default_instance_ = new CMsgGCBanStatusRequest();
  CMsgGCBanStatusResponse::default_instance_ = new CMsgGCBanStatusResponse();
  CMsgTournamentItemEvent::default_instance_ = new CMsgTournamentItemEvent();
  CMsgTournamentItemEventResponse::default_instance_ = new CMsgTournamentItemEventResponse();
  CMsgTeamFanfare::default_instance_ = new CMsgTeamFanfare();
  CMsgResponseTeamFanfare::default_instance_ = new CMsgResponseTeamFanfare();
  CMsgGameServerUploadSaveGame::default_instance_ = new CMsgGameServerUploadSaveGame();
  CMsgGameServerSaveGameResult::default_instance_ = new CMsgGameServerSaveGameResult();
  CMsgGameServerGetLoadGame::default_instance_ = new CMsgGameServerGetLoadGame();
  CMsgGameServerGetLoadGameResult::default_instance_ = new CMsgGameServerGetLoadGameResult();
  CMsgDOTAGenerateDiretidePrizeList::default_instance_ = new CMsgDOTAGenerateDiretidePrizeList();
  CMsgDOTAGenerateDiretidePrizeListResponse::default_instance_ = new CMsgDOTAGenerateDiretidePrizeListResponse();
  CMsgDOTARewardDiretidePrizes::default_instance_ = new CMsgDOTARewardDiretidePrizes();
  CMsgDOTADiretidePrizesRewardedResponse::default_instance_ = new CMsgDOTADiretidePrizesRewardedResponse();
  CMsgDOTAAwardEventPoints::default_instance_ = new CMsgDOTAAwardEventPoints();
  CMsgDOTAAwardEventPoints_AwardPoints::default_instance_ = new CMsgDOTAAwardEventPoints_AwardPoints();
  CMsgDOTAFrostivusTimeElapsed::default_instance_ = new CMsgDOTAFrostivusTimeElapsed();
  CMsgDOTAFrostivusTimeElapsed_User::default_instance_ = new CMsgDOTAFrostivusTimeElapsed_User();
  CMsgGCToServerPingRequest::default_instance_ = new CMsgGCToServerPingRequest();
  CMsgGCToServerPingResponse::default_instance_ = new CMsgGCToServerPingResponse();
  CMsgGCToServerConsoleCommand::default_instance_ = new CMsgGCToServerConsoleCommand();
  CMsgSpawnLootGreevil::default_instance_->InitAsDefaultInstance();
  CMsgDismissLootGreevil::default_instance_->InitAsDefaultInstance();
  CMsgDismissLootGreevilResponse::default_instance_->InitAsDefaultInstance();
  CMsgConnectedPlayers::default_instance_->InitAsDefaultInstance();
  CMsgConnectedPlayers_Player::default_instance_->InitAsDefaultInstance();
  CMsgGameServerInfo::default_instance_->InitAsDefaultInstance();
  CMsgLeaverDetected::default_instance_->InitAsDefaultInstance();
  CMsgLeaverDetectedResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyPlayerStats::default_instance_->InitAsDefaultInstance();
  CMsgGameMatchSignOut::default_instance_->InitAsDefaultInstance();
  CMsgGameMatchSignOut_CTeam::default_instance_->InitAsDefaultInstance();
  CMsgGameMatchSignOut_CTeam_CPlayer::default_instance_->InitAsDefaultInstance();
  CMsgGameMatchSignOut_CAdditionalSignoutMsg::default_instance_->InitAsDefaultInstance();
  CMsgGameMatchSignoutResponse::default_instance_->InitAsDefaultInstance();
  CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::default_instance_->InitAsDefaultInstance();
  CMsgGameMatchSignOutPermissionRequest::default_instance_->InitAsDefaultInstance();
  CMsgGameMatchSignOutPermissionResponse::default_instance_->InitAsDefaultInstance();
  CMsgGameChatLog::default_instance_->InitAsDefaultInstance();
  CMsgGameChatLog_CChatLine::default_instance_->InitAsDefaultInstance();
  CMsgDOTALiveScoreboardUpdate::default_instance_->InitAsDefaultInstance();
  CMsgDOTALiveScoreboardUpdate_Team::default_instance_->InitAsDefaultInstance();
  CMsgDOTALiveScoreboardUpdate_Team_Player::default_instance_->InitAsDefaultInstance();
  CMsgDOTARequestPlayerResources::default_instance_->InitAsDefaultInstance();
  CMsgDOTARequestPlayerResourcesResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTARequestBatchPlayerResources::default_instance_->InitAsDefaultInstance();
  CMsgDOTARequestBatchPlayerResourcesResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTARequestBatchPlayerResourcesResponse_Result::default_instance_->InitAsDefaultInstance();
  CMsgDOTAPlayerFailedToConnect::default_instance_->InitAsDefaultInstance();
  CMsgGCToRelayConnect::default_instance_->InitAsDefaultInstance();
  CMsgGCToRelayConnectResponse::default_instance_->InitAsDefaultInstance();
  CMsgGCBanStatusRequest::default_instance_->InitAsDefaultInstance();
  CMsgGCBanStatusResponse::default_instance_->InitAsDefaultInstance();
  CMsgTournamentItemEvent::default_instance_->InitAsDefaultInstance();
  CMsgTournamentItemEventResponse::default_instance_->InitAsDefaultInstance();
  CMsgTeamFanfare::default_instance_->InitAsDefaultInstance();
  CMsgResponseTeamFanfare::default_instance_->InitAsDefaultInstance();
  CMsgGameServerUploadSaveGame::default_instance_->InitAsDefaultInstance();
  CMsgGameServerSaveGameResult::default_instance_->InitAsDefaultInstance();
  CMsgGameServerGetLoadGame::default_instance_->InitAsDefaultInstance();
  CMsgGameServerGetLoadGameResult::default_instance_->InitAsDefaultInstance();
  CMsgDOTAGenerateDiretidePrizeList::default_instance_->InitAsDefaultInstance();
  CMsgDOTAGenerateDiretidePrizeListResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTARewardDiretidePrizes::default_instance_->InitAsDefaultInstance();
  CMsgDOTADiretidePrizesRewardedResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAAwardEventPoints::default_instance_->InitAsDefaultInstance();
  CMsgDOTAAwardEventPoints_AwardPoints::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFrostivusTimeElapsed::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFrostivusTimeElapsed_User::default_instance_->InitAsDefaultInstance();
  CMsgGCToServerPingRequest::default_instance_->InitAsDefaultInstance();
  CMsgGCToServerPingResponse::default_instance_->InitAsDefaultInstance();
  CMsgGCToServerConsoleCommand::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dota_5fgcmessages_5fserver_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dota_5fgcmessages_5fserver_2eproto {
  StaticDescriptorInitializer_dota_5fgcmessages_5fserver_2eproto() {
    protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();
  }
} static_descriptor_initializer_dota_5fgcmessages_5fserver_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int CMsgSpawnLootGreevil::kRareFieldNumber;
#endif  // !_MSC_VER

CMsgSpawnLootGreevil::CMsgSpawnLootGreevil()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSpawnLootGreevil::InitAsDefaultInstance() {
}

CMsgSpawnLootGreevil::CMsgSpawnLootGreevil(const CMsgSpawnLootGreevil& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSpawnLootGreevil::SharedCtor() {
  _cached_size_ = 0;
  rare_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSpawnLootGreevil::~CMsgSpawnLootGreevil() {
  SharedDtor();
}

void CMsgSpawnLootGreevil::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSpawnLootGreevil::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSpawnLootGreevil::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSpawnLootGreevil_descriptor_;
}

const CMsgSpawnLootGreevil& CMsgSpawnLootGreevil::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgSpawnLootGreevil* CMsgSpawnLootGreevil::default_instance_ = NULL;

CMsgSpawnLootGreevil* CMsgSpawnLootGreevil::New() const {
  return new CMsgSpawnLootGreevil;
}

void CMsgSpawnLootGreevil::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rare_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSpawnLootGreevil::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool rare = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rare_)));
          set_has_rare();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSpawnLootGreevil::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool rare = 1;
  if (has_rare()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->rare(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSpawnLootGreevil::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool rare = 1;
  if (has_rare()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->rare(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSpawnLootGreevil::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool rare = 1;
    if (has_rare()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSpawnLootGreevil::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSpawnLootGreevil* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSpawnLootGreevil*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSpawnLootGreevil::MergeFrom(const CMsgSpawnLootGreevil& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rare()) {
      set_rare(from.rare());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSpawnLootGreevil::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSpawnLootGreevil::CopyFrom(const CMsgSpawnLootGreevil& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSpawnLootGreevil::IsInitialized() const {
  
  return true;
}

void CMsgSpawnLootGreevil::Swap(CMsgSpawnLootGreevil* other) {
  if (other != this) {
    std::swap(rare_, other->rare_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSpawnLootGreevil::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSpawnLootGreevil_descriptor_;
  metadata.reflection = CMsgSpawnLootGreevil_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDismissLootGreevil::kKilledFieldNumber;
const int CMsgDismissLootGreevil::kRareFieldNumber;
#endif  // !_MSC_VER

CMsgDismissLootGreevil::CMsgDismissLootGreevil()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgDismissLootGreevil::InitAsDefaultInstance() {
}

CMsgDismissLootGreevil::CMsgDismissLootGreevil(const CMsgDismissLootGreevil& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgDismissLootGreevil::SharedCtor() {
  _cached_size_ = 0;
  killed_ = false;
  rare_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDismissLootGreevil::~CMsgDismissLootGreevil() {
  SharedDtor();
}

void CMsgDismissLootGreevil::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDismissLootGreevil::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDismissLootGreevil::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDismissLootGreevil_descriptor_;
}

const CMsgDismissLootGreevil& CMsgDismissLootGreevil::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgDismissLootGreevil* CMsgDismissLootGreevil::default_instance_ = NULL;

CMsgDismissLootGreevil* CMsgDismissLootGreevil::New() const {
  return new CMsgDismissLootGreevil;
}

void CMsgDismissLootGreevil::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    killed_ = false;
    rare_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDismissLootGreevil::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool killed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &killed_)));
          set_has_killed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rare;
        break;
      }
      
      // optional bool rare = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rare:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rare_)));
          set_has_rare();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgDismissLootGreevil::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool killed = 2;
  if (has_killed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->killed(), output);
  }
  
  // optional bool rare = 3;
  if (has_rare()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->rare(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgDismissLootGreevil::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool killed = 2;
  if (has_killed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->killed(), target);
  }
  
  // optional bool rare = 3;
  if (has_rare()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->rare(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgDismissLootGreevil::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool killed = 2;
    if (has_killed()) {
      total_size += 1 + 1;
    }
    
    // optional bool rare = 3;
    if (has_rare()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDismissLootGreevil::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDismissLootGreevil* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDismissLootGreevil*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDismissLootGreevil::MergeFrom(const CMsgDismissLootGreevil& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_killed()) {
      set_killed(from.killed());
    }
    if (from.has_rare()) {
      set_rare(from.rare());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDismissLootGreevil::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDismissLootGreevil::CopyFrom(const CMsgDismissLootGreevil& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDismissLootGreevil::IsInitialized() const {
  
  return true;
}

void CMsgDismissLootGreevil::Swap(CMsgDismissLootGreevil* other) {
  if (other != this) {
    std::swap(killed_, other->killed_);
    std::swap(rare_, other->rare_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDismissLootGreevil::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDismissLootGreevil_descriptor_;
  metadata.reflection = CMsgDismissLootGreevil_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgDismissLootGreevilResponse::CMsgDismissLootGreevilResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgDismissLootGreevilResponse::InitAsDefaultInstance() {
}

CMsgDismissLootGreevilResponse::CMsgDismissLootGreevilResponse(const CMsgDismissLootGreevilResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgDismissLootGreevilResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDismissLootGreevilResponse::~CMsgDismissLootGreevilResponse() {
  SharedDtor();
}

void CMsgDismissLootGreevilResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDismissLootGreevilResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDismissLootGreevilResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDismissLootGreevilResponse_descriptor_;
}

const CMsgDismissLootGreevilResponse& CMsgDismissLootGreevilResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgDismissLootGreevilResponse* CMsgDismissLootGreevilResponse::default_instance_ = NULL;

CMsgDismissLootGreevilResponse* CMsgDismissLootGreevilResponse::New() const {
  return new CMsgDismissLootGreevilResponse;
}

void CMsgDismissLootGreevilResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDismissLootGreevilResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgDismissLootGreevilResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgDismissLootGreevilResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgDismissLootGreevilResponse::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDismissLootGreevilResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDismissLootGreevilResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDismissLootGreevilResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDismissLootGreevilResponse::MergeFrom(const CMsgDismissLootGreevilResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDismissLootGreevilResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDismissLootGreevilResponse::CopyFrom(const CMsgDismissLootGreevilResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDismissLootGreevilResponse::IsInitialized() const {
  
  return true;
}

void CMsgDismissLootGreevilResponse::Swap(CMsgDismissLootGreevilResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDismissLootGreevilResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDismissLootGreevilResponse_descriptor_;
  metadata.reflection = CMsgDismissLootGreevilResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgConnectedPlayers_SendReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgConnectedPlayers_SendReason_descriptor_;
}
bool CMsgConnectedPlayers_SendReason_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::INVALID;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::HEARTBEAT;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::GAME_STATE;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::FIRST_BLOOD;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::PLAYER_CONNECTED;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::PLAYER_HERO;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::PLAYER_DISCONNECTED_CONSEQUENCES;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::PLAYER_DISCONNECTED_NOCONSEQUENCES;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::SPECTATOR_COUNT;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::TOWER_STATE;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::GAMESTATE_TIMEOUT;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::MASS_DISCONNECT;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::SendReason_MIN;
const CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::SendReason_MAX;
const int CMsgConnectedPlayers::SendReason_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgConnectedPlayers_Player::kSteamIdFieldNumber;
const int CMsgConnectedPlayers_Player::kHeroIdFieldNumber;
const int CMsgConnectedPlayers_Player::kLeaverStateFieldNumber;
const int CMsgConnectedPlayers_Player::kDisconnectReasonFieldNumber;
#endif  // !_MSC_VER

CMsgConnectedPlayers_Player::CMsgConnectedPlayers_Player()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgConnectedPlayers_Player::InitAsDefaultInstance() {
  leaver_state_ = const_cast< ::CMsgLeaverState*>(&::CMsgLeaverState::default_instance());
}

CMsgConnectedPlayers_Player::CMsgConnectedPlayers_Player(const CMsgConnectedPlayers_Player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgConnectedPlayers_Player::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  hero_id_ = 0u;
  leaver_state_ = NULL;
  disconnect_reason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgConnectedPlayers_Player::~CMsgConnectedPlayers_Player() {
  SharedDtor();
}

void CMsgConnectedPlayers_Player::SharedDtor() {
  if (this != default_instance_) {
    delete leaver_state_;
  }
}

void CMsgConnectedPlayers_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgConnectedPlayers_Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgConnectedPlayers_Player_descriptor_;
}

const CMsgConnectedPlayers_Player& CMsgConnectedPlayers_Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgConnectedPlayers_Player* CMsgConnectedPlayers_Player::default_instance_ = NULL;

CMsgConnectedPlayers_Player* CMsgConnectedPlayers_Player::New() const {
  return new CMsgConnectedPlayers_Player;
}

void CMsgConnectedPlayers_Player::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_ = GOOGLE_ULONGLONG(0);
    hero_id_ = 0u;
    if (has_leaver_state()) {
      if (leaver_state_ != NULL) leaver_state_->::CMsgLeaverState::Clear();
    }
    disconnect_reason_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgConnectedPlayers_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }
      
      // optional uint32 hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_leaver_state;
        break;
      }
      
      // optional .CMsgLeaverState leaver_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leaver_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leaver_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_disconnect_reason;
        break;
      }
      
      // optional .ENetworkDisconnectionReason disconnect_reason = 4 [default = NETWORK_DISCONNECT_INVALID];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_disconnect_reason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ENetworkDisconnectionReason_IsValid(value)) {
            set_disconnect_reason(static_cast< ENetworkDisconnectionReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgConnectedPlayers_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }
  
  // optional uint32 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_id(), output);
  }
  
  // optional .CMsgLeaverState leaver_state = 3;
  if (has_leaver_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->leaver_state(), output);
  }
  
  // optional .ENetworkDisconnectionReason disconnect_reason = 4 [default = NETWORK_DISCONNECT_INVALID];
  if (has_disconnect_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->disconnect_reason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgConnectedPlayers_Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }
  
  // optional uint32 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_id(), target);
  }
  
  // optional .CMsgLeaverState leaver_state = 3;
  if (has_leaver_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->leaver_state(), target);
  }
  
  // optional .ENetworkDisconnectionReason disconnect_reason = 4 [default = NETWORK_DISCONNECT_INVALID];
  if (has_disconnect_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->disconnect_reason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgConnectedPlayers_Player::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }
    
    // optional uint32 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }
    
    // optional .CMsgLeaverState leaver_state = 3;
    if (has_leaver_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leaver_state());
    }
    
    // optional .ENetworkDisconnectionReason disconnect_reason = 4 [default = NETWORK_DISCONNECT_INVALID];
    if (has_disconnect_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->disconnect_reason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgConnectedPlayers_Player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgConnectedPlayers_Player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgConnectedPlayers_Player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgConnectedPlayers_Player::MergeFrom(const CMsgConnectedPlayers_Player& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_leaver_state()) {
      mutable_leaver_state()->::CMsgLeaverState::MergeFrom(from.leaver_state());
    }
    if (from.has_disconnect_reason()) {
      set_disconnect_reason(from.disconnect_reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgConnectedPlayers_Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgConnectedPlayers_Player::CopyFrom(const CMsgConnectedPlayers_Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgConnectedPlayers_Player::IsInitialized() const {
  
  return true;
}

void CMsgConnectedPlayers_Player::Swap(CMsgConnectedPlayers_Player* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(leaver_state_, other->leaver_state_);
    std::swap(disconnect_reason_, other->disconnect_reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgConnectedPlayers_Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgConnectedPlayers_Player_descriptor_;
  metadata.reflection = CMsgConnectedPlayers_Player_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgConnectedPlayers::kConnectedPlayersFieldNumber;
const int CMsgConnectedPlayers::kDisconnectedPlayersFieldNumber;
const int CMsgConnectedPlayers::kGameStateFieldNumber;
const int CMsgConnectedPlayers::kNumSpectatorsFieldNumber;
const int CMsgConnectedPlayers::kTowerStateFieldNumber;
const int CMsgConnectedPlayers::kFirstBloodHappenedFieldNumber;
const int CMsgConnectedPlayers::kSendReasonFieldNumber;
#endif  // !_MSC_VER

CMsgConnectedPlayers::CMsgConnectedPlayers()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgConnectedPlayers::InitAsDefaultInstance() {
}

CMsgConnectedPlayers::CMsgConnectedPlayers(const CMsgConnectedPlayers& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgConnectedPlayers::SharedCtor() {
  _cached_size_ = 0;
  game_state_ = 0;
  num_spectators_ = 0u;
  tower_state_ = 0u;
  first_blood_happened_ = false;
  send_reason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgConnectedPlayers::~CMsgConnectedPlayers() {
  SharedDtor();
}

void CMsgConnectedPlayers::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgConnectedPlayers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgConnectedPlayers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgConnectedPlayers_descriptor_;
}

const CMsgConnectedPlayers& CMsgConnectedPlayers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgConnectedPlayers* CMsgConnectedPlayers::default_instance_ = NULL;

CMsgConnectedPlayers* CMsgConnectedPlayers::New() const {
  return new CMsgConnectedPlayers;
}

void CMsgConnectedPlayers::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    game_state_ = 0;
    num_spectators_ = 0u;
    tower_state_ = 0u;
    first_blood_happened_ = false;
    send_reason_ = 0;
  }
  connected_players_.Clear();
  disconnected_players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgConnectedPlayers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgConnectedPlayers.Player connected_players = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connected_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_connected_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_connected_players;
        if (input->ExpectTag(16)) goto parse_game_state;
        break;
      }
      
      // optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (DOTA_GameState_IsValid(value)) {
            set_game_state(static_cast< DOTA_GameState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num_spectators;
        break;
      }
      
      // optional uint32 num_spectators = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_spectators:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_spectators_)));
          set_has_num_spectators();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tower_state;
        break;
      }
      
      // optional uint32 tower_state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tower_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tower_state_)));
          set_has_tower_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_first_blood_happened;
        break;
      }
      
      // optional bool first_blood_happened = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_blood_happened:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &first_blood_happened_)));
          set_has_first_blood_happened();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_disconnected_players;
        break;
      }
      
      // repeated .CMsgConnectedPlayers.Player disconnected_players = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_disconnected_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_disconnected_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_disconnected_players;
        if (input->ExpectTag(64)) goto parse_send_reason;
        break;
      }
      
      // optional .CMsgConnectedPlayers.SendReason send_reason = 8 [default = INVALID];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_reason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgConnectedPlayers_SendReason_IsValid(value)) {
            set_send_reason(static_cast< ::CMsgConnectedPlayers_SendReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgConnectedPlayers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgConnectedPlayers.Player connected_players = 1;
  for (int i = 0; i < this->connected_players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->connected_players(i), output);
  }
  
  // optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
  if (has_game_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->game_state(), output);
  }
  
  // optional uint32 num_spectators = 3;
  if (has_num_spectators()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num_spectators(), output);
  }
  
  // optional uint32 tower_state = 4;
  if (has_tower_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tower_state(), output);
  }
  
  // optional bool first_blood_happened = 6;
  if (has_first_blood_happened()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->first_blood_happened(), output);
  }
  
  // repeated .CMsgConnectedPlayers.Player disconnected_players = 7;
  for (int i = 0; i < this->disconnected_players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->disconnected_players(i), output);
  }
  
  // optional .CMsgConnectedPlayers.SendReason send_reason = 8 [default = INVALID];
  if (has_send_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->send_reason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgConnectedPlayers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgConnectedPlayers.Player connected_players = 1;
  for (int i = 0; i < this->connected_players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->connected_players(i), target);
  }
  
  // optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
  if (has_game_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->game_state(), target);
  }
  
  // optional uint32 num_spectators = 3;
  if (has_num_spectators()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num_spectators(), target);
  }
  
  // optional uint32 tower_state = 4;
  if (has_tower_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tower_state(), target);
  }
  
  // optional bool first_blood_happened = 6;
  if (has_first_blood_happened()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->first_blood_happened(), target);
  }
  
  // repeated .CMsgConnectedPlayers.Player disconnected_players = 7;
  for (int i = 0; i < this->disconnected_players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->disconnected_players(i), target);
  }
  
  // optional .CMsgConnectedPlayers.SendReason send_reason = 8 [default = INVALID];
  if (has_send_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->send_reason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgConnectedPlayers::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
    if (has_game_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_state());
    }
    
    // optional uint32 num_spectators = 3;
    if (has_num_spectators()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_spectators());
    }
    
    // optional uint32 tower_state = 4;
    if (has_tower_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tower_state());
    }
    
    // optional bool first_blood_happened = 6;
    if (has_first_blood_happened()) {
      total_size += 1 + 1;
    }
    
    // optional .CMsgConnectedPlayers.SendReason send_reason = 8 [default = INVALID];
    if (has_send_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->send_reason());
    }
    
  }
  // repeated .CMsgConnectedPlayers.Player connected_players = 1;
  total_size += 1 * this->connected_players_size();
  for (int i = 0; i < this->connected_players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->connected_players(i));
  }
  
  // repeated .CMsgConnectedPlayers.Player disconnected_players = 7;
  total_size += 1 * this->disconnected_players_size();
  for (int i = 0; i < this->disconnected_players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->disconnected_players(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgConnectedPlayers::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgConnectedPlayers* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgConnectedPlayers*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgConnectedPlayers::MergeFrom(const CMsgConnectedPlayers& from) {
  GOOGLE_CHECK_NE(&from, this);
  connected_players_.MergeFrom(from.connected_players_);
  disconnected_players_.MergeFrom(from.disconnected_players_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_game_state()) {
      set_game_state(from.game_state());
    }
    if (from.has_num_spectators()) {
      set_num_spectators(from.num_spectators());
    }
    if (from.has_tower_state()) {
      set_tower_state(from.tower_state());
    }
    if (from.has_first_blood_happened()) {
      set_first_blood_happened(from.first_blood_happened());
    }
    if (from.has_send_reason()) {
      set_send_reason(from.send_reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgConnectedPlayers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgConnectedPlayers::CopyFrom(const CMsgConnectedPlayers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgConnectedPlayers::IsInitialized() const {
  
  return true;
}

void CMsgConnectedPlayers::Swap(CMsgConnectedPlayers* other) {
  if (other != this) {
    connected_players_.Swap(&other->connected_players_);
    disconnected_players_.Swap(&other->disconnected_players_);
    std::swap(game_state_, other->game_state_);
    std::swap(num_spectators_, other->num_spectators_);
    std::swap(tower_state_, other->tower_state_);
    std::swap(first_blood_happened_, other->first_blood_happened_);
    std::swap(send_reason_, other->send_reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgConnectedPlayers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgConnectedPlayers_descriptor_;
  metadata.reflection = CMsgConnectedPlayers_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgGameServerInfo_ServerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGameServerInfo_ServerType_descriptor_;
}
bool CMsgGameServerInfo_ServerType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgGameServerInfo_ServerType CMsgGameServerInfo::UNSPECIFIED;
const CMsgGameServerInfo_ServerType CMsgGameServerInfo::GAME;
const CMsgGameServerInfo_ServerType CMsgGameServerInfo::PROXY;
const CMsgGameServerInfo_ServerType CMsgGameServerInfo::ServerType_MIN;
const CMsgGameServerInfo_ServerType CMsgGameServerInfo::ServerType_MAX;
const int CMsgGameServerInfo::ServerType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgGameServerInfo::kServerPublicIpAddrFieldNumber;
const int CMsgGameServerInfo::kServerPrivateIpAddrFieldNumber;
const int CMsgGameServerInfo::kServerPortFieldNumber;
const int CMsgGameServerInfo::kServerTvPortFieldNumber;
const int CMsgGameServerInfo::kServerKeyFieldNumber;
const int CMsgGameServerInfo::kServerHibernationFieldNumber;
const int CMsgGameServerInfo::kServerTypeFieldNumber;
const int CMsgGameServerInfo::kServerRegionFieldNumber;
const int CMsgGameServerInfo::kServerLoadavgFieldNumber;
const int CMsgGameServerInfo::kServerTvBroadcastTimeFieldNumber;
const int CMsgGameServerInfo::kServerGameTimeFieldNumber;
const int CMsgGameServerInfo::kServerRelayConnectedSteamIdFieldNumber;
const int CMsgGameServerInfo::kRelaySlotsMaxFieldNumber;
const int CMsgGameServerInfo::kRelaysConnectedFieldNumber;
const int CMsgGameServerInfo::kRelayClientsConnectedFieldNumber;
const int CMsgGameServerInfo::kRelayedGameServerSteamIdFieldNumber;
const int CMsgGameServerInfo::kParentRelayCountFieldNumber;
const int CMsgGameServerInfo::kTvSecretCodeFieldNumber;
const int CMsgGameServerInfo::kServerVersionFieldNumber;
const int CMsgGameServerInfo::kServerClusterFieldNumber;
#endif  // !_MSC_VER

CMsgGameServerInfo::CMsgGameServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGameServerInfo::InitAsDefaultInstance() {
}

CMsgGameServerInfo::CMsgGameServerInfo(const CMsgGameServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGameServerInfo::SharedCtor() {
  _cached_size_ = 0;
  server_public_ip_addr_ = 0u;
  server_private_ip_addr_ = 0u;
  server_port_ = 0u;
  server_tv_port_ = 0u;
  server_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_hibernation_ = false;
  server_type_ = 0;
  server_region_ = 0u;
  server_loadavg_ = 0;
  server_tv_broadcast_time_ = 0;
  server_game_time_ = 0;
  server_relay_connected_steam_id_ = GOOGLE_ULONGLONG(0);
  relay_slots_max_ = 0u;
  relays_connected_ = 0;
  relay_clients_connected_ = 0;
  relayed_game_server_steam_id_ = GOOGLE_ULONGLONG(0);
  parent_relay_count_ = 0u;
  tv_secret_code_ = GOOGLE_ULONGLONG(0);
  server_version_ = 0u;
  server_cluster_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGameServerInfo::~CMsgGameServerInfo() {
  SharedDtor();
}

void CMsgGameServerInfo::SharedDtor() {
  if (server_key_ != &::google::protobuf::internal::kEmptyString) {
    delete server_key_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGameServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGameServerInfo_descriptor_;
}

const CMsgGameServerInfo& CMsgGameServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgGameServerInfo* CMsgGameServerInfo::default_instance_ = NULL;

CMsgGameServerInfo* CMsgGameServerInfo::New() const {
  return new CMsgGameServerInfo;
}

void CMsgGameServerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_public_ip_addr_ = 0u;
    server_private_ip_addr_ = 0u;
    server_port_ = 0u;
    server_tv_port_ = 0u;
    if (has_server_key()) {
      if (server_key_ != &::google::protobuf::internal::kEmptyString) {
        server_key_->clear();
      }
    }
    server_hibernation_ = false;
    server_type_ = 0;
    server_region_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    server_loadavg_ = 0;
    server_tv_broadcast_time_ = 0;
    server_game_time_ = 0;
    server_relay_connected_steam_id_ = GOOGLE_ULONGLONG(0);
    relay_slots_max_ = 0u;
    relays_connected_ = 0;
    relay_clients_connected_ = 0;
    relayed_game_server_steam_id_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    parent_relay_count_ = 0u;
    tv_secret_code_ = GOOGLE_ULONGLONG(0);
    server_version_ = 0u;
    server_cluster_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGameServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 server_public_ip_addr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &server_public_ip_addr_)));
          set_has_server_public_ip_addr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_server_private_ip_addr;
        break;
      }
      
      // optional fixed32 server_private_ip_addr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_server_private_ip_addr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &server_private_ip_addr_)));
          set_has_server_private_ip_addr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_server_port;
        break;
      }
      
      // optional uint32 server_port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_port_)));
          set_has_server_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_server_tv_port;
        break;
      }
      
      // optional uint32 server_tv_port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_tv_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_tv_port_)));
          set_has_server_tv_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_server_key;
        break;
      }
      
      // optional string server_key = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_key().data(), this->server_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_server_hibernation;
        break;
      }
      
      // optional bool server_hibernation = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_hibernation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &server_hibernation_)));
          set_has_server_hibernation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_server_type;
        break;
      }
      
      // optional .CMsgGameServerInfo.ServerType server_type = 7 [default = UNSPECIFIED];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgGameServerInfo_ServerType_IsValid(value)) {
            set_server_type(static_cast< ::CMsgGameServerInfo_ServerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_server_region;
        break;
      }
      
      // optional uint32 server_region = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_region:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_region_)));
          set_has_server_region();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_server_loadavg;
        break;
      }
      
      // optional float server_loadavg = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_server_loadavg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &server_loadavg_)));
          set_has_server_loadavg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_server_tv_broadcast_time;
        break;
      }
      
      // optional float server_tv_broadcast_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_server_tv_broadcast_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &server_tv_broadcast_time_)));
          set_has_server_tv_broadcast_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_server_game_time;
        break;
      }
      
      // optional float server_game_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_server_game_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &server_game_time_)));
          set_has_server_game_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_server_relay_connected_steam_id;
        break;
      }
      
      // optional fixed64 server_relay_connected_steam_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_server_relay_connected_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_relay_connected_steam_id_)));
          set_has_server_relay_connected_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_relay_slots_max;
        break;
      }
      
      // optional uint32 relay_slots_max = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_relay_slots_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relay_slots_max_)));
          set_has_relay_slots_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_relays_connected;
        break;
      }
      
      // optional int32 relays_connected = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_relays_connected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &relays_connected_)));
          set_has_relays_connected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_relay_clients_connected;
        break;
      }
      
      // optional int32 relay_clients_connected = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_relay_clients_connected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &relay_clients_connected_)));
          set_has_relay_clients_connected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_relayed_game_server_steam_id;
        break;
      }
      
      // optional fixed64 relayed_game_server_steam_id = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_relayed_game_server_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &relayed_game_server_steam_id_)));
          set_has_relayed_game_server_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_parent_relay_count;
        break;
      }
      
      // optional uint32 parent_relay_count = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parent_relay_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parent_relay_count_)));
          set_has_parent_relay_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_tv_secret_code;
        break;
      }
      
      // optional fixed64 tv_secret_code = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_tv_secret_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &tv_secret_code_)));
          set_has_tv_secret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_server_version;
        break;
      }
      
      // optional uint32 server_version = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_version_)));
          set_has_server_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_server_cluster;
        break;
      }
      
      // optional uint32 server_cluster = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_cluster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_cluster_)));
          set_has_server_cluster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGameServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 server_public_ip_addr = 1;
  if (has_server_public_ip_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->server_public_ip_addr(), output);
  }
  
  // optional fixed32 server_private_ip_addr = 2;
  if (has_server_private_ip_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->server_private_ip_addr(), output);
  }
  
  // optional uint32 server_port = 3;
  if (has_server_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->server_port(), output);
  }
  
  // optional uint32 server_tv_port = 4;
  if (has_server_tv_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->server_tv_port(), output);
  }
  
  // optional string server_key = 5;
  if (has_server_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_key().data(), this->server_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->server_key(), output);
  }
  
  // optional bool server_hibernation = 6;
  if (has_server_hibernation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->server_hibernation(), output);
  }
  
  // optional .CMsgGameServerInfo.ServerType server_type = 7 [default = UNSPECIFIED];
  if (has_server_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->server_type(), output);
  }
  
  // optional uint32 server_region = 8;
  if (has_server_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->server_region(), output);
  }
  
  // optional float server_loadavg = 9;
  if (has_server_loadavg()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->server_loadavg(), output);
  }
  
  // optional float server_tv_broadcast_time = 10;
  if (has_server_tv_broadcast_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->server_tv_broadcast_time(), output);
  }
  
  // optional float server_game_time = 11;
  if (has_server_game_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->server_game_time(), output);
  }
  
  // optional fixed64 server_relay_connected_steam_id = 12;
  if (has_server_relay_connected_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(12, this->server_relay_connected_steam_id(), output);
  }
  
  // optional uint32 relay_slots_max = 13;
  if (has_relay_slots_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->relay_slots_max(), output);
  }
  
  // optional int32 relays_connected = 14;
  if (has_relays_connected()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->relays_connected(), output);
  }
  
  // optional int32 relay_clients_connected = 15;
  if (has_relay_clients_connected()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->relay_clients_connected(), output);
  }
  
  // optional fixed64 relayed_game_server_steam_id = 16;
  if (has_relayed_game_server_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(16, this->relayed_game_server_steam_id(), output);
  }
  
  // optional uint32 parent_relay_count = 17;
  if (has_parent_relay_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->parent_relay_count(), output);
  }
  
  // optional fixed64 tv_secret_code = 18;
  if (has_tv_secret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(18, this->tv_secret_code(), output);
  }
  
  // optional uint32 server_version = 19;
  if (has_server_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->server_version(), output);
  }
  
  // optional uint32 server_cluster = 20;
  if (has_server_cluster()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->server_cluster(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGameServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 server_public_ip_addr = 1;
  if (has_server_public_ip_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->server_public_ip_addr(), target);
  }
  
  // optional fixed32 server_private_ip_addr = 2;
  if (has_server_private_ip_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->server_private_ip_addr(), target);
  }
  
  // optional uint32 server_port = 3;
  if (has_server_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->server_port(), target);
  }
  
  // optional uint32 server_tv_port = 4;
  if (has_server_tv_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->server_tv_port(), target);
  }
  
  // optional string server_key = 5;
  if (has_server_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_key().data(), this->server_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->server_key(), target);
  }
  
  // optional bool server_hibernation = 6;
  if (has_server_hibernation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->server_hibernation(), target);
  }
  
  // optional .CMsgGameServerInfo.ServerType server_type = 7 [default = UNSPECIFIED];
  if (has_server_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->server_type(), target);
  }
  
  // optional uint32 server_region = 8;
  if (has_server_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->server_region(), target);
  }
  
  // optional float server_loadavg = 9;
  if (has_server_loadavg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->server_loadavg(), target);
  }
  
  // optional float server_tv_broadcast_time = 10;
  if (has_server_tv_broadcast_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->server_tv_broadcast_time(), target);
  }
  
  // optional float server_game_time = 11;
  if (has_server_game_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->server_game_time(), target);
  }
  
  // optional fixed64 server_relay_connected_steam_id = 12;
  if (has_server_relay_connected_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(12, this->server_relay_connected_steam_id(), target);
  }
  
  // optional uint32 relay_slots_max = 13;
  if (has_relay_slots_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->relay_slots_max(), target);
  }
  
  // optional int32 relays_connected = 14;
  if (has_relays_connected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->relays_connected(), target);
  }
  
  // optional int32 relay_clients_connected = 15;
  if (has_relay_clients_connected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->relay_clients_connected(), target);
  }
  
  // optional fixed64 relayed_game_server_steam_id = 16;
  if (has_relayed_game_server_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(16, this->relayed_game_server_steam_id(), target);
  }
  
  // optional uint32 parent_relay_count = 17;
  if (has_parent_relay_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->parent_relay_count(), target);
  }
  
  // optional fixed64 tv_secret_code = 18;
  if (has_tv_secret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(18, this->tv_secret_code(), target);
  }
  
  // optional uint32 server_version = 19;
  if (has_server_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->server_version(), target);
  }
  
  // optional uint32 server_cluster = 20;
  if (has_server_cluster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->server_cluster(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGameServerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 server_public_ip_addr = 1;
    if (has_server_public_ip_addr()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 server_private_ip_addr = 2;
    if (has_server_private_ip_addr()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 server_port = 3;
    if (has_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_port());
    }
    
    // optional uint32 server_tv_port = 4;
    if (has_server_tv_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_tv_port());
    }
    
    // optional string server_key = 5;
    if (has_server_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_key());
    }
    
    // optional bool server_hibernation = 6;
    if (has_server_hibernation()) {
      total_size += 1 + 1;
    }
    
    // optional .CMsgGameServerInfo.ServerType server_type = 7 [default = UNSPECIFIED];
    if (has_server_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->server_type());
    }
    
    // optional uint32 server_region = 8;
    if (has_server_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_region());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float server_loadavg = 9;
    if (has_server_loadavg()) {
      total_size += 1 + 4;
    }
    
    // optional float server_tv_broadcast_time = 10;
    if (has_server_tv_broadcast_time()) {
      total_size += 1 + 4;
    }
    
    // optional float server_game_time = 11;
    if (has_server_game_time()) {
      total_size += 1 + 4;
    }
    
    // optional fixed64 server_relay_connected_steam_id = 12;
    if (has_server_relay_connected_steam_id()) {
      total_size += 1 + 8;
    }
    
    // optional uint32 relay_slots_max = 13;
    if (has_relay_slots_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relay_slots_max());
    }
    
    // optional int32 relays_connected = 14;
    if (has_relays_connected()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->relays_connected());
    }
    
    // optional int32 relay_clients_connected = 15;
    if (has_relay_clients_connected()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->relay_clients_connected());
    }
    
    // optional fixed64 relayed_game_server_steam_id = 16;
    if (has_relayed_game_server_steam_id()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 parent_relay_count = 17;
    if (has_parent_relay_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parent_relay_count());
    }
    
    // optional fixed64 tv_secret_code = 18;
    if (has_tv_secret_code()) {
      total_size += 2 + 8;
    }
    
    // optional uint32 server_version = 19;
    if (has_server_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_version());
    }
    
    // optional uint32 server_cluster = 20;
    if (has_server_cluster()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_cluster());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGameServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGameServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGameServerInfo::MergeFrom(const CMsgGameServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_public_ip_addr()) {
      set_server_public_ip_addr(from.server_public_ip_addr());
    }
    if (from.has_server_private_ip_addr()) {
      set_server_private_ip_addr(from.server_private_ip_addr());
    }
    if (from.has_server_port()) {
      set_server_port(from.server_port());
    }
    if (from.has_server_tv_port()) {
      set_server_tv_port(from.server_tv_port());
    }
    if (from.has_server_key()) {
      set_server_key(from.server_key());
    }
    if (from.has_server_hibernation()) {
      set_server_hibernation(from.server_hibernation());
    }
    if (from.has_server_type()) {
      set_server_type(from.server_type());
    }
    if (from.has_server_region()) {
      set_server_region(from.server_region());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_server_loadavg()) {
      set_server_loadavg(from.server_loadavg());
    }
    if (from.has_server_tv_broadcast_time()) {
      set_server_tv_broadcast_time(from.server_tv_broadcast_time());
    }
    if (from.has_server_game_time()) {
      set_server_game_time(from.server_game_time());
    }
    if (from.has_server_relay_connected_steam_id()) {
      set_server_relay_connected_steam_id(from.server_relay_connected_steam_id());
    }
    if (from.has_relay_slots_max()) {
      set_relay_slots_max(from.relay_slots_max());
    }
    if (from.has_relays_connected()) {
      set_relays_connected(from.relays_connected());
    }
    if (from.has_relay_clients_connected()) {
      set_relay_clients_connected(from.relay_clients_connected());
    }
    if (from.has_relayed_game_server_steam_id()) {
      set_relayed_game_server_steam_id(from.relayed_game_server_steam_id());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_parent_relay_count()) {
      set_parent_relay_count(from.parent_relay_count());
    }
    if (from.has_tv_secret_code()) {
      set_tv_secret_code(from.tv_secret_code());
    }
    if (from.has_server_version()) {
      set_server_version(from.server_version());
    }
    if (from.has_server_cluster()) {
      set_server_cluster(from.server_cluster());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGameServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameServerInfo::CopyFrom(const CMsgGameServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerInfo::IsInitialized() const {
  
  return true;
}

void CMsgGameServerInfo::Swap(CMsgGameServerInfo* other) {
  if (other != this) {
    std::swap(server_public_ip_addr_, other->server_public_ip_addr_);
    std::swap(server_private_ip_addr_, other->server_private_ip_addr_);
    std::swap(server_port_, other->server_port_);
    std::swap(server_tv_port_, other->server_tv_port_);
    std::swap(server_key_, other->server_key_);
    std::swap(server_hibernation_, other->server_hibernation_);
    std::swap(server_type_, other->server_type_);
    std::swap(server_region_, other->server_region_);
    std::swap(server_loadavg_, other->server_loadavg_);
    std::swap(server_tv_broadcast_time_, other->server_tv_broadcast_time_);
    std::swap(server_game_time_, other->server_game_time_);
    std::swap(server_relay_connected_steam_id_, other->server_relay_connected_steam_id_);
    std::swap(relay_slots_max_, other->relay_slots_max_);
    std::swap(relays_connected_, other->relays_connected_);
    std::swap(relay_clients_connected_, other->relay_clients_connected_);
    std::swap(relayed_game_server_steam_id_, other->relayed_game_server_steam_id_);
    std::swap(parent_relay_count_, other->parent_relay_count_);
    std::swap(tv_secret_code_, other->tv_secret_code_);
    std::swap(server_version_, other->server_version_);
    std::swap(server_cluster_, other->server_cluster_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGameServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGameServerInfo_descriptor_;
  metadata.reflection = CMsgGameServerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgLeaverDetected::kSteamIdFieldNumber;
const int CMsgLeaverDetected::kLeaverStatusFieldNumber;
const int CMsgLeaverDetected::kObsoleteMassDisconnectFieldNumber;
const int CMsgLeaverDetected::kLeaverStateFieldNumber;
const int CMsgLeaverDetected::kServerClusterFieldNumber;
const int CMsgLeaverDetected::kDisconnectReasonFieldNumber;
#endif  // !_MSC_VER

CMsgLeaverDetected::CMsgLeaverDetected()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgLeaverDetected::InitAsDefaultInstance() {
  leaver_state_ = const_cast< ::CMsgLeaverState*>(&::CMsgLeaverState::default_instance());
}

CMsgLeaverDetected::CMsgLeaverDetected(const CMsgLeaverDetected& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgLeaverDetected::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  leaver_status_ = 0;
  obsolete_mass_disconnect_ = false;
  leaver_state_ = NULL;
  server_cluster_ = 0u;
  disconnect_reason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgLeaverDetected::~CMsgLeaverDetected() {
  SharedDtor();
}

void CMsgLeaverDetected::SharedDtor() {
  if (this != default_instance_) {
    delete leaver_state_;
  }
}

void CMsgLeaverDetected::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLeaverDetected::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLeaverDetected_descriptor_;
}

const CMsgLeaverDetected& CMsgLeaverDetected::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgLeaverDetected* CMsgLeaverDetected::default_instance_ = NULL;

CMsgLeaverDetected* CMsgLeaverDetected::New() const {
  return new CMsgLeaverDetected;
}

void CMsgLeaverDetected::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_ = GOOGLE_ULONGLONG(0);
    leaver_status_ = 0;
    obsolete_mass_disconnect_ = false;
    if (has_leaver_state()) {
      if (leaver_state_ != NULL) leaver_state_->::CMsgLeaverState::Clear();
    }
    server_cluster_ = 0u;
    disconnect_reason_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgLeaverDetected::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_leaver_status;
        break;
      }
      
      // optional .DOTALeaverStatus_t leaver_status = 2 [default = DOTA_LEAVER_NONE];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leaver_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (DOTALeaverStatus_t_IsValid(value)) {
            set_leaver_status(static_cast< DOTALeaverStatus_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_obsolete_mass_disconnect;
        break;
      }
      
      // optional bool obsolete_mass_disconnect = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_obsolete_mass_disconnect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obsolete_mass_disconnect_)));
          set_has_obsolete_mass_disconnect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_leaver_state;
        break;
      }
      
      // optional .CMsgLeaverState leaver_state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leaver_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leaver_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_server_cluster;
        break;
      }
      
      // optional uint32 server_cluster = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_cluster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_cluster_)));
          set_has_server_cluster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_disconnect_reason;
        break;
      }
      
      // optional .ENetworkDisconnectionReason disconnect_reason = 6 [default = NETWORK_DISCONNECT_INVALID];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_disconnect_reason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ENetworkDisconnectionReason_IsValid(value)) {
            set_disconnect_reason(static_cast< ENetworkDisconnectionReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgLeaverDetected::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }
  
  // optional .DOTALeaverStatus_t leaver_status = 2 [default = DOTA_LEAVER_NONE];
  if (has_leaver_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->leaver_status(), output);
  }
  
  // optional bool obsolete_mass_disconnect = 3;
  if (has_obsolete_mass_disconnect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->obsolete_mass_disconnect(), output);
  }
  
  // optional .CMsgLeaverState leaver_state = 4;
  if (has_leaver_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->leaver_state(), output);
  }
  
  // optional uint32 server_cluster = 5;
  if (has_server_cluster()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->server_cluster(), output);
  }
  
  // optional .ENetworkDisconnectionReason disconnect_reason = 6 [default = NETWORK_DISCONNECT_INVALID];
  if (has_disconnect_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->disconnect_reason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgLeaverDetected::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }
  
  // optional .DOTALeaverStatus_t leaver_status = 2 [default = DOTA_LEAVER_NONE];
  if (has_leaver_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->leaver_status(), target);
  }
  
  // optional bool obsolete_mass_disconnect = 3;
  if (has_obsolete_mass_disconnect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->obsolete_mass_disconnect(), target);
  }
  
  // optional .CMsgLeaverState leaver_state = 4;
  if (has_leaver_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->leaver_state(), target);
  }
  
  // optional uint32 server_cluster = 5;
  if (has_server_cluster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->server_cluster(), target);
  }
  
  // optional .ENetworkDisconnectionReason disconnect_reason = 6 [default = NETWORK_DISCONNECT_INVALID];
  if (has_disconnect_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->disconnect_reason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgLeaverDetected::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }
    
    // optional .DOTALeaverStatus_t leaver_status = 2 [default = DOTA_LEAVER_NONE];
    if (has_leaver_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->leaver_status());
    }
    
    // optional bool obsolete_mass_disconnect = 3;
    if (has_obsolete_mass_disconnect()) {
      total_size += 1 + 1;
    }
    
    // optional .CMsgLeaverState leaver_state = 4;
    if (has_leaver_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leaver_state());
    }
    
    // optional uint32 server_cluster = 5;
    if (has_server_cluster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_cluster());
    }
    
    // optional .ENetworkDisconnectionReason disconnect_reason = 6 [default = NETWORK_DISCONNECT_INVALID];
    if (has_disconnect_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->disconnect_reason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLeaverDetected::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgLeaverDetected* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgLeaverDetected*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgLeaverDetected::MergeFrom(const CMsgLeaverDetected& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
    if (from.has_leaver_status()) {
      set_leaver_status(from.leaver_status());
    }
    if (from.has_obsolete_mass_disconnect()) {
      set_obsolete_mass_disconnect(from.obsolete_mass_disconnect());
    }
    if (from.has_leaver_state()) {
      mutable_leaver_state()->::CMsgLeaverState::MergeFrom(from.leaver_state());
    }
    if (from.has_server_cluster()) {
      set_server_cluster(from.server_cluster());
    }
    if (from.has_disconnect_reason()) {
      set_disconnect_reason(from.disconnect_reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgLeaverDetected::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLeaverDetected::CopyFrom(const CMsgLeaverDetected& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLeaverDetected::IsInitialized() const {
  
  return true;
}

void CMsgLeaverDetected::Swap(CMsgLeaverDetected* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(leaver_status_, other->leaver_status_);
    std::swap(obsolete_mass_disconnect_, other->obsolete_mass_disconnect_);
    std::swap(leaver_state_, other->leaver_state_);
    std::swap(server_cluster_, other->server_cluster_);
    std::swap(disconnect_reason_, other->disconnect_reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgLeaverDetected::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgLeaverDetected_descriptor_;
  metadata.reflection = CMsgLeaverDetected_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgLeaverDetectedResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgLeaverDetectedResponse::CMsgLeaverDetectedResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgLeaverDetectedResponse::InitAsDefaultInstance() {
}

CMsgLeaverDetectedResponse::CMsgLeaverDetectedResponse(const CMsgLeaverDetectedResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgLeaverDetectedResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgLeaverDetectedResponse::~CMsgLeaverDetectedResponse() {
  SharedDtor();
}

void CMsgLeaverDetectedResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgLeaverDetectedResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLeaverDetectedResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLeaverDetectedResponse_descriptor_;
}

const CMsgLeaverDetectedResponse& CMsgLeaverDetectedResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgLeaverDetectedResponse* CMsgLeaverDetectedResponse::default_instance_ = NULL;

CMsgLeaverDetectedResponse* CMsgLeaverDetectedResponse::New() const {
  return new CMsgLeaverDetectedResponse;
}

void CMsgLeaverDetectedResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgLeaverDetectedResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgLeaverDetectedResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgLeaverDetectedResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgLeaverDetectedResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLeaverDetectedResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgLeaverDetectedResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgLeaverDetectedResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgLeaverDetectedResponse::MergeFrom(const CMsgLeaverDetectedResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgLeaverDetectedResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLeaverDetectedResponse::CopyFrom(const CMsgLeaverDetectedResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLeaverDetectedResponse::IsInitialized() const {
  
  return true;
}

void CMsgLeaverDetectedResponse::Swap(CMsgLeaverDetectedResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgLeaverDetectedResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgLeaverDetectedResponse_descriptor_;
  metadata.reflection = CMsgLeaverDetectedResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAFantasyPlayerStats::kPlayerAccountIdFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kMatchIdFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kMatchCompletedFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kLevelFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kKillsFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kDeathsFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kAssistsFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kLastHitsFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kDeniesFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kGpmFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kXppmFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kStunsFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kHealingFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kTowerKillsFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kRoshanKillsFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyPlayerStats::CMsgDOTAFantasyPlayerStats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgDOTAFantasyPlayerStats::InitAsDefaultInstance() {
}

CMsgDOTAFantasyPlayerStats::CMsgDOTAFantasyPlayerStats(const CMsgDOTAFantasyPlayerStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerStats::SharedCtor() {
  _cached_size_ = 0;
  player_account_id_ = 0u;
  match_id_ = 0u;
  match_completed_ = false;
  level_ = 0u;
  kills_ = 0u;
  deaths_ = 0u;
  assists_ = 0u;
  last_hits_ = 0u;
  denies_ = 0u;
  gpm_ = 0;
  xppm_ = 0;
  stuns_ = 0;
  healing_ = 0;
  tower_kills_ = 0u;
  roshan_kills_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyPlayerStats::~CMsgDOTAFantasyPlayerStats() {
  SharedDtor();
}

void CMsgDOTAFantasyPlayerStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyPlayerStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyPlayerStats_descriptor_;
}

const CMsgDOTAFantasyPlayerStats& CMsgDOTAFantasyPlayerStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgDOTAFantasyPlayerStats* CMsgDOTAFantasyPlayerStats::default_instance_ = NULL;

CMsgDOTAFantasyPlayerStats* CMsgDOTAFantasyPlayerStats::New() const {
  return new CMsgDOTAFantasyPlayerStats;
}

void CMsgDOTAFantasyPlayerStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_account_id_ = 0u;
    match_id_ = 0u;
    match_completed_ = false;
    level_ = 0u;
    kills_ = 0u;
    deaths_ = 0u;
    assists_ = 0u;
    last_hits_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    denies_ = 0u;
    gpm_ = 0;
    xppm_ = 0;
    stuns_ = 0;
    healing_ = 0;
    tower_kills_ = 0u;
    roshan_kills_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAFantasyPlayerStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_account_id_)));
          set_has_player_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_match_id;
        break;
      }
      
      // optional uint32 match_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_match_completed;
        break;
      }
      
      // optional bool match_completed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_completed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &match_completed_)));
          set_has_match_completed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_kills;
        break;
      }
      
      // optional uint32 kills = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
          set_has_kills();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_deaths;
        break;
      }
      
      // optional uint32 deaths = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deaths:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deaths_)));
          set_has_deaths();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_assists;
        break;
      }
      
      // optional uint32 assists = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_assists:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assists_)));
          set_has_assists();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_last_hits;
        break;
      }
      
      // optional uint32 last_hits = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_hits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_hits_)));
          set_has_last_hits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_denies;
        break;
      }
      
      // optional uint32 denies = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_denies:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &denies_)));
          set_has_denies();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_gpm;
        break;
      }
      
      // optional float gpm = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_gpm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gpm_)));
          set_has_gpm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_xppm;
        break;
      }
      
      // optional float xppm = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_xppm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xppm_)));
          set_has_xppm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_stuns;
        break;
      }
      
      // optional float stuns = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_stuns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stuns_)));
          set_has_stuns();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_healing;
        break;
      }
      
      // optional float healing = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_healing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &healing_)));
          set_has_healing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_tower_kills;
        break;
      }
      
      // optional uint32 tower_kills = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tower_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tower_kills_)));
          set_has_tower_kills();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_roshan_kills;
        break;
      }
      
      // optional uint32 roshan_kills = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roshan_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roshan_kills_)));
          set_has_roshan_kills();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgDOTAFantasyPlayerStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 player_account_id = 1;
  if (has_player_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_account_id(), output);
  }
  
  // optional uint32 match_id = 2;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->match_id(), output);
  }
  
  // optional bool match_completed = 3;
  if (has_match_completed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->match_completed(), output);
  }
  
  // optional uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }
  
  // optional uint32 kills = 5;
  if (has_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->kills(), output);
  }
  
  // optional uint32 deaths = 6;
  if (has_deaths()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->deaths(), output);
  }
  
  // optional uint32 assists = 7;
  if (has_assists()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->assists(), output);
  }
  
  // optional uint32 last_hits = 8;
  if (has_last_hits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->last_hits(), output);
  }
  
  // optional uint32 denies = 9;
  if (has_denies()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->denies(), output);
  }
  
  // optional float gpm = 10;
  if (has_gpm()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->gpm(), output);
  }
  
  // optional float xppm = 11;
  if (has_xppm()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->xppm(), output);
  }
  
  // optional float stuns = 12;
  if (has_stuns()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->stuns(), output);
  }
  
  // optional float healing = 13;
  if (has_healing()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->healing(), output);
  }
  
  // optional uint32 tower_kills = 14;
  if (has_tower_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->tower_kills(), output);
  }
  
  // optional uint32 roshan_kills = 15;
  if (has_roshan_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->roshan_kills(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 player_account_id = 1;
  if (has_player_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_account_id(), target);
  }
  
  // optional uint32 match_id = 2;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->match_id(), target);
  }
  
  // optional bool match_completed = 3;
  if (has_match_completed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->match_completed(), target);
  }
  
  // optional uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }
  
  // optional uint32 kills = 5;
  if (has_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->kills(), target);
  }
  
  // optional uint32 deaths = 6;
  if (has_deaths()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->deaths(), target);
  }
  
  // optional uint32 assists = 7;
  if (has_assists()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->assists(), target);
  }
  
  // optional uint32 last_hits = 8;
  if (has_last_hits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->last_hits(), target);
  }
  
  // optional uint32 denies = 9;
  if (has_denies()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->denies(), target);
  }
  
  // optional float gpm = 10;
  if (has_gpm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->gpm(), target);
  }
  
  // optional float xppm = 11;
  if (has_xppm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->xppm(), target);
  }
  
  // optional float stuns = 12;
  if (has_stuns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->stuns(), target);
  }
  
  // optional float healing = 13;
  if (has_healing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->healing(), target);
  }
  
  // optional uint32 tower_kills = 14;
  if (has_tower_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->tower_kills(), target);
  }
  
  // optional uint32 roshan_kills = 15;
  if (has_roshan_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->roshan_kills(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgDOTAFantasyPlayerStats::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 player_account_id = 1;
    if (has_player_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_account_id());
    }
    
    // optional uint32 match_id = 2;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_id());
    }
    
    // optional bool match_completed = 3;
    if (has_match_completed()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // optional uint32 kills = 5;
    if (has_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }
    
    // optional uint32 deaths = 6;
    if (has_deaths()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deaths());
    }
    
    // optional uint32 assists = 7;
    if (has_assists()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assists());
    }
    
    // optional uint32 last_hits = 8;
    if (has_last_hits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_hits());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 denies = 9;
    if (has_denies()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->denies());
    }
    
    // optional float gpm = 10;
    if (has_gpm()) {
      total_size += 1 + 4;
    }
    
    // optional float xppm = 11;
    if (has_xppm()) {
      total_size += 1 + 4;
    }
    
    // optional float stuns = 12;
    if (has_stuns()) {
      total_size += 1 + 4;
    }
    
    // optional float healing = 13;
    if (has_healing()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 tower_kills = 14;
    if (has_tower_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tower_kills());
    }
    
    // optional uint32 roshan_kills = 15;
    if (has_roshan_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roshan_kills());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyPlayerStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAFantasyPlayerStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerStats::MergeFrom(const CMsgDOTAFantasyPlayerStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_account_id()) {
      set_player_account_id(from.player_account_id());
    }
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
    if (from.has_match_completed()) {
      set_match_completed(from.match_completed());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_kills()) {
      set_kills(from.kills());
    }
    if (from.has_deaths()) {
      set_deaths(from.deaths());
    }
    if (from.has_assists()) {
      set_assists(from.assists());
    }
    if (from.has_last_hits()) {
      set_last_hits(from.last_hits());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_denies()) {
      set_denies(from.denies());
    }
    if (from.has_gpm()) {
      set_gpm(from.gpm());
    }
    if (from.has_xppm()) {
      set_xppm(from.xppm());
    }
    if (from.has_stuns()) {
      set_stuns(from.stuns());
    }
    if (from.has_healing()) {
      set_healing(from.healing());
    }
    if (from.has_tower_kills()) {
      set_tower_kills(from.tower_kills());
    }
    if (from.has_roshan_kills()) {
      set_roshan_kills(from.roshan_kills());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAFantasyPlayerStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerStats::CopyFrom(const CMsgDOTAFantasyPlayerStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerStats::IsInitialized() const {
  
  return true;
}

void CMsgDOTAFantasyPlayerStats::Swap(CMsgDOTAFantasyPlayerStats* other) {
  if (other != this) {
    std::swap(player_account_id_, other->player_account_id_);
    std::swap(match_id_, other->match_id_);
    std::swap(match_completed_, other->match_completed_);
    std::swap(level_, other->level_);
    std::swap(kills_, other->kills_);
    std::swap(deaths_, other->deaths_);
    std::swap(assists_, other->assists_);
    std::swap(last_hits_, other->last_hits_);
    std::swap(denies_, other->denies_);
    std::swap(gpm_, other->gpm_);
    std::swap(xppm_, other->xppm_);
    std::swap(stuns_, other->stuns_);
    std::swap(healing_, other->healing_);
    std::swap(tower_kills_, other->tower_kills_);
    std::swap(roshan_kills_, other->roshan_kills_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyPlayerStats_descriptor_;
  metadata.reflection = CMsgDOTAFantasyPlayerStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGameMatchSignOut_CTeam_CPlayer::kAccountIdFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kHeroIdFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kItemsFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kGoldFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kKillsFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kDeathsFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kAssistsFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kLeaverStatusFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kLastHitsFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kDeniesFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kGoldPerMinFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kXpPerMinuteFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kGoldSpentFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kLevelFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kHeroDamageFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kTowerDamageFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kHeroHealingFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kTimeLastSeenFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kSupportAbilityValueFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kPartyIdFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kScaledKillsFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kScaledDeathsFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kScaledAssistsFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kClaimedFarmGoldFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kSupportGoldFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kClaimedDeniesFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kClaimedMissesFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kMissesFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kAbilityUpgradesFieldNumber;
const int CMsgGameMatchSignOut_CTeam_CPlayer::kAdditionalUnitsInventoryFieldNumber;
#endif  // !_MSC_VER

CMsgGameMatchSignOut_CTeam_CPlayer::CMsgGameMatchSignOut_CTeam_CPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGameMatchSignOut_CTeam_CPlayer::InitAsDefaultInstance() {
}

CMsgGameMatchSignOut_CTeam_CPlayer::CMsgGameMatchSignOut_CTeam_CPlayer(const CMsgGameMatchSignOut_CTeam_CPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGameMatchSignOut_CTeam_CPlayer::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = GOOGLE_ULONGLONG(0);
  hero_id_ = 0u;
  gold_ = 0u;
  kills_ = 0u;
  deaths_ = 0u;
  assists_ = 0u;
  leaver_status_ = 0u;
  last_hits_ = 0u;
  denies_ = 0u;
  gold_per_min_ = 0u;
  xp_per_minute_ = 0u;
  gold_spent_ = 0u;
  level_ = 0u;
  hero_damage_ = 0u;
  tower_damage_ = 0u;
  hero_healing_ = 0u;
  time_last_seen_ = 0u;
  support_ability_value_ = 0u;
  party_id_ = GOOGLE_ULONGLONG(0);
  scaled_kills_ = 0;
  scaled_deaths_ = 0;
  scaled_assists_ = 0;
  claimed_farm_gold_ = 0u;
  support_gold_ = 0u;
  claimed_denies_ = 0u;
  claimed_misses_ = 0u;
  misses_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGameMatchSignOut_CTeam_CPlayer::~CMsgGameMatchSignOut_CTeam_CPlayer() {
  SharedDtor();
}

void CMsgGameMatchSignOut_CTeam_CPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGameMatchSignOut_CTeam_CPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameMatchSignOut_CTeam_CPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGameMatchSignOut_CTeam_CPlayer_descriptor_;
}

const CMsgGameMatchSignOut_CTeam_CPlayer& CMsgGameMatchSignOut_CTeam_CPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgGameMatchSignOut_CTeam_CPlayer* CMsgGameMatchSignOut_CTeam_CPlayer::default_instance_ = NULL;

CMsgGameMatchSignOut_CTeam_CPlayer* CMsgGameMatchSignOut_CTeam_CPlayer::New() const {
  return new CMsgGameMatchSignOut_CTeam_CPlayer;
}

void CMsgGameMatchSignOut_CTeam_CPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = GOOGLE_ULONGLONG(0);
    hero_id_ = 0u;
    gold_ = 0u;
    kills_ = 0u;
    deaths_ = 0u;
    assists_ = 0u;
    leaver_status_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    last_hits_ = 0u;
    denies_ = 0u;
    gold_per_min_ = 0u;
    xp_per_minute_ = 0u;
    gold_spent_ = 0u;
    level_ = 0u;
    hero_damage_ = 0u;
    tower_damage_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    hero_healing_ = 0u;
    time_last_seen_ = 0u;
    support_ability_value_ = 0u;
    party_id_ = GOOGLE_ULONGLONG(0);
    scaled_kills_ = 0;
    scaled_deaths_ = 0;
    scaled_assists_ = 0;
    claimed_farm_gold_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    support_gold_ = 0u;
    claimed_denies_ = 0u;
    claimed_misses_ = 0u;
    misses_ = 0u;
  }
  items_.Clear();
  ability_upgrades_.Clear();
  additional_units_inventory_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGameMatchSignOut_CTeam_CPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hero_id;
        break;
      }
      
      // optional uint32 hero_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_items;
        break;
      }
      
      // repeated uint32 items = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_items:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_items())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_items())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_items;
        if (input->ExpectTag(40)) goto parse_gold;
        break;
      }
      
      // optional uint32 gold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_kills;
        break;
      }
      
      // optional uint32 kills = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
          set_has_kills();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_deaths;
        break;
      }
      
      // optional uint32 deaths = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deaths:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deaths_)));
          set_has_deaths();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_assists;
        break;
      }
      
      // optional uint32 assists = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_assists:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assists_)));
          set_has_assists();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_leaver_status;
        break;
      }
      
      // optional uint32 leaver_status = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leaver_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leaver_status_)));
          set_has_leaver_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_last_hits;
        break;
      }
      
      // optional uint32 last_hits = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_hits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_hits_)));
          set_has_last_hits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_denies;
        break;
      }
      
      // optional uint32 denies = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_denies:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &denies_)));
          set_has_denies();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_gold_per_min;
        break;
      }
      
      // optional uint32 gold_per_min = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold_per_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_per_min_)));
          set_has_gold_per_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_xp_per_minute;
        break;
      }
      
      // optional uint32 xp_per_minute = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xp_per_minute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xp_per_minute_)));
          set_has_xp_per_minute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_gold_spent;
        break;
      }
      
      // optional uint32 gold_spent = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold_spent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_spent_)));
          set_has_gold_spent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_hero_damage;
        break;
      }
      
      // optional uint32 hero_damage = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_damage_)));
          set_has_hero_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_tower_damage;
        break;
      }
      
      // optional uint32 tower_damage = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tower_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tower_damage_)));
          set_has_tower_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_hero_healing;
        break;
      }
      
      // optional uint32 hero_healing = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_healing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_healing_)));
          set_has_hero_healing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_time_last_seen;
        break;
      }
      
      // optional uint32 time_last_seen = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_last_seen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_last_seen_)));
          set_has_time_last_seen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_support_ability_value;
        break;
      }
      
      // optional uint32 support_ability_value = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_support_ability_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &support_ability_value_)));
          set_has_support_ability_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_party_id;
        break;
      }
      
      // optional uint64 party_id = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_party_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &party_id_)));
          set_has_party_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(197)) goto parse_scaled_kills;
        break;
      }
      
      // optional float scaled_kills = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scaled_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scaled_kills_)));
          set_has_scaled_kills();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(205)) goto parse_scaled_deaths;
        break;
      }
      
      // optional float scaled_deaths = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scaled_deaths:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scaled_deaths_)));
          set_has_scaled_deaths();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(213)) goto parse_scaled_assists;
        break;
      }
      
      // optional float scaled_assists = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scaled_assists:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scaled_assists_)));
          set_has_scaled_assists();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_claimed_farm_gold;
        break;
      }
      
      // optional uint32 claimed_farm_gold = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_claimed_farm_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &claimed_farm_gold_)));
          set_has_claimed_farm_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_support_gold;
        break;
      }
      
      // optional uint32 support_gold = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_support_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &support_gold_)));
          set_has_support_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_claimed_denies;
        break;
      }
      
      // optional uint32 claimed_denies = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_claimed_denies:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &claimed_denies_)));
          set_has_claimed_denies();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_claimed_misses;
        break;
      }
      
      // optional uint32 claimed_misses = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_claimed_misses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &claimed_misses_)));
          set_has_claimed_misses();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_misses;
        break;
      }
      
      // optional uint32 misses = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_misses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &misses_)));
          set_has_misses();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_ability_upgrades;
        break;
      }
      
      // repeated .CMatchPlayerAbilityUpgrade ability_upgrades = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ability_upgrades:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ability_upgrades()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_ability_upgrades;
        if (input->ExpectTag(266)) goto parse_additional_units_inventory;
        break;
      }
      
      // repeated .CMatchAdditionalUnitInventory additional_units_inventory = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_additional_units_inventory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_additional_units_inventory()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_additional_units_inventory;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGameMatchSignOut_CTeam_CPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->account_id(), output);
  }
  
  // optional uint32 hero_id = 3;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hero_id(), output);
  }
  
  // repeated uint32 items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->items(i), output);
  }
  
  // optional uint32 gold = 5;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->gold(), output);
  }
  
  // optional uint32 kills = 6;
  if (has_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->kills(), output);
  }
  
  // optional uint32 deaths = 7;
  if (has_deaths()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->deaths(), output);
  }
  
  // optional uint32 assists = 8;
  if (has_assists()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->assists(), output);
  }
  
  // optional uint32 leaver_status = 9;
  if (has_leaver_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->leaver_status(), output);
  }
  
  // optional uint32 last_hits = 10;
  if (has_last_hits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->last_hits(), output);
  }
  
  // optional uint32 denies = 11;
  if (has_denies()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->denies(), output);
  }
  
  // optional uint32 gold_per_min = 12;
  if (has_gold_per_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->gold_per_min(), output);
  }
  
  // optional uint32 xp_per_minute = 13;
  if (has_xp_per_minute()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->xp_per_minute(), output);
  }
  
  // optional uint32 gold_spent = 14;
  if (has_gold_spent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->gold_spent(), output);
  }
  
  // optional uint32 level = 15;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->level(), output);
  }
  
  // optional uint32 hero_damage = 16;
  if (has_hero_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->hero_damage(), output);
  }
  
  // optional uint32 tower_damage = 17;
  if (has_tower_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->tower_damage(), output);
  }
  
  // optional uint32 hero_healing = 18;
  if (has_hero_healing()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->hero_healing(), output);
  }
  
  // optional uint32 time_last_seen = 19;
  if (has_time_last_seen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->time_last_seen(), output);
  }
  
  // optional uint32 support_ability_value = 20;
  if (has_support_ability_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->support_ability_value(), output);
  }
  
  // optional uint64 party_id = 21;
  if (has_party_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->party_id(), output);
  }
  
  // optional float scaled_kills = 24;
  if (has_scaled_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->scaled_kills(), output);
  }
  
  // optional float scaled_deaths = 25;
  if (has_scaled_deaths()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->scaled_deaths(), output);
  }
  
  // optional float scaled_assists = 26;
  if (has_scaled_assists()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->scaled_assists(), output);
  }
  
  // optional uint32 claimed_farm_gold = 27;
  if (has_claimed_farm_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->claimed_farm_gold(), output);
  }
  
  // optional uint32 support_gold = 28;
  if (has_support_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->support_gold(), output);
  }
  
  // optional uint32 claimed_denies = 29;
  if (has_claimed_denies()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->claimed_denies(), output);
  }
  
  // optional uint32 claimed_misses = 30;
  if (has_claimed_misses()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->claimed_misses(), output);
  }
  
  // optional uint32 misses = 31;
  if (has_misses()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->misses(), output);
  }
  
  // repeated .CMatchPlayerAbilityUpgrade ability_upgrades = 32;
  for (int i = 0; i < this->ability_upgrades_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->ability_upgrades(i), output);
  }
  
  // repeated .CMatchAdditionalUnitInventory additional_units_inventory = 33;
  for (int i = 0; i < this->additional_units_inventory_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->additional_units_inventory(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGameMatchSignOut_CTeam_CPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->account_id(), target);
  }
  
  // optional uint32 hero_id = 3;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hero_id(), target);
  }
  
  // repeated uint32 items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->items(i), target);
  }
  
  // optional uint32 gold = 5;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->gold(), target);
  }
  
  // optional uint32 kills = 6;
  if (has_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->kills(), target);
  }
  
  // optional uint32 deaths = 7;
  if (has_deaths()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->deaths(), target);
  }
  
  // optional uint32 assists = 8;
  if (has_assists()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->assists(), target);
  }
  
  // optional uint32 leaver_status = 9;
  if (has_leaver_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->leaver_status(), target);
  }
  
  // optional uint32 last_hits = 10;
  if (has_last_hits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->last_hits(), target);
  }
  
  // optional uint32 denies = 11;
  if (has_denies()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->denies(), target);
  }
  
  // optional uint32 gold_per_min = 12;
  if (has_gold_per_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->gold_per_min(), target);
  }
  
  // optional uint32 xp_per_minute = 13;
  if (has_xp_per_minute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->xp_per_minute(), target);
  }
  
  // optional uint32 gold_spent = 14;
  if (has_gold_spent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->gold_spent(), target);
  }
  
  // optional uint32 level = 15;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->level(), target);
  }
  
  // optional uint32 hero_damage = 16;
  if (has_hero_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->hero_damage(), target);
  }
  
  // optional uint32 tower_damage = 17;
  if (has_tower_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->tower_damage(), target);
  }
  
  // optional uint32 hero_healing = 18;
  if (has_hero_healing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->hero_healing(), target);
  }
  
  // optional uint32 time_last_seen = 19;
  if (has_time_last_seen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->time_last_seen(), target);
  }
  
  // optional uint32 support_ability_value = 20;
  if (has_support_ability_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->support_ability_value(), target);
  }
  
  // optional uint64 party_id = 21;
  if (has_party_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->party_id(), target);
  }
  
  // optional float scaled_kills = 24;
  if (has_scaled_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->scaled_kills(), target);
  }
  
  // optional float scaled_deaths = 25;
  if (has_scaled_deaths()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->scaled_deaths(), target);
  }
  
  // optional float scaled_assists = 26;
  if (has_scaled_assists()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->scaled_assists(), target);
  }
  
  // optional uint32 claimed_farm_gold = 27;
  if (has_claimed_farm_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->claimed_farm_gold(), target);
  }
  
  // optional uint32 support_gold = 28;
  if (has_support_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->support_gold(), target);
  }
  
  // optional uint32 claimed_denies = 29;
  if (has_claimed_denies()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->claimed_denies(), target);
  }
  
  // optional uint32 claimed_misses = 30;
  if (has_claimed_misses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->claimed_misses(), target);
  }
  
  // optional uint32 misses = 31;
  if (has_misses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->misses(), target);
  }
  
  // repeated .CMatchPlayerAbilityUpgrade ability_upgrades = 32;
  for (int i = 0; i < this->ability_upgrades_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->ability_upgrades(i), target);
  }
  
  // repeated .CMatchAdditionalUnitInventory additional_units_inventory = 33;
  for (int i = 0; i < this->additional_units_inventory_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->additional_units_inventory(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGameMatchSignOut_CTeam_CPlayer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 account_id = 1;
    if (has_account_id()) {
      total_size += 1 + 8;
    }
    
    // optional uint32 hero_id = 3;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }
    
    // optional uint32 gold = 5;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }
    
    // optional uint32 kills = 6;
    if (has_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }
    
    // optional uint32 deaths = 7;
    if (has_deaths()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deaths());
    }
    
    // optional uint32 assists = 8;
    if (has_assists()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assists());
    }
    
    // optional uint32 leaver_status = 9;
    if (has_leaver_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leaver_status());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 last_hits = 10;
    if (has_last_hits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_hits());
    }
    
    // optional uint32 denies = 11;
    if (has_denies()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->denies());
    }
    
    // optional uint32 gold_per_min = 12;
    if (has_gold_per_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold_per_min());
    }
    
    // optional uint32 xp_per_minute = 13;
    if (has_xp_per_minute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xp_per_minute());
    }
    
    // optional uint32 gold_spent = 14;
    if (has_gold_spent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold_spent());
    }
    
    // optional uint32 level = 15;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // optional uint32 hero_damage = 16;
    if (has_hero_damage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_damage());
    }
    
    // optional uint32 tower_damage = 17;
    if (has_tower_damage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tower_damage());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 hero_healing = 18;
    if (has_hero_healing()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_healing());
    }
    
    // optional uint32 time_last_seen = 19;
    if (has_time_last_seen()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_last_seen());
    }
    
    // optional uint32 support_ability_value = 20;
    if (has_support_ability_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->support_ability_value());
    }
    
    // optional uint64 party_id = 21;
    if (has_party_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->party_id());
    }
    
    // optional float scaled_kills = 24;
    if (has_scaled_kills()) {
      total_size += 2 + 4;
    }
    
    // optional float scaled_deaths = 25;
    if (has_scaled_deaths()) {
      total_size += 2 + 4;
    }
    
    // optional float scaled_assists = 26;
    if (has_scaled_assists()) {
      total_size += 2 + 4;
    }
    
    // optional uint32 claimed_farm_gold = 27;
    if (has_claimed_farm_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->claimed_farm_gold());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 support_gold = 28;
    if (has_support_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->support_gold());
    }
    
    // optional uint32 claimed_denies = 29;
    if (has_claimed_denies()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->claimed_denies());
    }
    
    // optional uint32 claimed_misses = 30;
    if (has_claimed_misses()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->claimed_misses());
    }
    
    // optional uint32 misses = 31;
    if (has_misses()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->misses());
    }
    
  }
  // repeated uint32 items = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->items_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->items(i));
    }
    total_size += 1 * this->items_size() + data_size;
  }
  
  // repeated .CMatchPlayerAbilityUpgrade ability_upgrades = 32;
  total_size += 2 * this->ability_upgrades_size();
  for (int i = 0; i < this->ability_upgrades_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ability_upgrades(i));
  }
  
  // repeated .CMatchAdditionalUnitInventory additional_units_inventory = 33;
  total_size += 2 * this->additional_units_inventory_size();
  for (int i = 0; i < this->additional_units_inventory_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->additional_units_inventory(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameMatchSignOut_CTeam_CPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGameMatchSignOut_CTeam_CPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGameMatchSignOut_CTeam_CPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOut_CTeam_CPlayer::MergeFrom(const CMsgGameMatchSignOut_CTeam_CPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  ability_upgrades_.MergeFrom(from.ability_upgrades_);
  additional_units_inventory_.MergeFrom(from.additional_units_inventory_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_kills()) {
      set_kills(from.kills());
    }
    if (from.has_deaths()) {
      set_deaths(from.deaths());
    }
    if (from.has_assists()) {
      set_assists(from.assists());
    }
    if (from.has_leaver_status()) {
      set_leaver_status(from.leaver_status());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_last_hits()) {
      set_last_hits(from.last_hits());
    }
    if (from.has_denies()) {
      set_denies(from.denies());
    }
    if (from.has_gold_per_min()) {
      set_gold_per_min(from.gold_per_min());
    }
    if (from.has_xp_per_minute()) {
      set_xp_per_minute(from.xp_per_minute());
    }
    if (from.has_gold_spent()) {
      set_gold_spent(from.gold_spent());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_hero_damage()) {
      set_hero_damage(from.hero_damage());
    }
    if (from.has_tower_damage()) {
      set_tower_damage(from.tower_damage());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_hero_healing()) {
      set_hero_healing(from.hero_healing());
    }
    if (from.has_time_last_seen()) {
      set_time_last_seen(from.time_last_seen());
    }
    if (from.has_support_ability_value()) {
      set_support_ability_value(from.support_ability_value());
    }
    if (from.has_party_id()) {
      set_party_id(from.party_id());
    }
    if (from.has_scaled_kills()) {
      set_scaled_kills(from.scaled_kills());
    }
    if (from.has_scaled_deaths()) {
      set_scaled_deaths(from.scaled_deaths());
    }
    if (from.has_scaled_assists()) {
      set_scaled_assists(from.scaled_assists());
    }
    if (from.has_claimed_farm_gold()) {
      set_claimed_farm_gold(from.claimed_farm_gold());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_support_gold()) {
      set_support_gold(from.support_gold());
    }
    if (from.has_claimed_denies()) {
      set_claimed_denies(from.claimed_denies());
    }
    if (from.has_claimed_misses()) {
      set_claimed_misses(from.claimed_misses());
    }
    if (from.has_misses()) {
      set_misses(from.misses());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGameMatchSignOut_CTeam_CPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOut_CTeam_CPlayer::CopyFrom(const CMsgGameMatchSignOut_CTeam_CPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut_CTeam_CPlayer::IsInitialized() const {
  
  return true;
}

void CMsgGameMatchSignOut_CTeam_CPlayer::Swap(CMsgGameMatchSignOut_CTeam_CPlayer* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(hero_id_, other->hero_id_);
    items_.Swap(&other->items_);
    std::swap(gold_, other->gold_);
    std::swap(kills_, other->kills_);
    std::swap(deaths_, other->deaths_);
    std::swap(assists_, other->assists_);
    std::swap(leaver_status_, other->leaver_status_);
    std::swap(last_hits_, other->last_hits_);
    std::swap(denies_, other->denies_);
    std::swap(gold_per_min_, other->gold_per_min_);
    std::swap(xp_per_minute_, other->xp_per_minute_);
    std::swap(gold_spent_, other->gold_spent_);
    std::swap(level_, other->level_);
    std::swap(hero_damage_, other->hero_damage_);
    std::swap(tower_damage_, other->tower_damage_);
    std::swap(hero_healing_, other->hero_healing_);
    std::swap(time_last_seen_, other->time_last_seen_);
    std::swap(support_ability_value_, other->support_ability_value_);
    std::swap(party_id_, other->party_id_);
    std::swap(scaled_kills_, other->scaled_kills_);
    std::swap(scaled_deaths_, other->scaled_deaths_);
    std::swap(scaled_assists_, other->scaled_assists_);
    std::swap(claimed_farm_gold_, other->claimed_farm_gold_);
    std::swap(support_gold_, other->support_gold_);
    std::swap(claimed_denies_, other->claimed_denies_);
    std::swap(claimed_misses_, other->claimed_misses_);
    std::swap(misses_, other->misses_);
    ability_upgrades_.Swap(&other->ability_upgrades_);
    additional_units_inventory_.Swap(&other->additional_units_inventory_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGameMatchSignOut_CTeam_CPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGameMatchSignOut_CTeam_CPlayer_descriptor_;
  metadata.reflection = CMsgGameMatchSignOut_CTeam_CPlayer_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgGameMatchSignOut_CTeam::kPlayersFieldNumber;
#endif  // !_MSC_VER

CMsgGameMatchSignOut_CTeam::CMsgGameMatchSignOut_CTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGameMatchSignOut_CTeam::InitAsDefaultInstance() {
}

CMsgGameMatchSignOut_CTeam::CMsgGameMatchSignOut_CTeam(const CMsgGameMatchSignOut_CTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGameMatchSignOut_CTeam::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGameMatchSignOut_CTeam::~CMsgGameMatchSignOut_CTeam() {
  SharedDtor();
}

void CMsgGameMatchSignOut_CTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGameMatchSignOut_CTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameMatchSignOut_CTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGameMatchSignOut_CTeam_descriptor_;
}

const CMsgGameMatchSignOut_CTeam& CMsgGameMatchSignOut_CTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgGameMatchSignOut_CTeam* CMsgGameMatchSignOut_CTeam::default_instance_ = NULL;

CMsgGameMatchSignOut_CTeam* CMsgGameMatchSignOut_CTeam::New() const {
  return new CMsgGameMatchSignOut_CTeam;
}

void CMsgGameMatchSignOut_CTeam::Clear() {
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGameMatchSignOut_CTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgGameMatchSignOut.CTeam.CPlayer players = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_players;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGameMatchSignOut_CTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgGameMatchSignOut.CTeam.CPlayer players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGameMatchSignOut_CTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgGameMatchSignOut.CTeam.CPlayer players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->players(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGameMatchSignOut_CTeam::ByteSize() const {
  int total_size = 0;
  
  // repeated .CMsgGameMatchSignOut.CTeam.CPlayer players = 1;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameMatchSignOut_CTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGameMatchSignOut_CTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGameMatchSignOut_CTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOut_CTeam::MergeFrom(const CMsgGameMatchSignOut_CTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGameMatchSignOut_CTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOut_CTeam::CopyFrom(const CMsgGameMatchSignOut_CTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut_CTeam::IsInitialized() const {
  
  return true;
}

void CMsgGameMatchSignOut_CTeam::Swap(CMsgGameMatchSignOut_CTeam* other) {
  if (other != this) {
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGameMatchSignOut_CTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGameMatchSignOut_CTeam_descriptor_;
  metadata.reflection = CMsgGameMatchSignOut_CTeam_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgGameMatchSignOut_CAdditionalSignoutMsg::kIdFieldNumber;
const int CMsgGameMatchSignOut_CAdditionalSignoutMsg::kContentsFieldNumber;
#endif  // !_MSC_VER

CMsgGameMatchSignOut_CAdditionalSignoutMsg::CMsgGameMatchSignOut_CAdditionalSignoutMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::InitAsDefaultInstance() {
}

CMsgGameMatchSignOut_CAdditionalSignoutMsg::CMsgGameMatchSignOut_CAdditionalSignoutMsg(const CMsgGameMatchSignOut_CAdditionalSignoutMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGameMatchSignOut_CAdditionalSignoutMsg::~CMsgGameMatchSignOut_CAdditionalSignoutMsg() {
  SharedDtor();
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::SharedDtor() {
  if (contents_ != &::google::protobuf::internal::kEmptyString) {
    delete contents_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameMatchSignOut_CAdditionalSignoutMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGameMatchSignOut_CAdditionalSignoutMsg_descriptor_;
}

const CMsgGameMatchSignOut_CAdditionalSignoutMsg& CMsgGameMatchSignOut_CAdditionalSignoutMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgGameMatchSignOut_CAdditionalSignoutMsg* CMsgGameMatchSignOut_CAdditionalSignoutMsg::default_instance_ = NULL;

CMsgGameMatchSignOut_CAdditionalSignoutMsg* CMsgGameMatchSignOut_CAdditionalSignoutMsg::New() const {
  return new CMsgGameMatchSignOut_CAdditionalSignoutMsg;
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_contents()) {
      if (contents_ != &::google::protobuf::internal::kEmptyString) {
        contents_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGameMatchSignOut_CAdditionalSignoutMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_contents;
        break;
      }
      
      // optional bytes contents = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_contents()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional bytes contents = 2;
  if (has_contents()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->contents(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGameMatchSignOut_CAdditionalSignoutMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional bytes contents = 2;
  if (has_contents()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->contents(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGameMatchSignOut_CAdditionalSignoutMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional bytes contents = 2;
    if (has_contents()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->contents());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGameMatchSignOut_CAdditionalSignoutMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGameMatchSignOut_CAdditionalSignoutMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::MergeFrom(const CMsgGameMatchSignOut_CAdditionalSignoutMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_contents()) {
      set_contents(from.contents());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::CopyFrom(const CMsgGameMatchSignOut_CAdditionalSignoutMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut_CAdditionalSignoutMsg::IsInitialized() const {
  
  return true;
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::Swap(CMsgGameMatchSignOut_CAdditionalSignoutMsg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(contents_, other->contents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGameMatchSignOut_CAdditionalSignoutMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGameMatchSignOut_CAdditionalSignoutMsg_descriptor_;
  metadata.reflection = CMsgGameMatchSignOut_CAdditionalSignoutMsg_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgGameMatchSignOut::kMatchIdFieldNumber;
const int CMsgGameMatchSignOut::kDurationFieldNumber;
const int CMsgGameMatchSignOut::kGoodGuysWinFieldNumber;
const int CMsgGameMatchSignOut::kDateFieldNumber;
const int CMsgGameMatchSignOut::kNumPlayersFieldNumber;
const int CMsgGameMatchSignOut::kTeamsFieldNumber;
const int CMsgGameMatchSignOut::kTowerStatusFieldNumber;
const int CMsgGameMatchSignOut::kBarracksStatusFieldNumber;
const int CMsgGameMatchSignOut::kClusterFieldNumber;
const int CMsgGameMatchSignOut::kServerAddrFieldNumber;
const int CMsgGameMatchSignOut::kFirstBloodTimeFieldNumber;
const int CMsgGameMatchSignOut::kGameBalanceFieldNumber;
const int CMsgGameMatchSignOut::kEventScoreFieldNumber;
const int CMsgGameMatchSignOut::kPicksBansFieldNumber;
const int CMsgGameMatchSignOut::kFantasyStatsFieldNumber;
const int CMsgGameMatchSignOut::kPlayerStrangeCountAdjustmentsFieldNumber;
const int CMsgGameMatchSignOut::kAutomaticSurrenderFieldNumber;
const int CMsgGameMatchSignOut::kServerVersionFieldNumber;
const int CMsgGameMatchSignOut::kMassDisconnectFieldNumber;
const int CMsgGameMatchSignOut::kAdditionalMsgsFieldNumber;
#endif  // !_MSC_VER

CMsgGameMatchSignOut::CMsgGameMatchSignOut()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGameMatchSignOut::InitAsDefaultInstance() {
}

CMsgGameMatchSignOut::CMsgGameMatchSignOut(const CMsgGameMatchSignOut& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGameMatchSignOut::SharedCtor() {
  _cached_size_ = 0;
  match_id_ = 0u;
  duration_ = 0u;
  good_guys_win_ = false;
  date_ = 0u;
  cluster_ = 0u;
  server_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  first_blood_time_ = 0u;
  game_balance_ = 0;
  event_score_ = 0u;
  automatic_surrender_ = false;
  server_version_ = 0u;
  mass_disconnect_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGameMatchSignOut::~CMsgGameMatchSignOut() {
  SharedDtor();
}

void CMsgGameMatchSignOut::SharedDtor() {
  if (server_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete server_addr_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGameMatchSignOut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameMatchSignOut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGameMatchSignOut_descriptor_;
}

const CMsgGameMatchSignOut& CMsgGameMatchSignOut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgGameMatchSignOut* CMsgGameMatchSignOut::default_instance_ = NULL;

CMsgGameMatchSignOut* CMsgGameMatchSignOut::New() const {
  return new CMsgGameMatchSignOut;
}

void CMsgGameMatchSignOut::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    match_id_ = 0u;
    duration_ = 0u;
    good_guys_win_ = false;
    date_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    cluster_ = 0u;
    if (has_server_addr()) {
      if (server_addr_ != &::google::protobuf::internal::kEmptyString) {
        server_addr_->clear();
      }
    }
    first_blood_time_ = 0u;
    game_balance_ = 0;
    event_score_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    automatic_surrender_ = false;
    server_version_ = 0u;
    mass_disconnect_ = false;
  }
  num_players_.Clear();
  teams_.Clear();
  tower_status_.Clear();
  barracks_status_.Clear();
  picks_bans_.Clear();
  fantasy_stats_.Clear();
  player_strange_count_adjustments_.Clear();
  additional_msgs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGameMatchSignOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 match_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_duration;
        break;
      }
      
      // optional uint32 duration = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_good_guys_win;
        break;
      }
      
      // optional bool good_guys_win = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_good_guys_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &good_guys_win_)));
          set_has_good_guys_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_date;
        break;
      }
      
      // optional fixed32 date = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_num_players;
        break;
      }
      
      // repeated uint32 num_players = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_num_players())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_num_players())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_num_players;
        if (input->ExpectTag(50)) goto parse_teams;
        break;
      }
      
      // repeated .CMsgGameMatchSignOut.CTeam teams = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teams()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_teams;
        if (input->ExpectTag(64)) goto parse_tower_status;
        break;
      }
      
      // repeated uint32 tower_status = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tower_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_tower_status())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_tower_status())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_tower_status;
        if (input->ExpectTag(72)) goto parse_barracks_status;
        break;
      }
      
      // repeated uint32 barracks_status = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_barracks_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72, input, this->mutable_barracks_status())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_barracks_status())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_barracks_status;
        if (input->ExpectTag(80)) goto parse_cluster;
        break;
      }
      
      // optional uint32 cluster = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cluster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cluster_)));
          set_has_cluster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_server_addr;
        break;
      }
      
      // optional string server_addr = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_addr().data(), this->server_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_first_blood_time;
        break;
      }
      
      // optional uint32 first_blood_time = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_blood_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_blood_time_)));
          set_has_first_blood_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_game_balance;
        break;
      }
      
      // optional float game_balance = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_game_balance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &game_balance_)));
          set_has_game_balance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_event_score;
        break;
      }
      
      // optional uint32 event_score = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_score_)));
          set_has_event_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_picks_bans;
        break;
      }
      
      // repeated .CMatchHeroSelectEvent picks_bans = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_picks_bans:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_picks_bans()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_picks_bans;
        if (input->ExpectTag(130)) goto parse_fantasy_stats;
        break;
      }
      
      // repeated .CMsgDOTAFantasyPlayerStats fantasy_stats = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fantasy_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fantasy_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_fantasy_stats;
        if (input->ExpectTag(138)) goto parse_player_strange_count_adjustments;
        break;
      }
      
      // repeated .CMsgEconPlayerStrangeCountAdjustment player_strange_count_adjustments = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_strange_count_adjustments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_strange_count_adjustments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_player_strange_count_adjustments;
        if (input->ExpectTag(144)) goto parse_automatic_surrender;
        break;
      }
      
      // optional bool automatic_surrender = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_automatic_surrender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &automatic_surrender_)));
          set_has_automatic_surrender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_server_version;
        break;
      }
      
      // optional uint32 server_version = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_version_)));
          set_has_server_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_additional_msgs;
        break;
      }
      
      // repeated .CMsgGameMatchSignOut.CAdditionalSignoutMsg additional_msgs = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_additional_msgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_additional_msgs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_additional_msgs;
        if (input->ExpectTag(168)) goto parse_mass_disconnect;
        break;
      }
      
      // optional bool mass_disconnect = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mass_disconnect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mass_disconnect_)));
          set_has_mass_disconnect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGameMatchSignOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 match_id = 1;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->match_id(), output);
  }
  
  // optional uint32 duration = 2;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->duration(), output);
  }
  
  // optional bool good_guys_win = 3;
  if (has_good_guys_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->good_guys_win(), output);
  }
  
  // optional fixed32 date = 4;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->date(), output);
  }
  
  // repeated uint32 num_players = 5;
  for (int i = 0; i < this->num_players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->num_players(i), output);
  }
  
  // repeated .CMsgGameMatchSignOut.CTeam teams = 6;
  for (int i = 0; i < this->teams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->teams(i), output);
  }
  
  // repeated uint32 tower_status = 8;
  for (int i = 0; i < this->tower_status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->tower_status(i), output);
  }
  
  // repeated uint32 barracks_status = 9;
  for (int i = 0; i < this->barracks_status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->barracks_status(i), output);
  }
  
  // optional uint32 cluster = 10;
  if (has_cluster()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->cluster(), output);
  }
  
  // optional string server_addr = 11;
  if (has_server_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_addr().data(), this->server_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->server_addr(), output);
  }
  
  // optional uint32 first_blood_time = 12;
  if (has_first_blood_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->first_blood_time(), output);
  }
  
  // optional float game_balance = 13;
  if (has_game_balance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->game_balance(), output);
  }
  
  // optional uint32 event_score = 14;
  if (has_event_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->event_score(), output);
  }
  
  // repeated .CMatchHeroSelectEvent picks_bans = 15;
  for (int i = 0; i < this->picks_bans_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->picks_bans(i), output);
  }
  
  // repeated .CMsgDOTAFantasyPlayerStats fantasy_stats = 16;
  for (int i = 0; i < this->fantasy_stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->fantasy_stats(i), output);
  }
  
  // repeated .CMsgEconPlayerStrangeCountAdjustment player_strange_count_adjustments = 17;
  for (int i = 0; i < this->player_strange_count_adjustments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->player_strange_count_adjustments(i), output);
  }
  
  // optional bool automatic_surrender = 18;
  if (has_automatic_surrender()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->automatic_surrender(), output);
  }
  
  // optional uint32 server_version = 19;
  if (has_server_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->server_version(), output);
  }
  
  // repeated .CMsgGameMatchSignOut.CAdditionalSignoutMsg additional_msgs = 20;
  for (int i = 0; i < this->additional_msgs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->additional_msgs(i), output);
  }
  
  // optional bool mass_disconnect = 21;
  if (has_mass_disconnect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->mass_disconnect(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGameMatchSignOut::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 match_id = 1;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->match_id(), target);
  }
  
  // optional uint32 duration = 2;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->duration(), target);
  }
  
  // optional bool good_guys_win = 3;
  if (has_good_guys_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->good_guys_win(), target);
  }
  
  // optional fixed32 date = 4;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->date(), target);
  }
  
  // repeated uint32 num_players = 5;
  for (int i = 0; i < this->num_players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->num_players(i), target);
  }
  
  // repeated .CMsgGameMatchSignOut.CTeam teams = 6;
  for (int i = 0; i < this->teams_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->teams(i), target);
  }
  
  // repeated uint32 tower_status = 8;
  for (int i = 0; i < this->tower_status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->tower_status(i), target);
  }
  
  // repeated uint32 barracks_status = 9;
  for (int i = 0; i < this->barracks_status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(9, this->barracks_status(i), target);
  }
  
  // optional uint32 cluster = 10;
  if (has_cluster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->cluster(), target);
  }
  
  // optional string server_addr = 11;
  if (has_server_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_addr().data(), this->server_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->server_addr(), target);
  }
  
  // optional uint32 first_blood_time = 12;
  if (has_first_blood_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->first_blood_time(), target);
  }
  
  // optional float game_balance = 13;
  if (has_game_balance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->game_balance(), target);
  }
  
  // optional uint32 event_score = 14;
  if (has_event_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->event_score(), target);
  }
  
  // repeated .CMatchHeroSelectEvent picks_bans = 15;
  for (int i = 0; i < this->picks_bans_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->picks_bans(i), target);
  }
  
  // repeated .CMsgDOTAFantasyPlayerStats fantasy_stats = 16;
  for (int i = 0; i < this->fantasy_stats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->fantasy_stats(i), target);
  }
  
  // repeated .CMsgEconPlayerStrangeCountAdjustment player_strange_count_adjustments = 17;
  for (int i = 0; i < this->player_strange_count_adjustments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->player_strange_count_adjustments(i), target);
  }
  
  // optional bool automatic_surrender = 18;
  if (has_automatic_surrender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->automatic_surrender(), target);
  }
  
  // optional uint32 server_version = 19;
  if (has_server_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->server_version(), target);
  }
  
  // repeated .CMsgGameMatchSignOut.CAdditionalSignoutMsg additional_msgs = 20;
  for (int i = 0; i < this->additional_msgs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->additional_msgs(i), target);
  }
  
  // optional bool mass_disconnect = 21;
  if (has_mass_disconnect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->mass_disconnect(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGameMatchSignOut::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 match_id = 1;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_id());
    }
    
    // optional uint32 duration = 2;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration());
    }
    
    // optional bool good_guys_win = 3;
    if (has_good_guys_win()) {
      total_size += 1 + 1;
    }
    
    // optional fixed32 date = 4;
    if (has_date()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 cluster = 10;
    if (has_cluster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cluster());
    }
    
    // optional string server_addr = 11;
    if (has_server_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_addr());
    }
    
    // optional uint32 first_blood_time = 12;
    if (has_first_blood_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first_blood_time());
    }
    
    // optional float game_balance = 13;
    if (has_game_balance()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 event_score = 14;
    if (has_event_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_score());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool automatic_surrender = 18;
    if (has_automatic_surrender()) {
      total_size += 2 + 1;
    }
    
    // optional uint32 server_version = 19;
    if (has_server_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_version());
    }
    
    // optional bool mass_disconnect = 21;
    if (has_mass_disconnect()) {
      total_size += 2 + 1;
    }
    
  }
  // repeated uint32 num_players = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->num_players_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->num_players(i));
    }
    total_size += 1 * this->num_players_size() + data_size;
  }
  
  // repeated .CMsgGameMatchSignOut.CTeam teams = 6;
  total_size += 1 * this->teams_size();
  for (int i = 0; i < this->teams_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teams(i));
  }
  
  // repeated uint32 tower_status = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->tower_status_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->tower_status(i));
    }
    total_size += 1 * this->tower_status_size() + data_size;
  }
  
  // repeated uint32 barracks_status = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->barracks_status_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->barracks_status(i));
    }
    total_size += 1 * this->barracks_status_size() + data_size;
  }
  
  // repeated .CMatchHeroSelectEvent picks_bans = 15;
  total_size += 1 * this->picks_bans_size();
  for (int i = 0; i < this->picks_bans_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->picks_bans(i));
  }
  
  // repeated .CMsgDOTAFantasyPlayerStats fantasy_stats = 16;
  total_size += 2 * this->fantasy_stats_size();
  for (int i = 0; i < this->fantasy_stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fantasy_stats(i));
  }
  
  // repeated .CMsgEconPlayerStrangeCountAdjustment player_strange_count_adjustments = 17;
  total_size += 2 * this->player_strange_count_adjustments_size();
  for (int i = 0; i < this->player_strange_count_adjustments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_strange_count_adjustments(i));
  }
  
  // repeated .CMsgGameMatchSignOut.CAdditionalSignoutMsg additional_msgs = 20;
  total_size += 2 * this->additional_msgs_size();
  for (int i = 0; i < this->additional_msgs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->additional_msgs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameMatchSignOut::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGameMatchSignOut* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGameMatchSignOut*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOut::MergeFrom(const CMsgGameMatchSignOut& from) {
  GOOGLE_CHECK_NE(&from, this);
  num_players_.MergeFrom(from.num_players_);
  teams_.MergeFrom(from.teams_);
  tower_status_.MergeFrom(from.tower_status_);
  barracks_status_.MergeFrom(from.barracks_status_);
  picks_bans_.MergeFrom(from.picks_bans_);
  fantasy_stats_.MergeFrom(from.fantasy_stats_);
  player_strange_count_adjustments_.MergeFrom(from.player_strange_count_adjustments_);
  additional_msgs_.MergeFrom(from.additional_msgs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_good_guys_win()) {
      set_good_guys_win(from.good_guys_win());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cluster()) {
      set_cluster(from.cluster());
    }
    if (from.has_server_addr()) {
      set_server_addr(from.server_addr());
    }
    if (from.has_first_blood_time()) {
      set_first_blood_time(from.first_blood_time());
    }
    if (from.has_game_balance()) {
      set_game_balance(from.game_balance());
    }
    if (from.has_event_score()) {
      set_event_score(from.event_score());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_automatic_surrender()) {
      set_automatic_surrender(from.automatic_surrender());
    }
    if (from.has_server_version()) {
      set_server_version(from.server_version());
    }
    if (from.has_mass_disconnect()) {
      set_mass_disconnect(from.mass_disconnect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGameMatchSignOut::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOut::CopyFrom(const CMsgGameMatchSignOut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut::IsInitialized() const {
  
  return true;
}

void CMsgGameMatchSignOut::Swap(CMsgGameMatchSignOut* other) {
  if (other != this) {
    std::swap(match_id_, other->match_id_);
    std::swap(duration_, other->duration_);
    std::swap(good_guys_win_, other->good_guys_win_);
    std::swap(date_, other->date_);
    num_players_.Swap(&other->num_players_);
    teams_.Swap(&other->teams_);
    tower_status_.Swap(&other->tower_status_);
    barracks_status_.Swap(&other->barracks_status_);
    std::swap(cluster_, other->cluster_);
    std::swap(server_addr_, other->server_addr_);
    std::swap(first_blood_time_, other->first_blood_time_);
    std::swap(game_balance_, other->game_balance_);
    std::swap(event_score_, other->event_score_);
    picks_bans_.Swap(&other->picks_bans_);
    fantasy_stats_.Swap(&other->fantasy_stats_);
    player_strange_count_adjustments_.Swap(&other->player_strange_count_adjustments_);
    std::swap(automatic_surrender_, other->automatic_surrender_);
    std::swap(server_version_, other->server_version_);
    std::swap(mass_disconnect_, other->mass_disconnect_);
    additional_msgs_.Swap(&other->additional_msgs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGameMatchSignOut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGameMatchSignOut_descriptor_;
  metadata.reflection = CMsgGameMatchSignOut_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::kIdFieldNumber;
const int CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::kContentsFieldNumber;
#endif  // !_MSC_VER

CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::InitAsDefaultInstance() {
}

CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg(const CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::~CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg() {
  SharedDtor();
}

void CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::SharedDtor() {
  if (contents_ != &::google::protobuf::internal::kEmptyString) {
    delete contents_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg_descriptor_;
}

const CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg& CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg* CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::default_instance_ = NULL;

CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg* CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::New() const {
  return new CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg;
}

void CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_contents()) {
      if (contents_ != &::google::protobuf::internal::kEmptyString) {
        contents_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_contents;
        break;
      }
      
      // optional bytes contents = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_contents()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional bytes contents = 2;
  if (has_contents()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->contents(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional bytes contents = 2;
  if (has_contents()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->contents(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional bytes contents = 2;
    if (has_contents()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->contents());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::MergeFrom(const CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_contents()) {
      set_contents(from.contents());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::CopyFrom(const CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::IsInitialized() const {
  
  return true;
}

void CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::Swap(CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(contents_, other->contents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg_descriptor_;
  metadata.reflection = CMsgGameMatchSignoutResponse_CAdditionalSignoutMsg_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgGameMatchSignoutResponse::kMatchIdFieldNumber;
const int CMsgGameMatchSignoutResponse::kReplaySaltFieldNumber;
const int CMsgGameMatchSignoutResponse::kTimedRewardDetailsFieldNumber;
const int CMsgGameMatchSignoutResponse::kXpRewardDetailsFieldNumber;
const int CMsgGameMatchSignoutResponse::kLeagueidFieldNumber;
const int CMsgGameMatchSignoutResponse::kAdditionalMsgsFieldNumber;
#endif  // !_MSC_VER

CMsgGameMatchSignoutResponse::CMsgGameMatchSignoutResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGameMatchSignoutResponse::InitAsDefaultInstance() {
}

CMsgGameMatchSignoutResponse::CMsgGameMatchSignoutResponse(const CMsgGameMatchSignoutResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGameMatchSignoutResponse::SharedCtor() {
  _cached_size_ = 0;
  match_id_ = 0u;
  replay_salt_ = 0u;
  leagueid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGameMatchSignoutResponse::~CMsgGameMatchSignoutResponse() {
  SharedDtor();
}

void CMsgGameMatchSignoutResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGameMatchSignoutResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameMatchSignoutResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGameMatchSignoutResponse_descriptor_;
}

const CMsgGameMatchSignoutResponse& CMsgGameMatchSignoutResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgGameMatchSignoutResponse* CMsgGameMatchSignoutResponse::default_instance_ = NULL;

CMsgGameMatchSignoutResponse* CMsgGameMatchSignoutResponse::New() const {
  return new CMsgGameMatchSignoutResponse;
}

void CMsgGameMatchSignoutResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    match_id_ = 0u;
    replay_salt_ = 0u;
    leagueid_ = 0u;
  }
  timed_reward_details_.Clear();
  xp_reward_details_.Clear();
  additional_msgs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGameMatchSignoutResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 match_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_replay_salt;
        break;
      }
      
      // optional fixed32 replay_salt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_replay_salt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &replay_salt_)));
          set_has_replay_salt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_timed_reward_details;
        break;
      }
      
      // repeated .CLobbyTimedRewardDetails timed_reward_details = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timed_reward_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_timed_reward_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_timed_reward_details;
        if (input->ExpectTag(34)) goto parse_xp_reward_details;
        break;
      }
      
      // repeated .CDOTALobbyMember xp_reward_details = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xp_reward_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_xp_reward_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_xp_reward_details;
        if (input->ExpectTag(40)) goto parse_leagueid;
        break;
      }
      
      // optional uint32 leagueid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leagueid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leagueid_)));
          set_has_leagueid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_additional_msgs;
        break;
      }
      
      // repeated .CMsgGameMatchSignoutResponse.CAdditionalSignoutMsg additional_msgs = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_additional_msgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_additional_msgs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_additional_msgs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGameMatchSignoutResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 match_id = 1;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->match_id(), output);
  }
  
  // optional fixed32 replay_salt = 2;
  if (has_replay_salt()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->replay_salt(), output);
  }
  
  // repeated .CLobbyTimedRewardDetails timed_reward_details = 3;
  for (int i = 0; i < this->timed_reward_details_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->timed_reward_details(i), output);
  }
  
  // repeated .CDOTALobbyMember xp_reward_details = 4;
  for (int i = 0; i < this->xp_reward_details_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->xp_reward_details(i), output);
  }
  
  // optional uint32 leagueid = 5;
  if (has_leagueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->leagueid(), output);
  }
  
  // repeated .CMsgGameMatchSignoutResponse.CAdditionalSignoutMsg additional_msgs = 6;
  for (int i = 0; i < this->additional_msgs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->additional_msgs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGameMatchSignoutResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 match_id = 1;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->match_id(), target);
  }
  
  // optional fixed32 replay_salt = 2;
  if (has_replay_salt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->replay_salt(), target);
  }
  
  // repeated .CLobbyTimedRewardDetails timed_reward_details = 3;
  for (int i = 0; i < this->timed_reward_details_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->timed_reward_details(i), target);
  }
  
  // repeated .CDOTALobbyMember xp_reward_details = 4;
  for (int i = 0; i < this->xp_reward_details_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->xp_reward_details(i), target);
  }
  
  // optional uint32 leagueid = 5;
  if (has_leagueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->leagueid(), target);
  }
  
  // repeated .CMsgGameMatchSignoutResponse.CAdditionalSignoutMsg additional_msgs = 6;
  for (int i = 0; i < this->additional_msgs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->additional_msgs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGameMatchSignoutResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 match_id = 1;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_id());
    }
    
    // optional fixed32 replay_salt = 2;
    if (has_replay_salt()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 leagueid = 5;
    if (has_leagueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leagueid());
    }
    
  }
  // repeated .CLobbyTimedRewardDetails timed_reward_details = 3;
  total_size += 1 * this->timed_reward_details_size();
  for (int i = 0; i < this->timed_reward_details_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->timed_reward_details(i));
  }
  
  // repeated .CDOTALobbyMember xp_reward_details = 4;
  total_size += 1 * this->xp_reward_details_size();
  for (int i = 0; i < this->xp_reward_details_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->xp_reward_details(i));
  }
  
  // repeated .CMsgGameMatchSignoutResponse.CAdditionalSignoutMsg additional_msgs = 6;
  total_size += 1 * this->additional_msgs_size();
  for (int i = 0; i < this->additional_msgs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->additional_msgs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameMatchSignoutResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGameMatchSignoutResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGameMatchSignoutResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignoutResponse::MergeFrom(const CMsgGameMatchSignoutResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  timed_reward_details_.MergeFrom(from.timed_reward_details_);
  xp_reward_details_.MergeFrom(from.xp_reward_details_);
  additional_msgs_.MergeFrom(from.additional_msgs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
    if (from.has_replay_salt()) {
      set_replay_salt(from.replay_salt());
    }
    if (from.has_leagueid()) {
      set_leagueid(from.leagueid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGameMatchSignoutResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignoutResponse::CopyFrom(const CMsgGameMatchSignoutResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignoutResponse::IsInitialized() const {
  
  return true;
}

void CMsgGameMatchSignoutResponse::Swap(CMsgGameMatchSignoutResponse* other) {
  if (other != this) {
    std::swap(match_id_, other->match_id_);
    std::swap(replay_salt_, other->replay_salt_);
    timed_reward_details_.Swap(&other->timed_reward_details_);
    xp_reward_details_.Swap(&other->xp_reward_details_);
    std::swap(leagueid_, other->leagueid_);
    additional_msgs_.Swap(&other->additional_msgs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGameMatchSignoutResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGameMatchSignoutResponse_descriptor_;
  metadata.reflection = CMsgGameMatchSignoutResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGameMatchSignOutPermissionRequest::kServerVersionFieldNumber;
const int CMsgGameMatchSignOutPermissionRequest::kLocalAttemptFieldNumber;
const int CMsgGameMatchSignOutPermissionRequest::kTotalAttemptFieldNumber;
const int CMsgGameMatchSignOutPermissionRequest::kSecondsWaitedFieldNumber;
#endif  // !_MSC_VER

CMsgGameMatchSignOutPermissionRequest::CMsgGameMatchSignOutPermissionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGameMatchSignOutPermissionRequest::InitAsDefaultInstance() {
}

CMsgGameMatchSignOutPermissionRequest::CMsgGameMatchSignOutPermissionRequest(const CMsgGameMatchSignOutPermissionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGameMatchSignOutPermissionRequest::SharedCtor() {
  _cached_size_ = 0;
  server_version_ = 0u;
  local_attempt_ = 0u;
  total_attempt_ = 0u;
  seconds_waited_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGameMatchSignOutPermissionRequest::~CMsgGameMatchSignOutPermissionRequest() {
  SharedDtor();
}

void CMsgGameMatchSignOutPermissionRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGameMatchSignOutPermissionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameMatchSignOutPermissionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGameMatchSignOutPermissionRequest_descriptor_;
}

const CMsgGameMatchSignOutPermissionRequest& CMsgGameMatchSignOutPermissionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgGameMatchSignOutPermissionRequest* CMsgGameMatchSignOutPermissionRequest::default_instance_ = NULL;

CMsgGameMatchSignOutPermissionRequest* CMsgGameMatchSignOutPermissionRequest::New() const {
  return new CMsgGameMatchSignOutPermissionRequest;
}

void CMsgGameMatchSignOutPermissionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_version_ = 0u;
    local_attempt_ = 0u;
    total_attempt_ = 0u;
    seconds_waited_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGameMatchSignOutPermissionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_version_)));
          set_has_server_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_local_attempt;
        break;
      }
      
      // optional uint32 local_attempt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_local_attempt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_attempt_)));
          set_has_local_attempt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_attempt;
        break;
      }
      
      // optional uint32 total_attempt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_attempt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_attempt_)));
          set_has_total_attempt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_seconds_waited;
        break;
      }
      
      // optional uint32 seconds_waited = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seconds_waited:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_waited_)));
          set_has_seconds_waited();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGameMatchSignOutPermissionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 server_version = 1;
  if (has_server_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_version(), output);
  }
  
  // optional uint32 local_attempt = 2;
  if (has_local_attempt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->local_attempt(), output);
  }
  
  // optional uint32 total_attempt = 3;
  if (has_total_attempt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->total_attempt(), output);
  }
  
  // optional uint32 seconds_waited = 4;
  if (has_seconds_waited()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->seconds_waited(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGameMatchSignOutPermissionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 server_version = 1;
  if (has_server_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_version(), target);
  }
  
  // optional uint32 local_attempt = 2;
  if (has_local_attempt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->local_attempt(), target);
  }
  
  // optional uint32 total_attempt = 3;
  if (has_total_attempt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->total_attempt(), target);
  }
  
  // optional uint32 seconds_waited = 4;
  if (has_seconds_waited()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->seconds_waited(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGameMatchSignOutPermissionRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_version = 1;
    if (has_server_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_version());
    }
    
    // optional uint32 local_attempt = 2;
    if (has_local_attempt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->local_attempt());
    }
    
    // optional uint32 total_attempt = 3;
    if (has_total_attempt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_attempt());
    }
    
    // optional uint32 seconds_waited = 4;
    if (has_seconds_waited()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds_waited());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameMatchSignOutPermissionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGameMatchSignOutPermissionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGameMatchSignOutPermissionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOutPermissionRequest::MergeFrom(const CMsgGameMatchSignOutPermissionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_version()) {
      set_server_version(from.server_version());
    }
    if (from.has_local_attempt()) {
      set_local_attempt(from.local_attempt());
    }
    if (from.has_total_attempt()) {
      set_total_attempt(from.total_attempt());
    }
    if (from.has_seconds_waited()) {
      set_seconds_waited(from.seconds_waited());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGameMatchSignOutPermissionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOutPermissionRequest::CopyFrom(const CMsgGameMatchSignOutPermissionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOutPermissionRequest::IsInitialized() const {
  
  return true;
}

void CMsgGameMatchSignOutPermissionRequest::Swap(CMsgGameMatchSignOutPermissionRequest* other) {
  if (other != this) {
    std::swap(server_version_, other->server_version_);
    std::swap(local_attempt_, other->local_attempt_);
    std::swap(total_attempt_, other->total_attempt_);
    std::swap(seconds_waited_, other->seconds_waited_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGameMatchSignOutPermissionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGameMatchSignOutPermissionRequest_descriptor_;
  metadata.reflection = CMsgGameMatchSignOutPermissionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGameMatchSignOutPermissionResponse::kPermissionGrantedFieldNumber;
const int CMsgGameMatchSignOutPermissionResponse::kAbandonSignoutFieldNumber;
const int CMsgGameMatchSignOutPermissionResponse::kRetryDelaySecondsFieldNumber;
#endif  // !_MSC_VER

CMsgGameMatchSignOutPermissionResponse::CMsgGameMatchSignOutPermissionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGameMatchSignOutPermissionResponse::InitAsDefaultInstance() {
}

CMsgGameMatchSignOutPermissionResponse::CMsgGameMatchSignOutPermissionResponse(const CMsgGameMatchSignOutPermissionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGameMatchSignOutPermissionResponse::SharedCtor() {
  _cached_size_ = 0;
  permission_granted_ = false;
  abandon_signout_ = false;
  retry_delay_seconds_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGameMatchSignOutPermissionResponse::~CMsgGameMatchSignOutPermissionResponse() {
  SharedDtor();
}

void CMsgGameMatchSignOutPermissionResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGameMatchSignOutPermissionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameMatchSignOutPermissionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGameMatchSignOutPermissionResponse_descriptor_;
}

const CMsgGameMatchSignOutPermissionResponse& CMsgGameMatchSignOutPermissionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgGameMatchSignOutPermissionResponse* CMsgGameMatchSignOutPermissionResponse::default_instance_ = NULL;

CMsgGameMatchSignOutPermissionResponse* CMsgGameMatchSignOutPermissionResponse::New() const {
  return new CMsgGameMatchSignOutPermissionResponse;
}

void CMsgGameMatchSignOutPermissionResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    permission_granted_ = false;
    abandon_signout_ = false;
    retry_delay_seconds_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGameMatchSignOutPermissionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool permission_granted = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &permission_granted_)));
          set_has_permission_granted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_abandon_signout;
        break;
      }
      
      // optional bool abandon_signout = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_abandon_signout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &abandon_signout_)));
          set_has_abandon_signout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_retry_delay_seconds;
        break;
      }
      
      // optional uint32 retry_delay_seconds = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retry_delay_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retry_delay_seconds_)));
          set_has_retry_delay_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGameMatchSignOutPermissionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool permission_granted = 1 [default = false];
  if (has_permission_granted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->permission_granted(), output);
  }
  
  // optional bool abandon_signout = 2 [default = false];
  if (has_abandon_signout()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->abandon_signout(), output);
  }
  
  // optional uint32 retry_delay_seconds = 3 [default = 0];
  if (has_retry_delay_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->retry_delay_seconds(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGameMatchSignOutPermissionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool permission_granted = 1 [default = false];
  if (has_permission_granted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->permission_granted(), target);
  }
  
  // optional bool abandon_signout = 2 [default = false];
  if (has_abandon_signout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->abandon_signout(), target);
  }
  
  // optional uint32 retry_delay_seconds = 3 [default = 0];
  if (has_retry_delay_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->retry_delay_seconds(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGameMatchSignOutPermissionResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool permission_granted = 1 [default = false];
    if (has_permission_granted()) {
      total_size += 1 + 1;
    }
    
    // optional bool abandon_signout = 2 [default = false];
    if (has_abandon_signout()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 retry_delay_seconds = 3 [default = 0];
    if (has_retry_delay_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retry_delay_seconds());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameMatchSignOutPermissionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGameMatchSignOutPermissionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGameMatchSignOutPermissionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGameMatchSignOutPermissionResponse::MergeFrom(const CMsgGameMatchSignOutPermissionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_permission_granted()) {
      set_permission_granted(from.permission_granted());
    }
    if (from.has_abandon_signout()) {
      set_abandon_signout(from.abandon_signout());
    }
    if (from.has_retry_delay_seconds()) {
      set_retry_delay_seconds(from.retry_delay_seconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGameMatchSignOutPermissionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameMatchSignOutPermissionResponse::CopyFrom(const CMsgGameMatchSignOutPermissionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOutPermissionResponse::IsInitialized() const {
  
  return true;
}

void CMsgGameMatchSignOutPermissionResponse::Swap(CMsgGameMatchSignOutPermissionResponse* other) {
  if (other != this) {
    std::swap(permission_granted_, other->permission_granted_);
    std::swap(abandon_signout_, other->abandon_signout_);
    std::swap(retry_delay_seconds_, other->retry_delay_seconds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGameMatchSignOutPermissionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGameMatchSignOutPermissionResponse_descriptor_;
  metadata.reflection = CMsgGameMatchSignOutPermissionResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGameChatLog_CChatLine::kAccountIdFieldNumber;
const int CMsgGameChatLog_CChatLine::kTeamOnlyFieldNumber;
const int CMsgGameChatLog_CChatLine::kTextFieldNumber;
const int CMsgGameChatLog_CChatLine::kGameTimeFieldNumber;
#endif  // !_MSC_VER

CMsgGameChatLog_CChatLine::CMsgGameChatLog_CChatLine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGameChatLog_CChatLine::InitAsDefaultInstance() {
}

CMsgGameChatLog_CChatLine::CMsgGameChatLog_CChatLine(const CMsgGameChatLog_CChatLine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGameChatLog_CChatLine::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  team_only_ = 0u;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  game_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGameChatLog_CChatLine::~CMsgGameChatLog_CChatLine() {
  SharedDtor();
}

void CMsgGameChatLog_CChatLine::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGameChatLog_CChatLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameChatLog_CChatLine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGameChatLog_CChatLine_descriptor_;
}

const CMsgGameChatLog_CChatLine& CMsgGameChatLog_CChatLine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgGameChatLog_CChatLine* CMsgGameChatLog_CChatLine::default_instance_ = NULL;

CMsgGameChatLog_CChatLine* CMsgGameChatLog_CChatLine::New() const {
  return new CMsgGameChatLog_CChatLine;
}

void CMsgGameChatLog_CChatLine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    team_only_ = 0u;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    game_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGameChatLog_CChatLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_only;
        break;
      }
      
      // optional uint32 team_only = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_only:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_only_)));
          set_has_team_only();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_text;
        break;
      }
      
      // optional string text = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_game_time;
        break;
      }
      
      // optional uint32 game_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_time_)));
          set_has_game_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGameChatLog_CChatLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }
  
  // optional uint32 team_only = 2;
  if (has_team_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_only(), output);
  }
  
  // optional string text = 3;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->text(), output);
  }
  
  // optional uint32 game_time = 4;
  if (has_game_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGameChatLog_CChatLine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }
  
  // optional uint32 team_only = 2;
  if (has_team_only()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_only(), target);
  }
  
  // optional string text = 3;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }
  
  // optional uint32 game_time = 4;
  if (has_game_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGameChatLog_CChatLine::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
    // optional uint32 team_only = 2;
    if (has_team_only()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_only());
    }
    
    // optional string text = 3;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }
    
    // optional uint32 game_time = 4;
    if (has_game_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameChatLog_CChatLine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGameChatLog_CChatLine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGameChatLog_CChatLine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGameChatLog_CChatLine::MergeFrom(const CMsgGameChatLog_CChatLine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_team_only()) {
      set_team_only(from.team_only());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_game_time()) {
      set_game_time(from.game_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGameChatLog_CChatLine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameChatLog_CChatLine::CopyFrom(const CMsgGameChatLog_CChatLine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameChatLog_CChatLine::IsInitialized() const {
  
  return true;
}

void CMsgGameChatLog_CChatLine::Swap(CMsgGameChatLog_CChatLine* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(team_only_, other->team_only_);
    std::swap(text_, other->text_);
    std::swap(game_time_, other->game_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGameChatLog_CChatLine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGameChatLog_CChatLine_descriptor_;
  metadata.reflection = CMsgGameChatLog_CChatLine_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgGameChatLog::kMatchIdFieldNumber;
const int CMsgGameChatLog::kLinesFieldNumber;
#endif  // !_MSC_VER

CMsgGameChatLog::CMsgGameChatLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGameChatLog::InitAsDefaultInstance() {
}

CMsgGameChatLog::CMsgGameChatLog(const CMsgGameChatLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGameChatLog::SharedCtor() {
  _cached_size_ = 0;
  match_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGameChatLog::~CMsgGameChatLog() {
  SharedDtor();
}

void CMsgGameChatLog::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGameChatLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameChatLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGameChatLog_descriptor_;
}

const CMsgGameChatLog& CMsgGameChatLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgGameChatLog* CMsgGameChatLog::default_instance_ = NULL;

CMsgGameChatLog* CMsgGameChatLog::New() const {
  return new CMsgGameChatLog;
}

void CMsgGameChatLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    match_id_ = 0u;
  }
  lines_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGameChatLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 match_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lines;
        break;
      }
      
      // repeated .CMsgGameChatLog.CChatLine lines = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lines:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lines()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lines;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGameChatLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 match_id = 1;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->match_id(), output);
  }
  
  // repeated .CMsgGameChatLog.CChatLine lines = 2;
  for (int i = 0; i < this->lines_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lines(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGameChatLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 match_id = 1;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->match_id(), target);
  }
  
  // repeated .CMsgGameChatLog.CChatLine lines = 2;
  for (int i = 0; i < this->lines_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lines(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGameChatLog::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 match_id = 1;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_id());
    }
    
  }
  // repeated .CMsgGameChatLog.CChatLine lines = 2;
  total_size += 1 * this->lines_size();
  for (int i = 0; i < this->lines_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lines(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameChatLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGameChatLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGameChatLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGameChatLog::MergeFrom(const CMsgGameChatLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  lines_.MergeFrom(from.lines_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGameChatLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameChatLog::CopyFrom(const CMsgGameChatLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameChatLog::IsInitialized() const {
  
  return true;
}

void CMsgGameChatLog::Swap(CMsgGameChatLog* other) {
  if (other != this) {
    std::swap(match_id_, other->match_id_);
    lines_.Swap(&other->lines_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGameChatLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGameChatLog_descriptor_;
  metadata.reflection = CMsgGameChatLog_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_descriptor_;
}
bool CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState CMsgDOTALiveScoreboardUpdate_Team_Player::k_EDOTAUltimateStateNotLearned;
const CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState CMsgDOTALiveScoreboardUpdate_Team_Player::k_EDOTAUltimateStateCooldown;
const CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState CMsgDOTALiveScoreboardUpdate_Team_Player::k_EDOTAUltimateStateNeedsMana;
const CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState CMsgDOTALiveScoreboardUpdate_Team_Player::k_EDOTAUltimateStateReady;
const CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState CMsgDOTALiveScoreboardUpdate_Team_Player::DOTAUltimateState_MIN;
const CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState CMsgDOTALiveScoreboardUpdate_Team_Player::DOTAUltimateState_MAX;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::DOTAUltimateState_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kPlayerSlotFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kPlayerNameFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kHeroNameFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kHeroIdFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kKillsFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kDeathsFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kAssistsFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kLastHitsFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kDeniesFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kGoldFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kLevelFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kGoldPerMinFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kXpPerMinFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kUltimateStateFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kUltimateCooldownFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kItem0FieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kItem1FieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kItem2FieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kItem3FieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kItem4FieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kItem5FieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team_Player::kRespawnTimerFieldNumber;
#endif  // !_MSC_VER

CMsgDOTALiveScoreboardUpdate_Team_Player::CMsgDOTALiveScoreboardUpdate_Team_Player()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::InitAsDefaultInstance() {
}

CMsgDOTALiveScoreboardUpdate_Team_Player::CMsgDOTALiveScoreboardUpdate_Team_Player(const CMsgDOTALiveScoreboardUpdate_Team_Player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::SharedCtor() {
  _cached_size_ = 0;
  player_slot_ = 0u;
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hero_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hero_id_ = 0u;
  kills_ = 0u;
  deaths_ = 0u;
  assists_ = 0u;
  last_hits_ = 0u;
  denies_ = 0u;
  gold_ = 0u;
  level_ = 0u;
  gold_per_min_ = 0;
  xp_per_min_ = 0;
  ultimate_state_ = 0;
  ultimate_cooldown_ = 0;
  item0_ = 0u;
  item1_ = 0u;
  item2_ = 0u;
  item3_ = 0u;
  item4_ = 0u;
  item5_ = 0u;
  respawn_timer_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTALiveScoreboardUpdate_Team_Player::~CMsgDOTALiveScoreboardUpdate_Team_Player() {
  SharedDtor();
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (hero_name_ != &::google::protobuf::internal::kEmptyString) {
    delete hero_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTALiveScoreboardUpdate_Team_Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTALiveScoreboardUpdate_Team_Player_descriptor_;
}

const CMsgDOTALiveScoreboardUpdate_Team_Player& CMsgDOTALiveScoreboardUpdate_Team_Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgDOTALiveScoreboardUpdate_Team_Player* CMsgDOTALiveScoreboardUpdate_Team_Player::default_instance_ = NULL;

CMsgDOTALiveScoreboardUpdate_Team_Player* CMsgDOTALiveScoreboardUpdate_Team_Player::New() const {
  return new CMsgDOTALiveScoreboardUpdate_Team_Player;
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_slot_ = 0u;
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
    if (has_hero_name()) {
      if (hero_name_ != &::google::protobuf::internal::kEmptyString) {
        hero_name_->clear();
      }
    }
    hero_id_ = 0u;
    kills_ = 0u;
    deaths_ = 0u;
    assists_ = 0u;
    last_hits_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    denies_ = 0u;
    gold_ = 0u;
    level_ = 0u;
    gold_per_min_ = 0;
    xp_per_min_ = 0;
    ultimate_state_ = 0;
    ultimate_cooldown_ = 0;
    item0_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    item1_ = 0u;
    item2_ = 0u;
    item3_ = 0u;
    item4_ = 0u;
    item5_ = 0u;
    respawn_timer_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTALiveScoreboardUpdate_Team_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_slot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_slot_)));
          set_has_player_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_name;
        break;
      }
      
      // optional string player_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hero_name;
        break;
      }
      
      // optional string hero_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hero_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hero_name().data(), this->hero_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hero_id;
        break;
      }
      
      // optional uint32 hero_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_kills;
        break;
      }
      
      // optional uint32 kills = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
          set_has_kills();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_deaths;
        break;
      }
      
      // optional uint32 deaths = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deaths:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deaths_)));
          set_has_deaths();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_assists;
        break;
      }
      
      // optional uint32 assists = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_assists:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assists_)));
          set_has_assists();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_last_hits;
        break;
      }
      
      // optional uint32 last_hits = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_hits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_hits_)));
          set_has_last_hits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_denies;
        break;
      }
      
      // optional uint32 denies = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_denies:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &denies_)));
          set_has_denies();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_gold;
        break;
      }
      
      // optional uint32 gold = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_gold_per_min;
        break;
      }
      
      // optional float gold_per_min = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_gold_per_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gold_per_min_)));
          set_has_gold_per_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_xp_per_min;
        break;
      }
      
      // optional float xp_per_min = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_xp_per_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xp_per_min_)));
          set_has_xp_per_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_ultimate_state;
        break;
      }
      
      // optional .CMsgDOTALiveScoreboardUpdate.Team.Player.DOTAUltimateState ultimate_state = 14 [default = k_EDOTAUltimateStateNotLearned];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ultimate_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_IsValid(value)) {
            set_ultimate_state(static_cast< ::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_ultimate_cooldown;
        break;
      }
      
      // optional float ultimate_cooldown = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ultimate_cooldown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ultimate_cooldown_)));
          set_has_ultimate_cooldown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_item0;
        break;
      }
      
      // optional uint32 item0 = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item0_)));
          set_has_item0();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_item1;
        break;
      }
      
      // optional uint32 item1 = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item1_)));
          set_has_item1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_item2;
        break;
      }
      
      // optional uint32 item2 = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item2_)));
          set_has_item2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_item3;
        break;
      }
      
      // optional uint32 item3 = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item3_)));
          set_has_item3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_item4;
        break;
      }
      
      // optional uint32 item4 = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item4_)));
          set_has_item4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_item5;
        break;
      }
      
      // optional uint32 item5 = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item5_)));
          set_has_item5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_respawn_timer;
        break;
      }
      
      // optional uint32 respawn_timer = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_respawn_timer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &respawn_timer_)));
          set_has_respawn_timer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 player_slot = 1;
  if (has_player_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_slot(), output);
  }
  
  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->player_name(), output);
  }
  
  // optional string hero_name = 3;
  if (has_hero_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hero_name().data(), this->hero_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->hero_name(), output);
  }
  
  // optional uint32 hero_id = 4;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hero_id(), output);
  }
  
  // optional uint32 kills = 5;
  if (has_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->kills(), output);
  }
  
  // optional uint32 deaths = 6;
  if (has_deaths()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->deaths(), output);
  }
  
  // optional uint32 assists = 7;
  if (has_assists()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->assists(), output);
  }
  
  // optional uint32 last_hits = 8;
  if (has_last_hits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->last_hits(), output);
  }
  
  // optional uint32 denies = 9;
  if (has_denies()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->denies(), output);
  }
  
  // optional uint32 gold = 10;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->gold(), output);
  }
  
  // optional uint32 level = 11;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->level(), output);
  }
  
  // optional float gold_per_min = 12;
  if (has_gold_per_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->gold_per_min(), output);
  }
  
  // optional float xp_per_min = 13;
  if (has_xp_per_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->xp_per_min(), output);
  }
  
  // optional .CMsgDOTALiveScoreboardUpdate.Team.Player.DOTAUltimateState ultimate_state = 14 [default = k_EDOTAUltimateStateNotLearned];
  if (has_ultimate_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->ultimate_state(), output);
  }
  
  // optional float ultimate_cooldown = 15;
  if (has_ultimate_cooldown()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->ultimate_cooldown(), output);
  }
  
  // optional uint32 item0 = 16;
  if (has_item0()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->item0(), output);
  }
  
  // optional uint32 item1 = 17;
  if (has_item1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->item1(), output);
  }
  
  // optional uint32 item2 = 18;
  if (has_item2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->item2(), output);
  }
  
  // optional uint32 item3 = 19;
  if (has_item3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->item3(), output);
  }
  
  // optional uint32 item4 = 20;
  if (has_item4()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->item4(), output);
  }
  
  // optional uint32 item5 = 21;
  if (has_item5()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->item5(), output);
  }
  
  // optional uint32 respawn_timer = 22;
  if (has_respawn_timer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->respawn_timer(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgDOTALiveScoreboardUpdate_Team_Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 player_slot = 1;
  if (has_player_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_slot(), target);
  }
  
  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }
  
  // optional string hero_name = 3;
  if (has_hero_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hero_name().data(), this->hero_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hero_name(), target);
  }
  
  // optional uint32 hero_id = 4;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hero_id(), target);
  }
  
  // optional uint32 kills = 5;
  if (has_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->kills(), target);
  }
  
  // optional uint32 deaths = 6;
  if (has_deaths()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->deaths(), target);
  }
  
  // optional uint32 assists = 7;
  if (has_assists()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->assists(), target);
  }
  
  // optional uint32 last_hits = 8;
  if (has_last_hits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->last_hits(), target);
  }
  
  // optional uint32 denies = 9;
  if (has_denies()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->denies(), target);
  }
  
  // optional uint32 gold = 10;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->gold(), target);
  }
  
  // optional uint32 level = 11;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->level(), target);
  }
  
  // optional float gold_per_min = 12;
  if (has_gold_per_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->gold_per_min(), target);
  }
  
  // optional float xp_per_min = 13;
  if (has_xp_per_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->xp_per_min(), target);
  }
  
  // optional .CMsgDOTALiveScoreboardUpdate.Team.Player.DOTAUltimateState ultimate_state = 14 [default = k_EDOTAUltimateStateNotLearned];
  if (has_ultimate_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->ultimate_state(), target);
  }
  
  // optional float ultimate_cooldown = 15;
  if (has_ultimate_cooldown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->ultimate_cooldown(), target);
  }
  
  // optional uint32 item0 = 16;
  if (has_item0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->item0(), target);
  }
  
  // optional uint32 item1 = 17;
  if (has_item1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->item1(), target);
  }
  
  // optional uint32 item2 = 18;
  if (has_item2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->item2(), target);
  }
  
  // optional uint32 item3 = 19;
  if (has_item3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->item3(), target);
  }
  
  // optional uint32 item4 = 20;
  if (has_item4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->item4(), target);
  }
  
  // optional uint32 item5 = 21;
  if (has_item5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->item5(), target);
  }
  
  // optional uint32 respawn_timer = 22;
  if (has_respawn_timer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->respawn_timer(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgDOTALiveScoreboardUpdate_Team_Player::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 player_slot = 1;
    if (has_player_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_slot());
    }
    
    // optional string player_name = 2;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }
    
    // optional string hero_name = 3;
    if (has_hero_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hero_name());
    }
    
    // optional uint32 hero_id = 4;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }
    
    // optional uint32 kills = 5;
    if (has_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }
    
    // optional uint32 deaths = 6;
    if (has_deaths()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deaths());
    }
    
    // optional uint32 assists = 7;
    if (has_assists()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assists());
    }
    
    // optional uint32 last_hits = 8;
    if (has_last_hits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_hits());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 denies = 9;
    if (has_denies()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->denies());
    }
    
    // optional uint32 gold = 10;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }
    
    // optional uint32 level = 11;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // optional float gold_per_min = 12;
    if (has_gold_per_min()) {
      total_size += 1 + 4;
    }
    
    // optional float xp_per_min = 13;
    if (has_xp_per_min()) {
      total_size += 1 + 4;
    }
    
    // optional .CMsgDOTALiveScoreboardUpdate.Team.Player.DOTAUltimateState ultimate_state = 14 [default = k_EDOTAUltimateStateNotLearned];
    if (has_ultimate_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ultimate_state());
    }
    
    // optional float ultimate_cooldown = 15;
    if (has_ultimate_cooldown()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 item0 = 16;
    if (has_item0()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item0());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 item1 = 17;
    if (has_item1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item1());
    }
    
    // optional uint32 item2 = 18;
    if (has_item2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item2());
    }
    
    // optional uint32 item3 = 19;
    if (has_item3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item3());
    }
    
    // optional uint32 item4 = 20;
    if (has_item4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item4());
    }
    
    // optional uint32 item5 = 21;
    if (has_item5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item5());
    }
    
    // optional uint32 respawn_timer = 22;
    if (has_respawn_timer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->respawn_timer());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTALiveScoreboardUpdate_Team_Player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTALiveScoreboardUpdate_Team_Player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::MergeFrom(const CMsgDOTALiveScoreboardUpdate_Team_Player& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_slot()) {
      set_player_slot(from.player_slot());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_hero_name()) {
      set_hero_name(from.hero_name());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_kills()) {
      set_kills(from.kills());
    }
    if (from.has_deaths()) {
      set_deaths(from.deaths());
    }
    if (from.has_assists()) {
      set_assists(from.assists());
    }
    if (from.has_last_hits()) {
      set_last_hits(from.last_hits());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_denies()) {
      set_denies(from.denies());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_gold_per_min()) {
      set_gold_per_min(from.gold_per_min());
    }
    if (from.has_xp_per_min()) {
      set_xp_per_min(from.xp_per_min());
    }
    if (from.has_ultimate_state()) {
      set_ultimate_state(from.ultimate_state());
    }
    if (from.has_ultimate_cooldown()) {
      set_ultimate_cooldown(from.ultimate_cooldown());
    }
    if (from.has_item0()) {
      set_item0(from.item0());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_item1()) {
      set_item1(from.item1());
    }
    if (from.has_item2()) {
      set_item2(from.item2());
    }
    if (from.has_item3()) {
      set_item3(from.item3());
    }
    if (from.has_item4()) {
      set_item4(from.item4());
    }
    if (from.has_item5()) {
      set_item5(from.item5());
    }
    if (from.has_respawn_timer()) {
      set_respawn_timer(from.respawn_timer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::CopyFrom(const CMsgDOTALiveScoreboardUpdate_Team_Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALiveScoreboardUpdate_Team_Player::IsInitialized() const {
  
  return true;
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::Swap(CMsgDOTALiveScoreboardUpdate_Team_Player* other) {
  if (other != this) {
    std::swap(player_slot_, other->player_slot_);
    std::swap(player_name_, other->player_name_);
    std::swap(hero_name_, other->hero_name_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(kills_, other->kills_);
    std::swap(deaths_, other->deaths_);
    std::swap(assists_, other->assists_);
    std::swap(last_hits_, other->last_hits_);
    std::swap(denies_, other->denies_);
    std::swap(gold_, other->gold_);
    std::swap(level_, other->level_);
    std::swap(gold_per_min_, other->gold_per_min_);
    std::swap(xp_per_min_, other->xp_per_min_);
    std::swap(ultimate_state_, other->ultimate_state_);
    std::swap(ultimate_cooldown_, other->ultimate_cooldown_);
    std::swap(item0_, other->item0_);
    std::swap(item1_, other->item1_);
    std::swap(item2_, other->item2_);
    std::swap(item3_, other->item3_);
    std::swap(item4_, other->item4_);
    std::swap(item5_, other->item5_);
    std::swap(respawn_timer_, other->respawn_timer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTALiveScoreboardUpdate_Team_Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTALiveScoreboardUpdate_Team_Player_descriptor_;
  metadata.reflection = CMsgDOTALiveScoreboardUpdate_Team_Player_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTALiveScoreboardUpdate_Team::kPlayersFieldNumber;
const int CMsgDOTALiveScoreboardUpdate_Team::kScoreFieldNumber;
#endif  // !_MSC_VER

CMsgDOTALiveScoreboardUpdate_Team::CMsgDOTALiveScoreboardUpdate_Team()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgDOTALiveScoreboardUpdate_Team::InitAsDefaultInstance() {
}

CMsgDOTALiveScoreboardUpdate_Team::CMsgDOTALiveScoreboardUpdate_Team(const CMsgDOTALiveScoreboardUpdate_Team& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgDOTALiveScoreboardUpdate_Team::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTALiveScoreboardUpdate_Team::~CMsgDOTALiveScoreboardUpdate_Team() {
  SharedDtor();
}

void CMsgDOTALiveScoreboardUpdate_Team::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTALiveScoreboardUpdate_Team::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTALiveScoreboardUpdate_Team::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTALiveScoreboardUpdate_Team_descriptor_;
}

const CMsgDOTALiveScoreboardUpdate_Team& CMsgDOTALiveScoreboardUpdate_Team::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgDOTALiveScoreboardUpdate_Team* CMsgDOTALiveScoreboardUpdate_Team::default_instance_ = NULL;

CMsgDOTALiveScoreboardUpdate_Team* CMsgDOTALiveScoreboardUpdate_Team::New() const {
  return new CMsgDOTALiveScoreboardUpdate_Team;
}

void CMsgDOTALiveScoreboardUpdate_Team::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    score_ = 0u;
  }
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTALiveScoreboardUpdate_Team::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgDOTALiveScoreboardUpdate.Team.Player players = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_players;
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }
      
      // optional uint32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgDOTALiveScoreboardUpdate_Team::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgDOTALiveScoreboardUpdate.Team.Player players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }
  
  // optional uint32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgDOTALiveScoreboardUpdate_Team::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgDOTALiveScoreboardUpdate.Team.Player players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->players(i), target);
  }
  
  // optional uint32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgDOTALiveScoreboardUpdate_Team::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }
    
  }
  // repeated .CMsgDOTALiveScoreboardUpdate.Team.Player players = 1;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTALiveScoreboardUpdate_Team::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTALiveScoreboardUpdate_Team* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTALiveScoreboardUpdate_Team*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTALiveScoreboardUpdate_Team::MergeFrom(const CMsgDOTALiveScoreboardUpdate_Team& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTALiveScoreboardUpdate_Team::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALiveScoreboardUpdate_Team::CopyFrom(const CMsgDOTALiveScoreboardUpdate_Team& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALiveScoreboardUpdate_Team::IsInitialized() const {
  
  return true;
}

void CMsgDOTALiveScoreboardUpdate_Team::Swap(CMsgDOTALiveScoreboardUpdate_Team* other) {
  if (other != this) {
    players_.Swap(&other->players_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTALiveScoreboardUpdate_Team::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTALiveScoreboardUpdate_Team_descriptor_;
  metadata.reflection = CMsgDOTALiveScoreboardUpdate_Team_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTALiveScoreboardUpdate::kTournamentIdFieldNumber;
const int CMsgDOTALiveScoreboardUpdate::kTournamentGameIdFieldNumber;
const int CMsgDOTALiveScoreboardUpdate::kDurationFieldNumber;
const int CMsgDOTALiveScoreboardUpdate::kHltvDelayFieldNumber;
const int CMsgDOTALiveScoreboardUpdate::kTeamGoodFieldNumber;
const int CMsgDOTALiveScoreboardUpdate::kTeamBadFieldNumber;
const int CMsgDOTALiveScoreboardUpdate::kRoshanRespawnTimerFieldNumber;
#endif  // !_MSC_VER

CMsgDOTALiveScoreboardUpdate::CMsgDOTALiveScoreboardUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgDOTALiveScoreboardUpdate::InitAsDefaultInstance() {
  team_good_ = const_cast< ::CMsgDOTALiveScoreboardUpdate_Team*>(&::CMsgDOTALiveScoreboardUpdate_Team::default_instance());
  team_bad_ = const_cast< ::CMsgDOTALiveScoreboardUpdate_Team*>(&::CMsgDOTALiveScoreboardUpdate_Team::default_instance());
}

CMsgDOTALiveScoreboardUpdate::CMsgDOTALiveScoreboardUpdate(const CMsgDOTALiveScoreboardUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgDOTALiveScoreboardUpdate::SharedCtor() {
  _cached_size_ = 0;
  tournament_id_ = 0u;
  tournament_game_id_ = 0u;
  duration_ = 0;
  hltv_delay_ = 0;
  team_good_ = NULL;
  team_bad_ = NULL;
  roshan_respawn_timer_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTALiveScoreboardUpdate::~CMsgDOTALiveScoreboardUpdate() {
  SharedDtor();
}

void CMsgDOTALiveScoreboardUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete team_good_;
    delete team_bad_;
  }
}

void CMsgDOTALiveScoreboardUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTALiveScoreboardUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTALiveScoreboardUpdate_descriptor_;
}

const CMsgDOTALiveScoreboardUpdate& CMsgDOTALiveScoreboardUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgDOTALiveScoreboardUpdate* CMsgDOTALiveScoreboardUpdate::default_instance_ = NULL;

CMsgDOTALiveScoreboardUpdate* CMsgDOTALiveScoreboardUpdate::New() const {
  return new CMsgDOTALiveScoreboardUpdate;
}

void CMsgDOTALiveScoreboardUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tournament_id_ = 0u;
    tournament_game_id_ = 0u;
    duration_ = 0;
    hltv_delay_ = 0;
    if (has_team_good()) {
      if (team_good_ != NULL) team_good_->::CMsgDOTALiveScoreboardUpdate_Team::Clear();
    }
    if (has_team_bad()) {
      if (team_bad_ != NULL) team_bad_->::CMsgDOTALiveScoreboardUpdate_Team::Clear();
    }
    roshan_respawn_timer_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTALiveScoreboardUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tournament_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_id_)));
          set_has_tournament_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tournament_game_id;
        break;
      }
      
      // optional uint32 tournament_game_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tournament_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_game_id_)));
          set_has_tournament_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_duration;
        break;
      }
      
      // optional float duration = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hltv_delay;
        break;
      }
      
      // optional int32 hltv_delay = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hltv_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hltv_delay_)));
          set_has_hltv_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_team_good;
        break;
      }
      
      // optional .CMsgDOTALiveScoreboardUpdate.Team team_good = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_good:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_good()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_team_bad;
        break;
      }
      
      // optional .CMsgDOTALiveScoreboardUpdate.Team team_bad = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_bad:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_bad()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_roshan_respawn_timer;
        break;
      }
      
      // optional uint32 roshan_respawn_timer = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roshan_respawn_timer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roshan_respawn_timer_)));
          set_has_roshan_respawn_timer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgDOTALiveScoreboardUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 tournament_id = 1;
  if (has_tournament_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tournament_id(), output);
  }
  
  // optional uint32 tournament_game_id = 2;
  if (has_tournament_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tournament_game_id(), output);
  }
  
  // optional float duration = 3;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->duration(), output);
  }
  
  // optional int32 hltv_delay = 4;
  if (has_hltv_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hltv_delay(), output);
  }
  
  // optional .CMsgDOTALiveScoreboardUpdate.Team team_good = 5;
  if (has_team_good()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->team_good(), output);
  }
  
  // optional .CMsgDOTALiveScoreboardUpdate.Team team_bad = 6;
  if (has_team_bad()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->team_bad(), output);
  }
  
  // optional uint32 roshan_respawn_timer = 7;
  if (has_roshan_respawn_timer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->roshan_respawn_timer(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgDOTALiveScoreboardUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 tournament_id = 1;
  if (has_tournament_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tournament_id(), target);
  }
  
  // optional uint32 tournament_game_id = 2;
  if (has_tournament_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tournament_game_id(), target);
  }
  
  // optional float duration = 3;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->duration(), target);
  }
  
  // optional int32 hltv_delay = 4;
  if (has_hltv_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hltv_delay(), target);
  }
  
  // optional .CMsgDOTALiveScoreboardUpdate.Team team_good = 5;
  if (has_team_good()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->team_good(), target);
  }
  
  // optional .CMsgDOTALiveScoreboardUpdate.Team team_bad = 6;
  if (has_team_bad()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->team_bad(), target);
  }
  
  // optional uint32 roshan_respawn_timer = 7;
  if (has_roshan_respawn_timer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->roshan_respawn_timer(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgDOTALiveScoreboardUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tournament_id = 1;
    if (has_tournament_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_id());
    }
    
    // optional uint32 tournament_game_id = 2;
    if (has_tournament_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_game_id());
    }
    
    // optional float duration = 3;
    if (has_duration()) {
      total_size += 1 + 4;
    }
    
    // optional int32 hltv_delay = 4;
    if (has_hltv_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hltv_delay());
    }
    
    // optional .CMsgDOTALiveScoreboardUpdate.Team team_good = 5;
    if (has_team_good()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team_good());
    }
    
    // optional .CMsgDOTALiveScoreboardUpdate.Team team_bad = 6;
    if (has_team_bad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team_bad());
    }
    
    // optional uint32 roshan_respawn_timer = 7;
    if (has_roshan_respawn_timer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roshan_respawn_timer());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTALiveScoreboardUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTALiveScoreboardUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTALiveScoreboardUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTALiveScoreboardUpdate::MergeFrom(const CMsgDOTALiveScoreboardUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tournament_id()) {
      set_tournament_id(from.tournament_id());
    }
    if (from.has_tournament_game_id()) {
      set_tournament_game_id(from.tournament_game_id());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_hltv_delay()) {
      set_hltv_delay(from.hltv_delay());
    }
    if (from.has_team_good()) {
      mutable_team_good()->::CMsgDOTALiveScoreboardUpdate_Team::MergeFrom(from.team_good());
    }
    if (from.has_team_bad()) {
      mutable_team_bad()->::CMsgDOTALiveScoreboardUpdate_Team::MergeFrom(from.team_bad());
    }
    if (from.has_roshan_respawn_timer()) {
      set_roshan_respawn_timer(from.roshan_respawn_timer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTALiveScoreboardUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALiveScoreboardUpdate::CopyFrom(const CMsgDOTALiveScoreboardUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALiveScoreboardUpdate::IsInitialized() const {
  
  return true;
}

void CMsgDOTALiveScoreboardUpdate::Swap(CMsgDOTALiveScoreboardUpdate* other) {
  if (other != this) {
    std::swap(tournament_id_, other->tournament_id_);
    std::swap(tournament_game_id_, other->tournament_game_id_);
    std::swap(duration_, other->duration_);
    std::swap(hltv_delay_, other->hltv_delay_);
    std::swap(team_good_, other->team_good_);
    std::swap(team_bad_, other->team_bad_);
    std::swap(roshan_respawn_timer_, other->roshan_respawn_timer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTALiveScoreboardUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTALiveScoreboardUpdate_descriptor_;
  metadata.reflection = CMsgDOTALiveScoreboardUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTARequestPlayerResources::kSteamIdFieldNumber;
const int CMsgDOTARequestPlayerResources::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARequestPlayerResources::CMsgDOTARequestPlayerResources()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgDOTARequestPlayerResources::InitAsDefaultInstance() {
}

CMsgDOTARequestPlayerResources::CMsgDOTARequestPlayerResources(const CMsgDOTARequestPlayerResources& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgDOTARequestPlayerResources::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  player_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARequestPlayerResources::~CMsgDOTARequestPlayerResources() {
  SharedDtor();
}

void CMsgDOTARequestPlayerResources::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTARequestPlayerResources::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARequestPlayerResources::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARequestPlayerResources_descriptor_;
}

const CMsgDOTARequestPlayerResources& CMsgDOTARequestPlayerResources::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgDOTARequestPlayerResources* CMsgDOTARequestPlayerResources::default_instance_ = NULL;

CMsgDOTARequestPlayerResources* CMsgDOTARequestPlayerResources::New() const {
  return new CMsgDOTARequestPlayerResources;
}

void CMsgDOTARequestPlayerResources::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_ = GOOGLE_ULONGLONG(0);
    player_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTARequestPlayerResources::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }
      
      // optional uint32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgDOTARequestPlayerResources::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }
  
  // optional uint32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->player_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgDOTARequestPlayerResources::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }
  
  // optional uint32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->player_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgDOTARequestPlayerResources::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }
    
    // optional uint32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARequestPlayerResources::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTARequestPlayerResources* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTARequestPlayerResources*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARequestPlayerResources::MergeFrom(const CMsgDOTARequestPlayerResources& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTARequestPlayerResources::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARequestPlayerResources::CopyFrom(const CMsgDOTARequestPlayerResources& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARequestPlayerResources::IsInitialized() const {
  
  return true;
}

void CMsgDOTARequestPlayerResources::Swap(CMsgDOTARequestPlayerResources* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTARequestPlayerResources::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARequestPlayerResources_descriptor_;
  metadata.reflection = CMsgDOTARequestPlayerResources_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTARequestPlayerResourcesResponse::kSteamIdFieldNumber;
const int CMsgDOTARequestPlayerResourcesResponse::kRankFieldNumber;
const int CMsgDOTARequestPlayerResourcesResponse::kPlayerIdFieldNumber;
const int CMsgDOTARequestPlayerResourcesResponse::kPreventTextChatFieldNumber;
const int CMsgDOTARequestPlayerResourcesResponse::kPreventVoiceChatFieldNumber;
const int CMsgDOTARequestPlayerResourcesResponse::kLowPriorityFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARequestPlayerResourcesResponse::CMsgDOTARequestPlayerResourcesResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgDOTARequestPlayerResourcesResponse::InitAsDefaultInstance() {
}

CMsgDOTARequestPlayerResourcesResponse::CMsgDOTARequestPlayerResourcesResponse(const CMsgDOTARequestPlayerResourcesResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgDOTARequestPlayerResourcesResponse::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  rank_ = 0u;
  player_id_ = 0u;
  prevent_text_chat_ = false;
  prevent_voice_chat_ = false;
  low_priority_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARequestPlayerResourcesResponse::~CMsgDOTARequestPlayerResourcesResponse() {
  SharedDtor();
}

void CMsgDOTARequestPlayerResourcesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTARequestPlayerResourcesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARequestPlayerResourcesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARequestPlayerResourcesResponse_descriptor_;
}

const CMsgDOTARequestPlayerResourcesResponse& CMsgDOTARequestPlayerResourcesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgDOTARequestPlayerResourcesResponse* CMsgDOTARequestPlayerResourcesResponse::default_instance_ = NULL;

CMsgDOTARequestPlayerResourcesResponse* CMsgDOTARequestPlayerResourcesResponse::New() const {
  return new CMsgDOTARequestPlayerResourcesResponse;
}

void CMsgDOTARequestPlayerResourcesResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_ = GOOGLE_ULONGLONG(0);
    rank_ = 0u;
    player_id_ = 0u;
    prevent_text_chat_ = false;
    prevent_voice_chat_ = false;
    low_priority_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTARequestPlayerResourcesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }
      
      // optional uint32 rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_id;
        break;
      }
      
      // optional uint32 player_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_prevent_text_chat;
        break;
      }
      
      // optional bool prevent_text_chat = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prevent_text_chat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prevent_text_chat_)));
          set_has_prevent_text_chat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_prevent_voice_chat;
        break;
      }
      
      // optional bool prevent_voice_chat = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prevent_voice_chat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prevent_voice_chat_)));
          set_has_prevent_voice_chat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_low_priority;
        break;
      }
      
      // optional bool low_priority = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_low_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_priority_)));
          set_has_low_priority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgDOTARequestPlayerResourcesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }
  
  // optional uint32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rank(), output);
  }
  
  // optional uint32 player_id = 3;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->player_id(), output);
  }
  
  // optional bool prevent_text_chat = 4;
  if (has_prevent_text_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->prevent_text_chat(), output);
  }
  
  // optional bool prevent_voice_chat = 5;
  if (has_prevent_voice_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->prevent_voice_chat(), output);
  }
  
  // optional bool low_priority = 6;
  if (has_low_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->low_priority(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgDOTARequestPlayerResourcesResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }
  
  // optional uint32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rank(), target);
  }
  
  // optional uint32 player_id = 3;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->player_id(), target);
  }
  
  // optional bool prevent_text_chat = 4;
  if (has_prevent_text_chat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->prevent_text_chat(), target);
  }
  
  // optional bool prevent_voice_chat = 5;
  if (has_prevent_voice_chat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->prevent_voice_chat(), target);
  }
  
  // optional bool low_priority = 6;
  if (has_low_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->low_priority(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgDOTARequestPlayerResourcesResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }
    
    // optional uint32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }
    
    // optional uint32 player_id = 3;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }
    
    // optional bool prevent_text_chat = 4;
    if (has_prevent_text_chat()) {
      total_size += 1 + 1;
    }
    
    // optional bool prevent_voice_chat = 5;
    if (has_prevent_voice_chat()) {
      total_size += 1 + 1;
    }
    
    // optional bool low_priority = 6;
    if (has_low_priority()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARequestPlayerResourcesResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTARequestPlayerResourcesResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTARequestPlayerResourcesResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARequestPlayerResourcesResponse::MergeFrom(const CMsgDOTARequestPlayerResourcesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_prevent_text_chat()) {
      set_prevent_text_chat(from.prevent_text_chat());
    }
    if (from.has_prevent_voice_chat()) {
      set_prevent_voice_chat(from.prevent_voice_chat());
    }
    if (from.has_low_priority()) {
      set_low_priority(from.low_priority());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTARequestPlayerResourcesResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARequestPlayerResourcesResponse::CopyFrom(const CMsgDOTARequestPlayerResourcesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARequestPlayerResourcesResponse::IsInitialized() const {
  
  return true;
}

void CMsgDOTARequestPlayerResourcesResponse::Swap(CMsgDOTARequestPlayerResourcesResponse* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(rank_, other->rank_);
    std::swap(player_id_, other->player_id_);
    std::swap(prevent_text_chat_, other->prevent_text_chat_);
    std::swap(prevent_voice_chat_, other->prevent_voice_chat_);
    std::swap(low_priority_, other->low_priority_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTARequestPlayerResourcesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARequestPlayerResourcesResponse_descriptor_;
  metadata.reflection = CMsgDOTARequestPlayerResourcesResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTARequestBatchPlayerResources::kAccountIdsFieldNumber;
const int CMsgDOTARequestBatchPlayerResources::kRankUseCompetitiveFieldNumber;
const int CMsgDOTARequestBatchPlayerResources::kRankUseSoloFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARequestBatchPlayerResources::CMsgDOTARequestBatchPlayerResources()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgDOTARequestBatchPlayerResources::InitAsDefaultInstance() {
}

CMsgDOTARequestBatchPlayerResources::CMsgDOTARequestBatchPlayerResources(const CMsgDOTARequestBatchPlayerResources& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgDOTARequestBatchPlayerResources::SharedCtor() {
  _cached_size_ = 0;
  rank_use_competitive_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARequestBatchPlayerResources::~CMsgDOTARequestBatchPlayerResources() {
  SharedDtor();
}

void CMsgDOTARequestBatchPlayerResources::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTARequestBatchPlayerResources::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARequestBatchPlayerResources::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARequestBatchPlayerResources_descriptor_;
}

const CMsgDOTARequestBatchPlayerResources& CMsgDOTARequestBatchPlayerResources::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgDOTARequestBatchPlayerResources* CMsgDOTARequestBatchPlayerResources::default_instance_ = NULL;

CMsgDOTARequestBatchPlayerResources* CMsgDOTARequestBatchPlayerResources::New() const {
  return new CMsgDOTARequestBatchPlayerResources;
}

void CMsgDOTARequestBatchPlayerResources::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    rank_use_competitive_ = false;
  }
  account_ids_.Clear();
  rank_use_solo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTARequestBatchPlayerResources::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 account_ids = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_account_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10, input, this->mutable_account_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank_use_competitive;
        break;
      }
      
      // optional bool rank_use_competitive = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_use_competitive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rank_use_competitive_)));
          set_has_rank_use_competitive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rank_use_solo;
        break;
      }
      
      // repeated bool rank_use_solo = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank_use_solo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_rank_use_solo())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 26, input, this->mutable_rank_use_solo())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgDOTARequestBatchPlayerResources::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 account_ids = 1 [packed = true];
  if (this->account_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_account_ids_cached_byte_size_);
  }
  for (int i = 0; i < this->account_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->account_ids(i), output);
  }
  
  // optional bool rank_use_competitive = 2;
  if (has_rank_use_competitive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->rank_use_competitive(), output);
  }
  
  // repeated bool rank_use_solo = 3 [packed = true];
  if (this->rank_use_solo_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_rank_use_solo_cached_byte_size_);
  }
  for (int i = 0; i < this->rank_use_solo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBoolNoTag(
      this->rank_use_solo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgDOTARequestBatchPlayerResources::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 account_ids = 1 [packed = true];
  if (this->account_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _account_ids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->account_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->account_ids(i), target);
  }
  
  // optional bool rank_use_competitive = 2;
  if (has_rank_use_competitive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->rank_use_competitive(), target);
  }
  
  // repeated bool rank_use_solo = 3 [packed = true];
  if (this->rank_use_solo_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _rank_use_solo_cached_byte_size_, target);
  }
  for (int i = 0; i < this->rank_use_solo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->rank_use_solo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgDOTARequestBatchPlayerResources::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool rank_use_competitive = 2;
    if (has_rank_use_competitive()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated uint32 account_ids = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->account_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->account_ids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _account_ids_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated bool rank_use_solo = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 1 * this->rank_use_solo_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _rank_use_solo_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARequestBatchPlayerResources::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTARequestBatchPlayerResources* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTARequestBatchPlayerResources*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARequestBatchPlayerResources::MergeFrom(const CMsgDOTARequestBatchPlayerResources& from) {
  GOOGLE_CHECK_NE(&from, this);
  account_ids_.MergeFrom(from.account_ids_);
  rank_use_solo_.MergeFrom(from.rank_use_solo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_rank_use_competitive()) {
      set_rank_use_competitive(from.rank_use_competitive());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTARequestBatchPlayerResources::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARequestBatchPlayerResources::CopyFrom(const CMsgDOTARequestBatchPlayerResources& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARequestBatchPlayerResources::IsInitialized() const {
  
  return true;
}

void CMsgDOTARequestBatchPlayerResources::Swap(CMsgDOTARequestBatchPlayerResources* other) {
  if (other != this) {
    account_ids_.Swap(&other->account_ids_);
    std::swap(rank_use_competitive_, other->rank_use_competitive_);
    rank_use_solo_.Swap(&other->rank_use_solo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTARequestBatchPlayerResources::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARequestBatchPlayerResources_descriptor_;
  metadata.reflection = CMsgDOTARequestBatchPlayerResources_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTARequestBatchPlayerResourcesResponse_Result::kAccountIdFieldNumber;
const int CMsgDOTARequestBatchPlayerResourcesResponse_Result::kPreventTextChatFieldNumber;
const int CMsgDOTARequestBatchPlayerResourcesResponse_Result::kPreventVoiceChatFieldNumber;
const int CMsgDOTARequestBatchPlayerResourcesResponse_Result::kRankFieldNumber;
const int CMsgDOTARequestBatchPlayerResourcesResponse_Result::kRankCalibratedFieldNumber;
const int CMsgDOTARequestBatchPlayerResourcesResponse_Result::kLowPriorityFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARequestBatchPlayerResourcesResponse_Result::CMsgDOTARequestBatchPlayerResourcesResponse_Result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgDOTARequestBatchPlayerResourcesResponse_Result::InitAsDefaultInstance() {
}

CMsgDOTARequestBatchPlayerResourcesResponse_Result::CMsgDOTARequestBatchPlayerResourcesResponse_Result(const CMsgDOTARequestBatchPlayerResourcesResponse_Result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgDOTARequestBatchPlayerResourcesResponse_Result::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  prevent_text_chat_ = false;
  prevent_voice_chat_ = false;
  rank_ = 0u;
  rank_calibrated_ = false;
  low_priority_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARequestBatchPlayerResourcesResponse_Result::~CMsgDOTARequestBatchPlayerResourcesResponse_Result() {
  SharedDtor();
}

void CMsgDOTARequestBatchPlayerResourcesResponse_Result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTARequestBatchPlayerResourcesResponse_Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARequestBatchPlayerResourcesResponse_Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARequestBatchPlayerResourcesResponse_Result_descriptor_;
}

const CMsgDOTARequestBatchPlayerResourcesResponse_Result& CMsgDOTARequestBatchPlayerResourcesResponse_Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgDOTARequestBatchPlayerResourcesResponse_Result* CMsgDOTARequestBatchPlayerResourcesResponse_Result::default_instance_ = NULL;

CMsgDOTARequestBatchPlayerResourcesResponse_Result* CMsgDOTARequestBatchPlayerResourcesResponse_Result::New() const {
  return new CMsgDOTARequestBatchPlayerResourcesResponse_Result;
}

void CMsgDOTARequestBatchPlayerResourcesResponse_Result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    prevent_text_chat_ = false;
    prevent_voice_chat_ = false;
    rank_ = 0u;
    rank_calibrated_ = false;
    low_priority_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTARequestBatchPlayerResourcesResponse_Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_prevent_text_chat;
        break;
      }
      
      // optional bool prevent_text_chat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prevent_text_chat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prevent_text_chat_)));
          set_has_prevent_text_chat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_prevent_voice_chat;
        break;
      }
      
      // optional bool prevent_voice_chat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prevent_voice_chat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prevent_voice_chat_)));
          set_has_prevent_voice_chat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rank;
        break;
      }
      
      // optional uint32 rank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rank_calibrated;
        break;
      }
      
      // optional bool rank_calibrated = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_calibrated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rank_calibrated_)));
          set_has_rank_calibrated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_low_priority;
        break;
      }
      
      // optional bool low_priority = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_low_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_priority_)));
          set_has_low_priority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgDOTARequestBatchPlayerResourcesResponse_Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }
  
  // optional bool prevent_text_chat = 2;
  if (has_prevent_text_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->prevent_text_chat(), output);
  }
  
  // optional bool prevent_voice_chat = 3;
  if (has_prevent_voice_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->prevent_voice_chat(), output);
  }
  
  // optional uint32 rank = 4;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rank(), output);
  }
  
  // optional bool rank_calibrated = 5;
  if (has_rank_calibrated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->rank_calibrated(), output);
  }
  
  // optional bool low_priority = 6;
  if (has_low_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->low_priority(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgDOTARequestBatchPlayerResourcesResponse_Result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }
  
  // optional bool prevent_text_chat = 2;
  if (has_prevent_text_chat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->prevent_text_chat(), target);
  }
  
  // optional bool prevent_voice_chat = 3;
  if (has_prevent_voice_chat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->prevent_voice_chat(), target);
  }
  
  // optional uint32 rank = 4;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rank(), target);
  }
  
  // optional bool rank_calibrated = 5;
  if (has_rank_calibrated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->rank_calibrated(), target);
  }
  
  // optional bool low_priority = 6;
  if (has_low_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->low_priority(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgDOTARequestBatchPlayerResourcesResponse_Result::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
    // optional bool prevent_text_chat = 2;
    if (has_prevent_text_chat()) {
      total_size += 1 + 1;
    }
    
    // optional bool prevent_voice_chat = 3;
    if (has_prevent_voice_chat()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 rank = 4;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }
    
    // optional bool rank_calibrated = 5;
    if (has_rank_calibrated()) {
      total_size += 1 + 1;
    }
    
    // optional bool low_priority = 6;
    if (has_low_priority()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARequestBatchPlayerResourcesResponse_Result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTARequestBatchPlayerResourcesResponse_Result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTARequestBatchPlayerResourcesResponse_Result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARequestBatchPlayerResourcesResponse_Result::MergeFrom(const CMsgDOTARequestBatchPlayerResourcesResponse_Result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_prevent_text_chat()) {
      set_prevent_text_chat(from.prevent_text_chat());
    }
    if (from.has_prevent_voice_chat()) {
      set_prevent_voice_chat(from.prevent_voice_chat());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_rank_calibrated()) {
      set_rank_calibrated(from.rank_calibrated());
    }
    if (from.has_low_priority()) {
      set_low_priority(from.low_priority());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTARequestBatchPlayerResourcesResponse_Result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARequestBatchPlayerResourcesResponse_Result::CopyFrom(const CMsgDOTARequestBatchPlayerResourcesResponse_Result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARequestBatchPlayerResourcesResponse_Result::IsInitialized() const {
  
  return true;
}

void CMsgDOTARequestBatchPlayerResourcesResponse_Result::Swap(CMsgDOTARequestBatchPlayerResourcesResponse_Result* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(prevent_text_chat_, other->prevent_text_chat_);
    std::swap(prevent_voice_chat_, other->prevent_voice_chat_);
    std::swap(rank_, other->rank_);
    std::swap(rank_calibrated_, other->rank_calibrated_);
    std::swap(low_priority_, other->low_priority_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTARequestBatchPlayerResourcesResponse_Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARequestBatchPlayerResourcesResponse_Result_descriptor_;
  metadata.reflection = CMsgDOTARequestBatchPlayerResourcesResponse_Result_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTARequestBatchPlayerResourcesResponse::kResultsFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARequestBatchPlayerResourcesResponse::CMsgDOTARequestBatchPlayerResourcesResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgDOTARequestBatchPlayerResourcesResponse::InitAsDefaultInstance() {
}

CMsgDOTARequestBatchPlayerResourcesResponse::CMsgDOTARequestBatchPlayerResourcesResponse(const CMsgDOTARequestBatchPlayerResourcesResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgDOTARequestBatchPlayerResourcesResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARequestBatchPlayerResourcesResponse::~CMsgDOTARequestBatchPlayerResourcesResponse() {
  SharedDtor();
}

void CMsgDOTARequestBatchPlayerResourcesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTARequestBatchPlayerResourcesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARequestBatchPlayerResourcesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARequestBatchPlayerResourcesResponse_descriptor_;
}

const CMsgDOTARequestBatchPlayerResourcesResponse& CMsgDOTARequestBatchPlayerResourcesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgDOTARequestBatchPlayerResourcesResponse* CMsgDOTARequestBatchPlayerResourcesResponse::default_instance_ = NULL;

CMsgDOTARequestBatchPlayerResourcesResponse* CMsgDOTARequestBatchPlayerResourcesResponse::New() const {
  return new CMsgDOTARequestBatchPlayerResourcesResponse;
}

void CMsgDOTARequestBatchPlayerResourcesResponse::Clear() {
  results_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTARequestBatchPlayerResourcesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgDOTARequestBatchPlayerResourcesResponse.Result results = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_results;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgDOTARequestBatchPlayerResourcesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgDOTARequestBatchPlayerResourcesResponse.Result results = 6;
  for (int i = 0; i < this->results_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->results(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgDOTARequestBatchPlayerResourcesResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgDOTARequestBatchPlayerResourcesResponse.Result results = 6;
  for (int i = 0; i < this->results_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->results(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgDOTARequestBatchPlayerResourcesResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .CMsgDOTARequestBatchPlayerResourcesResponse.Result results = 6;
  total_size += 1 * this->results_size();
  for (int i = 0; i < this->results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->results(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARequestBatchPlayerResourcesResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTARequestBatchPlayerResourcesResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTARequestBatchPlayerResourcesResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARequestBatchPlayerResourcesResponse::MergeFrom(const CMsgDOTARequestBatchPlayerResourcesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  results_.MergeFrom(from.results_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTARequestBatchPlayerResourcesResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARequestBatchPlayerResourcesResponse::CopyFrom(const CMsgDOTARequestBatchPlayerResourcesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARequestBatchPlayerResourcesResponse::IsInitialized() const {
  
  return true;
}

void CMsgDOTARequestBatchPlayerResourcesResponse::Swap(CMsgDOTARequestBatchPlayerResourcesResponse* other) {
  if (other != this) {
    results_.Swap(&other->results_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTARequestBatchPlayerResourcesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARequestBatchPlayerResourcesResponse_descriptor_;
  metadata.reflection = CMsgDOTARequestBatchPlayerResourcesResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAPlayerFailedToConnect::kFailedLoadersFieldNumber;
const int CMsgDOTAPlayerFailedToConnect::kAbandonedLoadersFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAPlayerFailedToConnect::CMsgDOTAPlayerFailedToConnect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgDOTAPlayerFailedToConnect::InitAsDefaultInstance() {
}

CMsgDOTAPlayerFailedToConnect::CMsgDOTAPlayerFailedToConnect(const CMsgDOTAPlayerFailedToConnect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgDOTAPlayerFailedToConnect::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAPlayerFailedToConnect::~CMsgDOTAPlayerFailedToConnect() {
  SharedDtor();
}

void CMsgDOTAPlayerFailedToConnect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAPlayerFailedToConnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAPlayerFailedToConnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAPlayerFailedToConnect_descriptor_;
}

const CMsgDOTAPlayerFailedToConnect& CMsgDOTAPlayerFailedToConnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgDOTAPlayerFailedToConnect* CMsgDOTAPlayerFailedToConnect::default_instance_ = NULL;

CMsgDOTAPlayerFailedToConnect* CMsgDOTAPlayerFailedToConnect::New() const {
  return new CMsgDOTAPlayerFailedToConnect;
}

void CMsgDOTAPlayerFailedToConnect::Clear() {
  failed_loaders_.Clear();
  abandoned_loaders_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAPlayerFailedToConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed64 failed_loaders = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_failed_loaders:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 9, input, this->mutable_failed_loaders())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_failed_loaders())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_failed_loaders;
        if (input->ExpectTag(17)) goto parse_abandoned_loaders;
        break;
      }
      
      // repeated fixed64 abandoned_loaders = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_abandoned_loaders:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17, input, this->mutable_abandoned_loaders())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_abandoned_loaders())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_abandoned_loaders;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgDOTAPlayerFailedToConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated fixed64 failed_loaders = 1;
  for (int i = 0; i < this->failed_loaders_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      1, this->failed_loaders(i), output);
  }
  
  // repeated fixed64 abandoned_loaders = 2;
  for (int i = 0; i < this->abandoned_loaders_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->abandoned_loaders(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgDOTAPlayerFailedToConnect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated fixed64 failed_loaders = 1;
  for (int i = 0; i < this->failed_loaders_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(1, this->failed_loaders(i), target);
  }
  
  // repeated fixed64 abandoned_loaders = 2;
  for (int i = 0; i < this->abandoned_loaders_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(2, this->abandoned_loaders(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgDOTAPlayerFailedToConnect::ByteSize() const {
  int total_size = 0;
  
  // repeated fixed64 failed_loaders = 1;
  {
    int data_size = 0;
    data_size = 8 * this->failed_loaders_size();
    total_size += 1 * this->failed_loaders_size() + data_size;
  }
  
  // repeated fixed64 abandoned_loaders = 2;
  {
    int data_size = 0;
    data_size = 8 * this->abandoned_loaders_size();
    total_size += 1 * this->abandoned_loaders_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAPlayerFailedToConnect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAPlayerFailedToConnect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAPlayerFailedToConnect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAPlayerFailedToConnect::MergeFrom(const CMsgDOTAPlayerFailedToConnect& from) {
  GOOGLE_CHECK_NE(&from, this);
  failed_loaders_.MergeFrom(from.failed_loaders_);
  abandoned_loaders_.MergeFrom(from.abandoned_loaders_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAPlayerFailedToConnect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAPlayerFailedToConnect::CopyFrom(const CMsgDOTAPlayerFailedToConnect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPlayerFailedToConnect::IsInitialized() const {
  
  return true;
}

void CMsgDOTAPlayerFailedToConnect::Swap(CMsgDOTAPlayerFailedToConnect* other) {
  if (other != this) {
    failed_loaders_.Swap(&other->failed_loaders_);
    abandoned_loaders_.Swap(&other->abandoned_loaders_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAPlayerFailedToConnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAPlayerFailedToConnect_descriptor_;
  metadata.reflection = CMsgDOTAPlayerFailedToConnect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCToRelayConnect::kSourceTvPublicAddrFieldNumber;
const int CMsgGCToRelayConnect::kSourceTvPrivateAddrFieldNumber;
const int CMsgGCToRelayConnect::kSourceTvPortFieldNumber;
const int CMsgGCToRelayConnect::kGameServerSteamIdFieldNumber;
const int CMsgGCToRelayConnect::kParentCountFieldNumber;
const int CMsgGCToRelayConnect::kTvUniqueSecretCodeFieldNumber;
#endif  // !_MSC_VER

CMsgGCToRelayConnect::CMsgGCToRelayConnect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCToRelayConnect::InitAsDefaultInstance() {
}

CMsgGCToRelayConnect::CMsgGCToRelayConnect(const CMsgGCToRelayConnect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCToRelayConnect::SharedCtor() {
  _cached_size_ = 0;
  source_tv_public_addr_ = 0u;
  source_tv_private_addr_ = 0u;
  source_tv_port_ = 0u;
  game_server_steam_id_ = GOOGLE_ULONGLONG(0);
  parent_count_ = 0u;
  tv_unique_secret_code_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToRelayConnect::~CMsgGCToRelayConnect() {
  SharedDtor();
}

void CMsgGCToRelayConnect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToRelayConnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToRelayConnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToRelayConnect_descriptor_;
}

const CMsgGCToRelayConnect& CMsgGCToRelayConnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgGCToRelayConnect* CMsgGCToRelayConnect::default_instance_ = NULL;

CMsgGCToRelayConnect* CMsgGCToRelayConnect::New() const {
  return new CMsgGCToRelayConnect;
}

void CMsgGCToRelayConnect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    source_tv_public_addr_ = 0u;
    source_tv_private_addr_ = 0u;
    source_tv_port_ = 0u;
    game_server_steam_id_ = GOOGLE_ULONGLONG(0);
    parent_count_ = 0u;
    tv_unique_secret_code_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCToRelayConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 source_tv_public_addr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_tv_public_addr_)));
          set_has_source_tv_public_addr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_source_tv_private_addr;
        break;
      }
      
      // optional uint32 source_tv_private_addr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_tv_private_addr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_tv_private_addr_)));
          set_has_source_tv_private_addr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_source_tv_port;
        break;
      }
      
      // optional uint32 source_tv_port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_tv_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_tv_port_)));
          set_has_source_tv_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_game_server_steam_id;
        break;
      }
      
      // optional uint64 game_server_steam_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_server_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &game_server_steam_id_)));
          set_has_game_server_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_parent_count;
        break;
      }
      
      // optional uint32 parent_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parent_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parent_count_)));
          set_has_parent_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_tv_unique_secret_code;
        break;
      }
      
      // optional fixed64 tv_unique_secret_code = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_tv_unique_secret_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &tv_unique_secret_code_)));
          set_has_tv_unique_secret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCToRelayConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 source_tv_public_addr = 1;
  if (has_source_tv_public_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->source_tv_public_addr(), output);
  }
  
  // optional uint32 source_tv_private_addr = 2;
  if (has_source_tv_private_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->source_tv_private_addr(), output);
  }
  
  // optional uint32 source_tv_port = 3;
  if (has_source_tv_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->source_tv_port(), output);
  }
  
  // optional uint64 game_server_steam_id = 4;
  if (has_game_server_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->game_server_steam_id(), output);
  }
  
  // optional uint32 parent_count = 5;
  if (has_parent_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->parent_count(), output);
  }
  
  // optional fixed64 tv_unique_secret_code = 6;
  if (has_tv_unique_secret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->tv_unique_secret_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCToRelayConnect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 source_tv_public_addr = 1;
  if (has_source_tv_public_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->source_tv_public_addr(), target);
  }
  
  // optional uint32 source_tv_private_addr = 2;
  if (has_source_tv_private_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->source_tv_private_addr(), target);
  }
  
  // optional uint32 source_tv_port = 3;
  if (has_source_tv_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->source_tv_port(), target);
  }
  
  // optional uint64 game_server_steam_id = 4;
  if (has_game_server_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->game_server_steam_id(), target);
  }
  
  // optional uint32 parent_count = 5;
  if (has_parent_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->parent_count(), target);
  }
  
  // optional fixed64 tv_unique_secret_code = 6;
  if (has_tv_unique_secret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->tv_unique_secret_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCToRelayConnect::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 source_tv_public_addr = 1;
    if (has_source_tv_public_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_tv_public_addr());
    }
    
    // optional uint32 source_tv_private_addr = 2;
    if (has_source_tv_private_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_tv_private_addr());
    }
    
    // optional uint32 source_tv_port = 3;
    if (has_source_tv_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_tv_port());
    }
    
    // optional uint64 game_server_steam_id = 4;
    if (has_game_server_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->game_server_steam_id());
    }
    
    // optional uint32 parent_count = 5;
    if (has_parent_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parent_count());
    }
    
    // optional fixed64 tv_unique_secret_code = 6;
    if (has_tv_unique_secret_code()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToRelayConnect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCToRelayConnect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCToRelayConnect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToRelayConnect::MergeFrom(const CMsgGCToRelayConnect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source_tv_public_addr()) {
      set_source_tv_public_addr(from.source_tv_public_addr());
    }
    if (from.has_source_tv_private_addr()) {
      set_source_tv_private_addr(from.source_tv_private_addr());
    }
    if (from.has_source_tv_port()) {
      set_source_tv_port(from.source_tv_port());
    }
    if (from.has_game_server_steam_id()) {
      set_game_server_steam_id(from.game_server_steam_id());
    }
    if (from.has_parent_count()) {
      set_parent_count(from.parent_count());
    }
    if (from.has_tv_unique_secret_code()) {
      set_tv_unique_secret_code(from.tv_unique_secret_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCToRelayConnect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToRelayConnect::CopyFrom(const CMsgGCToRelayConnect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToRelayConnect::IsInitialized() const {
  
  return true;
}

void CMsgGCToRelayConnect::Swap(CMsgGCToRelayConnect* other) {
  if (other != this) {
    std::swap(source_tv_public_addr_, other->source_tv_public_addr_);
    std::swap(source_tv_private_addr_, other->source_tv_private_addr_);
    std::swap(source_tv_port_, other->source_tv_port_);
    std::swap(game_server_steam_id_, other->game_server_steam_id_);
    std::swap(parent_count_, other->parent_count_);
    std::swap(tv_unique_secret_code_, other->tv_unique_secret_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCToRelayConnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToRelayConnect_descriptor_;
  metadata.reflection = CMsgGCToRelayConnect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgGCToRelayConnectResponse::CMsgGCToRelayConnectResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCToRelayConnectResponse::InitAsDefaultInstance() {
}

CMsgGCToRelayConnectResponse::CMsgGCToRelayConnectResponse(const CMsgGCToRelayConnectResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCToRelayConnectResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToRelayConnectResponse::~CMsgGCToRelayConnectResponse() {
  SharedDtor();
}

void CMsgGCToRelayConnectResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToRelayConnectResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToRelayConnectResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToRelayConnectResponse_descriptor_;
}

const CMsgGCToRelayConnectResponse& CMsgGCToRelayConnectResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgGCToRelayConnectResponse* CMsgGCToRelayConnectResponse::default_instance_ = NULL;

CMsgGCToRelayConnectResponse* CMsgGCToRelayConnectResponse::New() const {
  return new CMsgGCToRelayConnectResponse;
}

void CMsgGCToRelayConnectResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCToRelayConnectResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgGCToRelayConnectResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCToRelayConnectResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCToRelayConnectResponse::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToRelayConnectResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCToRelayConnectResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCToRelayConnectResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToRelayConnectResponse::MergeFrom(const CMsgGCToRelayConnectResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCToRelayConnectResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToRelayConnectResponse::CopyFrom(const CMsgGCToRelayConnectResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToRelayConnectResponse::IsInitialized() const {
  
  return true;
}

void CMsgGCToRelayConnectResponse::Swap(CMsgGCToRelayConnectResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCToRelayConnectResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToRelayConnectResponse_descriptor_;
  metadata.reflection = CMsgGCToRelayConnectResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCBanStatusRequest::kAccountIdFieldNumber;
#endif  // !_MSC_VER

CMsgGCBanStatusRequest::CMsgGCBanStatusRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCBanStatusRequest::InitAsDefaultInstance() {
}

CMsgGCBanStatusRequest::CMsgGCBanStatusRequest(const CMsgGCBanStatusRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCBanStatusRequest::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCBanStatusRequest::~CMsgGCBanStatusRequest() {
  SharedDtor();
}

void CMsgGCBanStatusRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCBanStatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCBanStatusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCBanStatusRequest_descriptor_;
}

const CMsgGCBanStatusRequest& CMsgGCBanStatusRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgGCBanStatusRequest* CMsgGCBanStatusRequest::default_instance_ = NULL;

CMsgGCBanStatusRequest* CMsgGCBanStatusRequest::New() const {
  return new CMsgGCBanStatusRequest;
}

void CMsgGCBanStatusRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCBanStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCBanStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCBanStatusRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCBanStatusRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCBanStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCBanStatusRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCBanStatusRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCBanStatusRequest::MergeFrom(const CMsgGCBanStatusRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCBanStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCBanStatusRequest::CopyFrom(const CMsgGCBanStatusRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCBanStatusRequest::IsInitialized() const {
  
  return true;
}

void CMsgGCBanStatusRequest::Swap(CMsgGCBanStatusRequest* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCBanStatusRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCBanStatusRequest_descriptor_;
  metadata.reflection = CMsgGCBanStatusRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCBanStatusResponse::kResultFieldNumber;
const int CMsgGCBanStatusResponse::kLowPriorityFieldNumber;
const int CMsgGCBanStatusResponse::kTextChatBannedFieldNumber;
const int CMsgGCBanStatusResponse::kVoiceChatBannedFieldNumber;
#endif  // !_MSC_VER

CMsgGCBanStatusResponse::CMsgGCBanStatusResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCBanStatusResponse::InitAsDefaultInstance() {
}

CMsgGCBanStatusResponse::CMsgGCBanStatusResponse(const CMsgGCBanStatusResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCBanStatusResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  low_priority_ = false;
  text_chat_banned_ = false;
  voice_chat_banned_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCBanStatusResponse::~CMsgGCBanStatusResponse() {
  SharedDtor();
}

void CMsgGCBanStatusResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCBanStatusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCBanStatusResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCBanStatusResponse_descriptor_;
}

const CMsgGCBanStatusResponse& CMsgGCBanStatusResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgGCBanStatusResponse* CMsgGCBanStatusResponse::default_instance_ = NULL;

CMsgGCBanStatusResponse* CMsgGCBanStatusResponse::New() const {
  return new CMsgGCBanStatusResponse;
}

void CMsgGCBanStatusResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    low_priority_ = false;
    text_chat_banned_ = false;
    voice_chat_banned_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCBanStatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_low_priority;
        break;
      }
      
      // optional bool low_priority = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_low_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_priority_)));
          set_has_low_priority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_text_chat_banned;
        break;
      }
      
      // optional bool text_chat_banned = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_text_chat_banned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &text_chat_banned_)));
          set_has_text_chat_banned();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_voice_chat_banned;
        break;
      }
      
      // optional bool voice_chat_banned = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_voice_chat_banned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &voice_chat_banned_)));
          set_has_voice_chat_banned();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCBanStatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }
  
  // optional bool low_priority = 2;
  if (has_low_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->low_priority(), output);
  }
  
  // optional bool text_chat_banned = 3;
  if (has_text_chat_banned()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->text_chat_banned(), output);
  }
  
  // optional bool voice_chat_banned = 4;
  if (has_voice_chat_banned()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->voice_chat_banned(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCBanStatusResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // optional bool low_priority = 2;
  if (has_low_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->low_priority(), target);
  }
  
  // optional bool text_chat_banned = 3;
  if (has_text_chat_banned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->text_chat_banned(), target);
  }
  
  // optional bool voice_chat_banned = 4;
  if (has_voice_chat_banned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->voice_chat_banned(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCBanStatusResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }
    
    // optional bool low_priority = 2;
    if (has_low_priority()) {
      total_size += 1 + 1;
    }
    
    // optional bool text_chat_banned = 3;
    if (has_text_chat_banned()) {
      total_size += 1 + 1;
    }
    
    // optional bool voice_chat_banned = 4;
    if (has_voice_chat_banned()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCBanStatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCBanStatusResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCBanStatusResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCBanStatusResponse::MergeFrom(const CMsgGCBanStatusResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_low_priority()) {
      set_low_priority(from.low_priority());
    }
    if (from.has_text_chat_banned()) {
      set_text_chat_banned(from.text_chat_banned());
    }
    if (from.has_voice_chat_banned()) {
      set_voice_chat_banned(from.voice_chat_banned());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCBanStatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCBanStatusResponse::CopyFrom(const CMsgGCBanStatusResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCBanStatusResponse::IsInitialized() const {
  
  return true;
}

void CMsgGCBanStatusResponse::Swap(CMsgGCBanStatusResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(low_priority_, other->low_priority_);
    std::swap(text_chat_banned_, other->text_chat_banned_);
    std::swap(voice_chat_banned_, other->voice_chat_banned_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCBanStatusResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCBanStatusResponse_descriptor_;
  metadata.reflection = CMsgGCBanStatusResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTournamentItemEvent::kKillerAccountIdFieldNumber;
const int CMsgTournamentItemEvent::kVictimAccountIdFieldNumber;
const int CMsgTournamentItemEvent::kEventTypeFieldNumber;
const int CMsgTournamentItemEvent::kTvDelayFieldNumber;
const int CMsgTournamentItemEvent::kDotaTimeFieldNumber;
const int CMsgTournamentItemEvent::kReplayTimeFieldNumber;
const int CMsgTournamentItemEvent::kLootListFieldNumber;
const int CMsgTournamentItemEvent::kEventTeamFieldNumber;
const int CMsgTournamentItemEvent::kMultiKillCountFieldNumber;
const int CMsgTournamentItemEvent::kWinnerScoreFieldNumber;
const int CMsgTournamentItemEvent::kLoserScoreFieldNumber;
#endif  // !_MSC_VER

CMsgTournamentItemEvent::CMsgTournamentItemEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTournamentItemEvent::InitAsDefaultInstance() {
}

CMsgTournamentItemEvent::CMsgTournamentItemEvent(const CMsgTournamentItemEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTournamentItemEvent::SharedCtor() {
  _cached_size_ = 0;
  killer_account_id_ = 0u;
  victim_account_id_ = 0u;
  event_type_ = 0;
  tv_delay_ = 0;
  dota_time_ = 0;
  replay_time_ = 0;
  loot_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  event_team_ = 0u;
  multi_kill_count_ = 0u;
  winner_score_ = 0u;
  loser_score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTournamentItemEvent::~CMsgTournamentItemEvent() {
  SharedDtor();
}

void CMsgTournamentItemEvent::SharedDtor() {
  if (loot_list_ != &::google::protobuf::internal::kEmptyString) {
    delete loot_list_;
  }
  if (this != default_instance_) {
  }
}

void CMsgTournamentItemEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTournamentItemEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTournamentItemEvent_descriptor_;
}

const CMsgTournamentItemEvent& CMsgTournamentItemEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgTournamentItemEvent* CMsgTournamentItemEvent::default_instance_ = NULL;

CMsgTournamentItemEvent* CMsgTournamentItemEvent::New() const {
  return new CMsgTournamentItemEvent;
}

void CMsgTournamentItemEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    killer_account_id_ = 0u;
    victim_account_id_ = 0u;
    event_type_ = 0;
    tv_delay_ = 0;
    dota_time_ = 0;
    replay_time_ = 0;
    if (has_loot_list()) {
      if (loot_list_ != &::google::protobuf::internal::kEmptyString) {
        loot_list_->clear();
      }
    }
    event_team_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    multi_kill_count_ = 0u;
    winner_score_ = 0u;
    loser_score_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTournamentItemEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 killer_account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &killer_account_id_)));
          set_has_killer_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_victim_account_id;
        break;
      }
      
      // optional fixed32 victim_account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_victim_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &victim_account_id_)));
          set_has_victim_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_event_type;
        break;
      }
      
      // optional .DOTA_TournamentEvents event_type = 3 [default = TE_FIRST_BLOOD];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (DOTA_TournamentEvents_IsValid(value)) {
            set_event_type(static_cast< DOTA_TournamentEvents >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tv_delay;
        break;
      }
      
      // optional int32 tv_delay = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tv_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tv_delay_)));
          set_has_tv_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dota_time;
        break;
      }
      
      // optional int32 dota_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dota_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dota_time_)));
          set_has_dota_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_replay_time;
        break;
      }
      
      // optional float replay_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_replay_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &replay_time_)));
          set_has_replay_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_loot_list;
        break;
      }
      
      // optional string loot_list = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loot_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loot_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->loot_list().data(), this->loot_list().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_event_team;
        break;
      }
      
      // optional uint32 event_team = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_team_)));
          set_has_event_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_multi_kill_count;
        break;
      }
      
      // optional uint32 multi_kill_count = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_multi_kill_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &multi_kill_count_)));
          set_has_multi_kill_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_winner_score;
        break;
      }
      
      // optional uint32 winner_score = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winner_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winner_score_)));
          set_has_winner_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_loser_score;
        break;
      }
      
      // optional uint32 loser_score = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loser_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loser_score_)));
          set_has_loser_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTournamentItemEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 killer_account_id = 1;
  if (has_killer_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->killer_account_id(), output);
  }
  
  // optional fixed32 victim_account_id = 2;
  if (has_victim_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->victim_account_id(), output);
  }
  
  // optional .DOTA_TournamentEvents event_type = 3 [default = TE_FIRST_BLOOD];
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->event_type(), output);
  }
  
  // optional int32 tv_delay = 4;
  if (has_tv_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tv_delay(), output);
  }
  
  // optional int32 dota_time = 5;
  if (has_dota_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dota_time(), output);
  }
  
  // optional float replay_time = 6;
  if (has_replay_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->replay_time(), output);
  }
  
  // optional string loot_list = 7;
  if (has_loot_list()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->loot_list().data(), this->loot_list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->loot_list(), output);
  }
  
  // optional uint32 event_team = 8;
  if (has_event_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->event_team(), output);
  }
  
  // optional uint32 multi_kill_count = 9;
  if (has_multi_kill_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->multi_kill_count(), output);
  }
  
  // optional uint32 winner_score = 10;
  if (has_winner_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->winner_score(), output);
  }
  
  // optional uint32 loser_score = 11;
  if (has_loser_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->loser_score(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTournamentItemEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 killer_account_id = 1;
  if (has_killer_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->killer_account_id(), target);
  }
  
  // optional fixed32 victim_account_id = 2;
  if (has_victim_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->victim_account_id(), target);
  }
  
  // optional .DOTA_TournamentEvents event_type = 3 [default = TE_FIRST_BLOOD];
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->event_type(), target);
  }
  
  // optional int32 tv_delay = 4;
  if (has_tv_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tv_delay(), target);
  }
  
  // optional int32 dota_time = 5;
  if (has_dota_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dota_time(), target);
  }
  
  // optional float replay_time = 6;
  if (has_replay_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->replay_time(), target);
  }
  
  // optional string loot_list = 7;
  if (has_loot_list()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->loot_list().data(), this->loot_list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->loot_list(), target);
  }
  
  // optional uint32 event_team = 8;
  if (has_event_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->event_team(), target);
  }
  
  // optional uint32 multi_kill_count = 9;
  if (has_multi_kill_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->multi_kill_count(), target);
  }
  
  // optional uint32 winner_score = 10;
  if (has_winner_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->winner_score(), target);
  }
  
  // optional uint32 loser_score = 11;
  if (has_loser_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->loser_score(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTournamentItemEvent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 killer_account_id = 1;
    if (has_killer_account_id()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 victim_account_id = 2;
    if (has_victim_account_id()) {
      total_size += 1 + 4;
    }
    
    // optional .DOTA_TournamentEvents event_type = 3 [default = TE_FIRST_BLOOD];
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_type());
    }
    
    // optional int32 tv_delay = 4;
    if (has_tv_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tv_delay());
    }
    
    // optional int32 dota_time = 5;
    if (has_dota_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dota_time());
    }
    
    // optional float replay_time = 6;
    if (has_replay_time()) {
      total_size += 1 + 4;
    }
    
    // optional string loot_list = 7;
    if (has_loot_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loot_list());
    }
    
    // optional uint32 event_team = 8;
    if (has_event_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_team());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 multi_kill_count = 9;
    if (has_multi_kill_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->multi_kill_count());
    }
    
    // optional uint32 winner_score = 10;
    if (has_winner_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winner_score());
    }
    
    // optional uint32 loser_score = 11;
    if (has_loser_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loser_score());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTournamentItemEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTournamentItemEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTournamentItemEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTournamentItemEvent::MergeFrom(const CMsgTournamentItemEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_killer_account_id()) {
      set_killer_account_id(from.killer_account_id());
    }
    if (from.has_victim_account_id()) {
      set_victim_account_id(from.victim_account_id());
    }
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
    if (from.has_tv_delay()) {
      set_tv_delay(from.tv_delay());
    }
    if (from.has_dota_time()) {
      set_dota_time(from.dota_time());
    }
    if (from.has_replay_time()) {
      set_replay_time(from.replay_time());
    }
    if (from.has_loot_list()) {
      set_loot_list(from.loot_list());
    }
    if (from.has_event_team()) {
      set_event_team(from.event_team());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_multi_kill_count()) {
      set_multi_kill_count(from.multi_kill_count());
    }
    if (from.has_winner_score()) {
      set_winner_score(from.winner_score());
    }
    if (from.has_loser_score()) {
      set_loser_score(from.loser_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTournamentItemEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTournamentItemEvent::CopyFrom(const CMsgTournamentItemEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTournamentItemEvent::IsInitialized() const {
  
  return true;
}

void CMsgTournamentItemEvent::Swap(CMsgTournamentItemEvent* other) {
  if (other != this) {
    std::swap(killer_account_id_, other->killer_account_id_);
    std::swap(victim_account_id_, other->victim_account_id_);
    std::swap(event_type_, other->event_type_);
    std::swap(tv_delay_, other->tv_delay_);
    std::swap(dota_time_, other->dota_time_);
    std::swap(replay_time_, other->replay_time_);
    std::swap(loot_list_, other->loot_list_);
    std::swap(event_team_, other->event_team_);
    std::swap(multi_kill_count_, other->multi_kill_count_);
    std::swap(winner_score_, other->winner_score_);
    std::swap(loser_score_, other->loser_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTournamentItemEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTournamentItemEvent_descriptor_;
  metadata.reflection = CMsgTournamentItemEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTournamentItemEventResponse::kEventTypeFieldNumber;
const int CMsgTournamentItemEventResponse::kWinnerNameFieldNumber;
const int CMsgTournamentItemEventResponse::kTvDelayedFieldNumber;
const int CMsgTournamentItemEventResponse::kInhallFieldNumber;
const int CMsgTournamentItemEventResponse::kItemdefFieldNumber;
#endif  // !_MSC_VER

CMsgTournamentItemEventResponse::CMsgTournamentItemEventResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTournamentItemEventResponse::InitAsDefaultInstance() {
}

CMsgTournamentItemEventResponse::CMsgTournamentItemEventResponse(const CMsgTournamentItemEventResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTournamentItemEventResponse::SharedCtor() {
  _cached_size_ = 0;
  event_type_ = 0;
  winner_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tv_delayed_ = false;
  inhall_ = false;
  itemdef_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTournamentItemEventResponse::~CMsgTournamentItemEventResponse() {
  SharedDtor();
}

void CMsgTournamentItemEventResponse::SharedDtor() {
  if (winner_name_ != &::google::protobuf::internal::kEmptyString) {
    delete winner_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgTournamentItemEventResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTournamentItemEventResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTournamentItemEventResponse_descriptor_;
}

const CMsgTournamentItemEventResponse& CMsgTournamentItemEventResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgTournamentItemEventResponse* CMsgTournamentItemEventResponse::default_instance_ = NULL;

CMsgTournamentItemEventResponse* CMsgTournamentItemEventResponse::New() const {
  return new CMsgTournamentItemEventResponse;
}

void CMsgTournamentItemEventResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_type_ = 0;
    if (has_winner_name()) {
      if (winner_name_ != &::google::protobuf::internal::kEmptyString) {
        winner_name_->clear();
      }
    }
    tv_delayed_ = false;
    inhall_ = false;
    itemdef_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTournamentItemEventResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DOTA_TournamentEvents event_type = 1 [default = TE_FIRST_BLOOD];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (DOTA_TournamentEvents_IsValid(value)) {
            set_event_type(static_cast< DOTA_TournamentEvents >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_winner_name;
        break;
      }
      
      // optional string winner_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_winner_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_winner_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->winner_name().data(), this->winner_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tv_delayed;
        break;
      }
      
      // optional bool tv_delayed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tv_delayed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tv_delayed_)));
          set_has_tv_delayed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_inhall;
        break;
      }
      
      // optional bool inhall = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inhall:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inhall_)));
          set_has_inhall();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_itemdef;
        break;
      }
      
      // optional uint32 itemdef = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemdef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemdef_)));
          set_has_itemdef();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTournamentItemEventResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .DOTA_TournamentEvents event_type = 1 [default = TE_FIRST_BLOOD];
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->event_type(), output);
  }
  
  // optional string winner_name = 2;
  if (has_winner_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->winner_name().data(), this->winner_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->winner_name(), output);
  }
  
  // optional bool tv_delayed = 3;
  if (has_tv_delayed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->tv_delayed(), output);
  }
  
  // optional bool inhall = 4;
  if (has_inhall()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->inhall(), output);
  }
  
  // optional uint32 itemdef = 5;
  if (has_itemdef()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->itemdef(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTournamentItemEventResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .DOTA_TournamentEvents event_type = 1 [default = TE_FIRST_BLOOD];
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->event_type(), target);
  }
  
  // optional string winner_name = 2;
  if (has_winner_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->winner_name().data(), this->winner_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->winner_name(), target);
  }
  
  // optional bool tv_delayed = 3;
  if (has_tv_delayed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->tv_delayed(), target);
  }
  
  // optional bool inhall = 4;
  if (has_inhall()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->inhall(), target);
  }
  
  // optional uint32 itemdef = 5;
  if (has_itemdef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->itemdef(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTournamentItemEventResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DOTA_TournamentEvents event_type = 1 [default = TE_FIRST_BLOOD];
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_type());
    }
    
    // optional string winner_name = 2;
    if (has_winner_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->winner_name());
    }
    
    // optional bool tv_delayed = 3;
    if (has_tv_delayed()) {
      total_size += 1 + 1;
    }
    
    // optional bool inhall = 4;
    if (has_inhall()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 itemdef = 5;
    if (has_itemdef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemdef());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTournamentItemEventResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTournamentItemEventResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTournamentItemEventResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTournamentItemEventResponse::MergeFrom(const CMsgTournamentItemEventResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
    if (from.has_winner_name()) {
      set_winner_name(from.winner_name());
    }
    if (from.has_tv_delayed()) {
      set_tv_delayed(from.tv_delayed());
    }
    if (from.has_inhall()) {
      set_inhall(from.inhall());
    }
    if (from.has_itemdef()) {
      set_itemdef(from.itemdef());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTournamentItemEventResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTournamentItemEventResponse::CopyFrom(const CMsgTournamentItemEventResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTournamentItemEventResponse::IsInitialized() const {
  
  return true;
}

void CMsgTournamentItemEventResponse::Swap(CMsgTournamentItemEventResponse* other) {
  if (other != this) {
    std::swap(event_type_, other->event_type_);
    std::swap(winner_name_, other->winner_name_);
    std::swap(tv_delayed_, other->tv_delayed_);
    std::swap(inhall_, other->inhall_);
    std::swap(itemdef_, other->itemdef_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTournamentItemEventResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTournamentItemEventResponse_descriptor_;
  metadata.reflection = CMsgTournamentItemEventResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTeamFanfare::kMatchIdFieldNumber;
#endif  // !_MSC_VER

CMsgTeamFanfare::CMsgTeamFanfare()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTeamFanfare::InitAsDefaultInstance() {
}

CMsgTeamFanfare::CMsgTeamFanfare(const CMsgTeamFanfare& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTeamFanfare::SharedCtor() {
  _cached_size_ = 0;
  match_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTeamFanfare::~CMsgTeamFanfare() {
  SharedDtor();
}

void CMsgTeamFanfare::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTeamFanfare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTeamFanfare::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTeamFanfare_descriptor_;
}

const CMsgTeamFanfare& CMsgTeamFanfare::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgTeamFanfare* CMsgTeamFanfare::default_instance_ = NULL;

CMsgTeamFanfare* CMsgTeamFanfare::New() const {
  return new CMsgTeamFanfare;
}

void CMsgTeamFanfare::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    match_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTeamFanfare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 match_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTeamFanfare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 match_id = 1;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->match_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTeamFanfare::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 match_id = 1;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->match_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTeamFanfare::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 match_id = 1;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTeamFanfare::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTeamFanfare* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTeamFanfare*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTeamFanfare::MergeFrom(const CMsgTeamFanfare& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTeamFanfare::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTeamFanfare::CopyFrom(const CMsgTeamFanfare& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTeamFanfare::IsInitialized() const {
  
  return true;
}

void CMsgTeamFanfare::Swap(CMsgTeamFanfare* other) {
  if (other != this) {
    std::swap(match_id_, other->match_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTeamFanfare::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTeamFanfare_descriptor_;
  metadata.reflection = CMsgTeamFanfare_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgResponseTeamFanfare::kFanfareGoodguysFieldNumber;
const int CMsgResponseTeamFanfare::kFanfareBadguysFieldNumber;
#endif  // !_MSC_VER

CMsgResponseTeamFanfare::CMsgResponseTeamFanfare()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgResponseTeamFanfare::InitAsDefaultInstance() {
}

CMsgResponseTeamFanfare::CMsgResponseTeamFanfare(const CMsgResponseTeamFanfare& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgResponseTeamFanfare::SharedCtor() {
  _cached_size_ = 0;
  fanfare_goodguys_ = 0u;
  fanfare_badguys_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgResponseTeamFanfare::~CMsgResponseTeamFanfare() {
  SharedDtor();
}

void CMsgResponseTeamFanfare::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgResponseTeamFanfare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgResponseTeamFanfare::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgResponseTeamFanfare_descriptor_;
}

const CMsgResponseTeamFanfare& CMsgResponseTeamFanfare::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgResponseTeamFanfare* CMsgResponseTeamFanfare::default_instance_ = NULL;

CMsgResponseTeamFanfare* CMsgResponseTeamFanfare::New() const {
  return new CMsgResponseTeamFanfare;
}

void CMsgResponseTeamFanfare::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fanfare_goodguys_ = 0u;
    fanfare_badguys_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgResponseTeamFanfare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fanfare_goodguys = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fanfare_goodguys_)));
          set_has_fanfare_goodguys();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fanfare_badguys;
        break;
      }
      
      // optional uint32 fanfare_badguys = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fanfare_badguys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fanfare_badguys_)));
          set_has_fanfare_badguys();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgResponseTeamFanfare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 fanfare_goodguys = 1;
  if (has_fanfare_goodguys()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fanfare_goodguys(), output);
  }
  
  // optional uint32 fanfare_badguys = 2;
  if (has_fanfare_badguys()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fanfare_badguys(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgResponseTeamFanfare::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 fanfare_goodguys = 1;
  if (has_fanfare_goodguys()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fanfare_goodguys(), target);
  }
  
  // optional uint32 fanfare_badguys = 2;
  if (has_fanfare_badguys()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fanfare_badguys(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgResponseTeamFanfare::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 fanfare_goodguys = 1;
    if (has_fanfare_goodguys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fanfare_goodguys());
    }
    
    // optional uint32 fanfare_badguys = 2;
    if (has_fanfare_badguys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fanfare_badguys());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgResponseTeamFanfare::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgResponseTeamFanfare* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgResponseTeamFanfare*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgResponseTeamFanfare::MergeFrom(const CMsgResponseTeamFanfare& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fanfare_goodguys()) {
      set_fanfare_goodguys(from.fanfare_goodguys());
    }
    if (from.has_fanfare_badguys()) {
      set_fanfare_badguys(from.fanfare_badguys());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgResponseTeamFanfare::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgResponseTeamFanfare::CopyFrom(const CMsgResponseTeamFanfare& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgResponseTeamFanfare::IsInitialized() const {
  
  return true;
}

void CMsgResponseTeamFanfare::Swap(CMsgResponseTeamFanfare* other) {
  if (other != this) {
    std::swap(fanfare_goodguys_, other->fanfare_goodguys_);
    std::swap(fanfare_badguys_, other->fanfare_badguys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgResponseTeamFanfare::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgResponseTeamFanfare_descriptor_;
  metadata.reflection = CMsgResponseTeamFanfare_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGameServerUploadSaveGame::kGameTimeFieldNumber;
const int CMsgGameServerUploadSaveGame::kSaveGameDataFieldNumber;
const int CMsgGameServerUploadSaveGame::kLobbyIdFieldNumber;
const int CMsgGameServerUploadSaveGame::kPlayerSteamIdsFieldNumber;
#endif  // !_MSC_VER

CMsgGameServerUploadSaveGame::CMsgGameServerUploadSaveGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGameServerUploadSaveGame::InitAsDefaultInstance() {
}

CMsgGameServerUploadSaveGame::CMsgGameServerUploadSaveGame(const CMsgGameServerUploadSaveGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGameServerUploadSaveGame::SharedCtor() {
  _cached_size_ = 0;
  game_time_ = 0u;
  save_game_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lobby_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGameServerUploadSaveGame::~CMsgGameServerUploadSaveGame() {
  SharedDtor();
}

void CMsgGameServerUploadSaveGame::SharedDtor() {
  if (save_game_data_ != &::google::protobuf::internal::kEmptyString) {
    delete save_game_data_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGameServerUploadSaveGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameServerUploadSaveGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGameServerUploadSaveGame_descriptor_;
}

const CMsgGameServerUploadSaveGame& CMsgGameServerUploadSaveGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgGameServerUploadSaveGame* CMsgGameServerUploadSaveGame::default_instance_ = NULL;

CMsgGameServerUploadSaveGame* CMsgGameServerUploadSaveGame::New() const {
  return new CMsgGameServerUploadSaveGame;
}

void CMsgGameServerUploadSaveGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_time_ = 0u;
    if (has_save_game_data()) {
      if (save_game_data_ != &::google::protobuf::internal::kEmptyString) {
        save_game_data_->clear();
      }
    }
    lobby_id_ = GOOGLE_ULONGLONG(0);
  }
  player_steam_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGameServerUploadSaveGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 game_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_time_)));
          set_has_game_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_save_game_data;
        break;
      }
      
      // optional bytes save_game_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_save_game_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_save_game_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lobby_id;
        break;
      }
      
      // optional uint64 lobby_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lobby_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lobby_id_)));
          set_has_lobby_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_player_steam_ids;
        break;
      }
      
      // repeated uint64 player_steam_ids = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_steam_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_player_steam_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_player_steam_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_player_steam_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGameServerUploadSaveGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 game_time = 1;
  if (has_game_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_time(), output);
  }
  
  // optional bytes save_game_data = 2;
  if (has_save_game_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->save_game_data(), output);
  }
  
  // optional uint64 lobby_id = 3;
  if (has_lobby_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->lobby_id(), output);
  }
  
  // repeated uint64 player_steam_ids = 4;
  for (int i = 0; i < this->player_steam_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->player_steam_ids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGameServerUploadSaveGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 game_time = 1;
  if (has_game_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_time(), target);
  }
  
  // optional bytes save_game_data = 2;
  if (has_save_game_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->save_game_data(), target);
  }
  
  // optional uint64 lobby_id = 3;
  if (has_lobby_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->lobby_id(), target);
  }
  
  // repeated uint64 player_steam_ids = 4;
  for (int i = 0; i < this->player_steam_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->player_steam_ids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGameServerUploadSaveGame::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 game_time = 1;
    if (has_game_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_time());
    }
    
    // optional bytes save_game_data = 2;
    if (has_save_game_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->save_game_data());
    }
    
    // optional uint64 lobby_id = 3;
    if (has_lobby_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lobby_id());
    }
    
  }
  // repeated uint64 player_steam_ids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->player_steam_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->player_steam_ids(i));
    }
    total_size += 1 * this->player_steam_ids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameServerUploadSaveGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGameServerUploadSaveGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGameServerUploadSaveGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGameServerUploadSaveGame::MergeFrom(const CMsgGameServerUploadSaveGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_steam_ids_.MergeFrom(from.player_steam_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_time()) {
      set_game_time(from.game_time());
    }
    if (from.has_save_game_data()) {
      set_save_game_data(from.save_game_data());
    }
    if (from.has_lobby_id()) {
      set_lobby_id(from.lobby_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGameServerUploadSaveGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameServerUploadSaveGame::CopyFrom(const CMsgGameServerUploadSaveGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerUploadSaveGame::IsInitialized() const {
  
  return true;
}

void CMsgGameServerUploadSaveGame::Swap(CMsgGameServerUploadSaveGame* other) {
  if (other != this) {
    std::swap(game_time_, other->game_time_);
    std::swap(save_game_data_, other->save_game_data_);
    std::swap(lobby_id_, other->lobby_id_);
    player_steam_ids_.Swap(&other->player_steam_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGameServerUploadSaveGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGameServerUploadSaveGame_descriptor_;
  metadata.reflection = CMsgGameServerUploadSaveGame_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgGameServerSaveGameResult_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGameServerSaveGameResult_Result_descriptor_;
}
bool CMsgGameServerSaveGameResult_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgGameServerSaveGameResult_Result CMsgGameServerSaveGameResult::SaveSuccessful;
const CMsgGameServerSaveGameResult_Result CMsgGameServerSaveGameResult::SessionNotFound;
const CMsgGameServerSaveGameResult_Result CMsgGameServerSaveGameResult::DatabaseError;
const CMsgGameServerSaveGameResult_Result CMsgGameServerSaveGameResult::TooBig;
const CMsgGameServerSaveGameResult_Result CMsgGameServerSaveGameResult::Result_MIN;
const CMsgGameServerSaveGameResult_Result CMsgGameServerSaveGameResult::Result_MAX;
const int CMsgGameServerSaveGameResult::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgGameServerSaveGameResult::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgGameServerSaveGameResult::CMsgGameServerSaveGameResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGameServerSaveGameResult::InitAsDefaultInstance() {
}

CMsgGameServerSaveGameResult::CMsgGameServerSaveGameResult(const CMsgGameServerSaveGameResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGameServerSaveGameResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGameServerSaveGameResult::~CMsgGameServerSaveGameResult() {
  SharedDtor();
}

void CMsgGameServerSaveGameResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGameServerSaveGameResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameServerSaveGameResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGameServerSaveGameResult_descriptor_;
}

const CMsgGameServerSaveGameResult& CMsgGameServerSaveGameResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgGameServerSaveGameResult* CMsgGameServerSaveGameResult::default_instance_ = NULL;

CMsgGameServerSaveGameResult* CMsgGameServerSaveGameResult::New() const {
  return new CMsgGameServerSaveGameResult;
}

void CMsgGameServerSaveGameResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGameServerSaveGameResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgGameServerSaveGameResult.Result result = 1 [default = SaveSuccessful];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgGameServerSaveGameResult_Result_IsValid(value)) {
            set_result(static_cast< ::CMsgGameServerSaveGameResult_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGameServerSaveGameResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CMsgGameServerSaveGameResult.Result result = 1 [default = SaveSuccessful];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGameServerSaveGameResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMsgGameServerSaveGameResult.Result result = 1 [default = SaveSuccessful];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGameServerSaveGameResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgGameServerSaveGameResult.Result result = 1 [default = SaveSuccessful];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameServerSaveGameResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGameServerSaveGameResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGameServerSaveGameResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGameServerSaveGameResult::MergeFrom(const CMsgGameServerSaveGameResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGameServerSaveGameResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameServerSaveGameResult::CopyFrom(const CMsgGameServerSaveGameResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerSaveGameResult::IsInitialized() const {
  
  return true;
}

void CMsgGameServerSaveGameResult::Swap(CMsgGameServerSaveGameResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGameServerSaveGameResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGameServerSaveGameResult_descriptor_;
  metadata.reflection = CMsgGameServerSaveGameResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGameServerGetLoadGame::kSaveIdFieldNumber;
#endif  // !_MSC_VER

CMsgGameServerGetLoadGame::CMsgGameServerGetLoadGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGameServerGetLoadGame::InitAsDefaultInstance() {
}

CMsgGameServerGetLoadGame::CMsgGameServerGetLoadGame(const CMsgGameServerGetLoadGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGameServerGetLoadGame::SharedCtor() {
  _cached_size_ = 0;
  save_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGameServerGetLoadGame::~CMsgGameServerGetLoadGame() {
  SharedDtor();
}

void CMsgGameServerGetLoadGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGameServerGetLoadGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameServerGetLoadGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGameServerGetLoadGame_descriptor_;
}

const CMsgGameServerGetLoadGame& CMsgGameServerGetLoadGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgGameServerGetLoadGame* CMsgGameServerGetLoadGame::default_instance_ = NULL;

CMsgGameServerGetLoadGame* CMsgGameServerGetLoadGame::New() const {
  return new CMsgGameServerGetLoadGame;
}

void CMsgGameServerGetLoadGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    save_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGameServerGetLoadGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 save_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &save_id_)));
          set_has_save_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGameServerGetLoadGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 save_id = 1;
  if (has_save_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->save_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGameServerGetLoadGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 save_id = 1;
  if (has_save_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->save_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGameServerGetLoadGame::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 save_id = 1;
    if (has_save_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->save_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameServerGetLoadGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGameServerGetLoadGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGameServerGetLoadGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGameServerGetLoadGame::MergeFrom(const CMsgGameServerGetLoadGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_save_id()) {
      set_save_id(from.save_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGameServerGetLoadGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameServerGetLoadGame::CopyFrom(const CMsgGameServerGetLoadGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerGetLoadGame::IsInitialized() const {
  
  return true;
}

void CMsgGameServerGetLoadGame::Swap(CMsgGameServerGetLoadGame* other) {
  if (other != this) {
    std::swap(save_id_, other->save_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGameServerGetLoadGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGameServerGetLoadGame_descriptor_;
  metadata.reflection = CMsgGameServerGetLoadGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGameServerGetLoadGameResult::kSaveGameDataFieldNumber;
#endif  // !_MSC_VER

CMsgGameServerGetLoadGameResult::CMsgGameServerGetLoadGameResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGameServerGetLoadGameResult::InitAsDefaultInstance() {
}

CMsgGameServerGetLoadGameResult::CMsgGameServerGetLoadGameResult(const CMsgGameServerGetLoadGameResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGameServerGetLoadGameResult::SharedCtor() {
  _cached_size_ = 0;
  save_game_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGameServerGetLoadGameResult::~CMsgGameServerGetLoadGameResult() {
  SharedDtor();
}

void CMsgGameServerGetLoadGameResult::SharedDtor() {
  if (save_game_data_ != &::google::protobuf::internal::kEmptyString) {
    delete save_game_data_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGameServerGetLoadGameResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGameServerGetLoadGameResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGameServerGetLoadGameResult_descriptor_;
}

const CMsgGameServerGetLoadGameResult& CMsgGameServerGetLoadGameResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgGameServerGetLoadGameResult* CMsgGameServerGetLoadGameResult::default_instance_ = NULL;

CMsgGameServerGetLoadGameResult* CMsgGameServerGetLoadGameResult::New() const {
  return new CMsgGameServerGetLoadGameResult;
}

void CMsgGameServerGetLoadGameResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_save_game_data()) {
      if (save_game_data_ != &::google::protobuf::internal::kEmptyString) {
        save_game_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGameServerGetLoadGameResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes save_game_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_save_game_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGameServerGetLoadGameResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes save_game_data = 1;
  if (has_save_game_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->save_game_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGameServerGetLoadGameResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes save_game_data = 1;
  if (has_save_game_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->save_game_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGameServerGetLoadGameResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes save_game_data = 1;
    if (has_save_game_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->save_game_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameServerGetLoadGameResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGameServerGetLoadGameResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGameServerGetLoadGameResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGameServerGetLoadGameResult::MergeFrom(const CMsgGameServerGetLoadGameResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_save_game_data()) {
      set_save_game_data(from.save_game_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGameServerGetLoadGameResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameServerGetLoadGameResult::CopyFrom(const CMsgGameServerGetLoadGameResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerGetLoadGameResult::IsInitialized() const {
  
  return true;
}

void CMsgGameServerGetLoadGameResult::Swap(CMsgGameServerGetLoadGameResult* other) {
  if (other != this) {
    std::swap(save_game_data_, other->save_game_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGameServerGetLoadGameResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGameServerGetLoadGameResult_descriptor_;
  metadata.reflection = CMsgGameServerGetLoadGameResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAGenerateDiretidePrizeList::kPrizeListFieldNumber;
const int CMsgDOTAGenerateDiretidePrizeList::kHighestRoshanLevelFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAGenerateDiretidePrizeList::CMsgDOTAGenerateDiretidePrizeList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgDOTAGenerateDiretidePrizeList::InitAsDefaultInstance() {
}

CMsgDOTAGenerateDiretidePrizeList::CMsgDOTAGenerateDiretidePrizeList(const CMsgDOTAGenerateDiretidePrizeList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgDOTAGenerateDiretidePrizeList::SharedCtor() {
  _cached_size_ = 0;
  prize_list_ = 0u;
  highest_roshan_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAGenerateDiretidePrizeList::~CMsgDOTAGenerateDiretidePrizeList() {
  SharedDtor();
}

void CMsgDOTAGenerateDiretidePrizeList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAGenerateDiretidePrizeList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGenerateDiretidePrizeList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAGenerateDiretidePrizeList_descriptor_;
}

const CMsgDOTAGenerateDiretidePrizeList& CMsgDOTAGenerateDiretidePrizeList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgDOTAGenerateDiretidePrizeList* CMsgDOTAGenerateDiretidePrizeList::default_instance_ = NULL;

CMsgDOTAGenerateDiretidePrizeList* CMsgDOTAGenerateDiretidePrizeList::New() const {
  return new CMsgDOTAGenerateDiretidePrizeList;
}

void CMsgDOTAGenerateDiretidePrizeList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    prize_list_ = 0u;
    highest_roshan_level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAGenerateDiretidePrizeList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 prize_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prize_list_)));
          set_has_prize_list();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_highest_roshan_level;
        break;
      }
      
      // optional uint32 highest_roshan_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_highest_roshan_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &highest_roshan_level_)));
          set_has_highest_roshan_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgDOTAGenerateDiretidePrizeList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 prize_list = 1;
  if (has_prize_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->prize_list(), output);
  }
  
  // optional uint32 highest_roshan_level = 2;
  if (has_highest_roshan_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->highest_roshan_level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgDOTAGenerateDiretidePrizeList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 prize_list = 1;
  if (has_prize_list()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->prize_list(), target);
  }
  
  // optional uint32 highest_roshan_level = 2;
  if (has_highest_roshan_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->highest_roshan_level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgDOTAGenerateDiretidePrizeList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 prize_list = 1;
    if (has_prize_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prize_list());
    }
    
    // optional uint32 highest_roshan_level = 2;
    if (has_highest_roshan_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->highest_roshan_level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGenerateDiretidePrizeList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAGenerateDiretidePrizeList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAGenerateDiretidePrizeList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAGenerateDiretidePrizeList::MergeFrom(const CMsgDOTAGenerateDiretidePrizeList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prize_list()) {
      set_prize_list(from.prize_list());
    }
    if (from.has_highest_roshan_level()) {
      set_highest_roshan_level(from.highest_roshan_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAGenerateDiretidePrizeList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGenerateDiretidePrizeList::CopyFrom(const CMsgDOTAGenerateDiretidePrizeList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGenerateDiretidePrizeList::IsInitialized() const {
  
  return true;
}

void CMsgDOTAGenerateDiretidePrizeList::Swap(CMsgDOTAGenerateDiretidePrizeList* other) {
  if (other != this) {
    std::swap(prize_list_, other->prize_list_);
    std::swap(highest_roshan_level_, other->highest_roshan_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAGenerateDiretidePrizeList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAGenerateDiretidePrizeList_descriptor_;
  metadata.reflection = CMsgDOTAGenerateDiretidePrizeList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAGenerateDiretidePrizeListResponse::kItemDefsFieldNumber;
const int CMsgDOTAGenerateDiretidePrizeListResponse::kSteamIdsFieldNumber;
const int CMsgDOTAGenerateDiretidePrizeListResponse::kPrizeListFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAGenerateDiretidePrizeListResponse::CMsgDOTAGenerateDiretidePrizeListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgDOTAGenerateDiretidePrizeListResponse::InitAsDefaultInstance() {
}

CMsgDOTAGenerateDiretidePrizeListResponse::CMsgDOTAGenerateDiretidePrizeListResponse(const CMsgDOTAGenerateDiretidePrizeListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgDOTAGenerateDiretidePrizeListResponse::SharedCtor() {
  _cached_size_ = 0;
  prize_list_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAGenerateDiretidePrizeListResponse::~CMsgDOTAGenerateDiretidePrizeListResponse() {
  SharedDtor();
}

void CMsgDOTAGenerateDiretidePrizeListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAGenerateDiretidePrizeListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGenerateDiretidePrizeListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAGenerateDiretidePrizeListResponse_descriptor_;
}

const CMsgDOTAGenerateDiretidePrizeListResponse& CMsgDOTAGenerateDiretidePrizeListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgDOTAGenerateDiretidePrizeListResponse* CMsgDOTAGenerateDiretidePrizeListResponse::default_instance_ = NULL;

CMsgDOTAGenerateDiretidePrizeListResponse* CMsgDOTAGenerateDiretidePrizeListResponse::New() const {
  return new CMsgDOTAGenerateDiretidePrizeListResponse;
}

void CMsgDOTAGenerateDiretidePrizeListResponse::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    prize_list_ = 0u;
  }
  item_defs_.Clear();
  steam_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAGenerateDiretidePrizeListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 item_defs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_defs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_item_defs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_item_defs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_item_defs;
        if (input->ExpectTag(17)) goto parse_steam_ids;
        break;
      }
      
      // repeated fixed64 steam_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17, input, this->mutable_steam_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_steam_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_steam_ids;
        if (input->ExpectTag(24)) goto parse_prize_list;
        break;
      }
      
      // optional uint32 prize_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prize_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prize_list_)));
          set_has_prize_list();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgDOTAGenerateDiretidePrizeListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 item_defs = 1;
  for (int i = 0; i < this->item_defs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->item_defs(i), output);
  }
  
  // repeated fixed64 steam_ids = 2;
  for (int i = 0; i < this->steam_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->steam_ids(i), output);
  }
  
  // optional uint32 prize_list = 3;
  if (has_prize_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->prize_list(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgDOTAGenerateDiretidePrizeListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 item_defs = 1;
  for (int i = 0; i < this->item_defs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->item_defs(i), target);
  }
  
  // repeated fixed64 steam_ids = 2;
  for (int i = 0; i < this->steam_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(2, this->steam_ids(i), target);
  }
  
  // optional uint32 prize_list = 3;
  if (has_prize_list()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->prize_list(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgDOTAGenerateDiretidePrizeListResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 prize_list = 3;
    if (has_prize_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prize_list());
    }
    
  }
  // repeated uint32 item_defs = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_defs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->item_defs(i));
    }
    total_size += 1 * this->item_defs_size() + data_size;
  }
  
  // repeated fixed64 steam_ids = 2;
  {
    int data_size = 0;
    data_size = 8 * this->steam_ids_size();
    total_size += 1 * this->steam_ids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGenerateDiretidePrizeListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAGenerateDiretidePrizeListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAGenerateDiretidePrizeListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAGenerateDiretidePrizeListResponse::MergeFrom(const CMsgDOTAGenerateDiretidePrizeListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_defs_.MergeFrom(from.item_defs_);
  steam_ids_.MergeFrom(from.steam_ids_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_prize_list()) {
      set_prize_list(from.prize_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAGenerateDiretidePrizeListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGenerateDiretidePrizeListResponse::CopyFrom(const CMsgDOTAGenerateDiretidePrizeListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGenerateDiretidePrizeListResponse::IsInitialized() const {
  
  return true;
}

void CMsgDOTAGenerateDiretidePrizeListResponse::Swap(CMsgDOTAGenerateDiretidePrizeListResponse* other) {
  if (other != this) {
    item_defs_.Swap(&other->item_defs_);
    steam_ids_.Swap(&other->steam_ids_);
    std::swap(prize_list_, other->prize_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAGenerateDiretidePrizeListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAGenerateDiretidePrizeListResponse_descriptor_;
  metadata.reflection = CMsgDOTAGenerateDiretidePrizeListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTARewardDiretidePrizes::kTeamFieldNumber;
const int CMsgDOTARewardDiretidePrizes::kPrizeListFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARewardDiretidePrizes::CMsgDOTARewardDiretidePrizes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgDOTARewardDiretidePrizes::InitAsDefaultInstance() {
}

CMsgDOTARewardDiretidePrizes::CMsgDOTARewardDiretidePrizes(const CMsgDOTARewardDiretidePrizes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgDOTARewardDiretidePrizes::SharedCtor() {
  _cached_size_ = 0;
  team_ = 0u;
  prize_list_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARewardDiretidePrizes::~CMsgDOTARewardDiretidePrizes() {
  SharedDtor();
}

void CMsgDOTARewardDiretidePrizes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTARewardDiretidePrizes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARewardDiretidePrizes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARewardDiretidePrizes_descriptor_;
}

const CMsgDOTARewardDiretidePrizes& CMsgDOTARewardDiretidePrizes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgDOTARewardDiretidePrizes* CMsgDOTARewardDiretidePrizes::default_instance_ = NULL;

CMsgDOTARewardDiretidePrizes* CMsgDOTARewardDiretidePrizes::New() const {
  return new CMsgDOTARewardDiretidePrizes;
}

void CMsgDOTARewardDiretidePrizes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    team_ = 0u;
    prize_list_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTARewardDiretidePrizes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_prize_list;
        break;
      }
      
      // optional uint32 prize_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prize_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prize_list_)));
          set_has_prize_list();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgDOTARewardDiretidePrizes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 team = 1;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team(), output);
  }
  
  // optional uint32 prize_list = 2;
  if (has_prize_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->prize_list(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgDOTARewardDiretidePrizes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 team = 1;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team(), target);
  }
  
  // optional uint32 prize_list = 2;
  if (has_prize_list()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->prize_list(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgDOTARewardDiretidePrizes::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 team = 1;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }
    
    // optional uint32 prize_list = 2;
    if (has_prize_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prize_list());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARewardDiretidePrizes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTARewardDiretidePrizes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTARewardDiretidePrizes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARewardDiretidePrizes::MergeFrom(const CMsgDOTARewardDiretidePrizes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_prize_list()) {
      set_prize_list(from.prize_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTARewardDiretidePrizes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARewardDiretidePrizes::CopyFrom(const CMsgDOTARewardDiretidePrizes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARewardDiretidePrizes::IsInitialized() const {
  
  return true;
}

void CMsgDOTARewardDiretidePrizes::Swap(CMsgDOTARewardDiretidePrizes* other) {
  if (other != this) {
    std::swap(team_, other->team_);
    std::swap(prize_list_, other->prize_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTARewardDiretidePrizes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARewardDiretidePrizes_descriptor_;
  metadata.reflection = CMsgDOTARewardDiretidePrizes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTADiretidePrizesRewardedResponse::kPrizeListFieldNumber;
#endif  // !_MSC_VER

CMsgDOTADiretidePrizesRewardedResponse::CMsgDOTADiretidePrizesRewardedResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgDOTADiretidePrizesRewardedResponse::InitAsDefaultInstance() {
}

CMsgDOTADiretidePrizesRewardedResponse::CMsgDOTADiretidePrizesRewardedResponse(const CMsgDOTADiretidePrizesRewardedResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgDOTADiretidePrizesRewardedResponse::SharedCtor() {
  _cached_size_ = 0;
  prize_list_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTADiretidePrizesRewardedResponse::~CMsgDOTADiretidePrizesRewardedResponse() {
  SharedDtor();
}

void CMsgDOTADiretidePrizesRewardedResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTADiretidePrizesRewardedResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTADiretidePrizesRewardedResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTADiretidePrizesRewardedResponse_descriptor_;
}

const CMsgDOTADiretidePrizesRewardedResponse& CMsgDOTADiretidePrizesRewardedResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgDOTADiretidePrizesRewardedResponse* CMsgDOTADiretidePrizesRewardedResponse::default_instance_ = NULL;

CMsgDOTADiretidePrizesRewardedResponse* CMsgDOTADiretidePrizesRewardedResponse::New() const {
  return new CMsgDOTADiretidePrizesRewardedResponse;
}

void CMsgDOTADiretidePrizesRewardedResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    prize_list_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTADiretidePrizesRewardedResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 prize_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prize_list_)));
          set_has_prize_list();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgDOTADiretidePrizesRewardedResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 prize_list = 1;
  if (has_prize_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->prize_list(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgDOTADiretidePrizesRewardedResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 prize_list = 1;
  if (has_prize_list()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->prize_list(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgDOTADiretidePrizesRewardedResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 prize_list = 1;
    if (has_prize_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prize_list());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTADiretidePrizesRewardedResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTADiretidePrizesRewardedResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTADiretidePrizesRewardedResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTADiretidePrizesRewardedResponse::MergeFrom(const CMsgDOTADiretidePrizesRewardedResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prize_list()) {
      set_prize_list(from.prize_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTADiretidePrizesRewardedResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTADiretidePrizesRewardedResponse::CopyFrom(const CMsgDOTADiretidePrizesRewardedResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTADiretidePrizesRewardedResponse::IsInitialized() const {
  
  return true;
}

void CMsgDOTADiretidePrizesRewardedResponse::Swap(CMsgDOTADiretidePrizesRewardedResponse* other) {
  if (other != this) {
    std::swap(prize_list_, other->prize_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTADiretidePrizesRewardedResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTADiretidePrizesRewardedResponse_descriptor_;
  metadata.reflection = CMsgDOTADiretidePrizesRewardedResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAAwardEventPoints_AwardPoints::kAccountIdFieldNumber;
const int CMsgDOTAAwardEventPoints_AwardPoints::kPointsFieldNumber;
const int CMsgDOTAAwardEventPoints_AwardPoints::kPremiumPointsFieldNumber;
const int CMsgDOTAAwardEventPoints_AwardPoints::kRankFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAAwardEventPoints_AwardPoints::CMsgDOTAAwardEventPoints_AwardPoints()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgDOTAAwardEventPoints_AwardPoints::InitAsDefaultInstance() {
}

CMsgDOTAAwardEventPoints_AwardPoints::CMsgDOTAAwardEventPoints_AwardPoints(const CMsgDOTAAwardEventPoints_AwardPoints& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgDOTAAwardEventPoints_AwardPoints::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  points_ = 0;
  premium_points_ = 0;
  rank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAAwardEventPoints_AwardPoints::~CMsgDOTAAwardEventPoints_AwardPoints() {
  SharedDtor();
}

void CMsgDOTAAwardEventPoints_AwardPoints::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAAwardEventPoints_AwardPoints::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAAwardEventPoints_AwardPoints::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAAwardEventPoints_AwardPoints_descriptor_;
}

const CMsgDOTAAwardEventPoints_AwardPoints& CMsgDOTAAwardEventPoints_AwardPoints::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgDOTAAwardEventPoints_AwardPoints* CMsgDOTAAwardEventPoints_AwardPoints::default_instance_ = NULL;

CMsgDOTAAwardEventPoints_AwardPoints* CMsgDOTAAwardEventPoints_AwardPoints::New() const {
  return new CMsgDOTAAwardEventPoints_AwardPoints;
}

void CMsgDOTAAwardEventPoints_AwardPoints::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    points_ = 0;
    premium_points_ = 0;
    rank_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAAwardEventPoints_AwardPoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_points;
        break;
      }
      
      // optional int32 points = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &points_)));
          set_has_points();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_premium_points;
        break;
      }
      
      // optional int32 premium_points = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_premium_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &premium_points_)));
          set_has_premium_points();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rank;
        break;
      }
      
      // optional int32 rank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgDOTAAwardEventPoints_AwardPoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }
  
  // optional int32 points = 2;
  if (has_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->points(), output);
  }
  
  // optional int32 premium_points = 3;
  if (has_premium_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->premium_points(), output);
  }
  
  // optional int32 rank = 4;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rank(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgDOTAAwardEventPoints_AwardPoints::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }
  
  // optional int32 points = 2;
  if (has_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->points(), target);
  }
  
  // optional int32 premium_points = 3;
  if (has_premium_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->premium_points(), target);
  }
  
  // optional int32 rank = 4;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rank(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgDOTAAwardEventPoints_AwardPoints::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
    // optional int32 points = 2;
    if (has_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->points());
    }
    
    // optional int32 premium_points = 3;
    if (has_premium_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->premium_points());
    }
    
    // optional int32 rank = 4;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAAwardEventPoints_AwardPoints::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAAwardEventPoints_AwardPoints* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAAwardEventPoints_AwardPoints*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAAwardEventPoints_AwardPoints::MergeFrom(const CMsgDOTAAwardEventPoints_AwardPoints& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_points()) {
      set_points(from.points());
    }
    if (from.has_premium_points()) {
      set_premium_points(from.premium_points());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAAwardEventPoints_AwardPoints::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAAwardEventPoints_AwardPoints::CopyFrom(const CMsgDOTAAwardEventPoints_AwardPoints& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAAwardEventPoints_AwardPoints::IsInitialized() const {
  
  return true;
}

void CMsgDOTAAwardEventPoints_AwardPoints::Swap(CMsgDOTAAwardEventPoints_AwardPoints* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(points_, other->points_);
    std::swap(premium_points_, other->premium_points_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAAwardEventPoints_AwardPoints::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAAwardEventPoints_AwardPoints_descriptor_;
  metadata.reflection = CMsgDOTAAwardEventPoints_AwardPoints_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAAwardEventPoints::kAwardPointsFieldNumber;
const int CMsgDOTAAwardEventPoints::kMatchIdFieldNumber;
const int CMsgDOTAAwardEventPoints::kEventIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAAwardEventPoints::CMsgDOTAAwardEventPoints()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgDOTAAwardEventPoints::InitAsDefaultInstance() {
}

CMsgDOTAAwardEventPoints::CMsgDOTAAwardEventPoints(const CMsgDOTAAwardEventPoints& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgDOTAAwardEventPoints::SharedCtor() {
  _cached_size_ = 0;
  match_id_ = GOOGLE_ULONGLONG(0);
  event_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAAwardEventPoints::~CMsgDOTAAwardEventPoints() {
  SharedDtor();
}

void CMsgDOTAAwardEventPoints::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAAwardEventPoints::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAAwardEventPoints::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAAwardEventPoints_descriptor_;
}

const CMsgDOTAAwardEventPoints& CMsgDOTAAwardEventPoints::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgDOTAAwardEventPoints* CMsgDOTAAwardEventPoints::default_instance_ = NULL;

CMsgDOTAAwardEventPoints* CMsgDOTAAwardEventPoints::New() const {
  return new CMsgDOTAAwardEventPoints;
}

void CMsgDOTAAwardEventPoints::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    match_id_ = GOOGLE_ULONGLONG(0);
    event_id_ = 0u;
  }
  award_points_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAAwardEventPoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgDOTAAwardEventPoints.AwardPoints award_points = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_award_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_award_points()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_award_points;
        if (input->ExpectTag(16)) goto parse_match_id;
        break;
      }
      
      // optional uint64 match_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_event_id;
        break;
      }
      
      // optional uint32 event_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgDOTAAwardEventPoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgDOTAAwardEventPoints.AwardPoints award_points = 1;
  for (int i = 0; i < this->award_points_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->award_points(i), output);
  }
  
  // optional uint64 match_id = 2;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->match_id(), output);
  }
  
  // optional uint32 event_id = 4;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->event_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgDOTAAwardEventPoints::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgDOTAAwardEventPoints.AwardPoints award_points = 1;
  for (int i = 0; i < this->award_points_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->award_points(i), target);
  }
  
  // optional uint64 match_id = 2;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->match_id(), target);
  }
  
  // optional uint32 event_id = 4;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->event_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgDOTAAwardEventPoints::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 match_id = 2;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }
    
    // optional uint32 event_id = 4;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }
    
  }
  // repeated .CMsgDOTAAwardEventPoints.AwardPoints award_points = 1;
  total_size += 1 * this->award_points_size();
  for (int i = 0; i < this->award_points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->award_points(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAAwardEventPoints::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAAwardEventPoints* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAAwardEventPoints*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAAwardEventPoints::MergeFrom(const CMsgDOTAAwardEventPoints& from) {
  GOOGLE_CHECK_NE(&from, this);
  award_points_.MergeFrom(from.award_points_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAAwardEventPoints::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAAwardEventPoints::CopyFrom(const CMsgDOTAAwardEventPoints& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAAwardEventPoints::IsInitialized() const {
  
  return true;
}

void CMsgDOTAAwardEventPoints::Swap(CMsgDOTAAwardEventPoints* other) {
  if (other != this) {
    award_points_.Swap(&other->award_points_);
    std::swap(match_id_, other->match_id_);
    std::swap(event_id_, other->event_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAAwardEventPoints::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAAwardEventPoints_descriptor_;
  metadata.reflection = CMsgDOTAAwardEventPoints_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAFrostivusTimeElapsed_User::kAccountIdFieldNumber;
const int CMsgDOTAFrostivusTimeElapsed_User::kTimeElapsedSFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFrostivusTimeElapsed_User::CMsgDOTAFrostivusTimeElapsed_User()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgDOTAFrostivusTimeElapsed_User::InitAsDefaultInstance() {
}

CMsgDOTAFrostivusTimeElapsed_User::CMsgDOTAFrostivusTimeElapsed_User(const CMsgDOTAFrostivusTimeElapsed_User& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgDOTAFrostivusTimeElapsed_User::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  time_elapsed_s_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFrostivusTimeElapsed_User::~CMsgDOTAFrostivusTimeElapsed_User() {
  SharedDtor();
}

void CMsgDOTAFrostivusTimeElapsed_User::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFrostivusTimeElapsed_User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFrostivusTimeElapsed_User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFrostivusTimeElapsed_User_descriptor_;
}

const CMsgDOTAFrostivusTimeElapsed_User& CMsgDOTAFrostivusTimeElapsed_User::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgDOTAFrostivusTimeElapsed_User* CMsgDOTAFrostivusTimeElapsed_User::default_instance_ = NULL;

CMsgDOTAFrostivusTimeElapsed_User* CMsgDOTAFrostivusTimeElapsed_User::New() const {
  return new CMsgDOTAFrostivusTimeElapsed_User;
}

void CMsgDOTAFrostivusTimeElapsed_User::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    time_elapsed_s_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAFrostivusTimeElapsed_User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time_elapsed_s;
        break;
      }
      
      // optional uint32 time_elapsed_s = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_elapsed_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_elapsed_s_)));
          set_has_time_elapsed_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgDOTAFrostivusTimeElapsed_User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }
  
  // optional uint32 time_elapsed_s = 2;
  if (has_time_elapsed_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_elapsed_s(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgDOTAFrostivusTimeElapsed_User::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }
  
  // optional uint32 time_elapsed_s = 2;
  if (has_time_elapsed_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_elapsed_s(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgDOTAFrostivusTimeElapsed_User::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
    // optional uint32 time_elapsed_s = 2;
    if (has_time_elapsed_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_elapsed_s());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFrostivusTimeElapsed_User::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAFrostivusTimeElapsed_User* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAFrostivusTimeElapsed_User*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFrostivusTimeElapsed_User::MergeFrom(const CMsgDOTAFrostivusTimeElapsed_User& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_time_elapsed_s()) {
      set_time_elapsed_s(from.time_elapsed_s());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAFrostivusTimeElapsed_User::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFrostivusTimeElapsed_User::CopyFrom(const CMsgDOTAFrostivusTimeElapsed_User& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFrostivusTimeElapsed_User::IsInitialized() const {
  
  return true;
}

void CMsgDOTAFrostivusTimeElapsed_User::Swap(CMsgDOTAFrostivusTimeElapsed_User* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(time_elapsed_s_, other->time_elapsed_s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAFrostivusTimeElapsed_User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFrostivusTimeElapsed_User_descriptor_;
  metadata.reflection = CMsgDOTAFrostivusTimeElapsed_User_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAFrostivusTimeElapsed::kSecondsFieldNumber;
const int CMsgDOTAFrostivusTimeElapsed::kUsersFieldNumber;
const int CMsgDOTAFrostivusTimeElapsed::kMatchIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFrostivusTimeElapsed::CMsgDOTAFrostivusTimeElapsed()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgDOTAFrostivusTimeElapsed::InitAsDefaultInstance() {
}

CMsgDOTAFrostivusTimeElapsed::CMsgDOTAFrostivusTimeElapsed(const CMsgDOTAFrostivusTimeElapsed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgDOTAFrostivusTimeElapsed::SharedCtor() {
  _cached_size_ = 0;
  seconds_ = 0u;
  match_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFrostivusTimeElapsed::~CMsgDOTAFrostivusTimeElapsed() {
  SharedDtor();
}

void CMsgDOTAFrostivusTimeElapsed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFrostivusTimeElapsed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFrostivusTimeElapsed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFrostivusTimeElapsed_descriptor_;
}

const CMsgDOTAFrostivusTimeElapsed& CMsgDOTAFrostivusTimeElapsed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgDOTAFrostivusTimeElapsed* CMsgDOTAFrostivusTimeElapsed::default_instance_ = NULL;

CMsgDOTAFrostivusTimeElapsed* CMsgDOTAFrostivusTimeElapsed::New() const {
  return new CMsgDOTAFrostivusTimeElapsed;
}

void CMsgDOTAFrostivusTimeElapsed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seconds_ = 0u;
    match_id_ = GOOGLE_ULONGLONG(0);
  }
  users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAFrostivusTimeElapsed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 seconds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_)));
          set_has_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_users;
        break;
      }
      
      // repeated .CMsgDOTAFrostivusTimeElapsed.User users = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_users;
        if (input->ExpectTag(24)) goto parse_match_id;
        break;
      }
      
      // optional uint64 match_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgDOTAFrostivusTimeElapsed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 seconds = 1;
  if (has_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seconds(), output);
  }
  
  // repeated .CMsgDOTAFrostivusTimeElapsed.User users = 2;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->users(i), output);
  }
  
  // optional uint64 match_id = 3;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->match_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgDOTAFrostivusTimeElapsed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 seconds = 1;
  if (has_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seconds(), target);
  }
  
  // repeated .CMsgDOTAFrostivusTimeElapsed.User users = 2;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->users(i), target);
  }
  
  // optional uint64 match_id = 3;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->match_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgDOTAFrostivusTimeElapsed::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 seconds = 1;
    if (has_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds());
    }
    
    // optional uint64 match_id = 3;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }
    
  }
  // repeated .CMsgDOTAFrostivusTimeElapsed.User users = 2;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFrostivusTimeElapsed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAFrostivusTimeElapsed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAFrostivusTimeElapsed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFrostivusTimeElapsed::MergeFrom(const CMsgDOTAFrostivusTimeElapsed& from) {
  GOOGLE_CHECK_NE(&from, this);
  users_.MergeFrom(from.users_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seconds()) {
      set_seconds(from.seconds());
    }
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAFrostivusTimeElapsed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFrostivusTimeElapsed::CopyFrom(const CMsgDOTAFrostivusTimeElapsed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFrostivusTimeElapsed::IsInitialized() const {
  
  return true;
}

void CMsgDOTAFrostivusTimeElapsed::Swap(CMsgDOTAFrostivusTimeElapsed* other) {
  if (other != this) {
    std::swap(seconds_, other->seconds_);
    users_.Swap(&other->users_);
    std::swap(match_id_, other->match_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAFrostivusTimeElapsed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFrostivusTimeElapsed_descriptor_;
  metadata.reflection = CMsgDOTAFrostivusTimeElapsed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCToServerPingRequest::kRequestIdFieldNumber;
const int CMsgGCToServerPingRequest::kRequestTimeFieldNumber;
#endif  // !_MSC_VER

CMsgGCToServerPingRequest::CMsgGCToServerPingRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCToServerPingRequest::InitAsDefaultInstance() {
}

CMsgGCToServerPingRequest::CMsgGCToServerPingRequest(const CMsgGCToServerPingRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCToServerPingRequest::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = GOOGLE_ULONGLONG(0);
  request_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToServerPingRequest::~CMsgGCToServerPingRequest() {
  SharedDtor();
}

void CMsgGCToServerPingRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToServerPingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToServerPingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToServerPingRequest_descriptor_;
}

const CMsgGCToServerPingRequest& CMsgGCToServerPingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgGCToServerPingRequest* CMsgGCToServerPingRequest::default_instance_ = NULL;

CMsgGCToServerPingRequest* CMsgGCToServerPingRequest::New() const {
  return new CMsgGCToServerPingRequest;
}

void CMsgGCToServerPingRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_id_ = GOOGLE_ULONGLONG(0);
    request_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCToServerPingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_request_time;
        break;
      }
      
      // optional uint64 request_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_request_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_time_)));
          set_has_request_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCToServerPingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->request_id(), output);
  }
  
  // optional uint64 request_time = 2;
  if (has_request_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->request_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCToServerPingRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->request_id(), target);
  }
  
  // optional uint64 request_time = 2;
  if (has_request_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->request_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCToServerPingRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 request_id = 1;
    if (has_request_id()) {
      total_size += 1 + 8;
    }
    
    // optional uint64 request_time = 2;
    if (has_request_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToServerPingRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCToServerPingRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCToServerPingRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToServerPingRequest::MergeFrom(const CMsgGCToServerPingRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_request_time()) {
      set_request_time(from.request_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCToServerPingRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToServerPingRequest::CopyFrom(const CMsgGCToServerPingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerPingRequest::IsInitialized() const {
  
  return true;
}

void CMsgGCToServerPingRequest::Swap(CMsgGCToServerPingRequest* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(request_time_, other->request_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCToServerPingRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToServerPingRequest_descriptor_;
  metadata.reflection = CMsgGCToServerPingRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCToServerPingResponse::kRequestIdFieldNumber;
const int CMsgGCToServerPingResponse::kRequestTimeFieldNumber;
const int CMsgGCToServerPingResponse::kClusterFieldNumber;
#endif  // !_MSC_VER

CMsgGCToServerPingResponse::CMsgGCToServerPingResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCToServerPingResponse::InitAsDefaultInstance() {
}

CMsgGCToServerPingResponse::CMsgGCToServerPingResponse(const CMsgGCToServerPingResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCToServerPingResponse::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = GOOGLE_ULONGLONG(0);
  request_time_ = GOOGLE_ULONGLONG(0);
  cluster_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToServerPingResponse::~CMsgGCToServerPingResponse() {
  SharedDtor();
}

void CMsgGCToServerPingResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToServerPingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToServerPingResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToServerPingResponse_descriptor_;
}

const CMsgGCToServerPingResponse& CMsgGCToServerPingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgGCToServerPingResponse* CMsgGCToServerPingResponse::default_instance_ = NULL;

CMsgGCToServerPingResponse* CMsgGCToServerPingResponse::New() const {
  return new CMsgGCToServerPingResponse;
}

void CMsgGCToServerPingResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_id_ = GOOGLE_ULONGLONG(0);
    request_time_ = GOOGLE_ULONGLONG(0);
    cluster_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCToServerPingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_request_time;
        break;
      }
      
      // optional uint64 request_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_request_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_time_)));
          set_has_request_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cluster;
        break;
      }
      
      // optional uint32 cluster = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cluster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cluster_)));
          set_has_cluster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCToServerPingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->request_id(), output);
  }
  
  // optional uint64 request_time = 2;
  if (has_request_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->request_time(), output);
  }
  
  // optional uint32 cluster = 3;
  if (has_cluster()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cluster(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCToServerPingResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->request_id(), target);
  }
  
  // optional uint64 request_time = 2;
  if (has_request_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->request_time(), target);
  }
  
  // optional uint32 cluster = 3;
  if (has_cluster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cluster(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCToServerPingResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 request_id = 1;
    if (has_request_id()) {
      total_size += 1 + 8;
    }
    
    // optional uint64 request_time = 2;
    if (has_request_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request_time());
    }
    
    // optional uint32 cluster = 3;
    if (has_cluster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cluster());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToServerPingResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCToServerPingResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCToServerPingResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToServerPingResponse::MergeFrom(const CMsgGCToServerPingResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_request_time()) {
      set_request_time(from.request_time());
    }
    if (from.has_cluster()) {
      set_cluster(from.cluster());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCToServerPingResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToServerPingResponse::CopyFrom(const CMsgGCToServerPingResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerPingResponse::IsInitialized() const {
  
  return true;
}

void CMsgGCToServerPingResponse::Swap(CMsgGCToServerPingResponse* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(request_time_, other->request_time_);
    std::swap(cluster_, other->cluster_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCToServerPingResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToServerPingResponse_descriptor_;
  metadata.reflection = CMsgGCToServerPingResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCToServerConsoleCommand::kConsoleCommandFieldNumber;
#endif  // !_MSC_VER

CMsgGCToServerConsoleCommand::CMsgGCToServerConsoleCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCToServerConsoleCommand::InitAsDefaultInstance() {
}

CMsgGCToServerConsoleCommand::CMsgGCToServerConsoleCommand(const CMsgGCToServerConsoleCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCToServerConsoleCommand::SharedCtor() {
  _cached_size_ = 0;
  console_command_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToServerConsoleCommand::~CMsgGCToServerConsoleCommand() {
  SharedDtor();
}

void CMsgGCToServerConsoleCommand::SharedDtor() {
  if (console_command_ != &::google::protobuf::internal::kEmptyString) {
    delete console_command_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGCToServerConsoleCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToServerConsoleCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToServerConsoleCommand_descriptor_;
}

const CMsgGCToServerConsoleCommand& CMsgGCToServerConsoleCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fserver_2eproto();  return *default_instance_;
}

CMsgGCToServerConsoleCommand* CMsgGCToServerConsoleCommand::default_instance_ = NULL;

CMsgGCToServerConsoleCommand* CMsgGCToServerConsoleCommand::New() const {
  return new CMsgGCToServerConsoleCommand;
}

void CMsgGCToServerConsoleCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_console_command()) {
      if (console_command_ != &::google::protobuf::internal::kEmptyString) {
        console_command_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCToServerConsoleCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string console_command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_console_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->console_command().data(), this->console_command().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCToServerConsoleCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string console_command = 1;
  if (has_console_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->console_command().data(), this->console_command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->console_command(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCToServerConsoleCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string console_command = 1;
  if (has_console_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->console_command().data(), this->console_command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->console_command(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCToServerConsoleCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string console_command = 1;
    if (has_console_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->console_command());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToServerConsoleCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCToServerConsoleCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCToServerConsoleCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToServerConsoleCommand::MergeFrom(const CMsgGCToServerConsoleCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_console_command()) {
      set_console_command(from.console_command());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCToServerConsoleCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToServerConsoleCommand::CopyFrom(const CMsgGCToServerConsoleCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerConsoleCommand::IsInitialized() const {
  
  return true;
}

void CMsgGCToServerConsoleCommand::Swap(CMsgGCToServerConsoleCommand* other) {
  if (other != this) {
    std::swap(console_command_, other->console_command_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCToServerConsoleCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToServerConsoleCommand_descriptor_;
  metadata.reflection = CMsgGCToServerConsoleCommand_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
